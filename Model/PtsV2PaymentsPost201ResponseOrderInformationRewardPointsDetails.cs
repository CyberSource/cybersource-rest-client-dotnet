/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails
    /// </summary>
    [DataContract]
    public partial class PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails :  IEquatable<PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails" /> class.
        /// </summary>
        /// <param name="PointsBeforeRedemption">Loyalty points total balance before redemption. For Example: Points, such as 100 .</param>
        /// <param name="PointsValueBeforeRedemption">The total value of loyalty points before redemption in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 20.00 .</param>
        /// <param name="PointsRedeemed">Number of loyalty points that were redeemed. For Example: Points, such as 100 .</param>
        /// <param name="PointsValueRedeemed">The value of the loyalty points that were redeemed in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 100.00 .</param>
        /// <param name="PointsAfterRedemption">Loyalty Points remaining total balance after redemption. For Example: Points, such as 20.00 .</param>
        /// <param name="PointsValueAfterRedemption">The value of the remaining loyalty points after redumption in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 20.00 .</param>
        public PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails(string PointsBeforeRedemption = default(string), string PointsValueBeforeRedemption = default(string), string PointsRedeemed = default(string), string PointsValueRedeemed = default(string), string PointsAfterRedemption = default(string), string PointsValueAfterRedemption = default(string))
        {
            this.PointsBeforeRedemption = PointsBeforeRedemption;
            this.PointsValueBeforeRedemption = PointsValueBeforeRedemption;
            this.PointsRedeemed = PointsRedeemed;
            this.PointsValueRedeemed = PointsValueRedeemed;
            this.PointsAfterRedemption = PointsAfterRedemption;
            this.PointsValueAfterRedemption = PointsValueAfterRedemption;
        }
        
        /// <summary>
        /// Loyalty points total balance before redemption. For Example: Points, such as 100 
        /// </summary>
        /// <value>Loyalty points total balance before redemption. For Example: Points, such as 100 </value>
        [DataMember(Name="pointsBeforeRedemption", EmitDefaultValue=false)]
        public string PointsBeforeRedemption { get; set; }

        /// <summary>
        /// The total value of loyalty points before redemption in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 20.00 
        /// </summary>
        /// <value>The total value of loyalty points before redemption in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 20.00 </value>
        [DataMember(Name="pointsValueBeforeRedemption", EmitDefaultValue=false)]
        public string PointsValueBeforeRedemption { get; set; }

        /// <summary>
        /// Number of loyalty points that were redeemed. For Example: Points, such as 100 
        /// </summary>
        /// <value>Number of loyalty points that were redeemed. For Example: Points, such as 100 </value>
        [DataMember(Name="pointsRedeemed", EmitDefaultValue=false)]
        public string PointsRedeemed { get; set; }

        /// <summary>
        /// The value of the loyalty points that were redeemed in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 100.00 
        /// </summary>
        /// <value>The value of the loyalty points that were redeemed in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 100.00 </value>
        [DataMember(Name="pointsValueRedeemed", EmitDefaultValue=false)]
        public string PointsValueRedeemed { get; set; }

        /// <summary>
        /// Loyalty Points remaining total balance after redemption. For Example: Points, such as 20.00 
        /// </summary>
        /// <value>Loyalty Points remaining total balance after redemption. For Example: Points, such as 20.00 </value>
        [DataMember(Name="pointsAfterRedemption", EmitDefaultValue=false)]
        public string PointsAfterRedemption { get; set; }

        /// <summary>
        /// The value of the remaining loyalty points after redumption in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 20.00 
        /// </summary>
        /// <value>The value of the remaining loyalty points after redumption in the default currency. Max characters is 12 excluding the \&quot;.\&quot; symbol For Example: Points, such as 20.00 </value>
        [DataMember(Name="pointsValueAfterRedemption", EmitDefaultValue=false)]
        public string PointsValueAfterRedemption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails {\n");
            sb.Append("  PointsBeforeRedemption: ").Append(PointsBeforeRedemption).Append("\n");
            sb.Append("  PointsValueBeforeRedemption: ").Append(PointsValueBeforeRedemption).Append("\n");
            sb.Append("  PointsRedeemed: ").Append(PointsRedeemed).Append("\n");
            sb.Append("  PointsValueRedeemed: ").Append(PointsValueRedeemed).Append("\n");
            sb.Append("  PointsAfterRedemption: ").Append(PointsAfterRedemption).Append("\n");
            sb.Append("  PointsValueAfterRedemption: ").Append(PointsValueAfterRedemption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails);
        }

        /// <summary>
        /// Returns true if PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PointsBeforeRedemption == other.PointsBeforeRedemption ||
                    this.PointsBeforeRedemption != null &&
                    this.PointsBeforeRedemption.Equals(other.PointsBeforeRedemption)
                ) && 
                (
                    this.PointsValueBeforeRedemption == other.PointsValueBeforeRedemption ||
                    this.PointsValueBeforeRedemption != null &&
                    this.PointsValueBeforeRedemption.Equals(other.PointsValueBeforeRedemption)
                ) && 
                (
                    this.PointsRedeemed == other.PointsRedeemed ||
                    this.PointsRedeemed != null &&
                    this.PointsRedeemed.Equals(other.PointsRedeemed)
                ) && 
                (
                    this.PointsValueRedeemed == other.PointsValueRedeemed ||
                    this.PointsValueRedeemed != null &&
                    this.PointsValueRedeemed.Equals(other.PointsValueRedeemed)
                ) && 
                (
                    this.PointsAfterRedemption == other.PointsAfterRedemption ||
                    this.PointsAfterRedemption != null &&
                    this.PointsAfterRedemption.Equals(other.PointsAfterRedemption)
                ) && 
                (
                    this.PointsValueAfterRedemption == other.PointsValueAfterRedemption ||
                    this.PointsValueAfterRedemption != null &&
                    this.PointsValueAfterRedemption.Equals(other.PointsValueAfterRedemption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PointsBeforeRedemption != null)
                    hash = hash * 59 + this.PointsBeforeRedemption.GetHashCode();
                if (this.PointsValueBeforeRedemption != null)
                    hash = hash * 59 + this.PointsValueBeforeRedemption.GetHashCode();
                if (this.PointsRedeemed != null)
                    hash = hash * 59 + this.PointsRedeemed.GetHashCode();
                if (this.PointsValueRedeemed != null)
                    hash = hash * 59 + this.PointsValueRedeemed.GetHashCode();
                if (this.PointsAfterRedemption != null)
                    hash = hash * 59 + this.PointsAfterRedemption.GetHashCode();
                if (this.PointsValueAfterRedemption != null)
                    hash = hash * 59 + this.PointsValueAfterRedemption.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
