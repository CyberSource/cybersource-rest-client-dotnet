/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// The completeMandate object is designed to provide instructions for orchestrating payment services.  Unified Checkout is capable of orchestrating a number of services on your behalf.&lt;br&gt;&lt;br&gt;   By providing this field in the capture context Unified Checkout will initiate services on your behalf from the browser, simplifying your integration. 
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsCompleteMandate :  IEquatable<Upv1capturecontextsCompleteMandate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsCompleteMandate" /> class.
        /// </summary>
        /// <param name="Type">This field is used to indicate how a payment should be processed.  Possible values: - AUTH: Use this value when you want to authorize a payment within Unified Checkout without capturing it immediately.  Payment types that initiate an immediate transfer of funds are NOT allowed.  If a capture context request includes a payment type incompatible with this mode, a 400 error will be returned.  A merchant would need to perform their own capture via API where applicable.&lt;br&gt;&lt;br&gt;   - CAPTURE: Use this value when you want to perform a sale within Unified Checkout and capture the payment immediately during the transaction.  Note: Some payment types may return a PENDING status, requiring an additional status check call to determine the final outcome of the payment.&lt;br&gt;&lt;br&gt; - PREFER_AUTH: Use this value to offer multiple alternative payment options during the Unified Checkout experience. This option authorizes the payment without immediate capture, where available.  It will perform a \&quot;CAPTURE\&quot; where an \&quot;AUTH\&quot; is not allowed by the payment type.  Transactions can be AUTHORIZED, CAPTURED, or PENDING.  If an \&quot;AUTH\&quot; is performed, a merchant would need to perform their own capture via API where applicable. .</param>
        /// <param name="DecisionManager">Configure Unified Checkout to determine whether Decision Manager is invoked during service orchestration.  Possible values:  - True  - False&lt;br&gt;&lt;br&gt;  Setting this value to True indicates that device fingerprinting will be executed to add additional information for risk service Setting this value to False (or not provided) indicates that you do not wish to run device fingerprinting and skip decision manager services. .</param>
        /// <param name="ConsumerAuthentication">Configure Unified Checkout to determine whether Consumer Authentication is invoked during service orchestration.  Possible values:  - True  - False&lt;br&gt;&lt;br&gt;  Setting this value to True will attempt to perform authentication using the Payer Authentication Service. Setting this value to False (or not provided) indicates that you do not wish to perform authentication using the Payer Authentication Service. .</param>
        public Upv1capturecontextsCompleteMandate(string Type = default(string), bool? DecisionManager = default(bool?), bool? ConsumerAuthentication = default(bool?))
        {
            this.Type = Type;
            this.DecisionManager = DecisionManager;
            this.ConsumerAuthentication = ConsumerAuthentication;
        }
        
        /// <summary>
        /// This field is used to indicate how a payment should be processed.  Possible values: - AUTH: Use this value when you want to authorize a payment within Unified Checkout without capturing it immediately.  Payment types that initiate an immediate transfer of funds are NOT allowed.  If a capture context request includes a payment type incompatible with this mode, a 400 error will be returned.  A merchant would need to perform their own capture via API where applicable.&lt;br&gt;&lt;br&gt;   - CAPTURE: Use this value when you want to perform a sale within Unified Checkout and capture the payment immediately during the transaction.  Note: Some payment types may return a PENDING status, requiring an additional status check call to determine the final outcome of the payment.&lt;br&gt;&lt;br&gt; - PREFER_AUTH: Use this value to offer multiple alternative payment options during the Unified Checkout experience. This option authorizes the payment without immediate capture, where available.  It will perform a \&quot;CAPTURE\&quot; where an \&quot;AUTH\&quot; is not allowed by the payment type.  Transactions can be AUTHORIZED, CAPTURED, or PENDING.  If an \&quot;AUTH\&quot; is performed, a merchant would need to perform their own capture via API where applicable. 
        /// </summary>
        /// <value>This field is used to indicate how a payment should be processed.  Possible values: - AUTH: Use this value when you want to authorize a payment within Unified Checkout without capturing it immediately.  Payment types that initiate an immediate transfer of funds are NOT allowed.  If a capture context request includes a payment type incompatible with this mode, a 400 error will be returned.  A merchant would need to perform their own capture via API where applicable.&lt;br&gt;&lt;br&gt;   - CAPTURE: Use this value when you want to perform a sale within Unified Checkout and capture the payment immediately during the transaction.  Note: Some payment types may return a PENDING status, requiring an additional status check call to determine the final outcome of the payment.&lt;br&gt;&lt;br&gt; - PREFER_AUTH: Use this value to offer multiple alternative payment options during the Unified Checkout experience. This option authorizes the payment without immediate capture, where available.  It will perform a \&quot;CAPTURE\&quot; where an \&quot;AUTH\&quot; is not allowed by the payment type.  Transactions can be AUTHORIZED, CAPTURED, or PENDING.  If an \&quot;AUTH\&quot; is performed, a merchant would need to perform their own capture via API where applicable. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Configure Unified Checkout to determine whether Decision Manager is invoked during service orchestration.  Possible values:  - True  - False&lt;br&gt;&lt;br&gt;  Setting this value to True indicates that device fingerprinting will be executed to add additional information for risk service Setting this value to False (or not provided) indicates that you do not wish to run device fingerprinting and skip decision manager services. 
        /// </summary>
        /// <value>Configure Unified Checkout to determine whether Decision Manager is invoked during service orchestration.  Possible values:  - True  - False&lt;br&gt;&lt;br&gt;  Setting this value to True indicates that device fingerprinting will be executed to add additional information for risk service Setting this value to False (or not provided) indicates that you do not wish to run device fingerprinting and skip decision manager services. </value>
        [DataMember(Name="decisionManager", EmitDefaultValue=false)]
        public bool? DecisionManager { get; set; }

        /// <summary>
        /// Configure Unified Checkout to determine whether Consumer Authentication is invoked during service orchestration.  Possible values:  - True  - False&lt;br&gt;&lt;br&gt;  Setting this value to True will attempt to perform authentication using the Payer Authentication Service. Setting this value to False (or not provided) indicates that you do not wish to perform authentication using the Payer Authentication Service. 
        /// </summary>
        /// <value>Configure Unified Checkout to determine whether Consumer Authentication is invoked during service orchestration.  Possible values:  - True  - False&lt;br&gt;&lt;br&gt;  Setting this value to True will attempt to perform authentication using the Payer Authentication Service. Setting this value to False (or not provided) indicates that you do not wish to perform authentication using the Payer Authentication Service. </value>
        [DataMember(Name="consumerAuthentication", EmitDefaultValue=false)]
        public bool? ConsumerAuthentication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsCompleteMandate {\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (DecisionManager != null) sb.Append("  DecisionManager: ").Append(DecisionManager).Append("\n");
            if (ConsumerAuthentication != null) sb.Append("  ConsumerAuthentication: ").Append(ConsumerAuthentication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsCompleteMandate);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsCompleteMandate instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsCompleteMandate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsCompleteMandate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.DecisionManager == other.DecisionManager ||
                    this.DecisionManager != null &&
                    this.DecisionManager.Equals(other.DecisionManager)
                ) && 
                (
                    this.ConsumerAuthentication == other.ConsumerAuthentication ||
                    this.ConsumerAuthentication != null &&
                    this.ConsumerAuthentication.Equals(other.ConsumerAuthentication)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.DecisionManager != null)
                    hash = hash * 59 + this.DecisionManager.GetHashCode();
                if (this.ConsumerAuthentication != null)
                    hash = hash * 59 + this.ConsumerAuthentication.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
