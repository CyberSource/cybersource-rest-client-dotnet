/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// DeviceDeAssociateV3Request
    /// </summary>
    [DataContract]
    public partial class DeviceDeAssociateV3Request :  IEquatable<DeviceDeAssociateV3Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDeAssociateV3Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceDeAssociateV3Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDeAssociateV3Request" /> class.
        /// </summary>
        /// <param name="DeviceId">ID of the device to be de-associated. (required).</param>
        /// <param name="OrganizationId">A field representing value of either account id or portfolio id..</param>
        public DeviceDeAssociateV3Request(string DeviceId = default(string), string OrganizationId = default(string))
        {
            this.DeviceId = DeviceId;
            this.OrganizationId = OrganizationId;
        }
        
        /// <summary>
        /// ID of the device to be de-associated.
        /// </summary>
        /// <value>ID of the device to be de-associated.</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// A field representing value of either account id or portfolio id.
        /// </summary>
        /// <value>A field representing value of either account id or portfolio id.</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceDeAssociateV3Request {\n");
            if (DeviceId != null) sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            if (OrganizationId != null) sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceDeAssociateV3Request);
        }

        /// <summary>
        /// Returns true if DeviceDeAssociateV3Request instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceDeAssociateV3Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceDeAssociateV3Request other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DeviceId == other.DeviceId ||
                    this.DeviceId != null &&
                    this.DeviceId.Equals(other.DeviceId)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeviceId != null)
                    hash = hash * 59 + this.DeviceId.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
