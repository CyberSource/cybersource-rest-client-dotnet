/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CardProcessingConfigFeaturesCardPresentProcessors
    /// </summary>
    [DataContract]
    public partial class CardProcessingConfigFeaturesCardPresentProcessors :  IEquatable<CardProcessingConfigFeaturesCardPresentProcessors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigFeaturesCardPresentProcessors" /> class.
        /// </summary>
        /// <param name="DefaultPointOfSaleTerminalId">Default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC, GPX (gpx), American Express Direct (amexdirect) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;td&gt;1111&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="PointOfSaleTerminalIds">For retail transactions, if merchant chooses to send the terminal id in the API, then that value has to be validated before being used. Holds a comma separated list of all possible terminal ids that the merchant is likely to send. Applicable for VPC processors..</param>
        /// <param name="DisablePointOfSaleTerminalIdValidation">Disables terminal ID validation. Applicable for VPC processors..</param>
        /// <param name="PinDebitNetworkOrder">Order of the networks in which Visa should make routing decisions. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="PinDebitReimbursementCode">This attribute requests VIP to qualify a given PIN Debit transaction for a certain type of interchange program. Y &#x3D; SMS supermarket, Z &#x3D; SMS general merchant. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="FinancialInstitutionId">Acquirer Institution ID for the PIN Debit Transactions. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="EnablePinTranslation">Enables CyberSource PIN Translation for Online PIN Transactions. Please ensure you have exchanged PIN keys with CyberSource to use this feature. Applicable for VPC processors..</param>
        public CardProcessingConfigFeaturesCardPresentProcessors(string DefaultPointOfSaleTerminalId = default(string), List<string> PointOfSaleTerminalIds = default(List<string>), bool? DisablePointOfSaleTerminalIdValidation = default(bool?), string PinDebitNetworkOrder = default(string), string PinDebitReimbursementCode = default(string), string FinancialInstitutionId = default(string), bool? EnablePinTranslation = default(bool?))
        {
            this.DefaultPointOfSaleTerminalId = DefaultPointOfSaleTerminalId;
            this.PointOfSaleTerminalIds = PointOfSaleTerminalIds;
            this.DisablePointOfSaleTerminalIdValidation = DisablePointOfSaleTerminalIdValidation;
            this.PinDebitNetworkOrder = PinDebitNetworkOrder;
            this.PinDebitReimbursementCode = PinDebitReimbursementCode;
            this.FinancialInstitutionId = FinancialInstitutionId;
            this.EnablePinTranslation = EnablePinTranslation;
        }
        
        /// <summary>
        /// Default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC, GPX (gpx), American Express Direct (amexdirect) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;td&gt;1111&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Default Terminal ID used for Card Present and Virtual Terminal transactions. Applicable for VPC, GPX (gpx), American Express Direct (amexdirect) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;td&gt;1111&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="defaultPointOfSaleTerminalId", EmitDefaultValue=false)]
        public string DefaultPointOfSaleTerminalId { get; set; }

        /// <summary>
        /// For retail transactions, if merchant chooses to send the terminal id in the API, then that value has to be validated before being used. Holds a comma separated list of all possible terminal ids that the merchant is likely to send. Applicable for VPC processors.
        /// </summary>
        /// <value>For retail transactions, if merchant chooses to send the terminal id in the API, then that value has to be validated before being used. Holds a comma separated list of all possible terminal ids that the merchant is likely to send. Applicable for VPC processors.</value>
        [DataMember(Name="pointOfSaleTerminalIds", EmitDefaultValue=false)]
        public List<string> PointOfSaleTerminalIds { get; set; }

        /// <summary>
        /// Disables terminal ID validation. Applicable for VPC processors.
        /// </summary>
        /// <value>Disables terminal ID validation. Applicable for VPC processors.</value>
        [DataMember(Name="disablePointOfSaleTerminalIdValidation", EmitDefaultValue=false)]
        public bool? DisablePointOfSaleTerminalIdValidation { get; set; }

        /// <summary>
        /// Order of the networks in which Visa should make routing decisions. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Order of the networks in which Visa should make routing decisions. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="pinDebitNetworkOrder", EmitDefaultValue=false)]
        public string PinDebitNetworkOrder { get; set; }

        /// <summary>
        /// This attribute requests VIP to qualify a given PIN Debit transaction for a certain type of interchange program. Y &#x3D; SMS supermarket, Z &#x3D; SMS general merchant. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>This attribute requests VIP to qualify a given PIN Debit transaction for a certain type of interchange program. Y &#x3D; SMS supermarket, Z &#x3D; SMS general merchant. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="pinDebitReimbursementCode", EmitDefaultValue=false)]
        public string PinDebitReimbursementCode { get; set; }

        /// <summary>
        /// Acquirer Institution ID for the PIN Debit Transactions. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Acquirer Institution ID for the PIN Debit Transactions. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="financialInstitutionId", EmitDefaultValue=false)]
        public string FinancialInstitutionId { get; set; }

        /// <summary>
        /// Enables CyberSource PIN Translation for Online PIN Transactions. Please ensure you have exchanged PIN keys with CyberSource to use this feature. Applicable for VPC processors.
        /// </summary>
        /// <value>Enables CyberSource PIN Translation for Online PIN Transactions. Please ensure you have exchanged PIN keys with CyberSource to use this feature. Applicable for VPC processors.</value>
        [DataMember(Name="enablePinTranslation", EmitDefaultValue=false)]
        public bool? EnablePinTranslation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProcessingConfigFeaturesCardPresentProcessors {\n");
            sb.Append("  DefaultPointOfSaleTerminalId: ").Append(DefaultPointOfSaleTerminalId).Append("\n");
            sb.Append("  PointOfSaleTerminalIds: ").Append(PointOfSaleTerminalIds).Append("\n");
            sb.Append("  DisablePointOfSaleTerminalIdValidation: ").Append(DisablePointOfSaleTerminalIdValidation).Append("\n");
            sb.Append("  PinDebitNetworkOrder: ").Append(PinDebitNetworkOrder).Append("\n");
            sb.Append("  PinDebitReimbursementCode: ").Append(PinDebitReimbursementCode).Append("\n");
            sb.Append("  FinancialInstitutionId: ").Append(FinancialInstitutionId).Append("\n");
            sb.Append("  EnablePinTranslation: ").Append(EnablePinTranslation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardProcessingConfigFeaturesCardPresentProcessors);
        }

        /// <summary>
        /// Returns true if CardProcessingConfigFeaturesCardPresentProcessors instances are equal
        /// </summary>
        /// <param name="other">Instance of CardProcessingConfigFeaturesCardPresentProcessors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProcessingConfigFeaturesCardPresentProcessors other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultPointOfSaleTerminalId == other.DefaultPointOfSaleTerminalId ||
                    this.DefaultPointOfSaleTerminalId != null &&
                    this.DefaultPointOfSaleTerminalId.Equals(other.DefaultPointOfSaleTerminalId)
                ) && 
                (
                    this.PointOfSaleTerminalIds == other.PointOfSaleTerminalIds ||
                    this.PointOfSaleTerminalIds != null &&
                    this.PointOfSaleTerminalIds.SequenceEqual(other.PointOfSaleTerminalIds)
                ) && 
                (
                    this.DisablePointOfSaleTerminalIdValidation == other.DisablePointOfSaleTerminalIdValidation ||
                    this.DisablePointOfSaleTerminalIdValidation != null &&
                    this.DisablePointOfSaleTerminalIdValidation.Equals(other.DisablePointOfSaleTerminalIdValidation)
                ) && 
                (
                    this.PinDebitNetworkOrder == other.PinDebitNetworkOrder ||
                    this.PinDebitNetworkOrder != null &&
                    this.PinDebitNetworkOrder.Equals(other.PinDebitNetworkOrder)
                ) && 
                (
                    this.PinDebitReimbursementCode == other.PinDebitReimbursementCode ||
                    this.PinDebitReimbursementCode != null &&
                    this.PinDebitReimbursementCode.Equals(other.PinDebitReimbursementCode)
                ) && 
                (
                    this.FinancialInstitutionId == other.FinancialInstitutionId ||
                    this.FinancialInstitutionId != null &&
                    this.FinancialInstitutionId.Equals(other.FinancialInstitutionId)
                ) && 
                (
                    this.EnablePinTranslation == other.EnablePinTranslation ||
                    this.EnablePinTranslation != null &&
                    this.EnablePinTranslation.Equals(other.EnablePinTranslation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultPointOfSaleTerminalId != null)
                    hash = hash * 59 + this.DefaultPointOfSaleTerminalId.GetHashCode();
                if (this.PointOfSaleTerminalIds != null)
                    hash = hash * 59 + this.PointOfSaleTerminalIds.GetHashCode();
                if (this.DisablePointOfSaleTerminalIdValidation != null)
                    hash = hash * 59 + this.DisablePointOfSaleTerminalIdValidation.GetHashCode();
                if (this.PinDebitNetworkOrder != null)
                    hash = hash * 59 + this.PinDebitNetworkOrder.GetHashCode();
                if (this.PinDebitReimbursementCode != null)
                    hash = hash * 59 + this.PinDebitReimbursementCode.GetHashCode();
                if (this.FinancialInstitutionId != null)
                    hash = hash * 59 + this.FinancialInstitutionId.GetHashCode();
                if (this.EnablePinTranslation != null)
                    hash = hash * 59 + this.EnablePinTranslation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
