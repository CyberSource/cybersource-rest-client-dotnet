/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// ReportingV3ConversionDetailsGet200ResponseConversionDetails
    /// </summary>
    [DataContract]
    public partial class ReportingV3ConversionDetailsGet200ResponseConversionDetails :  IEquatable<ReportingV3ConversionDetailsGet200ResponseConversionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3ConversionDetailsGet200ResponseConversionDetails" /> class.
        /// </summary>
        /// <param name="MerchantReferenceNumber">Merchant reference number of a merchant.</param>
        /// <param name="ConversionTime">Date of conversion.</param>
        /// <param name="RequestId">Cybersource Transation request id.</param>
        /// <param name="OriginalDecision">Original decision.</param>
        /// <param name="NewDecision">New decision.</param>
        /// <param name="Reviewer">User name of the reviewer.</param>
        /// <param name="ReviewerComments">Comments of the reviewer.</param>
        /// <param name="Queue">Name of the queue.</param>
        /// <param name="Profile">Name of the profile.</param>
        /// <param name="Notes">Notes.</param>
        public ReportingV3ConversionDetailsGet200ResponseConversionDetails(string MerchantReferenceNumber = default(string), DateTime? ConversionTime = default(DateTime?), string RequestId = default(string), string OriginalDecision = default(string), string NewDecision = default(string), string Reviewer = default(string), string ReviewerComments = default(string), string Queue = default(string), string Profile = default(string), List<ReportingV3ConversionDetailsGet200ResponseNotes> Notes = default(List<ReportingV3ConversionDetailsGet200ResponseNotes>))
        {
            this.MerchantReferenceNumber = MerchantReferenceNumber;
            this.ConversionTime = ConversionTime;
            this.RequestId = RequestId;
            this.OriginalDecision = OriginalDecision;
            this.NewDecision = NewDecision;
            this.Reviewer = Reviewer;
            this.ReviewerComments = ReviewerComments;
            this.Queue = Queue;
            this.Profile = Profile;
            this.Notes = Notes;
        }
        
        /// <summary>
        /// Merchant reference number of a merchant
        /// </summary>
        /// <value>Merchant reference number of a merchant</value>
        [DataMember(Name="merchantReferenceNumber", EmitDefaultValue=false)]
        public string MerchantReferenceNumber { get; set; }

        /// <summary>
        /// Date of conversion
        /// </summary>
        /// <value>Date of conversion</value>
        [DataMember(Name="conversionTime", EmitDefaultValue=false)]
        public DateTime? ConversionTime { get; set; }

        /// <summary>
        /// Cybersource Transation request id
        /// </summary>
        /// <value>Cybersource Transation request id</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Original decision
        /// </summary>
        /// <value>Original decision</value>
        [DataMember(Name="originalDecision", EmitDefaultValue=false)]
        public string OriginalDecision { get; set; }

        /// <summary>
        /// New decision
        /// </summary>
        /// <value>New decision</value>
        [DataMember(Name="newDecision", EmitDefaultValue=false)]
        public string NewDecision { get; set; }

        /// <summary>
        /// User name of the reviewer
        /// </summary>
        /// <value>User name of the reviewer</value>
        [DataMember(Name="reviewer", EmitDefaultValue=false)]
        public string Reviewer { get; set; }

        /// <summary>
        /// Comments of the reviewer
        /// </summary>
        /// <value>Comments of the reviewer</value>
        [DataMember(Name="reviewerComments", EmitDefaultValue=false)]
        public string ReviewerComments { get; set; }

        /// <summary>
        /// Name of the queue
        /// </summary>
        /// <value>Name of the queue</value>
        [DataMember(Name="queue", EmitDefaultValue=false)]
        public string Queue { get; set; }

        /// <summary>
        /// Name of the profile
        /// </summary>
        /// <value>Name of the profile</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<ReportingV3ConversionDetailsGet200ResponseNotes> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3ConversionDetailsGet200ResponseConversionDetails {\n");
            sb.Append("  MerchantReferenceNumber: ").Append(MerchantReferenceNumber).Append("\n");
            sb.Append("  ConversionTime: ").Append(ConversionTime).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  OriginalDecision: ").Append(OriginalDecision).Append("\n");
            sb.Append("  NewDecision: ").Append(NewDecision).Append("\n");
            sb.Append("  Reviewer: ").Append(Reviewer).Append("\n");
            sb.Append("  ReviewerComments: ").Append(ReviewerComments).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3ConversionDetailsGet200ResponseConversionDetails);
        }

        /// <summary>
        /// Returns true if ReportingV3ConversionDetailsGet200ResponseConversionDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3ConversionDetailsGet200ResponseConversionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3ConversionDetailsGet200ResponseConversionDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantReferenceNumber == other.MerchantReferenceNumber ||
                    this.MerchantReferenceNumber != null &&
                    this.MerchantReferenceNumber.Equals(other.MerchantReferenceNumber)
                ) && 
                (
                    this.ConversionTime == other.ConversionTime ||
                    this.ConversionTime != null &&
                    this.ConversionTime.Equals(other.ConversionTime)
                ) && 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.OriginalDecision == other.OriginalDecision ||
                    this.OriginalDecision != null &&
                    this.OriginalDecision.Equals(other.OriginalDecision)
                ) && 
                (
                    this.NewDecision == other.NewDecision ||
                    this.NewDecision != null &&
                    this.NewDecision.Equals(other.NewDecision)
                ) && 
                (
                    this.Reviewer == other.Reviewer ||
                    this.Reviewer != null &&
                    this.Reviewer.Equals(other.Reviewer)
                ) && 
                (
                    this.ReviewerComments == other.ReviewerComments ||
                    this.ReviewerComments != null &&
                    this.ReviewerComments.Equals(other.ReviewerComments)
                ) && 
                (
                    this.Queue == other.Queue ||
                    this.Queue != null &&
                    this.Queue.Equals(other.Queue)
                ) && 
                (
                    this.Profile == other.Profile ||
                    this.Profile != null &&
                    this.Profile.Equals(other.Profile)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantReferenceNumber != null)
                    hash = hash * 59 + this.MerchantReferenceNumber.GetHashCode();
                if (this.ConversionTime != null)
                    hash = hash * 59 + this.ConversionTime.GetHashCode();
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.OriginalDecision != null)
                    hash = hash * 59 + this.OriginalDecision.GetHashCode();
                if (this.NewDecision != null)
                    hash = hash * 59 + this.NewDecision.GetHashCode();
                if (this.Reviewer != null)
                    hash = hash * 59 + this.Reviewer.GetHashCode();
                if (this.ReviewerComments != null)
                    hash = hash * 59 + this.ReviewerComments.GetHashCode();
                if (this.Queue != null)
                    hash = hash * 59 + this.Queue.GetHashCode();
                if (this.Profile != null)
                    hash = hash * 59 + this.Profile.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
