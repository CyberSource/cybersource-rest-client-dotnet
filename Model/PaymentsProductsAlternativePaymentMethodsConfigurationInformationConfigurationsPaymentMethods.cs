/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Payment method configuration for the product. 
    /// </summary>
    [DataContract]
    public partial class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods :  IEquatable<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods" /> class.
        /// </summary>
        /// <param name="MerchantId">Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 .</param>
        /// <param name="LogoUrl">URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com .</param>
        /// <param name="RedirectSuccessUrl">URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success .</param>
        /// <param name="RedirectCancelUrl">URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel .</param>
        /// <param name="RedirectFailureUrl">URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure .</param>
        /// <param name="AdditionalConfigurations">Additional configurations for the payment method. This can include various settings specific to the payment method. .</param>
        public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods(string MerchantId = default(string), string LogoUrl = default(string), string RedirectSuccessUrl = default(string), string RedirectCancelUrl = default(string), string RedirectFailureUrl = default(string), List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations> AdditionalConfigurations = default(List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations>))
        {
            this.MerchantId = MerchantId;
            this.LogoUrl = LogoUrl;
            this.RedirectSuccessUrl = RedirectSuccessUrl;
            this.RedirectCancelUrl = RedirectCancelUrl;
            this.RedirectFailureUrl = RedirectFailureUrl;
            this.AdditionalConfigurations = AdditionalConfigurations;
        }
        
        /// <summary>
        /// Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 
        /// </summary>
        /// <value>Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 </value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com 
        /// </summary>
        /// <value>URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com </value>
        [DataMember(Name="logoUrl", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success 
        /// </summary>
        /// <value>URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success </value>
        [DataMember(Name="redirectSuccessUrl", EmitDefaultValue=false)]
        public string RedirectSuccessUrl { get; set; }

        /// <summary>
        /// URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel 
        /// </summary>
        /// <value>URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel </value>
        [DataMember(Name="redirectCancelUrl", EmitDefaultValue=false)]
        public string RedirectCancelUrl { get; set; }

        /// <summary>
        /// URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure 
        /// </summary>
        /// <value>URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure </value>
        [DataMember(Name="redirectFailureUrl", EmitDefaultValue=false)]
        public string RedirectFailureUrl { get; set; }

        /// <summary>
        /// Additional configurations for the payment method. This can include various settings specific to the payment method. 
        /// </summary>
        /// <value>Additional configurations for the payment method. This can include various settings specific to the payment method. </value>
        [DataMember(Name="additionalConfigurations", EmitDefaultValue=false)]
        public List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations> AdditionalConfigurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods {\n");
            if (MerchantId != null) sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            if (LogoUrl != null) sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            if (RedirectSuccessUrl != null) sb.Append("  RedirectSuccessUrl: ").Append(RedirectSuccessUrl).Append("\n");
            if (RedirectCancelUrl != null) sb.Append("  RedirectCancelUrl: ").Append(RedirectCancelUrl).Append("\n");
            if (RedirectFailureUrl != null) sb.Append("  RedirectFailureUrl: ").Append(RedirectFailureUrl).Append("\n");
            if (AdditionalConfigurations != null) sb.Append("  AdditionalConfigurations: ").Append(AdditionalConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods);
        }

        /// <summary>
        /// Returns true if PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.LogoUrl == other.LogoUrl ||
                    this.LogoUrl != null &&
                    this.LogoUrl.Equals(other.LogoUrl)
                ) && 
                (
                    this.RedirectSuccessUrl == other.RedirectSuccessUrl ||
                    this.RedirectSuccessUrl != null &&
                    this.RedirectSuccessUrl.Equals(other.RedirectSuccessUrl)
                ) && 
                (
                    this.RedirectCancelUrl == other.RedirectCancelUrl ||
                    this.RedirectCancelUrl != null &&
                    this.RedirectCancelUrl.Equals(other.RedirectCancelUrl)
                ) && 
                (
                    this.RedirectFailureUrl == other.RedirectFailureUrl ||
                    this.RedirectFailureUrl != null &&
                    this.RedirectFailureUrl.Equals(other.RedirectFailureUrl)
                ) && 
                (
                    this.AdditionalConfigurations == other.AdditionalConfigurations ||
                    this.AdditionalConfigurations != null &&
                    this.AdditionalConfigurations.SequenceEqual(other.AdditionalConfigurations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.LogoUrl != null)
                    hash = hash * 59 + this.LogoUrl.GetHashCode();
                if (this.RedirectSuccessUrl != null)
                    hash = hash * 59 + this.RedirectSuccessUrl.GetHashCode();
                if (this.RedirectCancelUrl != null)
                    hash = hash * 59 + this.RedirectCancelUrl.GetHashCode();
                if (this.RedirectFailureUrl != null)
                    hash = hash * 59 + this.RedirectFailureUrl.GetHashCode();
                if (this.AdditionalConfigurations != null)
                    hash = hash * 59 + this.AdditionalConfigurations.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
