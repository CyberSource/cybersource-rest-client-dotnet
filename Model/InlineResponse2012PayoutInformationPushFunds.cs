/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2012PayoutInformationPushFunds
    /// </summary>
    [DataContract]
    public partial class InlineResponse2012PayoutInformationPushFunds :  IEquatable<InlineResponse2012PayoutInformationPushFunds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2012PayoutInformationPushFunds" /> class.
        /// </summary>
        /// <param name="MoneyTransferFastFundsCrossBorder">This field indicates if cross-border money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="MoneyTransferFastFundsDomestic">This field indicates if domestic money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="MoneyTransferCrossBorder">This field indicates if cross-border money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="MoneyTransferDomestic">This field indicates if domestic money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="NonMoneyTransferFastFundsCrossBorder">This field indicates if cross-border non-money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="NonMoneyTransferFastFundsDomestic">This field indicates if domestic non-money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="NonMoneyTransferCrossBorder">This field indicates if cross-border non-money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="NonMoneyTransferDomestic">This field indicates if domestic non-money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="OnlineGamblingFastFundsCrossBorder">This field indicates if cross-border gambling OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="OnlineGamblingFastFundsDomestic">This field indicates if domestic gambling OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="OnlineGamblingCrossBorder">This field indicates if cross-border gambling OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="OnlineGamblingDomestic">This field indicates if domestic gambling OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        /// <param name="DomesticParticipant">This field indicates if domestic OCTs (push funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; .</param>
        /// <param name="CrossBorderParticipant">This field indicates if cross-border OCTs (push funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; .</param>
        public InlineResponse2012PayoutInformationPushFunds(string MoneyTransferFastFundsCrossBorder = default(string), string MoneyTransferFastFundsDomestic = default(string), string MoneyTransferCrossBorder = default(string), string MoneyTransferDomestic = default(string), string NonMoneyTransferFastFundsCrossBorder = default(string), string NonMoneyTransferFastFundsDomestic = default(string), string NonMoneyTransferCrossBorder = default(string), string NonMoneyTransferDomestic = default(string), string OnlineGamblingFastFundsCrossBorder = default(string), string OnlineGamblingFastFundsDomestic = default(string), string OnlineGamblingCrossBorder = default(string), string OnlineGamblingDomestic = default(string), string DomesticParticipant = default(string), string CrossBorderParticipant = default(string))
        {
            this.MoneyTransferFastFundsCrossBorder = MoneyTransferFastFundsCrossBorder;
            this.MoneyTransferFastFundsDomestic = MoneyTransferFastFundsDomestic;
            this.MoneyTransferCrossBorder = MoneyTransferCrossBorder;
            this.MoneyTransferDomestic = MoneyTransferDomestic;
            this.NonMoneyTransferFastFundsCrossBorder = NonMoneyTransferFastFundsCrossBorder;
            this.NonMoneyTransferFastFundsDomestic = NonMoneyTransferFastFundsDomestic;
            this.NonMoneyTransferCrossBorder = NonMoneyTransferCrossBorder;
            this.NonMoneyTransferDomestic = NonMoneyTransferDomestic;
            this.OnlineGamblingFastFundsCrossBorder = OnlineGamblingFastFundsCrossBorder;
            this.OnlineGamblingFastFundsDomestic = OnlineGamblingFastFundsDomestic;
            this.OnlineGamblingCrossBorder = OnlineGamblingCrossBorder;
            this.OnlineGamblingDomestic = OnlineGamblingDomestic;
            this.DomesticParticipant = DomesticParticipant;
            this.CrossBorderParticipant = CrossBorderParticipant;
        }
        
        /// <summary>
        /// This field indicates if cross-border money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="moneyTransferFastFundsCrossBorder", EmitDefaultValue=false)]
        public string MoneyTransferFastFundsCrossBorder { get; set; }

        /// <summary>
        /// This field indicates if domestic money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="moneyTransferFastFundsDomestic", EmitDefaultValue=false)]
        public string MoneyTransferFastFundsDomestic { get; set; }

        /// <summary>
        /// This field indicates if cross-border money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="moneyTransferCrossBorder", EmitDefaultValue=false)]
        public string MoneyTransferCrossBorder { get; set; }

        /// <summary>
        /// This field indicates if domestic money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="moneyTransferDomestic", EmitDefaultValue=false)]
        public string MoneyTransferDomestic { get; set; }

        /// <summary>
        /// This field indicates if cross-border non-money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border non-money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="nonMoneyTransferFastFundsCrossBorder", EmitDefaultValue=false)]
        public string NonMoneyTransferFastFundsCrossBorder { get; set; }

        /// <summary>
        /// This field indicates if domestic non-money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic non-money transfer OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="nonMoneyTransferFastFundsDomestic", EmitDefaultValue=false)]
        public string NonMoneyTransferFastFundsDomestic { get; set; }

        /// <summary>
        /// This field indicates if cross-border non-money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border non-money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="nonMoneyTransferCrossBorder", EmitDefaultValue=false)]
        public string NonMoneyTransferCrossBorder { get; set; }

        /// <summary>
        /// This field indicates if domestic non-money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic non-money transfer OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="nonMoneyTransferDomestic", EmitDefaultValue=false)]
        public string NonMoneyTransferDomestic { get; set; }

        /// <summary>
        /// This field indicates if cross-border gambling OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border gambling OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="onlineGamblingFastFundsCrossBorder", EmitDefaultValue=false)]
        public string OnlineGamblingFastFundsCrossBorder { get; set; }

        /// <summary>
        /// This field indicates if domestic gambling OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic gambling OCTs (fast push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="onlineGamblingFastFundsDomestic", EmitDefaultValue=false)]
        public string OnlineGamblingFastFundsDomestic { get; set; }

        /// <summary>
        /// This field indicates if cross-border gambling OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border gambling OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="onlineGamblingCrossBorder", EmitDefaultValue=false)]
        public string OnlineGamblingCrossBorder { get; set; }

        /// <summary>
        /// This field indicates if domestic gambling OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic gambling OCTs (push funds) are allowed. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="onlineGamblingDomestic", EmitDefaultValue=false)]
        public string OnlineGamblingDomestic { get; set; }

        /// <summary>
        /// This field indicates if domestic OCTs (push funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if domestic OCTs (push funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; </value>
        [DataMember(Name="domesticParticipant", EmitDefaultValue=false)]
        public string DomesticParticipant { get; set; }

        /// <summary>
        /// This field indicates if cross-border OCTs (push funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if cross-border OCTs (push funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; </value>
        [DataMember(Name="crossBorderParticipant", EmitDefaultValue=false)]
        public string CrossBorderParticipant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2012PayoutInformationPushFunds {\n");
            if (MoneyTransferFastFundsCrossBorder != null) sb.Append("  MoneyTransferFastFundsCrossBorder: ").Append(MoneyTransferFastFundsCrossBorder).Append("\n");
            if (MoneyTransferFastFundsDomestic != null) sb.Append("  MoneyTransferFastFundsDomestic: ").Append(MoneyTransferFastFundsDomestic).Append("\n");
            if (MoneyTransferCrossBorder != null) sb.Append("  MoneyTransferCrossBorder: ").Append(MoneyTransferCrossBorder).Append("\n");
            if (MoneyTransferDomestic != null) sb.Append("  MoneyTransferDomestic: ").Append(MoneyTransferDomestic).Append("\n");
            if (NonMoneyTransferFastFundsCrossBorder != null) sb.Append("  NonMoneyTransferFastFundsCrossBorder: ").Append(NonMoneyTransferFastFundsCrossBorder).Append("\n");
            if (NonMoneyTransferFastFundsDomestic != null) sb.Append("  NonMoneyTransferFastFundsDomestic: ").Append(NonMoneyTransferFastFundsDomestic).Append("\n");
            if (NonMoneyTransferCrossBorder != null) sb.Append("  NonMoneyTransferCrossBorder: ").Append(NonMoneyTransferCrossBorder).Append("\n");
            if (NonMoneyTransferDomestic != null) sb.Append("  NonMoneyTransferDomestic: ").Append(NonMoneyTransferDomestic).Append("\n");
            if (OnlineGamblingFastFundsCrossBorder != null) sb.Append("  OnlineGamblingFastFundsCrossBorder: ").Append(OnlineGamblingFastFundsCrossBorder).Append("\n");
            if (OnlineGamblingFastFundsDomestic != null) sb.Append("  OnlineGamblingFastFundsDomestic: ").Append(OnlineGamblingFastFundsDomestic).Append("\n");
            if (OnlineGamblingCrossBorder != null) sb.Append("  OnlineGamblingCrossBorder: ").Append(OnlineGamblingCrossBorder).Append("\n");
            if (OnlineGamblingDomestic != null) sb.Append("  OnlineGamblingDomestic: ").Append(OnlineGamblingDomestic).Append("\n");
            if (DomesticParticipant != null) sb.Append("  DomesticParticipant: ").Append(DomesticParticipant).Append("\n");
            if (CrossBorderParticipant != null) sb.Append("  CrossBorderParticipant: ").Append(CrossBorderParticipant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2012PayoutInformationPushFunds);
        }

        /// <summary>
        /// Returns true if InlineResponse2012PayoutInformationPushFunds instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2012PayoutInformationPushFunds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2012PayoutInformationPushFunds other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MoneyTransferFastFundsCrossBorder == other.MoneyTransferFastFundsCrossBorder ||
                    this.MoneyTransferFastFundsCrossBorder != null &&
                    this.MoneyTransferFastFundsCrossBorder.Equals(other.MoneyTransferFastFundsCrossBorder)
                ) && 
                (
                    this.MoneyTransferFastFundsDomestic == other.MoneyTransferFastFundsDomestic ||
                    this.MoneyTransferFastFundsDomestic != null &&
                    this.MoneyTransferFastFundsDomestic.Equals(other.MoneyTransferFastFundsDomestic)
                ) && 
                (
                    this.MoneyTransferCrossBorder == other.MoneyTransferCrossBorder ||
                    this.MoneyTransferCrossBorder != null &&
                    this.MoneyTransferCrossBorder.Equals(other.MoneyTransferCrossBorder)
                ) && 
                (
                    this.MoneyTransferDomestic == other.MoneyTransferDomestic ||
                    this.MoneyTransferDomestic != null &&
                    this.MoneyTransferDomestic.Equals(other.MoneyTransferDomestic)
                ) && 
                (
                    this.NonMoneyTransferFastFundsCrossBorder == other.NonMoneyTransferFastFundsCrossBorder ||
                    this.NonMoneyTransferFastFundsCrossBorder != null &&
                    this.NonMoneyTransferFastFundsCrossBorder.Equals(other.NonMoneyTransferFastFundsCrossBorder)
                ) && 
                (
                    this.NonMoneyTransferFastFundsDomestic == other.NonMoneyTransferFastFundsDomestic ||
                    this.NonMoneyTransferFastFundsDomestic != null &&
                    this.NonMoneyTransferFastFundsDomestic.Equals(other.NonMoneyTransferFastFundsDomestic)
                ) && 
                (
                    this.NonMoneyTransferCrossBorder == other.NonMoneyTransferCrossBorder ||
                    this.NonMoneyTransferCrossBorder != null &&
                    this.NonMoneyTransferCrossBorder.Equals(other.NonMoneyTransferCrossBorder)
                ) && 
                (
                    this.NonMoneyTransferDomestic == other.NonMoneyTransferDomestic ||
                    this.NonMoneyTransferDomestic != null &&
                    this.NonMoneyTransferDomestic.Equals(other.NonMoneyTransferDomestic)
                ) && 
                (
                    this.OnlineGamblingFastFundsCrossBorder == other.OnlineGamblingFastFundsCrossBorder ||
                    this.OnlineGamblingFastFundsCrossBorder != null &&
                    this.OnlineGamblingFastFundsCrossBorder.Equals(other.OnlineGamblingFastFundsCrossBorder)
                ) && 
                (
                    this.OnlineGamblingFastFundsDomestic == other.OnlineGamblingFastFundsDomestic ||
                    this.OnlineGamblingFastFundsDomestic != null &&
                    this.OnlineGamblingFastFundsDomestic.Equals(other.OnlineGamblingFastFundsDomestic)
                ) && 
                (
                    this.OnlineGamblingCrossBorder == other.OnlineGamblingCrossBorder ||
                    this.OnlineGamblingCrossBorder != null &&
                    this.OnlineGamblingCrossBorder.Equals(other.OnlineGamblingCrossBorder)
                ) && 
                (
                    this.OnlineGamblingDomestic == other.OnlineGamblingDomestic ||
                    this.OnlineGamblingDomestic != null &&
                    this.OnlineGamblingDomestic.Equals(other.OnlineGamblingDomestic)
                ) && 
                (
                    this.DomesticParticipant == other.DomesticParticipant ||
                    this.DomesticParticipant != null &&
                    this.DomesticParticipant.Equals(other.DomesticParticipant)
                ) && 
                (
                    this.CrossBorderParticipant == other.CrossBorderParticipant ||
                    this.CrossBorderParticipant != null &&
                    this.CrossBorderParticipant.Equals(other.CrossBorderParticipant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MoneyTransferFastFundsCrossBorder != null)
                    hash = hash * 59 + this.MoneyTransferFastFundsCrossBorder.GetHashCode();
                if (this.MoneyTransferFastFundsDomestic != null)
                    hash = hash * 59 + this.MoneyTransferFastFundsDomestic.GetHashCode();
                if (this.MoneyTransferCrossBorder != null)
                    hash = hash * 59 + this.MoneyTransferCrossBorder.GetHashCode();
                if (this.MoneyTransferDomestic != null)
                    hash = hash * 59 + this.MoneyTransferDomestic.GetHashCode();
                if (this.NonMoneyTransferFastFundsCrossBorder != null)
                    hash = hash * 59 + this.NonMoneyTransferFastFundsCrossBorder.GetHashCode();
                if (this.NonMoneyTransferFastFundsDomestic != null)
                    hash = hash * 59 + this.NonMoneyTransferFastFundsDomestic.GetHashCode();
                if (this.NonMoneyTransferCrossBorder != null)
                    hash = hash * 59 + this.NonMoneyTransferCrossBorder.GetHashCode();
                if (this.NonMoneyTransferDomestic != null)
                    hash = hash * 59 + this.NonMoneyTransferDomestic.GetHashCode();
                if (this.OnlineGamblingFastFundsCrossBorder != null)
                    hash = hash * 59 + this.OnlineGamblingFastFundsCrossBorder.GetHashCode();
                if (this.OnlineGamblingFastFundsDomestic != null)
                    hash = hash * 59 + this.OnlineGamblingFastFundsDomestic.GetHashCode();
                if (this.OnlineGamblingCrossBorder != null)
                    hash = hash * 59 + this.OnlineGamblingCrossBorder.GetHashCode();
                if (this.OnlineGamblingDomestic != null)
                    hash = hash * 59 + this.OnlineGamblingDomestic.GetHashCode();
                if (this.DomesticParticipant != null)
                    hash = hash * 59 + this.DomesticParticipant.GetHashCode();
                if (this.CrossBorderParticipant != null)
                    hash = hash * 59 + this.CrossBorderParticipant.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
