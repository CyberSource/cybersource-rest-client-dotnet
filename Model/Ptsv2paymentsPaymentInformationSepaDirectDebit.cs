/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsPaymentInformationSepaDirectDebit
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsPaymentInformationSepaDirectDebit :  IEquatable<Ptsv2paymentsPaymentInformationSepaDirectDebit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsPaymentInformationSepaDirectDebit" /> class.
        /// </summary>
        /// <param name="Reference">Mandate reference as returned on the first transaction in the sequence .</param>
        /// <param name="SignatureDate">Date of the initial transaction, format is YYYY-MM-DD. Date can be taken from the finaltimestamp of the SUCCEEDED notification for the first transaction in the sequence. .</param>
        /// <param name="Url">Valid URL pointing to the SEPA mandate, needs to be accessible by our risk and compliance department. .</param>
        /// <param name="Type">Sequence type of the direct debit, defaults to \&quot;oneOff\&quot;. Valid values: oneOff The direct debit is executed once. first First direct debit in a series of recurring ones. .</param>
        public Ptsv2paymentsPaymentInformationSepaDirectDebit(string Reference = default(string), string SignatureDate = default(string), string Url = default(string), string Type = default(string))
        {
            this.Reference = Reference;
            this.SignatureDate = SignatureDate;
            this.Url = Url;
            this.Type = Type;
        }
        
        /// <summary>
        /// Mandate reference as returned on the first transaction in the sequence 
        /// </summary>
        /// <value>Mandate reference as returned on the first transaction in the sequence </value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Date of the initial transaction, format is YYYY-MM-DD. Date can be taken from the finaltimestamp of the SUCCEEDED notification for the first transaction in the sequence. 
        /// </summary>
        /// <value>Date of the initial transaction, format is YYYY-MM-DD. Date can be taken from the finaltimestamp of the SUCCEEDED notification for the first transaction in the sequence. </value>
        [DataMember(Name="signatureDate", EmitDefaultValue=false)]
        public string SignatureDate { get; set; }

        /// <summary>
        /// Valid URL pointing to the SEPA mandate, needs to be accessible by our risk and compliance department. 
        /// </summary>
        /// <value>Valid URL pointing to the SEPA mandate, needs to be accessible by our risk and compliance department. </value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Sequence type of the direct debit, defaults to \&quot;oneOff\&quot;. Valid values: oneOff The direct debit is executed once. first First direct debit in a series of recurring ones. 
        /// </summary>
        /// <value>Sequence type of the direct debit, defaults to \&quot;oneOff\&quot;. Valid values: oneOff The direct debit is executed once. first First direct debit in a series of recurring ones. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsPaymentInformationSepaDirectDebit {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SignatureDate: ").Append(SignatureDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsPaymentInformationSepaDirectDebit);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsPaymentInformationSepaDirectDebit instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsPaymentInformationSepaDirectDebit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsPaymentInformationSepaDirectDebit other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.SignatureDate == other.SignatureDate ||
                    this.SignatureDate != null &&
                    this.SignatureDate.Equals(other.SignatureDate)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.SignatureDate != null)
                    hash = hash * 59 + this.SignatureDate.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
