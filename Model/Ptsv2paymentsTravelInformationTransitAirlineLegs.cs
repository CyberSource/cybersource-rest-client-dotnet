/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsTravelInformationTransitAirlineLegs
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsTravelInformationTransitAirlineLegs :  IEquatable<Ptsv2paymentsTravelInformationTransitAirlineLegs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsTravelInformationTransitAirlineLegs" /> class.
        /// </summary>
        /// <param name="CarrierCode">IATA code for the carrier for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="FlightNumber">Flight number for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="OriginatingAirportCode">IATA code for the originating airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="_Class">IATA code for the class of service for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="StopoverIndicator">Code that indicates whether a stopover is allowed on this leg of the trip. Possible values: - &#x60;O&#x60; (capital letter “O”) (default): Stopover allowed - &#x60;X&#x60; (capital letter “X”): Stopover not allowed Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="DepartureDate">Departure date for the first leg of the trip. Format: &#x60;YYYYMMDD&#x60;. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="DestinationAirportCode">IATA code for the destination airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="FareBasis">Code for the fare basis for this leg of the trip. The fare basis is assigned by the carriers and indicates a particular ticket type, such as business class or discounted/nonrefundable. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Format: English characters only. Optional request field for travel legs.auto_rental_regular_mileage_cost .</param>
        /// <param name="DepartTaxAmount">Amount of departure tax for this leg of the trip. .</param>
        /// <param name="ConjunctionTicket">Ticket that contains additional coupons for this leg of the trip on an itinerary that has more than four segments. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="ExchangeTicketNumber">New ticket number that is issued when the ticket is exchanged for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="CouponNumber">Coupon number. Each leg on the ticket requires a separate coupon, and each coupon is identified by the coupon number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="DepartureTime">Time of departure for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60;. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="DepartureTimeMeridian">AM or PM for the departure time. Possible values: - A: 12:00 midnight to 11:59 a.m. - P: 12:00 noon to 11:59 p.m Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="ArrivalTime">Time of arrival for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60; Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="ArrivalTimeMeridian">AM or PM for the arrival time for this leg of the trip. Possible values: - &#x60;A&#x60;: 12:00 midnight to 11:59 a.m. - &#x60;P&#x60;: 12:00 noon to 11:59 p.m. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. .</param>
        /// <param name="EndorsementsRestrictions">Notes or notations about endorsements and restrictions for this leg of the trip. Endorsements can be notations added by the travel agency, including mandatory government-required notations such as value added tax. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="TotalFareAmount">Total fare for this leg of the trip. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="FeeAmount">Fee for this leg of the trip, such as an airport fee or country fee. Format: English characters only. Optional request field for travel legs. .</param>
        /// <param name="TaxAmount">Tax for this leg of the trip. Format: English characters only. Optional request field for travel legs. .</param>
        public Ptsv2paymentsTravelInformationTransitAirlineLegs(string CarrierCode = default(string), string FlightNumber = default(string), string OriginatingAirportCode = default(string), string _Class = default(string), int? StopoverIndicator = default(int?), int? DepartureDate = default(int?), string DestinationAirportCode = default(string), string FareBasis = default(string), string DepartTaxAmount = default(string), string ConjunctionTicket = default(string), string ExchangeTicketNumber = default(string), string CouponNumber = default(string), int? DepartureTime = default(int?), string DepartureTimeMeridian = default(string), int? ArrivalTime = default(int?), string ArrivalTimeMeridian = default(string), string EndorsementsRestrictions = default(string), string TotalFareAmount = default(string), string FeeAmount = default(string), string TaxAmount = default(string))
        {
            this.CarrierCode = CarrierCode;
            this.FlightNumber = FlightNumber;
            this.OriginatingAirportCode = OriginatingAirportCode;
            this._Class = _Class;
            this.StopoverIndicator = StopoverIndicator;
            this.DepartureDate = DepartureDate;
            this.DestinationAirportCode = DestinationAirportCode;
            this.FareBasis = FareBasis;
            this.DepartTaxAmount = DepartTaxAmount;
            this.ConjunctionTicket = ConjunctionTicket;
            this.ExchangeTicketNumber = ExchangeTicketNumber;
            this.CouponNumber = CouponNumber;
            this.DepartureTime = DepartureTime;
            this.DepartureTimeMeridian = DepartureTimeMeridian;
            this.ArrivalTime = ArrivalTime;
            this.ArrivalTimeMeridian = ArrivalTimeMeridian;
            this.EndorsementsRestrictions = EndorsementsRestrictions;
            this.TotalFareAmount = TotalFareAmount;
            this.FeeAmount = FeeAmount;
            this.TaxAmount = TaxAmount;
        }
        
        /// <summary>
        /// IATA code for the carrier for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>IATA code for the carrier for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="carrierCode", EmitDefaultValue=false)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Flight number for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Flight number for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="flightNumber", EmitDefaultValue=false)]
        public string FlightNumber { get; set; }

        /// <summary>
        /// IATA code for the originating airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>IATA code for the originating airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="originatingAirportCode", EmitDefaultValue=false)]
        public string OriginatingAirportCode { get; set; }

        /// <summary>
        /// IATA code for the class of service for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>IATA code for the class of service for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="class", EmitDefaultValue=false)]
        public string _Class { get; set; }

        /// <summary>
        /// Code that indicates whether a stopover is allowed on this leg of the trip. Possible values: - &#x60;O&#x60; (capital letter “O”) (default): Stopover allowed - &#x60;X&#x60; (capital letter “X”): Stopover not allowed Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>Code that indicates whether a stopover is allowed on this leg of the trip. Possible values: - &#x60;O&#x60; (capital letter “O”) (default): Stopover allowed - &#x60;X&#x60; (capital letter “X”): Stopover not allowed Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="stopoverIndicator", EmitDefaultValue=false)]
        public int? StopoverIndicator { get; set; }

        /// <summary>
        /// Departure date for the first leg of the trip. Format: &#x60;YYYYMMDD&#x60;. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Departure date for the first leg of the trip. Format: &#x60;YYYYMMDD&#x60;. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="departureDate", EmitDefaultValue=false)]
        public int? DepartureDate { get; set; }

        /// <summary>
        /// IATA code for the destination airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>IATA code for the destination airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="destinationAirportCode", EmitDefaultValue=false)]
        public string DestinationAirportCode { get; set; }

        /// <summary>
        /// Code for the fare basis for this leg of the trip. The fare basis is assigned by the carriers and indicates a particular ticket type, such as business class or discounted/nonrefundable. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Format: English characters only. Optional request field for travel legs.auto_rental_regular_mileage_cost 
        /// </summary>
        /// <value>Code for the fare basis for this leg of the trip. The fare basis is assigned by the carriers and indicates a particular ticket type, such as business class or discounted/nonrefundable. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Format: English characters only. Optional request field for travel legs.auto_rental_regular_mileage_cost </value>
        [DataMember(Name="fareBasis", EmitDefaultValue=false)]
        public string FareBasis { get; set; }

        /// <summary>
        /// Amount of departure tax for this leg of the trip. 
        /// </summary>
        /// <value>Amount of departure tax for this leg of the trip. </value>
        [DataMember(Name="departTaxAmount", EmitDefaultValue=false)]
        public string DepartTaxAmount { get; set; }

        /// <summary>
        /// Ticket that contains additional coupons for this leg of the trip on an itinerary that has more than four segments. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>Ticket that contains additional coupons for this leg of the trip on an itinerary that has more than four segments. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="conjunctionTicket", EmitDefaultValue=false)]
        public string ConjunctionTicket { get; set; }

        /// <summary>
        /// New ticket number that is issued when the ticket is exchanged for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>New ticket number that is issued when the ticket is exchanged for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="exchangeTicketNumber", EmitDefaultValue=false)]
        public string ExchangeTicketNumber { get; set; }

        /// <summary>
        /// Coupon number. Each leg on the ticket requires a separate coupon, and each coupon is identified by the coupon number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>Coupon number. Each leg on the ticket requires a separate coupon, and each coupon is identified by the coupon number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="couponNumber", EmitDefaultValue=false)]
        public string CouponNumber { get; set; }

        /// <summary>
        /// Time of departure for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60;. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Time of departure for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60;. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public int? DepartureTime { get; set; }

        /// <summary>
        /// AM or PM for the departure time. Possible values: - A: 12:00 midnight to 11:59 a.m. - P: 12:00 noon to 11:59 p.m Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>AM or PM for the departure time. Possible values: - A: 12:00 midnight to 11:59 a.m. - P: 12:00 noon to 11:59 p.m Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="departureTimeMeridian", EmitDefaultValue=false)]
        public string DepartureTimeMeridian { get; set; }

        /// <summary>
        /// Time of arrival for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60; Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Time of arrival for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60; Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="arrivalTime", EmitDefaultValue=false)]
        public int? ArrivalTime { get; set; }

        /// <summary>
        /// AM or PM for the arrival time for this leg of the trip. Possible values: - &#x60;A&#x60;: 12:00 midnight to 11:59 a.m. - &#x60;P&#x60;: 12:00 noon to 11:59 p.m. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
        /// </summary>
        /// <value>AM or PM for the arrival time for this leg of the trip. Possible values: - &#x60;A&#x60;: 12:00 midnight to 11:59 a.m. - &#x60;P&#x60;: 12:00 noon to 11:59 p.m. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. </value>
        [DataMember(Name="arrivalTimeMeridian", EmitDefaultValue=false)]
        public string ArrivalTimeMeridian { get; set; }

        /// <summary>
        /// Notes or notations about endorsements and restrictions for this leg of the trip. Endorsements can be notations added by the travel agency, including mandatory government-required notations such as value added tax. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Notes or notations about endorsements and restrictions for this leg of the trip. Endorsements can be notations added by the travel agency, including mandatory government-required notations such as value added tax. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="endorsementsRestrictions", EmitDefaultValue=false)]
        public string EndorsementsRestrictions { get; set; }

        /// <summary>
        /// Total fare for this leg of the trip. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Total fare for this leg of the trip. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="totalFareAmount", EmitDefaultValue=false)]
        public string TotalFareAmount { get; set; }

        /// <summary>
        /// Fee for this leg of the trip, such as an airport fee or country fee. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Fee for this leg of the trip, such as an airport fee or country fee. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="feeAmount", EmitDefaultValue=false)]
        public string FeeAmount { get; set; }

        /// <summary>
        /// Tax for this leg of the trip. Format: English characters only. Optional request field for travel legs. 
        /// </summary>
        /// <value>Tax for this leg of the trip. Format: English characters only. Optional request field for travel legs. </value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsTravelInformationTransitAirlineLegs {\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  OriginatingAirportCode: ").Append(OriginatingAirportCode).Append("\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  StopoverIndicator: ").Append(StopoverIndicator).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DestinationAirportCode: ").Append(DestinationAirportCode).Append("\n");
            sb.Append("  FareBasis: ").Append(FareBasis).Append("\n");
            sb.Append("  DepartTaxAmount: ").Append(DepartTaxAmount).Append("\n");
            sb.Append("  ConjunctionTicket: ").Append(ConjunctionTicket).Append("\n");
            sb.Append("  ExchangeTicketNumber: ").Append(ExchangeTicketNumber).Append("\n");
            sb.Append("  CouponNumber: ").Append(CouponNumber).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  DepartureTimeMeridian: ").Append(DepartureTimeMeridian).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  ArrivalTimeMeridian: ").Append(ArrivalTimeMeridian).Append("\n");
            sb.Append("  EndorsementsRestrictions: ").Append(EndorsementsRestrictions).Append("\n");
            sb.Append("  TotalFareAmount: ").Append(TotalFareAmount).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsTravelInformationTransitAirlineLegs);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsTravelInformationTransitAirlineLegs instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsTravelInformationTransitAirlineLegs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsTravelInformationTransitAirlineLegs other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CarrierCode == other.CarrierCode ||
                    this.CarrierCode != null &&
                    this.CarrierCode.Equals(other.CarrierCode)
                ) && 
                (
                    this.FlightNumber == other.FlightNumber ||
                    this.FlightNumber != null &&
                    this.FlightNumber.Equals(other.FlightNumber)
                ) && 
                (
                    this.OriginatingAirportCode == other.OriginatingAirportCode ||
                    this.OriginatingAirportCode != null &&
                    this.OriginatingAirportCode.Equals(other.OriginatingAirportCode)
                ) && 
                (
                    this._Class == other._Class ||
                    this._Class != null &&
                    this._Class.Equals(other._Class)
                ) && 
                (
                    this.StopoverIndicator == other.StopoverIndicator ||
                    this.StopoverIndicator != null &&
                    this.StopoverIndicator.Equals(other.StopoverIndicator)
                ) && 
                (
                    this.DepartureDate == other.DepartureDate ||
                    this.DepartureDate != null &&
                    this.DepartureDate.Equals(other.DepartureDate)
                ) && 
                (
                    this.DestinationAirportCode == other.DestinationAirportCode ||
                    this.DestinationAirportCode != null &&
                    this.DestinationAirportCode.Equals(other.DestinationAirportCode)
                ) && 
                (
                    this.FareBasis == other.FareBasis ||
                    this.FareBasis != null &&
                    this.FareBasis.Equals(other.FareBasis)
                ) && 
                (
                    this.DepartTaxAmount == other.DepartTaxAmount ||
                    this.DepartTaxAmount != null &&
                    this.DepartTaxAmount.Equals(other.DepartTaxAmount)
                ) && 
                (
                    this.ConjunctionTicket == other.ConjunctionTicket ||
                    this.ConjunctionTicket != null &&
                    this.ConjunctionTicket.Equals(other.ConjunctionTicket)
                ) && 
                (
                    this.ExchangeTicketNumber == other.ExchangeTicketNumber ||
                    this.ExchangeTicketNumber != null &&
                    this.ExchangeTicketNumber.Equals(other.ExchangeTicketNumber)
                ) && 
                (
                    this.CouponNumber == other.CouponNumber ||
                    this.CouponNumber != null &&
                    this.CouponNumber.Equals(other.CouponNumber)
                ) && 
                (
                    this.DepartureTime == other.DepartureTime ||
                    this.DepartureTime != null &&
                    this.DepartureTime.Equals(other.DepartureTime)
                ) && 
                (
                    this.DepartureTimeMeridian == other.DepartureTimeMeridian ||
                    this.DepartureTimeMeridian != null &&
                    this.DepartureTimeMeridian.Equals(other.DepartureTimeMeridian)
                ) && 
                (
                    this.ArrivalTime == other.ArrivalTime ||
                    this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(other.ArrivalTime)
                ) && 
                (
                    this.ArrivalTimeMeridian == other.ArrivalTimeMeridian ||
                    this.ArrivalTimeMeridian != null &&
                    this.ArrivalTimeMeridian.Equals(other.ArrivalTimeMeridian)
                ) && 
                (
                    this.EndorsementsRestrictions == other.EndorsementsRestrictions ||
                    this.EndorsementsRestrictions != null &&
                    this.EndorsementsRestrictions.Equals(other.EndorsementsRestrictions)
                ) && 
                (
                    this.TotalFareAmount == other.TotalFareAmount ||
                    this.TotalFareAmount != null &&
                    this.TotalFareAmount.Equals(other.TotalFareAmount)
                ) && 
                (
                    this.FeeAmount == other.FeeAmount ||
                    this.FeeAmount != null &&
                    this.FeeAmount.Equals(other.FeeAmount)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CarrierCode != null)
                    hash = hash * 59 + this.CarrierCode.GetHashCode();
                if (this.FlightNumber != null)
                    hash = hash * 59 + this.FlightNumber.GetHashCode();
                if (this.OriginatingAirportCode != null)
                    hash = hash * 59 + this.OriginatingAirportCode.GetHashCode();
                if (this._Class != null)
                    hash = hash * 59 + this._Class.GetHashCode();
                if (this.StopoverIndicator != null)
                    hash = hash * 59 + this.StopoverIndicator.GetHashCode();
                if (this.DepartureDate != null)
                    hash = hash * 59 + this.DepartureDate.GetHashCode();
                if (this.DestinationAirportCode != null)
                    hash = hash * 59 + this.DestinationAirportCode.GetHashCode();
                if (this.FareBasis != null)
                    hash = hash * 59 + this.FareBasis.GetHashCode();
                if (this.DepartTaxAmount != null)
                    hash = hash * 59 + this.DepartTaxAmount.GetHashCode();
                if (this.ConjunctionTicket != null)
                    hash = hash * 59 + this.ConjunctionTicket.GetHashCode();
                if (this.ExchangeTicketNumber != null)
                    hash = hash * 59 + this.ExchangeTicketNumber.GetHashCode();
                if (this.CouponNumber != null)
                    hash = hash * 59 + this.CouponNumber.GetHashCode();
                if (this.DepartureTime != null)
                    hash = hash * 59 + this.DepartureTime.GetHashCode();
                if (this.DepartureTimeMeridian != null)
                    hash = hash * 59 + this.DepartureTimeMeridian.GetHashCode();
                if (this.ArrivalTime != null)
                    hash = hash * 59 + this.ArrivalTime.GetHashCode();
                if (this.ArrivalTimeMeridian != null)
                    hash = hash * 59 + this.ArrivalTimeMeridian.GetHashCode();
                if (this.EndorsementsRestrictions != null)
                    hash = hash * 59 + this.EndorsementsRestrictions.GetHashCode();
                if (this.TotalFareAmount != null)
                    hash = hash * 59 + this.TotalFareAmount.GetHashCode();
                if (this.FeeAmount != null)
                    hash = hash * 59 + this.FeeAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
