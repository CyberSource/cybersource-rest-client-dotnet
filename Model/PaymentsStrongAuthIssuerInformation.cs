/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PaymentsStrongAuthIssuerInformation
    /// </summary>
    [DataContract]
    public partial class PaymentsStrongAuthIssuerInformation :  IEquatable<PaymentsStrongAuthIssuerInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsStrongAuthIssuerInformation" /> class.
        /// </summary>
        /// <param name="RiskAnalysisExemptionResult">Possible values: Visa Platform Connect - &#x60;8401&#x60; Merchant not participating in Visa Trusted Listing Program. - &#x60;8402&#x60; Issuer not participating in Visa Trusted Listing Program. - &#x60;8403&#x60; Cardholder has not trusted the merchant (supplied by Visa Net). - &#x60;8404&#x60; Indeterminate or invalid issuer response. - &#x60;8473&#x60; Cardholder has not trusted the merchant (issuer-supplied). - &#x60;8474&#x60; Did not meet the exemption criteria (issuer-supplied).  Upto 20 Values may be received in a transaction. .</param>
        /// <param name="TrustedMerchantExemptionResult">Possible values: Visa Platform Connect - &#x60;2&#x60; Trusted merchant exemption validated/honored. - &#x60;3&#x60; Trusted merchant exemption failed validation/not honored. .</param>
        /// <param name="LowValueExemptionResult">This will be the value returned by Visanet when low value exemption has been requested.  Valid values: Visa Platform Connect - &#x60;2&#x60; Low value exemption validated/honored - &#x60;3&#x60; Low value exemption failed validation/not honored .</param>
        /// <param name="SecureCorporatePaymentResult">This will be the value returned by Visanet when secure corporate payment (scp) exemption has been requested.  Valid values: Visa Platform Connect - &#x60;2&#x60; Secure corporate payment exemption validated/honored - &#x60;3&#x60; Secure corporate payment exemption failed validation/not honored .</param>
        /// <param name="TransactionRiskAnalysisExemptionResult">This will be the value returned by Visanet when transaction risk analysis (TRA) exemption has been requested.    Valid values: Visa Platform Connect   - &#x60;2&#x60; transaction risk analysis (TRA) exemption validated/honored   - &#x60;3&#x60; transaction risk analysis (TRA) exemption failed validation/not honored .</param>
        public PaymentsStrongAuthIssuerInformation(string RiskAnalysisExemptionResult = default(string), string TrustedMerchantExemptionResult = default(string), string LowValueExemptionResult = default(string), string SecureCorporatePaymentResult = default(string), string TransactionRiskAnalysisExemptionResult = default(string))
        {
            this.RiskAnalysisExemptionResult = RiskAnalysisExemptionResult;
            this.TrustedMerchantExemptionResult = TrustedMerchantExemptionResult;
            this.LowValueExemptionResult = LowValueExemptionResult;
            this.SecureCorporatePaymentResult = SecureCorporatePaymentResult;
            this.TransactionRiskAnalysisExemptionResult = TransactionRiskAnalysisExemptionResult;
        }
        
        /// <summary>
        /// Possible values: Visa Platform Connect - &#x60;8401&#x60; Merchant not participating in Visa Trusted Listing Program. - &#x60;8402&#x60; Issuer not participating in Visa Trusted Listing Program. - &#x60;8403&#x60; Cardholder has not trusted the merchant (supplied by Visa Net). - &#x60;8404&#x60; Indeterminate or invalid issuer response. - &#x60;8473&#x60; Cardholder has not trusted the merchant (issuer-supplied). - &#x60;8474&#x60; Did not meet the exemption criteria (issuer-supplied).  Upto 20 Values may be received in a transaction. 
        /// </summary>
        /// <value>Possible values: Visa Platform Connect - &#x60;8401&#x60; Merchant not participating in Visa Trusted Listing Program. - &#x60;8402&#x60; Issuer not participating in Visa Trusted Listing Program. - &#x60;8403&#x60; Cardholder has not trusted the merchant (supplied by Visa Net). - &#x60;8404&#x60; Indeterminate or invalid issuer response. - &#x60;8473&#x60; Cardholder has not trusted the merchant (issuer-supplied). - &#x60;8474&#x60; Did not meet the exemption criteria (issuer-supplied).  Upto 20 Values may be received in a transaction. </value>
        [DataMember(Name="riskAnalysisExemptionResult", EmitDefaultValue=false)]
        public string RiskAnalysisExemptionResult { get; set; }

        /// <summary>
        /// Possible values: Visa Platform Connect - &#x60;2&#x60; Trusted merchant exemption validated/honored. - &#x60;3&#x60; Trusted merchant exemption failed validation/not honored. 
        /// </summary>
        /// <value>Possible values: Visa Platform Connect - &#x60;2&#x60; Trusted merchant exemption validated/honored. - &#x60;3&#x60; Trusted merchant exemption failed validation/not honored. </value>
        [DataMember(Name="trustedMerchantExemptionResult", EmitDefaultValue=false)]
        public string TrustedMerchantExemptionResult { get; set; }

        /// <summary>
        /// This will be the value returned by Visanet when low value exemption has been requested.  Valid values: Visa Platform Connect - &#x60;2&#x60; Low value exemption validated/honored - &#x60;3&#x60; Low value exemption failed validation/not honored 
        /// </summary>
        /// <value>This will be the value returned by Visanet when low value exemption has been requested.  Valid values: Visa Platform Connect - &#x60;2&#x60; Low value exemption validated/honored - &#x60;3&#x60; Low value exemption failed validation/not honored </value>
        [DataMember(Name="lowValueExemptionResult", EmitDefaultValue=false)]
        public string LowValueExemptionResult { get; set; }

        /// <summary>
        /// This will be the value returned by Visanet when secure corporate payment (scp) exemption has been requested.  Valid values: Visa Platform Connect - &#x60;2&#x60; Secure corporate payment exemption validated/honored - &#x60;3&#x60; Secure corporate payment exemption failed validation/not honored 
        /// </summary>
        /// <value>This will be the value returned by Visanet when secure corporate payment (scp) exemption has been requested.  Valid values: Visa Platform Connect - &#x60;2&#x60; Secure corporate payment exemption validated/honored - &#x60;3&#x60; Secure corporate payment exemption failed validation/not honored </value>
        [DataMember(Name="secureCorporatePaymentResult", EmitDefaultValue=false)]
        public string SecureCorporatePaymentResult { get; set; }

        /// <summary>
        /// This will be the value returned by Visanet when transaction risk analysis (TRA) exemption has been requested.    Valid values: Visa Platform Connect   - &#x60;2&#x60; transaction risk analysis (TRA) exemption validated/honored   - &#x60;3&#x60; transaction risk analysis (TRA) exemption failed validation/not honored 
        /// </summary>
        /// <value>This will be the value returned by Visanet when transaction risk analysis (TRA) exemption has been requested.    Valid values: Visa Platform Connect   - &#x60;2&#x60; transaction risk analysis (TRA) exemption validated/honored   - &#x60;3&#x60; transaction risk analysis (TRA) exemption failed validation/not honored </value>
        [DataMember(Name="transactionRiskAnalysisExemptionResult", EmitDefaultValue=false)]
        public string TransactionRiskAnalysisExemptionResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsStrongAuthIssuerInformation {\n");
            sb.Append("  RiskAnalysisExemptionResult: ").Append(RiskAnalysisExemptionResult).Append("\n");
            sb.Append("  TrustedMerchantExemptionResult: ").Append(TrustedMerchantExemptionResult).Append("\n");
            sb.Append("  LowValueExemptionResult: ").Append(LowValueExemptionResult).Append("\n");
            sb.Append("  SecureCorporatePaymentResult: ").Append(SecureCorporatePaymentResult).Append("\n");
            sb.Append("  TransactionRiskAnalysisExemptionResult: ").Append(TransactionRiskAnalysisExemptionResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsStrongAuthIssuerInformation);
        }

        /// <summary>
        /// Returns true if PaymentsStrongAuthIssuerInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsStrongAuthIssuerInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsStrongAuthIssuerInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RiskAnalysisExemptionResult == other.RiskAnalysisExemptionResult ||
                    this.RiskAnalysisExemptionResult != null &&
                    this.RiskAnalysisExemptionResult.Equals(other.RiskAnalysisExemptionResult)
                ) && 
                (
                    this.TrustedMerchantExemptionResult == other.TrustedMerchantExemptionResult ||
                    this.TrustedMerchantExemptionResult != null &&
                    this.TrustedMerchantExemptionResult.Equals(other.TrustedMerchantExemptionResult)
                ) && 
                (
                    this.LowValueExemptionResult == other.LowValueExemptionResult ||
                    this.LowValueExemptionResult != null &&
                    this.LowValueExemptionResult.Equals(other.LowValueExemptionResult)
                ) && 
                (
                    this.SecureCorporatePaymentResult == other.SecureCorporatePaymentResult ||
                    this.SecureCorporatePaymentResult != null &&
                    this.SecureCorporatePaymentResult.Equals(other.SecureCorporatePaymentResult)
                ) && 
                (
                    this.TransactionRiskAnalysisExemptionResult == other.TransactionRiskAnalysisExemptionResult ||
                    this.TransactionRiskAnalysisExemptionResult != null &&
                    this.TransactionRiskAnalysisExemptionResult.Equals(other.TransactionRiskAnalysisExemptionResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RiskAnalysisExemptionResult != null)
                    hash = hash * 59 + this.RiskAnalysisExemptionResult.GetHashCode();
                if (this.TrustedMerchantExemptionResult != null)
                    hash = hash * 59 + this.TrustedMerchantExemptionResult.GetHashCode();
                if (this.LowValueExemptionResult != null)
                    hash = hash * 59 + this.LowValueExemptionResult.GetHashCode();
                if (this.SecureCorporatePaymentResult != null)
                    hash = hash * 59 + this.SecureCorporatePaymentResult.GetHashCode();
                if (this.TransactionRiskAnalysisExemptionResult != null)
                    hash = hash * 59 + this.TransactionRiskAnalysisExemptionResult.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
