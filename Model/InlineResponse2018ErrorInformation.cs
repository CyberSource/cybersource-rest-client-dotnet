/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2018ErrorInformation
    /// </summary>
    [DataContract]
    public partial class InlineResponse2018ErrorInformation :  IEquatable<InlineResponse2018ErrorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2018ErrorInformation" /> class.
        /// </summary>
        /// <param name="Reason">Only required when offer cannot be made. The reason of the status.  Possible values: - &#39;INVALID_MERCHANT_CONFIGURATION&#39; - &#39;NOT_ELIGIBLE&#39; - &#39;CURRENCY_NOT_CONFIGURED&#39; - &#39;BIN_UNKNOWN&#39; - &#39;CURRENCY_MATCH&#39; - &#39;CURRENCY_NOT_ALLOWED&#39; - &#39;LOOKUP_FAILED&#39; - &#39;EXCHANGE_RATE_NOT_FOUND&#39; - &#39;CARD_TYPE_NOT_ACCEPTED&#39; - &#39;INVALID_AMOUNT&#39; - &#39;INVALID_CARD&#39; - &#39;INVALID_CURRENCY&#39; - &#39;INVALID_TERMINAL&#39; - &#39;INVALID_ACQUIRER&#39; - &#39;SERVICE_DISABLED&#39; - &#39;DUPLICATE_REQUEST&#39; - &#39;UNKNOWN&#39; - &#39;PROCESSOR_ERROR&#39; .</param>
        /// <param name="Message">Only required when the requested action cannot be performed. Descriptive message to add more detail to the status E.g. not all cards are eligible for DCC, so it is not possible for DCC to be offered..</param>
        public InlineResponse2018ErrorInformation(string Reason = default(string), string Message = default(string))
        {
            this.Reason = Reason;
            this.Message = Message;
        }
        
        /// <summary>
        /// Only required when offer cannot be made. The reason of the status.  Possible values: - &#39;INVALID_MERCHANT_CONFIGURATION&#39; - &#39;NOT_ELIGIBLE&#39; - &#39;CURRENCY_NOT_CONFIGURED&#39; - &#39;BIN_UNKNOWN&#39; - &#39;CURRENCY_MATCH&#39; - &#39;CURRENCY_NOT_ALLOWED&#39; - &#39;LOOKUP_FAILED&#39; - &#39;EXCHANGE_RATE_NOT_FOUND&#39; - &#39;CARD_TYPE_NOT_ACCEPTED&#39; - &#39;INVALID_AMOUNT&#39; - &#39;INVALID_CARD&#39; - &#39;INVALID_CURRENCY&#39; - &#39;INVALID_TERMINAL&#39; - &#39;INVALID_ACQUIRER&#39; - &#39;SERVICE_DISABLED&#39; - &#39;DUPLICATE_REQUEST&#39; - &#39;UNKNOWN&#39; - &#39;PROCESSOR_ERROR&#39; 
        /// </summary>
        /// <value>Only required when offer cannot be made. The reason of the status.  Possible values: - &#39;INVALID_MERCHANT_CONFIGURATION&#39; - &#39;NOT_ELIGIBLE&#39; - &#39;CURRENCY_NOT_CONFIGURED&#39; - &#39;BIN_UNKNOWN&#39; - &#39;CURRENCY_MATCH&#39; - &#39;CURRENCY_NOT_ALLOWED&#39; - &#39;LOOKUP_FAILED&#39; - &#39;EXCHANGE_RATE_NOT_FOUND&#39; - &#39;CARD_TYPE_NOT_ACCEPTED&#39; - &#39;INVALID_AMOUNT&#39; - &#39;INVALID_CARD&#39; - &#39;INVALID_CURRENCY&#39; - &#39;INVALID_TERMINAL&#39; - &#39;INVALID_ACQUIRER&#39; - &#39;SERVICE_DISABLED&#39; - &#39;DUPLICATE_REQUEST&#39; - &#39;UNKNOWN&#39; - &#39;PROCESSOR_ERROR&#39; </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Only required when the requested action cannot be performed. Descriptive message to add more detail to the status E.g. not all cards are eligible for DCC, so it is not possible for DCC to be offered.
        /// </summary>
        /// <value>Only required when the requested action cannot be performed. Descriptive message to add more detail to the status E.g. not all cards are eligible for DCC, so it is not possible for DCC to be offered.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2018ErrorInformation {\n");
            if (Reason != null) sb.Append("  Reason: ").Append(Reason).Append("\n");
            if (Message != null) sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2018ErrorInformation);
        }

        /// <summary>
        /// Returns true if InlineResponse2018ErrorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2018ErrorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2018ErrorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
