/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationMerchantApplication
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationMerchantApplication :  IEquatable<UnderwritingConfigurationMerchantApplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationMerchantApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnderwritingConfigurationMerchantApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationMerchantApplication" /> class.
        /// </summary>
        /// <param name="Products">The product(s) that are being underwritten (required).</param>
        /// <param name="CampaignId">Driver Campaign ID, identifies where the application came from.</param>
        /// <param name="OcId">Offer CampaignID, used by Sales.</param>
        /// <param name="ResellerId">ResellerID, used by Sales.</param>
        public UnderwritingConfigurationMerchantApplication(List<UnderwritingConfigurationMerchantApplicationProducts> Products = default(List<UnderwritingConfigurationMerchantApplicationProducts>), string CampaignId = default(string), string OcId = default(string), string ResellerId = default(string))
        {
            this.Products = Products;
            this.CampaignId = CampaignId;
            this.OcId = OcId;
            this.ResellerId = ResellerId;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationStatus
        /// </summary>
        [DataMember(Name="applicationStatus", EmitDefaultValue=false)]
        public string ApplicationStatus { get; private set; }

        /// <summary>
        /// The product(s) that are being underwritten
        /// </summary>
        /// <value>The product(s) that are being underwritten</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<UnderwritingConfigurationMerchantApplicationProducts> Products { get; set; }

        /// <summary>
        /// Driver Campaign ID, identifies where the application came from
        /// </summary>
        /// <value>Driver Campaign ID, identifies where the application came from</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Offer CampaignID, used by Sales
        /// </summary>
        /// <value>Offer CampaignID, used by Sales</value>
        [DataMember(Name="ocId", EmitDefaultValue=false)]
        public string OcId { get; set; }

        /// <summary>
        /// ResellerID, used by Sales
        /// </summary>
        /// <value>ResellerID, used by Sales</value>
        [DataMember(Name="resellerId", EmitDefaultValue=false)]
        public string ResellerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationMerchantApplication {\n");
            if (ApplicationId != null) sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            if (ApplicationStatus != null) sb.Append("  ApplicationStatus: ").Append(ApplicationStatus).Append("\n");
            if (Products != null) sb.Append("  Products: ").Append(Products).Append("\n");
            if (CampaignId != null) sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            if (OcId != null) sb.Append("  OcId: ").Append(OcId).Append("\n");
            if (ResellerId != null) sb.Append("  ResellerId: ").Append(ResellerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationMerchantApplication);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationMerchantApplication instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationMerchantApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationMerchantApplication other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApplicationId == other.ApplicationId ||
                    this.ApplicationId != null &&
                    this.ApplicationId.Equals(other.ApplicationId)
                ) && 
                (
                    this.ApplicationStatus == other.ApplicationStatus ||
                    this.ApplicationStatus != null &&
                    this.ApplicationStatus.Equals(other.ApplicationStatus)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.CampaignId == other.CampaignId ||
                    this.CampaignId != null &&
                    this.CampaignId.Equals(other.CampaignId)
                ) && 
                (
                    this.OcId == other.OcId ||
                    this.OcId != null &&
                    this.OcId.Equals(other.OcId)
                ) && 
                (
                    this.ResellerId == other.ResellerId ||
                    this.ResellerId != null &&
                    this.ResellerId.Equals(other.ResellerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApplicationId != null)
                    hash = hash * 59 + this.ApplicationId.GetHashCode();
                if (this.ApplicationStatus != null)
                    hash = hash * 59 + this.ApplicationStatus.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.CampaignId != null)
                    hash = hash * 59 + this.CampaignId.GetHashCode();
                if (this.OcId != null)
                    hash = hash * 59 + this.OcId.GetHashCode();
                if (this.ResellerId != null)
                    hash = hash * 59 + this.ResellerId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
