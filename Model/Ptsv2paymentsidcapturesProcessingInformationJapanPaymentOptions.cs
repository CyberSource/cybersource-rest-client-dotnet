/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions :  IEquatable<Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions" /> class.
        /// </summary>
        /// <param name="PaymentMethod">This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment) .</param>
        /// <param name="Bonuses">Field contains the number of bonuses. .</param>
        /// <param name="Installments">Number of Installments. .</param>
        /// <param name="FirstBillingMonth">Billing month in MM format. .</param>
        /// <param name="BonusAmount">This field contains the bonus amount. .</param>
        /// <param name="BonusMonth">This field contains the Japan specific first bonus month. .</param>
        /// <param name="SecondBonusAmount">Field contains the second bonus amount. .</param>
        /// <param name="SecondBonusMonth">Field contains the Japan specific second bonus month. .</param>
        public Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions(string PaymentMethod = default(string), string Bonuses = default(string), string Installments = default(string), string FirstBillingMonth = default(string), string BonusAmount = default(string), string BonusMonth = default(string), string SecondBonusAmount = default(string), string SecondBonusMonth = default(string))
        {
            this.PaymentMethod = PaymentMethod;
            this.Bonuses = Bonuses;
            this.Installments = Installments;
            this.FirstBillingMonth = FirstBillingMonth;
            this.BonusAmount = BonusAmount;
            this.BonusMonth = BonusMonth;
            this.SecondBonusAmount = SecondBonusAmount;
            this.SecondBonusMonth = SecondBonusMonth;
        }
        
        /// <summary>
        /// This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment) 
        /// </summary>
        /// <value>This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment) </value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Field contains the number of bonuses. 
        /// </summary>
        /// <value>Field contains the number of bonuses. </value>
        [DataMember(Name="bonuses", EmitDefaultValue=false)]
        public string Bonuses { get; set; }

        /// <summary>
        /// Number of Installments. 
        /// </summary>
        /// <value>Number of Installments. </value>
        [DataMember(Name="installments", EmitDefaultValue=false)]
        public string Installments { get; set; }

        /// <summary>
        /// Billing month in MM format. 
        /// </summary>
        /// <value>Billing month in MM format. </value>
        [DataMember(Name="firstBillingMonth", EmitDefaultValue=false)]
        public string FirstBillingMonth { get; set; }

        /// <summary>
        /// This field contains the bonus amount. 
        /// </summary>
        /// <value>This field contains the bonus amount. </value>
        [DataMember(Name="bonusAmount", EmitDefaultValue=false)]
        public string BonusAmount { get; set; }

        /// <summary>
        /// This field contains the Japan specific first bonus month. 
        /// </summary>
        /// <value>This field contains the Japan specific first bonus month. </value>
        [DataMember(Name="bonusMonth", EmitDefaultValue=false)]
        public string BonusMonth { get; set; }

        /// <summary>
        /// Field contains the second bonus amount. 
        /// </summary>
        /// <value>Field contains the second bonus amount. </value>
        [DataMember(Name="secondBonusAmount", EmitDefaultValue=false)]
        public string SecondBonusAmount { get; set; }

        /// <summary>
        /// Field contains the Japan specific second bonus month. 
        /// </summary>
        /// <value>Field contains the Japan specific second bonus month. </value>
        [DataMember(Name="secondBonusMonth", EmitDefaultValue=false)]
        public string SecondBonusMonth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions {\n");
            if (PaymentMethod != null) sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            if (Bonuses != null) sb.Append("  Bonuses: ").Append(Bonuses).Append("\n");
            if (Installments != null) sb.Append("  Installments: ").Append(Installments).Append("\n");
            if (FirstBillingMonth != null) sb.Append("  FirstBillingMonth: ").Append(FirstBillingMonth).Append("\n");
            if (BonusAmount != null) sb.Append("  BonusAmount: ").Append(BonusAmount).Append("\n");
            if (BonusMonth != null) sb.Append("  BonusMonth: ").Append(BonusMonth).Append("\n");
            if (SecondBonusAmount != null) sb.Append("  SecondBonusAmount: ").Append(SecondBonusAmount).Append("\n");
            if (SecondBonusMonth != null) sb.Append("  SecondBonusMonth: ").Append(SecondBonusMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsidcapturesProcessingInformationJapanPaymentOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentMethod == other.PaymentMethod ||
                    this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    this.Bonuses == other.Bonuses ||
                    this.Bonuses != null &&
                    this.Bonuses.Equals(other.Bonuses)
                ) && 
                (
                    this.Installments == other.Installments ||
                    this.Installments != null &&
                    this.Installments.Equals(other.Installments)
                ) && 
                (
                    this.FirstBillingMonth == other.FirstBillingMonth ||
                    this.FirstBillingMonth != null &&
                    this.FirstBillingMonth.Equals(other.FirstBillingMonth)
                ) && 
                (
                    this.BonusAmount == other.BonusAmount ||
                    this.BonusAmount != null &&
                    this.BonusAmount.Equals(other.BonusAmount)
                ) && 
                (
                    this.BonusMonth == other.BonusMonth ||
                    this.BonusMonth != null &&
                    this.BonusMonth.Equals(other.BonusMonth)
                ) && 
                (
                    this.SecondBonusAmount == other.SecondBonusAmount ||
                    this.SecondBonusAmount != null &&
                    this.SecondBonusAmount.Equals(other.SecondBonusAmount)
                ) && 
                (
                    this.SecondBonusMonth == other.SecondBonusMonth ||
                    this.SecondBonusMonth != null &&
                    this.SecondBonusMonth.Equals(other.SecondBonusMonth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentMethod != null)
                    hash = hash * 59 + this.PaymentMethod.GetHashCode();
                if (this.Bonuses != null)
                    hash = hash * 59 + this.Bonuses.GetHashCode();
                if (this.Installments != null)
                    hash = hash * 59 + this.Installments.GetHashCode();
                if (this.FirstBillingMonth != null)
                    hash = hash * 59 + this.FirstBillingMonth.GetHashCode();
                if (this.BonusAmount != null)
                    hash = hash * 59 + this.BonusAmount.GetHashCode();
                if (this.BonusMonth != null)
                    hash = hash * 59 + this.BonusMonth.GetHashCode();
                if (this.SecondBonusAmount != null)
                    hash = hash * 59 + this.SecondBonusAmount.GetHashCode();
                if (this.SecondBonusMonth != null)
                    hash = hash * 59 + this.SecondBonusMonth.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
