/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation
    /// </summary>
    [DataContract]
    public partial class PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation :  IEquatable<PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation>, IValidatableObject
    {
        /// <summary>
        /// Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK
        /// </summary>
        /// <value>Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            
            /// <summary>
            /// Enum MASTERDEBIT for "MASTERDEBIT"
            /// </summary>
            [EnumMember(Value = "MASTERDEBIT")]
            MASTERDEBIT,
            
            /// <summary>
            /// Enum MASTERCREDIT for "MASTERCREDIT"
            /// </summary>
            [EnumMember(Value = "MASTERCREDIT")]
            MASTERCREDIT,
            
            /// <summary>
            /// Enum VISACREDIT for "VISACREDIT"
            /// </summary>
            [EnumMember(Value = "VISACREDIT")]
            VISACREDIT,
            
            /// <summary>
            /// Enum VISADEBIT for "VISADEBIT"
            /// </summary>
            [EnumMember(Value = "VISADEBIT")]
            VISADEBIT,
            
            /// <summary>
            /// Enum DISCOVERCREDIT for "DISCOVERCREDIT"
            /// </summary>
            [EnumMember(Value = "DISCOVERCREDIT")]
            DISCOVERCREDIT,
            
            /// <summary>
            /// Enum AMEXCREDIT for "AMEXCREDIT"
            /// </summary>
            [EnumMember(Value = "AMEXCREDIT")]
            AMEXCREDIT,
            
            /// <summary>
            /// Enum ECHECK for "ECHECK"
            /// </summary>
            [EnumMember(Value = "ECHECK")]
            ECHECK
        }
        /// <summary>
        /// Fee type for the selected payment type. Supported values are: Flat or Percentage. 
        /// </summary>
        /// <value>Fee type for the selected payment type. Supported values are: Flat or Percentage. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeeTypeEnum
        {
            
            /// <summary>
            /// Enum FLAT for "FLAT"
            /// </summary>
            [EnumMember(Value = "FLAT")]
            FLAT,
            
            /// <summary>
            /// Enum PERCENTAGE for "PERCENTAGE"
            /// </summary>
            [EnumMember(Value = "PERCENTAGE")]
            PERCENTAGE
        }
        /// <summary>
        /// Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK
        /// </summary>
        /// <value>Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public PaymentTypeEnum? PaymentType { get; set; }
        /// <summary>
        /// Fee type for the selected payment type. Supported values are: Flat or Percentage. 
        /// </summary>
        /// <value>Fee type for the selected payment type. Supported values are: Flat or Percentage. </value>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public FeeTypeEnum? FeeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation" /> class.
        /// </summary>
        /// <param name="PaymentType">Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK.</param>
        /// <param name="FeeType">Fee type for the selected payment type. Supported values are: Flat or Percentage. .</param>
        /// <param name="FeeAmount">Fee Amount of the selected payment type if you chose Flat fee type. .</param>
        /// <param name="Percentage">Percentage of the selected payment type if you chose Percentage Fee type. Supported values use numbers with decimals. For example, 1.0 .</param>
        /// <param name="FeeCap">Fee cap for the selected payment type. Supported values use numbers with decimals. For example, 1.0 .</param>
        public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation(PaymentTypeEnum? PaymentType = default(PaymentTypeEnum?), FeeTypeEnum? FeeType = default(FeeTypeEnum?), decimal? FeeAmount = default(decimal?), decimal? Percentage = default(decimal?), decimal? FeeCap = default(decimal?))
        {
            this.PaymentType = PaymentType;
            this.FeeType = FeeType;
            this.FeeAmount = FeeAmount;
            this.Percentage = Percentage;
            this.FeeCap = FeeCap;
        }
        


        /// <summary>
        /// Fee Amount of the selected payment type if you chose Flat fee type. 
        /// </summary>
        /// <value>Fee Amount of the selected payment type if you chose Flat fee type. </value>
        [DataMember(Name="feeAmount", EmitDefaultValue=false)]
        public decimal? FeeAmount { get; set; }

        /// <summary>
        /// Percentage of the selected payment type if you chose Percentage Fee type. Supported values use numbers with decimals. For example, 1.0 
        /// </summary>
        /// <value>Percentage of the selected payment type if you chose Percentage Fee type. Supported values use numbers with decimals. For example, 1.0 </value>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public decimal? Percentage { get; set; }

        /// <summary>
        /// Fee cap for the selected payment type. Supported values use numbers with decimals. For example, 1.0 
        /// </summary>
        /// <value>Fee cap for the selected payment type. Supported values use numbers with decimals. For example, 1.0 </value>
        [DataMember(Name="feeCap", EmitDefaultValue=false)]
        public decimal? FeeCap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation {\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  FeeCap: ").Append(FeeCap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation);
        }

        /// <summary>
        /// Returns true if PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentType == other.PaymentType ||
                    this.PaymentType != null &&
                    this.PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    this.FeeType == other.FeeType ||
                    this.FeeType != null &&
                    this.FeeType.Equals(other.FeeType)
                ) && 
                (
                    this.FeeAmount == other.FeeAmount ||
                    this.FeeAmount != null &&
                    this.FeeAmount.Equals(other.FeeAmount)
                ) && 
                (
                    this.Percentage == other.Percentage ||
                    this.Percentage != null &&
                    this.Percentage.Equals(other.Percentage)
                ) && 
                (
                    this.FeeCap == other.FeeCap ||
                    this.FeeCap != null &&
                    this.FeeCap.Equals(other.FeeCap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentType != null)
                    hash = hash * 59 + this.PaymentType.GetHashCode();
                if (this.FeeType != null)
                    hash = hash * 59 + this.FeeType.GetHashCode();
                if (this.FeeAmount != null)
                    hash = hash * 59 + this.FeeAmount.GetHashCode();
                if (this.Percentage != null)
                    hash = hash * 59 + this.Percentage.GetHashCode();
                if (this.FeeCap != null)
                    hash = hash * 59 + this.FeeCap.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
