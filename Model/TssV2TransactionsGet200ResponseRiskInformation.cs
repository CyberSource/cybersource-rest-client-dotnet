/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TssV2TransactionsGet200ResponseRiskInformation
    /// </summary>
    [DataContract]
    public partial class TssV2TransactionsGet200ResponseRiskInformation :  IEquatable<TssV2TransactionsGet200ResponseRiskInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TssV2TransactionsGet200ResponseRiskInformation" /> class.
        /// </summary>
        /// <param name="Profile">Profile.</param>
        /// <param name="Rules">Rules.</param>
        /// <param name="PassiveProfile">PassiveProfile.</param>
        /// <param name="PassiveRules">PassiveRules.</param>
        /// <param name="Score">Score.</param>
        /// <param name="LocalTime">Time that the transaction was submitted in local time. Generated by Cybersource..</param>
        public TssV2TransactionsGet200ResponseRiskInformation(TssV2TransactionsGet200ResponseRiskInformationProfile Profile = default(TssV2TransactionsGet200ResponseRiskInformationProfile), List<TssV2TransactionsGet200ResponseRiskInformationRules> Rules = default(List<TssV2TransactionsGet200ResponseRiskInformationRules>), TssV2TransactionsGet200ResponseRiskInformationProfile PassiveProfile = default(TssV2TransactionsGet200ResponseRiskInformationProfile), List<TssV2TransactionsGet200ResponseRiskInformationRules> PassiveRules = default(List<TssV2TransactionsGet200ResponseRiskInformationRules>), TssV2TransactionsGet200ResponseRiskInformationScore Score = default(TssV2TransactionsGet200ResponseRiskInformationScore), string LocalTime = default(string))
        {
            this.Profile = Profile;
            this.Rules = Rules;
            this.PassiveProfile = PassiveProfile;
            this.PassiveRules = PassiveRules;
            this.Score = Score;
            this.LocalTime = LocalTime;
        }
        
        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponseRiskInformationProfile Profile { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<TssV2TransactionsGet200ResponseRiskInformationRules> Rules { get; set; }

        /// <summary>
        /// Gets or Sets PassiveProfile
        /// </summary>
        [DataMember(Name="passiveProfile", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponseRiskInformationProfile PassiveProfile { get; set; }

        /// <summary>
        /// Gets or Sets PassiveRules
        /// </summary>
        [DataMember(Name="passiveRules", EmitDefaultValue=false)]
        public List<TssV2TransactionsGet200ResponseRiskInformationRules> PassiveRules { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponseRiskInformationScore Score { get; set; }

        /// <summary>
        /// Time that the transaction was submitted in local time. Generated by Cybersource.
        /// </summary>
        /// <value>Time that the transaction was submitted in local time. Generated by Cybersource.</value>
        [DataMember(Name="localTime", EmitDefaultValue=false)]
        public string LocalTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TssV2TransactionsGet200ResponseRiskInformation {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  PassiveProfile: ").Append(PassiveProfile).Append("\n");
            sb.Append("  PassiveRules: ").Append(PassiveRules).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  LocalTime: ").Append(LocalTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TssV2TransactionsGet200ResponseRiskInformation);
        }

        /// <summary>
        /// Returns true if TssV2TransactionsGet200ResponseRiskInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of TssV2TransactionsGet200ResponseRiskInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TssV2TransactionsGet200ResponseRiskInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Profile == other.Profile ||
                    this.Profile != null &&
                    this.Profile.Equals(other.Profile)
                ) && 
                (
                    this.Rules == other.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(other.Rules)
                ) && 
                (
                    this.PassiveProfile == other.PassiveProfile ||
                    this.PassiveProfile != null &&
                    this.PassiveProfile.Equals(other.PassiveProfile)
                ) && 
                (
                    this.PassiveRules == other.PassiveRules ||
                    this.PassiveRules != null &&
                    this.PassiveRules.SequenceEqual(other.PassiveRules)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                ) && 
                (
                    this.LocalTime == other.LocalTime ||
                    this.LocalTime != null &&
                    this.LocalTime.Equals(other.LocalTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Profile != null)
                    hash = hash * 59 + this.Profile.GetHashCode();
                if (this.Rules != null)
                    hash = hash * 59 + this.Rules.GetHashCode();
                if (this.PassiveProfile != null)
                    hash = hash * 59 + this.PassiveProfile.GetHashCode();
                if (this.PassiveRules != null)
                    hash = hash * 59 + this.PassiveRules.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                if (this.LocalTime != null)
                    hash = hash * 59 + this.LocalTime.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
