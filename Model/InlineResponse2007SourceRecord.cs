/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2007SourceRecord
    /// </summary>
    [DataContract]
    public partial class InlineResponse2007SourceRecord :  IEquatable<InlineResponse2007SourceRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007SourceRecord" /> class.
        /// </summary>
        /// <param name="Token">Token.</param>
        /// <param name="CustomerId">CustomerId.</param>
        /// <param name="PaymentInstrumentId">PaymentInstrumentId.</param>
        /// <param name="InstrumentIdentifierId">InstrumentIdentifierId.</param>
        /// <param name="CardNumber">CardNumber.</param>
        /// <param name="CardExpiryMonth">CardExpiryMonth.</param>
        /// <param name="CardExpiryYear">CardExpiryYear.</param>
        /// <param name="CardType">CardType.</param>
        public InlineResponse2007SourceRecord(string Token = default(string), string CustomerId = default(string), string PaymentInstrumentId = default(string), string InstrumentIdentifierId = default(string), string CardNumber = default(string), string CardExpiryMonth = default(string), string CardExpiryYear = default(string), string CardType = default(string))
        {
            this.Token = Token;
            this.CustomerId = CustomerId;
            this.PaymentInstrumentId = PaymentInstrumentId;
            this.InstrumentIdentifierId = InstrumentIdentifierId;
            this.CardNumber = CardNumber;
            this.CardExpiryMonth = CardExpiryMonth;
            this.CardExpiryYear = CardExpiryYear;
            this.CardType = CardType;
        }
        
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstrumentId
        /// </summary>
        [DataMember(Name="paymentInstrumentId", EmitDefaultValue=false)]
        public string PaymentInstrumentId { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentIdentifierId
        /// </summary>
        [DataMember(Name="instrumentIdentifierId", EmitDefaultValue=false)]
        public string InstrumentIdentifierId { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardExpiryMonth
        /// </summary>
        [DataMember(Name="cardExpiryMonth", EmitDefaultValue=false)]
        public string CardExpiryMonth { get; set; }

        /// <summary>
        /// Gets or Sets CardExpiryYear
        /// </summary>
        [DataMember(Name="cardExpiryYear", EmitDefaultValue=false)]
        public string CardExpiryYear { get; set; }

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name="cardType", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2007SourceRecord {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  PaymentInstrumentId: ").Append(PaymentInstrumentId).Append("\n");
            sb.Append("  InstrumentIdentifierId: ").Append(InstrumentIdentifierId).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardExpiryMonth: ").Append(CardExpiryMonth).Append("\n");
            sb.Append("  CardExpiryYear: ").Append(CardExpiryYear).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2007SourceRecord);
        }

        /// <summary>
        /// Returns true if InlineResponse2007SourceRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2007SourceRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007SourceRecord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    this.PaymentInstrumentId == other.PaymentInstrumentId ||
                    this.PaymentInstrumentId != null &&
                    this.PaymentInstrumentId.Equals(other.PaymentInstrumentId)
                ) && 
                (
                    this.InstrumentIdentifierId == other.InstrumentIdentifierId ||
                    this.InstrumentIdentifierId != null &&
                    this.InstrumentIdentifierId.Equals(other.InstrumentIdentifierId)
                ) && 
                (
                    this.CardNumber == other.CardNumber ||
                    this.CardNumber != null &&
                    this.CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    this.CardExpiryMonth == other.CardExpiryMonth ||
                    this.CardExpiryMonth != null &&
                    this.CardExpiryMonth.Equals(other.CardExpiryMonth)
                ) && 
                (
                    this.CardExpiryYear == other.CardExpiryYear ||
                    this.CardExpiryYear != null &&
                    this.CardExpiryYear.Equals(other.CardExpiryYear)
                ) && 
                (
                    this.CardType == other.CardType ||
                    this.CardType != null &&
                    this.CardType.Equals(other.CardType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                if (this.PaymentInstrumentId != null)
                    hash = hash * 59 + this.PaymentInstrumentId.GetHashCode();
                if (this.InstrumentIdentifierId != null)
                    hash = hash * 59 + this.InstrumentIdentifierId.GetHashCode();
                if (this.CardNumber != null)
                    hash = hash * 59 + this.CardNumber.GetHashCode();
                if (this.CardExpiryMonth != null)
                    hash = hash * 59 + this.CardExpiryMonth.GetHashCode();
                if (this.CardExpiryYear != null)
                    hash = hash * 59 + this.CardExpiryYear.GetHashCode();
                if (this.CardType != null)
                    hash = hash * 59 + this.CardType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
