/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Tmsv2TokenizedCardMetadataCardArt
    /// </summary>
    [DataContract]
    public partial class Tmsv2TokenizedCardMetadataCardArt :  IEquatable<Tmsv2TokenizedCardMetadataCardArt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tmsv2TokenizedCardMetadataCardArt" /> class.
        /// </summary>
        /// <param name="CombinedAsset">CombinedAsset.</param>
        /// <param name="BrandLogoAsset">BrandLogoAsset.</param>
        /// <param name="CoBrandLogoAsset">CoBrandLogoAsset.</param>
        /// <param name="IssuerLogoAsset">IssuerLogoAsset.</param>
        /// <param name="IconAsset">IconAsset.</param>
        /// <param name="BackgroundAsset">BackgroundAsset.</param>
        public Tmsv2TokenizedCardMetadataCardArt(Tmsv2TokenizedCardMetadataCardArtCombinedAsset CombinedAsset = default(Tmsv2TokenizedCardMetadataCardArtCombinedAsset), Tmsv2TokenizedCardMetadataCardArtBrandLogoAsset BrandLogoAsset = default(Tmsv2TokenizedCardMetadataCardArtBrandLogoAsset), Tmsv2TokenizedCardMetadataCardArtCoBrandLogoAsset CoBrandLogoAsset = default(Tmsv2TokenizedCardMetadataCardArtCoBrandLogoAsset), Tmsv2TokenizedCardMetadataCardArtIssuerLogoAsset IssuerLogoAsset = default(Tmsv2TokenizedCardMetadataCardArtIssuerLogoAsset), Tmsv2TokenizedCardMetadataCardArtIconAsset IconAsset = default(Tmsv2TokenizedCardMetadataCardArtIconAsset), Tmsv2TokenizedCardMetadataCardArtBackgroundAsset BackgroundAsset = default(Tmsv2TokenizedCardMetadataCardArtBackgroundAsset))
        {
            this.CombinedAsset = CombinedAsset;
            this.BrandLogoAsset = BrandLogoAsset;
            this.CoBrandLogoAsset = CoBrandLogoAsset;
            this.IssuerLogoAsset = IssuerLogoAsset;
            this.IconAsset = IconAsset;
            this.BackgroundAsset = BackgroundAsset;
        }
        
        /// <summary>
        /// Gets or Sets CombinedAsset
        /// </summary>
        [DataMember(Name="combinedAsset", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadataCardArtCombinedAsset CombinedAsset { get; set; }

        /// <summary>
        /// Gets or Sets BrandLogoAsset
        /// </summary>
        [DataMember(Name="brandLogoAsset", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadataCardArtBrandLogoAsset BrandLogoAsset { get; set; }

        /// <summary>
        /// Gets or Sets CoBrandLogoAsset
        /// </summary>
        [DataMember(Name="coBrandLogoAsset", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadataCardArtCoBrandLogoAsset CoBrandLogoAsset { get; set; }

        /// <summary>
        /// Gets or Sets IssuerLogoAsset
        /// </summary>
        [DataMember(Name="issuerLogoAsset", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadataCardArtIssuerLogoAsset IssuerLogoAsset { get; set; }

        /// <summary>
        /// Gets or Sets IconAsset
        /// </summary>
        [DataMember(Name="iconAsset", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadataCardArtIconAsset IconAsset { get; set; }

        /// <summary>
        /// The foreground color of the brand logo asset. 
        /// </summary>
        /// <value>The foreground color of the brand logo asset. </value>
        [DataMember(Name="foregroundColor", EmitDefaultValue=false)]
        public string ForegroundColor { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundAsset
        /// </summary>
        [DataMember(Name="backgroundAsset", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadataCardArtBackgroundAsset BackgroundAsset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tmsv2TokenizedCardMetadataCardArt {\n");
            sb.Append("  CombinedAsset: ").Append(CombinedAsset).Append("\n");
            sb.Append("  BrandLogoAsset: ").Append(BrandLogoAsset).Append("\n");
            sb.Append("  CoBrandLogoAsset: ").Append(CoBrandLogoAsset).Append("\n");
            sb.Append("  IssuerLogoAsset: ").Append(IssuerLogoAsset).Append("\n");
            sb.Append("  IconAsset: ").Append(IconAsset).Append("\n");
            sb.Append("  ForegroundColor: ").Append(ForegroundColor).Append("\n");
            sb.Append("  BackgroundAsset: ").Append(BackgroundAsset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Tmsv2TokenizedCardMetadataCardArt);
        }

        /// <summary>
        /// Returns true if Tmsv2TokenizedCardMetadataCardArt instances are equal
        /// </summary>
        /// <param name="other">Instance of Tmsv2TokenizedCardMetadataCardArt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tmsv2TokenizedCardMetadataCardArt other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CombinedAsset == other.CombinedAsset ||
                    this.CombinedAsset != null &&
                    this.CombinedAsset.Equals(other.CombinedAsset)
                ) && 
                (
                    this.BrandLogoAsset == other.BrandLogoAsset ||
                    this.BrandLogoAsset != null &&
                    this.BrandLogoAsset.Equals(other.BrandLogoAsset)
                ) && 
                (
                    this.CoBrandLogoAsset == other.CoBrandLogoAsset ||
                    this.CoBrandLogoAsset != null &&
                    this.CoBrandLogoAsset.Equals(other.CoBrandLogoAsset)
                ) && 
                (
                    this.IssuerLogoAsset == other.IssuerLogoAsset ||
                    this.IssuerLogoAsset != null &&
                    this.IssuerLogoAsset.Equals(other.IssuerLogoAsset)
                ) && 
                (
                    this.IconAsset == other.IconAsset ||
                    this.IconAsset != null &&
                    this.IconAsset.Equals(other.IconAsset)
                ) && 
                (
                    this.ForegroundColor == other.ForegroundColor ||
                    this.ForegroundColor != null &&
                    this.ForegroundColor.Equals(other.ForegroundColor)
                ) && 
                (
                    this.BackgroundAsset == other.BackgroundAsset ||
                    this.BackgroundAsset != null &&
                    this.BackgroundAsset.Equals(other.BackgroundAsset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CombinedAsset != null)
                    hash = hash * 59 + this.CombinedAsset.GetHashCode();
                if (this.BrandLogoAsset != null)
                    hash = hash * 59 + this.BrandLogoAsset.GetHashCode();
                if (this.CoBrandLogoAsset != null)
                    hash = hash * 59 + this.CoBrandLogoAsset.GetHashCode();
                if (this.IssuerLogoAsset != null)
                    hash = hash * 59 + this.IssuerLogoAsset.GetHashCode();
                if (this.IconAsset != null)
                    hash = hash * 59 + this.IconAsset.GetHashCode();
                if (this.ForegroundColor != null)
                    hash = hash * 59 + this.ForegroundColor.GetHashCode();
                if (this.BackgroundAsset != null)
                    hash = hash * 59 + this.BackgroundAsset.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
