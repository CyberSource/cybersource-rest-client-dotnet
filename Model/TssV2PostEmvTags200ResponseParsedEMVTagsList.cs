/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TssV2PostEmvTags200ResponseParsedEMVTagsList
    /// </summary>
    [DataContract]
    public partial class TssV2PostEmvTags200ResponseParsedEMVTagsList :  IEquatable<TssV2PostEmvTags200ResponseParsedEMVTagsList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TssV2PostEmvTags200ResponseParsedEMVTagsList" /> class.
        /// </summary>
        /// <param name="RequestId">An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. .</param>
        /// <param name="TotalTags">Number of tags parsed .</param>
        /// <param name="EmvTagBreakdownList">An array of objects, where each object contains one parsed tag from the relevant EMV string. .</param>
        public TssV2PostEmvTags200ResponseParsedEMVTagsList(string RequestId = default(string), int? TotalTags = default(int?), List<TssV2PostEmvTags200ResponseEmvTagBreakdownList> EmvTagBreakdownList = default(List<TssV2PostEmvTags200ResponseEmvTagBreakdownList>))
        {
            this.RequestId = RequestId;
            this.TotalTags = TotalTags;
            this.EmvTagBreakdownList = EmvTagBreakdownList;
        }
        
        /// <summary>
        /// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 
        /// </summary>
        /// <value>An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Number of tags parsed 
        /// </summary>
        /// <value>Number of tags parsed </value>
        [DataMember(Name="totalTags", EmitDefaultValue=false)]
        public int? TotalTags { get; set; }

        /// <summary>
        /// An array of objects, where each object contains one parsed tag from the relevant EMV string. 
        /// </summary>
        /// <value>An array of objects, where each object contains one parsed tag from the relevant EMV string. </value>
        [DataMember(Name="emvTagBreakdownList", EmitDefaultValue=false)]
        public List<TssV2PostEmvTags200ResponseEmvTagBreakdownList> EmvTagBreakdownList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TssV2PostEmvTags200ResponseParsedEMVTagsList {\n");
            if (RequestId != null) sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            if (TotalTags != null) sb.Append("  TotalTags: ").Append(TotalTags).Append("\n");
            if (EmvTagBreakdownList != null) sb.Append("  EmvTagBreakdownList: ").Append(EmvTagBreakdownList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TssV2PostEmvTags200ResponseParsedEMVTagsList);
        }

        /// <summary>
        /// Returns true if TssV2PostEmvTags200ResponseParsedEMVTagsList instances are equal
        /// </summary>
        /// <param name="other">Instance of TssV2PostEmvTags200ResponseParsedEMVTagsList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TssV2PostEmvTags200ResponseParsedEMVTagsList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.TotalTags == other.TotalTags ||
                    this.TotalTags != null &&
                    this.TotalTags.Equals(other.TotalTags)
                ) && 
                (
                    this.EmvTagBreakdownList == other.EmvTagBreakdownList ||
                    this.EmvTagBreakdownList != null &&
                    this.EmvTagBreakdownList.SequenceEqual(other.EmvTagBreakdownList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.TotalTags != null)
                    hash = hash * 59 + this.TotalTags.GetHashCode();
                if (this.EmvTagBreakdownList != null)
                    hash = hash * 59 + this.EmvTagBreakdownList.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
