/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2011PayoutInformation
    /// </summary>
    [DataContract]
    public partial class InlineResponse2011PayoutInformation :  IEquatable<InlineResponse2011PayoutInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2011PayoutInformation" /> class.
        /// </summary>
        /// <param name="PushFunds">PushFunds.</param>
        /// <param name="PullFunds">PullFunds.</param>
        /// <param name="GeoRestrictionIndicator">This field indicates if the recipient issuer can accept transactions from the originator country. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; .</param>
        public InlineResponse2011PayoutInformation(InlineResponse2011PayoutInformationPushFunds PushFunds = default(InlineResponse2011PayoutInformationPushFunds), InlineResponse2011PayoutInformationPullFunds PullFunds = default(InlineResponse2011PayoutInformationPullFunds), string GeoRestrictionIndicator = default(string))
        {
            this.PushFunds = PushFunds;
            this.PullFunds = PullFunds;
            this.GeoRestrictionIndicator = GeoRestrictionIndicator;
        }
        
        /// <summary>
        /// Gets or Sets PushFunds
        /// </summary>
        [DataMember(Name="pushFunds", EmitDefaultValue=false)]
        public InlineResponse2011PayoutInformationPushFunds PushFunds { get; set; }

        /// <summary>
        /// Gets or Sets PullFunds
        /// </summary>
        [DataMember(Name="pullFunds", EmitDefaultValue=false)]
        public InlineResponse2011PayoutInformationPullFunds PullFunds { get; set; }

        /// <summary>
        /// This field indicates if the recipient issuer can accept transactions from the originator country. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; 
        /// </summary>
        /// <value>This field indicates if the recipient issuer can accept transactions from the originator country. Possible values:   - &#x60;Y&#x60;   - &#x60;N&#x60; </value>
        [DataMember(Name="geoRestrictionIndicator", EmitDefaultValue=false)]
        public string GeoRestrictionIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2011PayoutInformation {\n");
            sb.Append("  PushFunds: ").Append(PushFunds).Append("\n");
            sb.Append("  PullFunds: ").Append(PullFunds).Append("\n");
            sb.Append("  GeoRestrictionIndicator: ").Append(GeoRestrictionIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2011PayoutInformation);
        }

        /// <summary>
        /// Returns true if InlineResponse2011PayoutInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2011PayoutInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2011PayoutInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PushFunds == other.PushFunds ||
                    this.PushFunds != null &&
                    this.PushFunds.Equals(other.PushFunds)
                ) && 
                (
                    this.PullFunds == other.PullFunds ||
                    this.PullFunds != null &&
                    this.PullFunds.Equals(other.PullFunds)
                ) && 
                (
                    this.GeoRestrictionIndicator == other.GeoRestrictionIndicator ||
                    this.GeoRestrictionIndicator != null &&
                    this.GeoRestrictionIndicator.Equals(other.GeoRestrictionIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PushFunds != null)
                    hash = hash * 59 + this.PushFunds.GetHashCode();
                if (this.PullFunds != null)
                    hash = hash * 59 + this.PullFunds.GetHashCode();
                if (this.GeoRestrictionIndicator != null)
                    hash = hash * 59 + this.GeoRestrictionIndicator.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
