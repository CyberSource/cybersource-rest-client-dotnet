/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Payment Processing connection used to support eCheck, aka ACH, payment methods. Example - \&quot;bofaach\&quot;
    /// </summary>
    [DataContract]
    public partial class ECheckConfigCommonProcessors :  IEquatable<ECheckConfigCommonProcessors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECheckConfigCommonProcessors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ECheckConfigCommonProcessors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ECheckConfigCommonProcessors" /> class.
        /// </summary>
        /// <param name="CompanyEntryDescription">*EXISTING* Company (merchant) defined description of entry to receive.  For e.g. PAYROLL, GAS BILL, INS PREM. This field is alphanumeric (required).</param>
        /// <param name="CompanyId">*EXISTING* company ID assigned to merchant by Acquiring bank. This field is alphanumeric.</param>
        /// <param name="BatchGroup">*EXISTING* Capture requests are grouped into a batch bound for your payment processor. The batch time can be identified by reading the last 2-digits as military time. E.g., &lt;processor&gt;_16 &#x3D; your processing cutoff is 4PM PST. Please note if you are in a different location you may then need to convert time zone as well..</param>
        /// <param name="EnableAccuityForAvs">*NEW* Accuity is the original validation service that checks the account/routing number for formatting issues. Used by WF and set to \&quot;Yes\&quot; unless told otherwise (default to true).</param>
        /// <param name="AccuityCheckType">*NEW*.</param>
        /// <param name="SetCompletedState">*Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES. (default to false).</param>
        public ECheckConfigCommonProcessors(string CompanyEntryDescription = default(string), string CompanyId = default(string), string BatchGroup = default(string), bool? EnableAccuityForAvs = true, Object AccuityCheckType = default(Object), bool? SetCompletedState = false)
        {
            // to ensure "CompanyEntryDescription" is required (not null)
            if (CompanyEntryDescription == null)
            {
                throw new InvalidDataException("CompanyEntryDescription is a required property for ECheckConfigCommonProcessors and cannot be null");
            }
            else
            {
                this.CompanyEntryDescription = CompanyEntryDescription;
            }
            this.CompanyId = CompanyId;
            this.BatchGroup = BatchGroup;
            // use default value if no "EnableAccuityForAvs" provided
            if (EnableAccuityForAvs == null)
            {
                this.EnableAccuityForAvs = true;
            }
            else
            {
                this.EnableAccuityForAvs = EnableAccuityForAvs;
            }
            this.AccuityCheckType = AccuityCheckType;
            // use default value if no "SetCompletedState" provided
            if (SetCompletedState == null)
            {
                this.SetCompletedState = false;
            }
            else
            {
                this.SetCompletedState = SetCompletedState;
            }
        }
        
        /// <summary>
        /// *EXISTING* Company (merchant) defined description of entry to receive.  For e.g. PAYROLL, GAS BILL, INS PREM. This field is alphanumeric
        /// </summary>
        /// <value>*EXISTING* Company (merchant) defined description of entry to receive.  For e.g. PAYROLL, GAS BILL, INS PREM. This field is alphanumeric</value>
        [DataMember(Name="companyEntryDescription", EmitDefaultValue=false)]
        public string CompanyEntryDescription { get; set; }

        /// <summary>
        /// *EXISTING* company ID assigned to merchant by Acquiring bank. This field is alphanumeric
        /// </summary>
        /// <value>*EXISTING* company ID assigned to merchant by Acquiring bank. This field is alphanumeric</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// *EXISTING* Capture requests are grouped into a batch bound for your payment processor. The batch time can be identified by reading the last 2-digits as military time. E.g., &lt;processor&gt;_16 &#x3D; your processing cutoff is 4PM PST. Please note if you are in a different location you may then need to convert time zone as well.
        /// </summary>
        /// <value>*EXISTING* Capture requests are grouped into a batch bound for your payment processor. The batch time can be identified by reading the last 2-digits as military time. E.g., &lt;processor&gt;_16 &#x3D; your processing cutoff is 4PM PST. Please note if you are in a different location you may then need to convert time zone as well.</value>
        [DataMember(Name="batchGroup", EmitDefaultValue=false)]
        public string BatchGroup { get; set; }

        /// <summary>
        /// *NEW* Accuity is the original validation service that checks the account/routing number for formatting issues. Used by WF and set to \&quot;Yes\&quot; unless told otherwise
        /// </summary>
        /// <value>*NEW* Accuity is the original validation service that checks the account/routing number for formatting issues. Used by WF and set to \&quot;Yes\&quot; unless told otherwise</value>
        [DataMember(Name="enableAccuityForAvs", EmitDefaultValue=false)]
        public bool? EnableAccuityForAvs { get; set; }

        /// <summary>
        /// *NEW*
        /// </summary>
        /// <value>*NEW*</value>
        [DataMember(Name="accuityCheckType", EmitDefaultValue=false)]
        public Object AccuityCheckType { get; set; }

        /// <summary>
        /// *Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES.
        /// </summary>
        /// <value>*Moved* When set to Yes we will automatically update transactions to a completed status X-number of days after the transaction comes through; if no failure notification is received. When set to No means we will not update transaction status in this manner. For BAMS/Bank of America merchants, they should be set to No unless we are explicitly asked to set a merchant to YES.</value>
        [DataMember(Name="setCompletedState", EmitDefaultValue=false)]
        public bool? SetCompletedState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECheckConfigCommonProcessors {\n");
            sb.Append("  CompanyEntryDescription: ").Append(CompanyEntryDescription).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  BatchGroup: ").Append(BatchGroup).Append("\n");
            sb.Append("  EnableAccuityForAvs: ").Append(EnableAccuityForAvs).Append("\n");
            sb.Append("  AccuityCheckType: ").Append(AccuityCheckType).Append("\n");
            sb.Append("  SetCompletedState: ").Append(SetCompletedState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ECheckConfigCommonProcessors);
        }

        /// <summary>
        /// Returns true if ECheckConfigCommonProcessors instances are equal
        /// </summary>
        /// <param name="other">Instance of ECheckConfigCommonProcessors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECheckConfigCommonProcessors other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyEntryDescription == other.CompanyEntryDescription ||
                    this.CompanyEntryDescription != null &&
                    this.CompanyEntryDescription.Equals(other.CompanyEntryDescription)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.BatchGroup == other.BatchGroup ||
                    this.BatchGroup != null &&
                    this.BatchGroup.Equals(other.BatchGroup)
                ) && 
                (
                    this.EnableAccuityForAvs == other.EnableAccuityForAvs ||
                    this.EnableAccuityForAvs != null &&
                    this.EnableAccuityForAvs.Equals(other.EnableAccuityForAvs)
                ) && 
                (
                    this.AccuityCheckType == other.AccuityCheckType ||
                    this.AccuityCheckType != null &&
                    this.AccuityCheckType.Equals(other.AccuityCheckType)
                ) && 
                (
                    this.SetCompletedState == other.SetCompletedState ||
                    this.SetCompletedState != null &&
                    this.SetCompletedState.Equals(other.SetCompletedState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyEntryDescription != null)
                    hash = hash * 59 + this.CompanyEntryDescription.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.BatchGroup != null)
                    hash = hash * 59 + this.BatchGroup.GetHashCode();
                if (this.EnableAccuityForAvs != null)
                    hash = hash * 59 + this.EnableAccuityForAvs.GetHashCode();
                if (this.AccuityCheckType != null)
                    hash = hash * 59 + this.AccuityCheckType.GetHashCode();
                if (this.SetCompletedState != null)
                    hash = hash * 59 + this.SetCompletedState.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
