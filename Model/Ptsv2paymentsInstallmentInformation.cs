/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsInstallmentInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsInstallmentInformation :  IEquatable<Ptsv2paymentsInstallmentInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsInstallmentInformation" /> class.
        /// </summary>
        /// <param name="Amount">Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. .</param>
        /// <param name="Frequency">Installment Frequency of the installment payments.  This field is supported only for CyberSource through VisaNet. Possible values: - B: Biweekly - M: Monthly - W: Weekly  See \&quot;Installment Payments,\&quot; page 127. .</param>
        /// <param name="PlanType">**American Express Direct, Cielo, and CyberSource Latin American Processing**\\ Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - 1: Merchant-funded installment plan - 2: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. See \&quot;Installment Payments,\&quot; page 136.  **CyberSource through VisaNet and American Express**\\ Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  See \&quot;Installment Payments,\&quot; page 125.  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  **CyberSource through VisaNet with Visa or Mastercard**\\ Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil See \&quot;Installment Payments on CyberSource through VisaNet,\&quot; page 142.  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant) .</param>
        /// <param name="Sequence">Installment number when making payments in installments. Used along with _totalCount_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  See \&quot;Installment Payments,\&quot; page 125.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 142, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 153.  **CyberSource through VisaNet**\\ When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. .</param>
        /// <param name="TotalAmount">Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. .</param>
        /// <param name="TotalCount">Total number of installments when making payments in installments. See \&quot;Installment Payments,\&quot; page 127.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 144, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 155.  **American Express Direct, Cielo, and Comercio Latino**\\ This value is the total number of installments you approved.  **CyberSource Latin American Processing in Brazil**\\ This value is the total number of installments that you approved. The default is 1.  **All Other Processors**\\ This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  **CyberSource through VisaNet**\\ For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. .</param>
        /// <param name="FirstInstallmentDate">Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. See Installment Payments on CyberSource through VisaNet.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment .</param>
        /// <param name="InvoiceData">Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification .</param>
        /// <param name="PaymentType">Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information .</param>
        /// <param name="EligibilityInquiry">Indicates whether the authorization request is a Crediario eligibility inquiry.  See Installment Payments on CyberSource through VisaNet.  Set the value for this field to &#x60;Crediario&#x60;.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet. .</param>
        public Ptsv2paymentsInstallmentInformation(string Amount = default(string), string Frequency = default(string), string PlanType = default(string), int? Sequence = default(int?), string TotalAmount = default(string), int? TotalCount = default(int?), string FirstInstallmentDate = default(string), string InvoiceData = default(string), string PaymentType = default(string), string EligibilityInquiry = default(string))
        {
            this.Amount = Amount;
            this.Frequency = Frequency;
            this.PlanType = PlanType;
            this.Sequence = Sequence;
            this.TotalAmount = TotalAmount;
            this.TotalCount = TotalCount;
            this.FirstInstallmentDate = FirstInstallmentDate;
            this.InvoiceData = InvoiceData;
            this.PaymentType = PaymentType;
            this.EligibilityInquiry = EligibilityInquiry;
        }
        
        /// <summary>
        /// Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. 
        /// </summary>
        /// <value>Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. </value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Installment Frequency of the installment payments.  This field is supported only for CyberSource through VisaNet. Possible values: - B: Biweekly - M: Monthly - W: Weekly  See \&quot;Installment Payments,\&quot; page 127. 
        /// </summary>
        /// <value>Installment Frequency of the installment payments.  This field is supported only for CyberSource through VisaNet. Possible values: - B: Biweekly - M: Monthly - W: Weekly  See \&quot;Installment Payments,\&quot; page 127. </value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public string Frequency { get; set; }

        /// <summary>
        /// **American Express Direct, Cielo, and CyberSource Latin American Processing**\\ Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - 1: Merchant-funded installment plan - 2: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. See \&quot;Installment Payments,\&quot; page 136.  **CyberSource through VisaNet and American Express**\\ Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  See \&quot;Installment Payments,\&quot; page 125.  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  **CyberSource through VisaNet with Visa or Mastercard**\\ Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil See \&quot;Installment Payments on CyberSource through VisaNet,\&quot; page 142.  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant) 
        /// </summary>
        /// <value>**American Express Direct, Cielo, and CyberSource Latin American Processing**\\ Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - 1: Merchant-funded installment plan - 2: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. See \&quot;Installment Payments,\&quot; page 136.  **CyberSource through VisaNet and American Express**\\ Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  See \&quot;Installment Payments,\&quot; page 125.  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  **CyberSource through VisaNet with Visa or Mastercard**\\ Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil See \&quot;Installment Payments on CyberSource through VisaNet,\&quot; page 142.  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant) </value>
        [DataMember(Name="planType", EmitDefaultValue=false)]
        public string PlanType { get; set; }

        /// <summary>
        /// Installment number when making payments in installments. Used along with _totalCount_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  See \&quot;Installment Payments,\&quot; page 125.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 142, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 153.  **CyberSource through VisaNet**\\ When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. 
        /// </summary>
        /// <value>Installment number when making payments in installments. Used along with _totalCount_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  See \&quot;Installment Payments,\&quot; page 125.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 142, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 153.  **CyberSource through VisaNet**\\ When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. </value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }

        /// <summary>
        /// Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. 
        /// </summary>
        /// <value>Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. </value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// Total number of installments when making payments in installments. See \&quot;Installment Payments,\&quot; page 127.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 144, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 155.  **American Express Direct, Cielo, and Comercio Latino**\\ This value is the total number of installments you approved.  **CyberSource Latin American Processing in Brazil**\\ This value is the total number of installments that you approved. The default is 1.  **All Other Processors**\\ This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  **CyberSource through VisaNet**\\ For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. 
        /// </summary>
        /// <value>Total number of installments when making payments in installments. See \&quot;Installment Payments,\&quot; page 127.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 144, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 155.  **American Express Direct, Cielo, and Comercio Latino**\\ This value is the total number of installments you approved.  **CyberSource Latin American Processing in Brazil**\\ This value is the total number of installments that you approved. The default is 1.  **All Other Processors**\\ This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  **CyberSource through VisaNet**\\ For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. </value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. See Installment Payments on CyberSource through VisaNet.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment 
        /// </summary>
        /// <value>Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. See Installment Payments on CyberSource through VisaNet.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment </value>
        [DataMember(Name="firstInstallmentDate", EmitDefaultValue=false)]
        public string FirstInstallmentDate { get; set; }

        /// <summary>
        /// Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification 
        /// </summary>
        /// <value>Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification </value>
        [DataMember(Name="invoiceData", EmitDefaultValue=false)]
        public string InvoiceData { get; set; }

        /// <summary>
        /// Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information 
        /// </summary>
        /// <value>Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information </value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Indicates whether the authorization request is a Crediario eligibility inquiry.  See Installment Payments on CyberSource through VisaNet.  Set the value for this field to &#x60;Crediario&#x60;.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet. 
        /// </summary>
        /// <value>Indicates whether the authorization request is a Crediario eligibility inquiry.  See Installment Payments on CyberSource through VisaNet.  Set the value for this field to &#x60;Crediario&#x60;.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet. </value>
        [DataMember(Name="eligibilityInquiry", EmitDefaultValue=false)]
        public string EligibilityInquiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsInstallmentInformation {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  PlanType: ").Append(PlanType).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  FirstInstallmentDate: ").Append(FirstInstallmentDate).Append("\n");
            sb.Append("  InvoiceData: ").Append(InvoiceData).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  EligibilityInquiry: ").Append(EligibilityInquiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsInstallmentInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsInstallmentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsInstallmentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsInstallmentInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Frequency == other.Frequency ||
                    this.Frequency != null &&
                    this.Frequency.Equals(other.Frequency)
                ) && 
                (
                    this.PlanType == other.PlanType ||
                    this.PlanType != null &&
                    this.PlanType.Equals(other.PlanType)
                ) && 
                (
                    this.Sequence == other.Sequence ||
                    this.Sequence != null &&
                    this.Sequence.Equals(other.Sequence)
                ) && 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.TotalCount == other.TotalCount ||
                    this.TotalCount != null &&
                    this.TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    this.FirstInstallmentDate == other.FirstInstallmentDate ||
                    this.FirstInstallmentDate != null &&
                    this.FirstInstallmentDate.Equals(other.FirstInstallmentDate)
                ) && 
                (
                    this.InvoiceData == other.InvoiceData ||
                    this.InvoiceData != null &&
                    this.InvoiceData.Equals(other.InvoiceData)
                ) && 
                (
                    this.PaymentType == other.PaymentType ||
                    this.PaymentType != null &&
                    this.PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    this.EligibilityInquiry == other.EligibilityInquiry ||
                    this.EligibilityInquiry != null &&
                    this.EligibilityInquiry.Equals(other.EligibilityInquiry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Frequency != null)
                    hash = hash * 59 + this.Frequency.GetHashCode();
                if (this.PlanType != null)
                    hash = hash * 59 + this.PlanType.GetHashCode();
                if (this.Sequence != null)
                    hash = hash * 59 + this.Sequence.GetHashCode();
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.TotalCount != null)
                    hash = hash * 59 + this.TotalCount.GetHashCode();
                if (this.FirstInstallmentDate != null)
                    hash = hash * 59 + this.FirstInstallmentDate.GetHashCode();
                if (this.InvoiceData != null)
                    hash = hash * 59 + this.InvoiceData.GetHashCode();
                if (this.PaymentType != null)
                    hash = hash * 59 + this.PaymentType.GetHashCode();
                if (this.EligibilityInquiry != null)
                    hash = hash * 59 + this.EligibilityInquiry.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Amount (string) maxLength
            if(this.Amount != null && this.Amount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be less than 12.", new [] { "Amount" });
            }

            // Frequency (string) maxLength
            if(this.Frequency != null && this.Frequency.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Frequency, length must be less than 1.", new [] { "Frequency" });
            }

            // PlanType (string) maxLength
            if(this.PlanType != null && this.PlanType.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlanType, length must be less than 1.", new [] { "PlanType" });
            }

            // Sequence (int?) maximum
            if(this.Sequence > (int?)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sequence, must be a value less than or equal to 99.", new [] { "Sequence" });
            }

            // TotalAmount (string) maxLength
            if(this.TotalAmount != null && this.TotalAmount.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalAmount, length must be less than 12.", new [] { "TotalAmount" });
            }

            // TotalCount (int?) maximum
            if(this.TotalCount > (int?)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalCount, must be a value less than or equal to 99.", new [] { "TotalCount" });
            }

            yield break;
        }
    }

}
