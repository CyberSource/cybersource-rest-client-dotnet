/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings
    /// </summary>
    [DataContract]
    public partial class ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings :  IEquatable<ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings" /> class.
        /// </summary>
        /// <param name="ReportMimeType">Report Format Valid values:   - application/xml   - text/csv .</param>
        /// <param name="ReportFrequency">Report Frequency Value Valid Values:   - DAILY   - WEEKLY   - MONTHLY   - ADHOC .</param>
        /// <param name="ReportName">Report Name.</param>
        /// <param name="Timezone">Time Zone.</param>
        /// <param name="StartTime">Start Time.</param>
        /// <param name="StartDay">Start Day.</param>
        /// <param name="ReportFilters">List of filters to apply.</param>
        /// <param name="ReportPreferences">ReportPreferences.</param>
        public ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings(string ReportMimeType = default(string), string ReportFrequency = default(string), string ReportName = default(string), string Timezone = default(string), string StartTime = default(string), int? StartDay = default(int?), Dictionary<string, List<string>> ReportFilters = default(Dictionary<string, List<string>>), Reportingv3reportsReportPreferences ReportPreferences = default(Reportingv3reportsReportPreferences))
        {
            this.ReportMimeType = ReportMimeType;
            this.ReportFrequency = ReportFrequency;
            this.ReportName = ReportName;
            this.Timezone = Timezone;
            this.StartTime = StartTime;
            this.StartDay = StartDay;
            this.ReportFilters = ReportFilters;
            this.ReportPreferences = ReportPreferences;
        }
        
        /// <summary>
        /// Report Format Valid values:   - application/xml   - text/csv 
        /// </summary>
        /// <value>Report Format Valid values:   - application/xml   - text/csv </value>
        [DataMember(Name="reportMimeType", EmitDefaultValue=false)]
        public string ReportMimeType { get; set; }

        /// <summary>
        /// Report Frequency Value Valid Values:   - DAILY   - WEEKLY   - MONTHLY   - ADHOC 
        /// </summary>
        /// <value>Report Frequency Value Valid Values:   - DAILY   - WEEKLY   - MONTHLY   - ADHOC </value>
        [DataMember(Name="reportFrequency", EmitDefaultValue=false)]
        public string ReportFrequency { get; set; }

        /// <summary>
        /// Report Name
        /// </summary>
        /// <value>Report Name</value>
        [DataMember(Name="reportName", EmitDefaultValue=false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Time Zone
        /// </summary>
        /// <value>Time Zone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Start Time
        /// </summary>
        /// <value>Start Time</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Start Day
        /// </summary>
        /// <value>Start Day</value>
        [DataMember(Name="startDay", EmitDefaultValue=false)]
        public int? StartDay { get; set; }

        /// <summary>
        /// List of filters to apply
        /// </summary>
        /// <value>List of filters to apply</value>
        [DataMember(Name="reportFilters", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> ReportFilters { get; set; }

        /// <summary>
        /// Gets or Sets ReportPreferences
        /// </summary>
        [DataMember(Name="reportPreferences", EmitDefaultValue=false)]
        public Reportingv3reportsReportPreferences ReportPreferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings {\n");
            if (ReportMimeType != null) sb.Append("  ReportMimeType: ").Append(ReportMimeType).Append("\n");
            if (ReportFrequency != null) sb.Append("  ReportFrequency: ").Append(ReportFrequency).Append("\n");
            if (ReportName != null) sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            if (Timezone != null) sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            if (StartTime != null) sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            if (StartDay != null) sb.Append("  StartDay: ").Append(StartDay).Append("\n");
            if (ReportFilters != null) sb.Append("  ReportFilters: ").Append(ReportFilters).Append("\n");
            if (ReportPreferences != null) sb.Append("  ReportPreferences: ").Append(ReportPreferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings);
        }

        /// <summary>
        /// Returns true if ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReportMimeType == other.ReportMimeType ||
                    this.ReportMimeType != null &&
                    this.ReportMimeType.Equals(other.ReportMimeType)
                ) && 
                (
                    this.ReportFrequency == other.ReportFrequency ||
                    this.ReportFrequency != null &&
                    this.ReportFrequency.Equals(other.ReportFrequency)
                ) && 
                (
                    this.ReportName == other.ReportName ||
                    this.ReportName != null &&
                    this.ReportName.Equals(other.ReportName)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.StartDay == other.StartDay ||
                    this.StartDay != null &&
                    this.StartDay.Equals(other.StartDay)
                ) && 
                (
                    this.ReportFilters == other.ReportFilters ||
                    this.ReportFilters != null &&
                    this.ReportFilters.SequenceEqual(other.ReportFilters)
                ) && 
                (
                    this.ReportPreferences == other.ReportPreferences ||
                    this.ReportPreferences != null &&
                    this.ReportPreferences.Equals(other.ReportPreferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReportMimeType != null)
                    hash = hash * 59 + this.ReportMimeType.GetHashCode();
                if (this.ReportFrequency != null)
                    hash = hash * 59 + this.ReportFrequency.GetHashCode();
                if (this.ReportName != null)
                    hash = hash * 59 + this.ReportName.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.StartDay != null)
                    hash = hash * 59 + this.StartDay.GetHashCode();
                if (this.ReportFilters != null)
                    hash = hash * 59 + this.ReportFilters.GetHashCode();
                if (this.ReportPreferences != null)
                    hash = hash * 59 + this.ReportPreferences.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
