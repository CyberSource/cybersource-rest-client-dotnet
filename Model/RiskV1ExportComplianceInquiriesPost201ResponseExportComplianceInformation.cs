/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation
    /// </summary>
    [DataContract]
    public partial class RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation :  IEquatable<RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation" /> class.
        /// </summary>
        /// <param name="IpCountryConfidence">Likelihood that the country associated with the customer’s IP address was identified correctly. Returns a value from 1–100, where 100 indicates the highest likelihood. If the country cannot be determined, the value is –1. .</param>
        /// <param name="InfoCodes">Returned when the Denied Parties List check (first two codes) or the export service (all others) would have declined the transaction. This field can contain one or more of these values: - &#x60;MATCH-DPC&#x60;: Denied Parties List match. - &#x60;UNV-DPC&#x60;: Denied Parties List unavailable. - &#x60;MATCH-BCO&#x60;: Billing country restricted. - &#x60;MATCH-EMCO&#x60;: Email country restricted. - &#x60;MATCH-HCO&#x60;: Host name country restricted. - &#x60;MATCH-IPCO&#x60;: IP country restricted. - &#x60;MATCH-SCO&#x60;: Shipping country restricted. .</param>
        /// <param name="WatchList">WatchList.</param>
        public RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation(int? IpCountryConfidence = default(int?), List<string> InfoCodes = default(List<string>), RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchList WatchList = default(RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchList))
        {
            this.IpCountryConfidence = IpCountryConfidence;
            this.InfoCodes = InfoCodes;
            this.WatchList = WatchList;
        }
        
        /// <summary>
        /// Likelihood that the country associated with the customer’s IP address was identified correctly. Returns a value from 1–100, where 100 indicates the highest likelihood. If the country cannot be determined, the value is –1. 
        /// </summary>
        /// <value>Likelihood that the country associated with the customer’s IP address was identified correctly. Returns a value from 1–100, where 100 indicates the highest likelihood. If the country cannot be determined, the value is –1. </value>
        [DataMember(Name="ipCountryConfidence", EmitDefaultValue=false)]
        public int? IpCountryConfidence { get; set; }

        /// <summary>
        /// Returned when the Denied Parties List check (first two codes) or the export service (all others) would have declined the transaction. This field can contain one or more of these values: - &#x60;MATCH-DPC&#x60;: Denied Parties List match. - &#x60;UNV-DPC&#x60;: Denied Parties List unavailable. - &#x60;MATCH-BCO&#x60;: Billing country restricted. - &#x60;MATCH-EMCO&#x60;: Email country restricted. - &#x60;MATCH-HCO&#x60;: Host name country restricted. - &#x60;MATCH-IPCO&#x60;: IP country restricted. - &#x60;MATCH-SCO&#x60;: Shipping country restricted. 
        /// </summary>
        /// <value>Returned when the Denied Parties List check (first two codes) or the export service (all others) would have declined the transaction. This field can contain one or more of these values: - &#x60;MATCH-DPC&#x60;: Denied Parties List match. - &#x60;UNV-DPC&#x60;: Denied Parties List unavailable. - &#x60;MATCH-BCO&#x60;: Billing country restricted. - &#x60;MATCH-EMCO&#x60;: Email country restricted. - &#x60;MATCH-HCO&#x60;: Host name country restricted. - &#x60;MATCH-IPCO&#x60;: IP country restricted. - &#x60;MATCH-SCO&#x60;: Shipping country restricted. </value>
        [DataMember(Name="infoCodes", EmitDefaultValue=false)]
        public List<string> InfoCodes { get; set; }

        /// <summary>
        /// Gets or Sets WatchList
        /// </summary>
        [DataMember(Name="watchList", EmitDefaultValue=false)]
        public RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchList WatchList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation {\n");
            sb.Append("  IpCountryConfidence: ").Append(IpCountryConfidence).Append("\n");
            sb.Append("  InfoCodes: ").Append(InfoCodes).Append("\n");
            sb.Append("  WatchList: ").Append(WatchList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation);
        }

        /// <summary>
        /// Returns true if RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IpCountryConfidence == other.IpCountryConfidence ||
                    this.IpCountryConfidence != null &&
                    this.IpCountryConfidence.Equals(other.IpCountryConfidence)
                ) && 
                (
                    this.InfoCodes == other.InfoCodes ||
                    this.InfoCodes != null &&
                    this.InfoCodes.SequenceEqual(other.InfoCodes)
                ) && 
                (
                    this.WatchList == other.WatchList ||
                    this.WatchList != null &&
                    this.WatchList.Equals(other.WatchList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IpCountryConfidence != null)
                    hash = hash * 59 + this.IpCountryConfidence.GetHashCode();
                if (this.InfoCodes != null)
                    hash = hash * 59 + this.InfoCodes.GetHashCode();
                if (this.WatchList != null)
                    hash = hash * 59 + this.WatchList.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IpCountryConfidence (int?) maximum
            if(this.IpCountryConfidence >= (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IpCountryConfidence, must be a value less than or equal to 100.", new [] { "IpCountryConfidence" });
            }

            // IpCountryConfidence (int?) minimum
            if(this.IpCountryConfidence <= (int?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IpCountryConfidence, must be a value greater than or equal to -1.", new [] { "IpCountryConfidence" });
            }

            yield break;
        }
    }

}
