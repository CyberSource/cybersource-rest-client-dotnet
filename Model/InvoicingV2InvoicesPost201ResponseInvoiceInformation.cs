/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Contains all of the invoice-specific fields, such as the invoice number and due date.
    /// </summary>
    [DataContract]
    public partial class InvoicingV2InvoicesPost201ResponseInvoiceInformation :  IEquatable<InvoicingV2InvoicesPost201ResponseInvoiceInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicingV2InvoicesPost201ResponseInvoiceInformation" /> class.
        /// </summary>
        /// <param name="InvoiceNumber">Invoice Number..</param>
        /// <param name="Description">The description included in the invoice..</param>
        /// <param name="DueDate">The invoice due date. This field is required for creating an invoice. Format: &#x60;YYYY-MM-DD&#x60;, where &#x60;YYYY&#x60; &#x3D; year, &#x60;MM&#x60; &#x3D; month, and &#x60;DD&#x60; &#x3D; day .</param>
        /// <param name="AllowPartialPayments">If set to &#x60;true&#x60;, the payer can make a partial invoice payment..</param>
        /// <param name="PaymentLink">Returns the payment link to an invoice when the invoice status is &#x60;SENT&#x60;, &#x60;CREATED&#x60;, &#x60;PARTIAL&#x60;, or &#x60;PAID&#x60;..</param>
        /// <param name="DeliveryMode">If set to &#x60;None&#x60;, the invoice is created, and its status is set to &#39;CREATED&#39;, but no email is sent.    Possible values:        - &#x60;None&#x60;   - &#x60;Email&#x60;  .</param>
        public InvoicingV2InvoicesPost201ResponseInvoiceInformation(string InvoiceNumber = default(string), string Description = default(string), DateTime? DueDate = default(DateTime?), bool? AllowPartialPayments = default(bool?), string PaymentLink = default(string), string DeliveryMode = default(string))
        {
            this.InvoiceNumber = InvoiceNumber;
            this.Description = Description;
            this.DueDate = DueDate;
            this.AllowPartialPayments = AllowPartialPayments;
            this.PaymentLink = PaymentLink;
            this.DeliveryMode = DeliveryMode;
        }
        
        /// <summary>
        /// Invoice Number.
        /// </summary>
        /// <value>Invoice Number.</value>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The description included in the invoice.
        /// </summary>
        /// <value>The description included in the invoice.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The invoice due date. This field is required for creating an invoice. Format: &#x60;YYYY-MM-DD&#x60;, where &#x60;YYYY&#x60; &#x3D; year, &#x60;MM&#x60; &#x3D; month, and &#x60;DD&#x60; &#x3D; day 
        /// </summary>
        /// <value>The invoice due date. This field is required for creating an invoice. Format: &#x60;YYYY-MM-DD&#x60;, where &#x60;YYYY&#x60; &#x3D; year, &#x60;MM&#x60; &#x3D; month, and &#x60;DD&#x60; &#x3D; day </value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// If set to &#x60;true&#x60;, the payer can make a partial invoice payment.
        /// </summary>
        /// <value>If set to &#x60;true&#x60;, the payer can make a partial invoice payment.</value>
        [DataMember(Name="allowPartialPayments", EmitDefaultValue=false)]
        public bool? AllowPartialPayments { get; set; }

        /// <summary>
        /// Returns the payment link to an invoice when the invoice status is &#x60;SENT&#x60;, &#x60;CREATED&#x60;, &#x60;PARTIAL&#x60;, or &#x60;PAID&#x60;.
        /// </summary>
        /// <value>Returns the payment link to an invoice when the invoice status is &#x60;SENT&#x60;, &#x60;CREATED&#x60;, &#x60;PARTIAL&#x60;, or &#x60;PAID&#x60;.</value>
        [DataMember(Name="paymentLink", EmitDefaultValue=false)]
        public string PaymentLink { get; set; }

        /// <summary>
        /// If set to &#x60;None&#x60;, the invoice is created, and its status is set to &#39;CREATED&#39;, but no email is sent.    Possible values:        - &#x60;None&#x60;   - &#x60;Email&#x60;  
        /// </summary>
        /// <value>If set to &#x60;None&#x60;, the invoice is created, and its status is set to &#39;CREATED&#39;, but no email is sent.    Possible values:        - &#x60;None&#x60;   - &#x60;Email&#x60;  </value>
        [DataMember(Name="deliveryMode", EmitDefaultValue=false)]
        public string DeliveryMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoicingV2InvoicesPost201ResponseInvoiceInformation {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  AllowPartialPayments: ").Append(AllowPartialPayments).Append("\n");
            sb.Append("  PaymentLink: ").Append(PaymentLink).Append("\n");
            sb.Append("  DeliveryMode: ").Append(DeliveryMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InvoicingV2InvoicesPost201ResponseInvoiceInformation);
        }

        /// <summary>
        /// Returns true if InvoicingV2InvoicesPost201ResponseInvoiceInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoicingV2InvoicesPost201ResponseInvoiceInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoicingV2InvoicesPost201ResponseInvoiceInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DueDate == other.DueDate ||
                    this.DueDate != null &&
                    this.DueDate.Equals(other.DueDate)
                ) && 
                (
                    this.AllowPartialPayments == other.AllowPartialPayments ||
                    this.AllowPartialPayments != null &&
                    this.AllowPartialPayments.Equals(other.AllowPartialPayments)
                ) && 
                (
                    this.PaymentLink == other.PaymentLink ||
                    this.PaymentLink != null &&
                    this.PaymentLink.Equals(other.PaymentLink)
                ) && 
                (
                    this.DeliveryMode == other.DeliveryMode ||
                    this.DeliveryMode != null &&
                    this.DeliveryMode.Equals(other.DeliveryMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DueDate != null)
                    hash = hash * 59 + this.DueDate.GetHashCode();
                if (this.AllowPartialPayments != null)
                    hash = hash * 59 + this.AllowPartialPayments.GetHashCode();
                if (this.PaymentLink != null)
                    hash = hash * 59 + this.PaymentLink.GetHashCode();
                if (this.DeliveryMode != null)
                    hash = hash * 59 + this.DeliveryMode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
