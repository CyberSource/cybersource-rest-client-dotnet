/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation
    /// </summary>
    [DataContract]
    public partial class PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation :  IEquatable<PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation" /> class.
        /// </summary>
        /// <param name="Id">Identifier for the mandate. .</param>
        /// <param name="DateSigned">Date the mandate has been signed.  Format YYYYMMdd.</param>
        /// <param name="DateCreated">Date the mandate has been created.  Format YYYYMMdd.</param>
        /// <param name="DateRevoked">Date the mandate has been revoked.  Format YYYYMMdd.</param>
        /// <param name="EncodedHtml">Base64 encoded html string.</param>
        /// <param name="EncodedHtmlPopup">Base64 encoded popup html string.</param>
        /// <param name="Url">URL for redirecting the customer for creating the mandate. .</param>
        /// <param name="TransactionId">The Billing Agreement ID returned by processor (PayPal). .</param>
        public PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation(string Id = default(string), string DateSigned = default(string), string DateCreated = default(string), string DateRevoked = default(string), string EncodedHtml = default(string), string EncodedHtmlPopup = default(string), string Url = default(string), string TransactionId = default(string))
        {
            this.Id = Id;
            this.DateSigned = DateSigned;
            this.DateCreated = DateCreated;
            this.DateRevoked = DateRevoked;
            this.EncodedHtml = EncodedHtml;
            this.EncodedHtmlPopup = EncodedHtmlPopup;
            this.Url = Url;
            this.TransactionId = TransactionId;
        }
        
        /// <summary>
        /// Identifier for the mandate. 
        /// </summary>
        /// <value>Identifier for the mandate. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Date the mandate has been signed.  Format YYYYMMdd
        /// </summary>
        /// <value>Date the mandate has been signed.  Format YYYYMMdd</value>
        [DataMember(Name="dateSigned", EmitDefaultValue=false)]
        public string DateSigned { get; set; }

        /// <summary>
        /// Date the mandate has been created.  Format YYYYMMdd
        /// </summary>
        /// <value>Date the mandate has been created.  Format YYYYMMdd</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Date the mandate has been revoked.  Format YYYYMMdd
        /// </summary>
        /// <value>Date the mandate has been revoked.  Format YYYYMMdd</value>
        [DataMember(Name="dateRevoked", EmitDefaultValue=false)]
        public string DateRevoked { get; set; }

        /// <summary>
        /// Base64 encoded html string
        /// </summary>
        /// <value>Base64 encoded html string</value>
        [DataMember(Name="encodedHtml", EmitDefaultValue=false)]
        public string EncodedHtml { get; set; }

        /// <summary>
        /// Base64 encoded popup html string
        /// </summary>
        /// <value>Base64 encoded popup html string</value>
        [DataMember(Name="encodedHtmlPopup", EmitDefaultValue=false)]
        public string EncodedHtmlPopup { get; set; }

        /// <summary>
        /// URL for redirecting the customer for creating the mandate. 
        /// </summary>
        /// <value>URL for redirecting the customer for creating the mandate. </value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The Billing Agreement ID returned by processor (PayPal). 
        /// </summary>
        /// <value>The Billing Agreement ID returned by processor (PayPal). </value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateSigned: ").Append(DateSigned).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateRevoked: ").Append(DateRevoked).Append("\n");
            sb.Append("  EncodedHtml: ").Append(EncodedHtml).Append("\n");
            sb.Append("  EncodedHtmlPopup: ").Append(EncodedHtmlPopup).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation);
        }

        /// <summary>
        /// Returns true if PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.DateSigned == other.DateSigned ||
                    this.DateSigned != null &&
                    this.DateSigned.Equals(other.DateSigned)
                ) && 
                (
                    this.DateCreated == other.DateCreated ||
                    this.DateCreated != null &&
                    this.DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    this.DateRevoked == other.DateRevoked ||
                    this.DateRevoked != null &&
                    this.DateRevoked.Equals(other.DateRevoked)
                ) && 
                (
                    this.EncodedHtml == other.EncodedHtml ||
                    this.EncodedHtml != null &&
                    this.EncodedHtml.Equals(other.EncodedHtml)
                ) && 
                (
                    this.EncodedHtmlPopup == other.EncodedHtmlPopup ||
                    this.EncodedHtmlPopup != null &&
                    this.EncodedHtmlPopup.Equals(other.EncodedHtmlPopup)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.DateSigned != null)
                    hash = hash * 59 + this.DateSigned.GetHashCode();
                if (this.DateCreated != null)
                    hash = hash * 59 + this.DateCreated.GetHashCode();
                if (this.DateRevoked != null)
                    hash = hash * 59 + this.DateRevoked.GetHashCode();
                if (this.EncodedHtml != null)
                    hash = hash * 59 + this.EncodedHtml.GetHashCode();
                if (this.EncodedHtmlPopup != null)
                    hash = hash * 59 + this.EncodedHtmlPopup.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
