/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Additional configuration for the payment method. 
    /// </summary>
    [DataContract]
    public partial class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations :  IEquatable<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations" /> class.
        /// </summary>
        /// <param name="Key">Key for the additional configuration. This is used to identify the specific setting. example: serviceProviderId .</param>
        /// <param name="Value">Value for the additional configuration. This is the actual setting being configured. example: svcId .</param>
        public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations(string Key = default(string), string Value = default(string))
        {
            this.Key = Key;
            this.Value = Value;
        }
        
        /// <summary>
        /// Key for the additional configuration. This is used to identify the specific setting. example: serviceProviderId 
        /// </summary>
        /// <value>Key for the additional configuration. This is used to identify the specific setting. example: serviceProviderId </value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Value for the additional configuration. This is the actual setting being configured. example: svcId 
        /// </summary>
        /// <value>Value for the additional configuration. This is the actual setting being configured. example: svcId </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations {\n");
            if (Key != null) sb.Append("  Key: ").Append(Key).Append("\n");
            if (Value != null) sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations);
        }

        /// <summary>
        /// Returns true if PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
