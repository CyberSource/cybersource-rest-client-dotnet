/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TokenizedcardRequest
    /// </summary>
    [DataContract]
    public partial class TokenizedcardRequest :  IEquatable<TokenizedcardRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenizedcardRequest" /> class.
        /// </summary>
        /// <param name="Links">Links.</param>
        /// <param name="AccountReferenceId">An identifier provided by the issuer for the account. .</param>
        /// <param name="ConsumerId">Identifier of the consumer within the wallet. Maximum 24 characters for VTS..</param>
        /// <param name="CreateInstrumentIdentifier">Specifies whether the InstrumentId should be created (true) or not (false). Possible Values: - &#x60;true&#x60;: The InstrumentId should be created. - &#x60;false&#x60;: The InstrumentId should be created. .</param>
        /// <param name="Source">Source of the payment instrument. Possible Values: - ONFILE - TOKEN - ISSUER .</param>
        /// <param name="Type">The type of card (Card Network). Possible Values: - visa - mastercard - americanexpress .</param>
        /// <param name="Card">Card.</param>
        /// <param name="Passcode">Passcode.</param>
        /// <param name="Metadata">Metadata.</param>
        public TokenizedcardRequest(Tmsv2TokenizedCardLinks Links = default(Tmsv2TokenizedCardLinks), string AccountReferenceId = default(string), string ConsumerId = default(string), bool? CreateInstrumentIdentifier = default(bool?), string Source = default(string), string Type = default(string), Tmsv2TokenizedCardCard Card = default(Tmsv2TokenizedCardCard), Tmsv2TokenizedCardPasscode Passcode = default(Tmsv2TokenizedCardPasscode), Tmsv2TokenizedCardMetadata Metadata = default(Tmsv2TokenizedCardMetadata))
        {
            this.Links = Links;
            this.AccountReferenceId = AccountReferenceId;
            this.ConsumerId = ConsumerId;
            this.CreateInstrumentIdentifier = CreateInstrumentIdentifier;
            this.Source = Source;
            this.Type = Type;
            this.Card = Card;
            this.Passcode = Passcode;
            this.Metadata = Metadata;
        }
        
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardLinks Links { get; set; }

        /// <summary>
        /// The Id of the Tokenized Card. 
        /// </summary>
        /// <value>The Id of the Tokenized Card. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The type. Possible Values: - tokenizedCard 
        /// </summary>
        /// <value>The type. Possible Values: - tokenizedCard </value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; private set; }

        /// <summary>
        /// An identifier provided by the issuer for the account. 
        /// </summary>
        /// <value>An identifier provided by the issuer for the account. </value>
        [DataMember(Name="accountReferenceId", EmitDefaultValue=false)]
        public string AccountReferenceId { get; set; }

        /// <summary>
        /// Identifier of the consumer within the wallet. Maximum 24 characters for VTS.
        /// </summary>
        /// <value>Identifier of the consumer within the wallet. Maximum 24 characters for VTS.</value>
        [DataMember(Name="consumerId", EmitDefaultValue=false)]
        public string ConsumerId { get; set; }

        /// <summary>
        /// Specifies whether the InstrumentId should be created (true) or not (false). Possible Values: - &#x60;true&#x60;: The InstrumentId should be created. - &#x60;false&#x60;: The InstrumentId should be created. 
        /// </summary>
        /// <value>Specifies whether the InstrumentId should be created (true) or not (false). Possible Values: - &#x60;true&#x60;: The InstrumentId should be created. - &#x60;false&#x60;: The InstrumentId should be created. </value>
        [DataMember(Name="createInstrumentIdentifier", EmitDefaultValue=false)]
        public bool? CreateInstrumentIdentifier { get; set; }

        /// <summary>
        /// Source of the payment instrument. Possible Values: - ONFILE - TOKEN - ISSUER 
        /// </summary>
        /// <value>Source of the payment instrument. Possible Values: - ONFILE - TOKEN - ISSUER </value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// State of the network token or network token provision. Possible Values:   ACTIVE : Network token is active.   SUSPENDED : Network token is suspended. This state can change back to ACTIVE.   DELETED : This is a final state for a network token instance.   UNPROVISIONED : A previous network token. 
        /// </summary>
        /// <value>State of the network token or network token provision. Possible Values:   ACTIVE : Network token is active.   SUSPENDED : Network token is suspended. This state can change back to ACTIVE.   DELETED : This is a final state for a network token instance.   UNPROVISIONED : A previous network token. </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; private set; }

        /// <summary>
        /// Issuers state for the network token Possible Values: - INVALID_REQUEST : The network token provision request contained invalid data. - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified. - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization. - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization. - DECLINED : Card can currently not be used with issuer for tokenization. - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out. - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration. 
        /// </summary>
        /// <value>Issuers state for the network token Possible Values: - INVALID_REQUEST : The network token provision request contained invalid data. - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified. - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization. - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization. - DECLINED : Card can currently not be used with issuer for tokenization. - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out. - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration. </value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; private set; }

        /// <summary>
        /// The token requestor&#39;s network token for the provided PAN and consumer Id, if available. 
        /// </summary>
        /// <value>The token requestor&#39;s network token for the provided PAN and consumer Id, if available. </value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; private set; }

        /// <summary>
        /// Two-digit month in which the network token expires. Format: &#x60;MM&#x60;. Possible Values: &#x60;01&#x60; through &#x60;12&#x60;. 
        /// </summary>
        /// <value>Two-digit month in which the network token expires. Format: &#x60;MM&#x60;. Possible Values: &#x60;01&#x60; through &#x60;12&#x60;. </value>
        [DataMember(Name="expirationMonth", EmitDefaultValue=false)]
        public string ExpirationMonth { get; private set; }

        /// <summary>
        /// Four-digit year in which the network token expires. Format: &#x60;YYYY&#x60;. 
        /// </summary>
        /// <value>Four-digit year in which the network token expires. Format: &#x60;YYYY&#x60;. </value>
        [DataMember(Name="expirationYear", EmitDefaultValue=false)]
        public string ExpirationYear { get; private set; }

        /// <summary>
        /// The type of card (Card Network). Possible Values: - visa - mastercard - americanexpress 
        /// </summary>
        /// <value>The type of card (Card Network). Possible Values: - visa - mastercard - americanexpress </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Value generated by the card association to be used alongside the network token for processing a payment. 
        /// </summary>
        /// <value>Value generated by the card association to be used alongside the network token for processing a payment. </value>
        [DataMember(Name="cryptogram", EmitDefaultValue=false)]
        public string Cryptogram { get; private set; }

        /// <summary>
        /// 4-digit number generated by the card association to be used alogside the network token for processing a payment. Only supported for Amex and SCOF. 
        /// </summary>
        /// <value>4-digit number generated by the card association to be used alogside the network token for processing a payment. Only supported for Amex and SCOF. </value>
        [DataMember(Name="securityCode", EmitDefaultValue=false)]
        public string SecurityCode { get; private set; }

        /// <summary>
        /// Raw Electronic Commerce Indicator provided by the card association with the result of the cardholder authentication. 
        /// </summary>
        /// <value>Raw Electronic Commerce Indicator provided by the card association with the result of the cardholder authentication. </value>
        [DataMember(Name="eci", EmitDefaultValue=false)]
        public string Eci { get; private set; }

        /// <summary>
        /// 11-digit identifier that uniquely identifies the Token Requestor. 
        /// </summary>
        /// <value>11-digit identifier that uniquely identifies the Token Requestor. </value>
        [DataMember(Name="requestorId", EmitDefaultValue=false)]
        public string RequestorId { get; private set; }

        /// <summary>
        /// Unique id to identify this PAN/ enrollment. 
        /// </summary>
        /// <value>Unique id to identify this PAN/ enrollment. </value>
        [DataMember(Name="enrollmentId", EmitDefaultValue=false)]
        public string EnrollmentId { get; private set; }

        /// <summary>
        /// Unique ID for netwrok token. 
        /// </summary>
        /// <value>Unique ID for netwrok token. </value>
        [DataMember(Name="tokenReferenceId", EmitDefaultValue=false)]
        public string TokenReferenceId { get; private set; }

        /// <summary>
        /// Payment account reference. 
        /// </summary>
        /// <value>Payment account reference. </value>
        [DataMember(Name="paymentAccountReference", EmitDefaultValue=false)]
        public string PaymentAccountReference { get; private set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardCard Card { get; set; }

        /// <summary>
        /// Gets or Sets Passcode
        /// </summary>
        [DataMember(Name="passcode", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardPasscode Passcode { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Tmsv2TokenizedCardMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenizedcardRequest {\n");
            if (Links != null) sb.Append("  Links: ").Append(Links).Append("\n");
            if (Id != null) sb.Append("  Id: ").Append(Id).Append("\n");
            if (Object != null) sb.Append("  Object: ").Append(Object).Append("\n");
            if (AccountReferenceId != null) sb.Append("  AccountReferenceId: ").Append(AccountReferenceId).Append("\n");
            if (ConsumerId != null) sb.Append("  ConsumerId: ").Append(ConsumerId).Append("\n");
            if (CreateInstrumentIdentifier != null) sb.Append("  CreateInstrumentIdentifier: ").Append(CreateInstrumentIdentifier).Append("\n");
            if (Source != null) sb.Append("  Source: ").Append(Source).Append("\n");
            if (State != null) sb.Append("  State: ").Append(State).Append("\n");
            if (Reason != null) sb.Append("  Reason: ").Append(Reason).Append("\n");
            if (Number != null) sb.Append("  Number: ").Append(Number).Append("\n");
            if (ExpirationMonth != null) sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            if (ExpirationYear != null) sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (Cryptogram != null) sb.Append("  Cryptogram: ").Append(Cryptogram).Append("\n");
            if (SecurityCode != null) sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            if (Eci != null) sb.Append("  Eci: ").Append(Eci).Append("\n");
            if (RequestorId != null) sb.Append("  RequestorId: ").Append(RequestorId).Append("\n");
            if (EnrollmentId != null) sb.Append("  EnrollmentId: ").Append(EnrollmentId).Append("\n");
            if (TokenReferenceId != null) sb.Append("  TokenReferenceId: ").Append(TokenReferenceId).Append("\n");
            if (PaymentAccountReference != null) sb.Append("  PaymentAccountReference: ").Append(PaymentAccountReference).Append("\n");
            if (Card != null) sb.Append("  Card: ").Append(Card).Append("\n");
            if (Passcode != null) sb.Append("  Passcode: ").Append(Passcode).Append("\n");
            if (Metadata != null) sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TokenizedcardRequest);
        }

        /// <summary>
        /// Returns true if TokenizedcardRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of TokenizedcardRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenizedcardRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Object == other.Object ||
                    this.Object != null &&
                    this.Object.Equals(other.Object)
                ) && 
                (
                    this.AccountReferenceId == other.AccountReferenceId ||
                    this.AccountReferenceId != null &&
                    this.AccountReferenceId.Equals(other.AccountReferenceId)
                ) && 
                (
                    this.ConsumerId == other.ConsumerId ||
                    this.ConsumerId != null &&
                    this.ConsumerId.Equals(other.ConsumerId)
                ) && 
                (
                    this.CreateInstrumentIdentifier == other.CreateInstrumentIdentifier ||
                    this.CreateInstrumentIdentifier != null &&
                    this.CreateInstrumentIdentifier.Equals(other.CreateInstrumentIdentifier)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.ExpirationMonth == other.ExpirationMonth ||
                    this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    this.ExpirationYear == other.ExpirationYear ||
                    this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(other.ExpirationYear)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Cryptogram == other.Cryptogram ||
                    this.Cryptogram != null &&
                    this.Cryptogram.Equals(other.Cryptogram)
                ) && 
                (
                    this.SecurityCode == other.SecurityCode ||
                    this.SecurityCode != null &&
                    this.SecurityCode.Equals(other.SecurityCode)
                ) && 
                (
                    this.Eci == other.Eci ||
                    this.Eci != null &&
                    this.Eci.Equals(other.Eci)
                ) && 
                (
                    this.RequestorId == other.RequestorId ||
                    this.RequestorId != null &&
                    this.RequestorId.Equals(other.RequestorId)
                ) && 
                (
                    this.EnrollmentId == other.EnrollmentId ||
                    this.EnrollmentId != null &&
                    this.EnrollmentId.Equals(other.EnrollmentId)
                ) && 
                (
                    this.TokenReferenceId == other.TokenReferenceId ||
                    this.TokenReferenceId != null &&
                    this.TokenReferenceId.Equals(other.TokenReferenceId)
                ) && 
                (
                    this.PaymentAccountReference == other.PaymentAccountReference ||
                    this.PaymentAccountReference != null &&
                    this.PaymentAccountReference.Equals(other.PaymentAccountReference)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.Passcode == other.Passcode ||
                    this.Passcode != null &&
                    this.Passcode.Equals(other.Passcode)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Object != null)
                    hash = hash * 59 + this.Object.GetHashCode();
                if (this.AccountReferenceId != null)
                    hash = hash * 59 + this.AccountReferenceId.GetHashCode();
                if (this.ConsumerId != null)
                    hash = hash * 59 + this.ConsumerId.GetHashCode();
                if (this.CreateInstrumentIdentifier != null)
                    hash = hash * 59 + this.CreateInstrumentIdentifier.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.ExpirationMonth != null)
                    hash = hash * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hash = hash * 59 + this.ExpirationYear.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Cryptogram != null)
                    hash = hash * 59 + this.Cryptogram.GetHashCode();
                if (this.SecurityCode != null)
                    hash = hash * 59 + this.SecurityCode.GetHashCode();
                if (this.Eci != null)
                    hash = hash * 59 + this.Eci.GetHashCode();
                if (this.RequestorId != null)
                    hash = hash * 59 + this.RequestorId.GetHashCode();
                if (this.EnrollmentId != null)
                    hash = hash * 59 + this.EnrollmentId.GetHashCode();
                if (this.TokenReferenceId != null)
                    hash = hash * 59 + this.TokenReferenceId.GetHashCode();
                if (this.PaymentAccountReference != null)
                    hash = hash * 59 + this.PaymentAccountReference.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.Passcode != null)
                    hash = hash * 59 + this.Passcode.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
