/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Boardingv1registrationsOrganizationInformationOwners
    /// </summary>
    [DataContract]
    public partial class Boardingv1registrationsOrganizationInformationOwners :  IEquatable<Boardingv1registrationsOrganizationInformationOwners>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationOwners" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Boardingv1registrationsOrganizationInformationOwners() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationOwners" /> class.
        /// </summary>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="MiddleName">MiddleName.</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="BirthDate">&#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016  (required).</param>
        /// <param name="IsPrimary">Determines whether the owner is the Primary owner of the organization (required).</param>
        /// <param name="Ssn">Social Security Number.</param>
        /// <param name="PassportNumber">Passport number.</param>
        /// <param name="PassportCountry">PassportCountry.</param>
        /// <param name="JobTitle">JobTitle (required).</param>
        /// <param name="HasSignificantResponsability">Determines whether owner has significant responsibility to control, manage or direct the company (required).</param>
        /// <param name="OwnershipPercentage">Determines the percentage of ownership this owner has. For the primary owner the percentage can be from 0-100; for other owners the percentage can be from 25-100 and the sum of ownership accross owners cannot exceed 100 (required).</param>
        /// <param name="PhoneNumber">PhoneNumber (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="Address">Address (required).</param>
        public Boardingv1registrationsOrganizationInformationOwners(string FirstName = default(string), string MiddleName = default(string), string LastName = default(string), DateTime? BirthDate = default(DateTime?), bool? IsPrimary = default(bool?), string Ssn = default(string), string PassportNumber = default(string), string PassportCountry = default(string), string JobTitle = default(string), bool? HasSignificantResponsability = default(bool?), decimal? OwnershipPercentage = default(decimal?), string PhoneNumber = default(string), string Email = default(string), Boardingv1registrationsOrganizationInformationBusinessInformationAddress Address = default(Boardingv1registrationsOrganizationInformationBusinessInformationAddress))
        {
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "BirthDate" is required (not null)
            if (BirthDate == null)
            {
                throw new InvalidDataException("BirthDate is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.BirthDate = BirthDate;
            }
            // to ensure "IsPrimary" is required (not null)
            if (IsPrimary == null)
            {
                throw new InvalidDataException("IsPrimary is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.IsPrimary = IsPrimary;
            }
            // to ensure "JobTitle" is required (not null)
            if (JobTitle == null)
            {
                throw new InvalidDataException("JobTitle is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.JobTitle = JobTitle;
            }
            // to ensure "HasSignificantResponsability" is required (not null)
            if (HasSignificantResponsability == null)
            {
                throw new InvalidDataException("HasSignificantResponsability is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.HasSignificantResponsability = HasSignificantResponsability;
            }
            // to ensure "OwnershipPercentage" is required (not null)
            if (OwnershipPercentage == null)
            {
                throw new InvalidDataException("OwnershipPercentage is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.OwnershipPercentage = OwnershipPercentage;
            }
            // to ensure "PhoneNumber" is required (not null)
            if (PhoneNumber == null)
            {
                throw new InvalidDataException("PhoneNumber is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.PhoneNumber = PhoneNumber;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Address" is required (not null)
            if (Address == null)
            {
                throw new InvalidDataException("Address is a required property for Boardingv1registrationsOrganizationInformationOwners and cannot be null");
            }
            else
            {
                this.Address = Address;
            }
            this.MiddleName = MiddleName;
            this.Ssn = Ssn;
            this.PassportNumber = PassportNumber;
            this.PassportCountry = PassportCountry;
        }
        
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// &#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 
        /// </summary>
        /// <value>&#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 </value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Determines whether the owner is the Primary owner of the organization
        /// </summary>
        /// <value>Determines whether the owner is the Primary owner of the organization</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Social Security Number
        /// </summary>
        /// <value>Social Security Number</value>
        [DataMember(Name="ssn", EmitDefaultValue=false)]
        public string Ssn { get; set; }

        /// <summary>
        /// Passport number
        /// </summary>
        /// <value>Passport number</value>
        [DataMember(Name="passportNumber", EmitDefaultValue=false)]
        public string PassportNumber { get; set; }

        /// <summary>
        /// Gets or Sets PassportCountry
        /// </summary>
        [DataMember(Name="passportCountry", EmitDefaultValue=false)]
        public string PassportCountry { get; set; }

        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Determines whether owner has significant responsibility to control, manage or direct the company
        /// </summary>
        /// <value>Determines whether owner has significant responsibility to control, manage or direct the company</value>
        [DataMember(Name="hasSignificantResponsability", EmitDefaultValue=false)]
        public bool? HasSignificantResponsability { get; set; }

        /// <summary>
        /// Determines the percentage of ownership this owner has. For the primary owner the percentage can be from 0-100; for other owners the percentage can be from 25-100 and the sum of ownership accross owners cannot exceed 100
        /// </summary>
        /// <value>Determines the percentage of ownership this owner has. For the primary owner the percentage can be from 0-100; for other owners the percentage can be from 25-100 and the sum of ownership accross owners cannot exceed 100</value>
        [DataMember(Name="ownershipPercentage", EmitDefaultValue=false)]
        public decimal? OwnershipPercentage { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationAddress Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Boardingv1registrationsOrganizationInformationOwners {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  Ssn: ").Append(Ssn).Append("\n");
            sb.Append("  PassportNumber: ").Append(PassportNumber).Append("\n");
            sb.Append("  PassportCountry: ").Append(PassportCountry).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  HasSignificantResponsability: ").Append(HasSignificantResponsability).Append("\n");
            sb.Append("  OwnershipPercentage: ").Append(OwnershipPercentage).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Boardingv1registrationsOrganizationInformationOwners);
        }

        /// <summary>
        /// Returns true if Boardingv1registrationsOrganizationInformationOwners instances are equal
        /// </summary>
        /// <param name="other">Instance of Boardingv1registrationsOrganizationInformationOwners to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Boardingv1registrationsOrganizationInformationOwners other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.BirthDate == other.BirthDate ||
                    this.BirthDate != null &&
                    this.BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    this.IsPrimary == other.IsPrimary ||
                    this.IsPrimary != null &&
                    this.IsPrimary.Equals(other.IsPrimary)
                ) && 
                (
                    this.Ssn == other.Ssn ||
                    this.Ssn != null &&
                    this.Ssn.Equals(other.Ssn)
                ) && 
                (
                    this.PassportNumber == other.PassportNumber ||
                    this.PassportNumber != null &&
                    this.PassportNumber.Equals(other.PassportNumber)
                ) && 
                (
                    this.PassportCountry == other.PassportCountry ||
                    this.PassportCountry != null &&
                    this.PassportCountry.Equals(other.PassportCountry)
                ) && 
                (
                    this.JobTitle == other.JobTitle ||
                    this.JobTitle != null &&
                    this.JobTitle.Equals(other.JobTitle)
                ) && 
                (
                    this.HasSignificantResponsability == other.HasSignificantResponsability ||
                    this.HasSignificantResponsability != null &&
                    this.HasSignificantResponsability.Equals(other.HasSignificantResponsability)
                ) && 
                (
                    this.OwnershipPercentage == other.OwnershipPercentage ||
                    this.OwnershipPercentage != null &&
                    this.OwnershipPercentage.Equals(other.OwnershipPercentage)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.BirthDate != null)
                    hash = hash * 59 + this.BirthDate.GetHashCode();
                if (this.IsPrimary != null)
                    hash = hash * 59 + this.IsPrimary.GetHashCode();
                if (this.Ssn != null)
                    hash = hash * 59 + this.Ssn.GetHashCode();
                if (this.PassportNumber != null)
                    hash = hash * 59 + this.PassportNumber.GetHashCode();
                if (this.PassportCountry != null)
                    hash = hash * 59 + this.PassportCountry.GetHashCode();
                if (this.JobTitle != null)
                    hash = hash * 59 + this.JobTitle.GetHashCode();
                if (this.HasSignificantResponsability != null)
                    hash = hash * 59 + this.HasSignificantResponsability.GetHashCode();
                if (this.OwnershipPercentage != null)
                    hash = hash * 59 + this.OwnershipPercentage.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) pattern
            Regex regexFirstName = new Regex(@"[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿa-zA-Z().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$", RegexOptions.CultureInvariant);
            if (false == regexFirstName.Match(this.FirstName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, must match a pattern of " + regexFirstName, new [] { "FirstName" });
            }

            // MiddleName (string) pattern
            Regex regexMiddleName = new Regex(@"[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿa-zA-Z().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$", RegexOptions.CultureInvariant);
            if (false == regexMiddleName.Match(this.MiddleName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, must match a pattern of " + regexMiddleName, new [] { "MiddleName" });
            }

            // LastName (string) pattern
            Regex regexLastName = new Regex(@"[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿa-zA-Z().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$", RegexOptions.CultureInvariant);
            if (false == regexLastName.Match(this.LastName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, must match a pattern of " + regexLastName, new [] { "LastName" });
            }

            // Ssn (string) pattern
            Regex regexSsn = new Regex(@"^\\d{3}-\\d{2}-\\d{4}$|^\\d{9,9}$", RegexOptions.CultureInvariant);
            if (false == regexSsn.Match(this.Ssn).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ssn, must match a pattern of " + regexSsn, new [] { "Ssn" });
            }

            // PassportNumber (string) pattern
            Regex regexPassportNumber = new Regex(@"^(?!^0+$)[a-zA-Z0-9]{3,20}$", RegexOptions.CultureInvariant);
            if (false == regexPassportNumber.Match(this.PassportNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportNumber, must match a pattern of " + regexPassportNumber, new [] { "PassportNumber" });
            }

            // PassportCountry (string) pattern
            Regex regexPassportCountry = new Regex(@"^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$", RegexOptions.CultureInvariant);
            if (false == regexPassportCountry.Match(this.PassportCountry).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportCountry, must match a pattern of " + regexPassportCountry, new [] { "PassportCountry" });
            }

            // JobTitle (string) pattern
            Regex regexJobTitle = new Regex(@"^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$", RegexOptions.CultureInvariant);
            if (false == regexJobTitle.Match(this.JobTitle).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobTitle, must match a pattern of " + regexJobTitle, new [] { "JobTitle" });
            }

            // PhoneNumber (string) pattern
            Regex regexPhoneNumber = new Regex(@"^[0-9a-zA-Z\\\\+\\\\-]+$", RegexOptions.CultureInvariant);
            if (false == regexPhoneNumber.Match(this.PhoneNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, must match a pattern of " + regexPhoneNumber, new [] { "PhoneNumber" });
            }

            // Email (string) pattern
            Regex regexEmail = new Regex(@"^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,50}|[0-9]{1,3})(\\]?)$", RegexOptions.CultureInvariant);
            if (false == regexEmail.Match(this.Email).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, must match a pattern of " + regexEmail, new [] { "Email" });
            }

            yield break;
        }
    }

}
