/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Vasv2taxTaxInformation
    /// </summary>
    [DataContract]
    public partial class Vasv2taxTaxInformation :  IEquatable<Vasv2taxTaxInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vasv2taxTaxInformation" /> class.
        /// </summary>
        /// <param name="ReportingDate">Reporting date of transaction. Format: YYYYMMDD. Defaults to current date if not specified. Also the default tax calculation date unless a different date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;.  Optional for U.S., Canadian, international tax, and value added taxes. .</param>
        /// <param name="DateOverrideReason">If a past or future date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;, then provide the reason for that for audit purposes. Typical reasons include: &#39;Return&#39;, &#39;Layaway&#39;, &#39;Imported&#39;.  Optional for U.S., Canadian, international tax, and value added taxes. .</param>
        /// <param name="Nexus">Comma-separated list of states or provinces in which merchandise is taxable. Note merchandise may be still be non-taxable or tax exempt depending on the product taxability. Indicate the type of product you are selling in the product code field for product-level taxability rules to be applied. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.noNexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. .</param>
        /// <param name="NoNexus">Comma-separated list of states or provinces where you do not have nexus. Check with a tax advisor to determine where your business has nexus. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.nexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. .</param>
        /// <param name="ShowTaxPerLineItem">Whether or not to display tax amounts for each line item. This field can contain one of the following values: - &#x60;Yes&#x60; - Display tax amounts for each line item - &#x60;No&#x60; (default) - Do not display tax amounts for each line item  Optional for U.S., Canadian, international tax, and value added taxes. .</param>
        /// <param name="CommitIndicator">Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is “Committed.” For an uncommitted tax transaction, the status in the Tax Detail Report is “Uncommitted.” Possible values: - &#x60;true&#x60;: This is a committed tax transaction. - &#x60;false&#x60; (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancels a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes. .</param>
        /// <param name="RefundIndicator">Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - &#x60;true&#x60;: This is a refund tax transaction. - &#x60;false&#x60; (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes. .</param>
        public Vasv2taxTaxInformation(string ReportingDate = default(string), string DateOverrideReason = default(string), List<string> Nexus = default(List<string>), List<string> NoNexus = default(List<string>), string ShowTaxPerLineItem = default(string), bool? CommitIndicator = default(bool?), bool? RefundIndicator = default(bool?))
        {
            this.ReportingDate = ReportingDate;
            this.DateOverrideReason = DateOverrideReason;
            this.Nexus = Nexus;
            this.NoNexus = NoNexus;
            this.ShowTaxPerLineItem = ShowTaxPerLineItem;
            this.CommitIndicator = CommitIndicator;
            this.RefundIndicator = RefundIndicator;
        }
        
        /// <summary>
        /// Reporting date of transaction. Format: YYYYMMDD. Defaults to current date if not specified. Also the default tax calculation date unless a different date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;.  Optional for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>Reporting date of transaction. Format: YYYYMMDD. Defaults to current date if not specified. Also the default tax calculation date unless a different date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;.  Optional for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="reportingDate", EmitDefaultValue=false)]
        public string ReportingDate { get; set; }

        /// <summary>
        /// If a past or future date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;, then provide the reason for that for audit purposes. Typical reasons include: &#39;Return&#39;, &#39;Layaway&#39;, &#39;Imported&#39;.  Optional for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>If a past or future date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;, then provide the reason for that for audit purposes. Typical reasons include: &#39;Return&#39;, &#39;Layaway&#39;, &#39;Imported&#39;.  Optional for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="dateOverrideReason", EmitDefaultValue=false)]
        public string DateOverrideReason { get; set; }

        /// <summary>
        /// Comma-separated list of states or provinces in which merchandise is taxable. Note merchandise may be still be non-taxable or tax exempt depending on the product taxability. Indicate the type of product you are selling in the product code field for product-level taxability rules to be applied. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.noNexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. 
        /// </summary>
        /// <value>Comma-separated list of states or provinces in which merchandise is taxable. Note merchandise may be still be non-taxable or tax exempt depending on the product taxability. Indicate the type of product you are selling in the product code field for product-level taxability rules to be applied. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.noNexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. </value>
        [DataMember(Name="nexus", EmitDefaultValue=false)]
        public List<string> Nexus { get; set; }

        /// <summary>
        /// Comma-separated list of states or provinces where you do not have nexus. Check with a tax advisor to determine where your business has nexus. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.nexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. 
        /// </summary>
        /// <value>Comma-separated list of states or provinces where you do not have nexus. Check with a tax advisor to determine where your business has nexus. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.nexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. </value>
        [DataMember(Name="noNexus", EmitDefaultValue=false)]
        public List<string> NoNexus { get; set; }

        /// <summary>
        /// Whether or not to display tax amounts for each line item. This field can contain one of the following values: - &#x60;Yes&#x60; - Display tax amounts for each line item - &#x60;No&#x60; (default) - Do not display tax amounts for each line item  Optional for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>Whether or not to display tax amounts for each line item. This field can contain one of the following values: - &#x60;Yes&#x60; - Display tax amounts for each line item - &#x60;No&#x60; (default) - Do not display tax amounts for each line item  Optional for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="showTaxPerLineItem", EmitDefaultValue=false)]
        public string ShowTaxPerLineItem { get; set; }

        /// <summary>
        /// Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is “Committed.” For an uncommitted tax transaction, the status in the Tax Detail Report is “Uncommitted.” Possible values: - &#x60;true&#x60;: This is a committed tax transaction. - &#x60;false&#x60; (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancels a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is “Committed.” For an uncommitted tax transaction, the status in the Tax Detail Report is “Uncommitted.” Possible values: - &#x60;true&#x60;: This is a committed tax transaction. - &#x60;false&#x60; (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancels a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="commitIndicator", EmitDefaultValue=false)]
        public bool? CommitIndicator { get; set; }

        /// <summary>
        /// Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - &#x60;true&#x60;: This is a refund tax transaction. - &#x60;false&#x60; (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - &#x60;true&#x60;: This is a refund tax transaction. - &#x60;false&#x60; (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="refundIndicator", EmitDefaultValue=false)]
        public bool? RefundIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vasv2taxTaxInformation {\n");
            sb.Append("  ReportingDate: ").Append(ReportingDate).Append("\n");
            sb.Append("  DateOverrideReason: ").Append(DateOverrideReason).Append("\n");
            sb.Append("  Nexus: ").Append(Nexus).Append("\n");
            sb.Append("  NoNexus: ").Append(NoNexus).Append("\n");
            sb.Append("  ShowTaxPerLineItem: ").Append(ShowTaxPerLineItem).Append("\n");
            sb.Append("  CommitIndicator: ").Append(CommitIndicator).Append("\n");
            sb.Append("  RefundIndicator: ").Append(RefundIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Vasv2taxTaxInformation);
        }

        /// <summary>
        /// Returns true if Vasv2taxTaxInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Vasv2taxTaxInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vasv2taxTaxInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReportingDate == other.ReportingDate ||
                    this.ReportingDate != null &&
                    this.ReportingDate.Equals(other.ReportingDate)
                ) && 
                (
                    this.DateOverrideReason == other.DateOverrideReason ||
                    this.DateOverrideReason != null &&
                    this.DateOverrideReason.Equals(other.DateOverrideReason)
                ) && 
                (
                    this.Nexus == other.Nexus ||
                    this.Nexus != null &&
                    this.Nexus.SequenceEqual(other.Nexus)
                ) && 
                (
                    this.NoNexus == other.NoNexus ||
                    this.NoNexus != null &&
                    this.NoNexus.SequenceEqual(other.NoNexus)
                ) && 
                (
                    this.ShowTaxPerLineItem == other.ShowTaxPerLineItem ||
                    this.ShowTaxPerLineItem != null &&
                    this.ShowTaxPerLineItem.Equals(other.ShowTaxPerLineItem)
                ) && 
                (
                    this.CommitIndicator == other.CommitIndicator ||
                    this.CommitIndicator != null &&
                    this.CommitIndicator.Equals(other.CommitIndicator)
                ) && 
                (
                    this.RefundIndicator == other.RefundIndicator ||
                    this.RefundIndicator != null &&
                    this.RefundIndicator.Equals(other.RefundIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReportingDate != null)
                    hash = hash * 59 + this.ReportingDate.GetHashCode();
                if (this.DateOverrideReason != null)
                    hash = hash * 59 + this.DateOverrideReason.GetHashCode();
                if (this.Nexus != null)
                    hash = hash * 59 + this.Nexus.GetHashCode();
                if (this.NoNexus != null)
                    hash = hash * 59 + this.NoNexus.GetHashCode();
                if (this.ShowTaxPerLineItem != null)
                    hash = hash * 59 + this.ShowTaxPerLineItem.GetHashCode();
                if (this.CommitIndicator != null)
                    hash = hash * 59 + this.CommitIndicator.GetHashCode();
                if (this.RefundIndicator != null)
                    hash = hash * 59 + this.RefundIndicator.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
