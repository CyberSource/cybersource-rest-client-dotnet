/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CyberSource.Client;
using CyberSource.Api;
using CyberSource.Model;

namespace CyberSource.Test
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubscriptionsApiTests
    {
        private SubscriptionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubscriptionsApi
            //Assert.IsInstanceOfType(typeof(SubscriptionsApi), instance, "instance is a SubscriptionsApi");
        }

        
        /// <summary>
        /// Test ActivateSubscription
        /// </summary>
        [Test]
        public void ActivateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ActivateSubscription(id);
            //Assert.IsInstanceOf<ActivateSubscriptionResponse> (response, "response is ActivateSubscriptionResponse");
        }
        
        /// <summary>
        /// Test CancelSubscription
        /// </summary>
        [Test]
        public void CancelSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CancelSubscription(id);
            //Assert.IsInstanceOf<CancelSubscriptionResponse> (response, "response is CancelSubscriptionResponse");
        }
        
        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Test]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSubscriptionRequest createSubscriptionRequest = null;
            //var response = instance.CreateSubscription(createSubscriptionRequest);
            //Assert.IsInstanceOf<CreateSubscriptionResponse> (response, "response is CreateSubscriptionResponse");
        }
        
        /// <summary>
        /// Test GetAllSubscriptions
        /// </summary>
        [Test]
        public void GetAllSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //string code = null;
            //string status = null;
            //var response = instance.GetAllSubscriptions(offset, limit, code, status);
            //Assert.IsInstanceOf<GetAllSubscriptionsResponse> (response, "response is GetAllSubscriptionsResponse");
        }
        
        /// <summary>
        /// Test GetSubscription
        /// </summary>
        [Test]
        public void GetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSubscription(id);
            //Assert.IsInstanceOf<GetSubscriptionResponse> (response, "response is GetSubscriptionResponse");
        }
        
        /// <summary>
        /// Test GetSubscriptionCode
        /// </summary>
        [Test]
        public void GetSubscriptionCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSubscriptionCode();
            //Assert.IsInstanceOf<GetSubscriptionCodeResponse> (response, "response is GetSubscriptionCodeResponse");
        }
        
        /// <summary>
        /// Test SuspendSubscription
        /// </summary>
        [Test]
        public void SuspendSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.SuspendSubscription(id);
            //Assert.IsInstanceOf<SuspendSubscriptionResponse> (response, "response is SuspendSubscriptionResponse");
        }
        
        /// <summary>
        /// Test UpdateSubscription
        /// </summary>
        [Test]
        public void UpdateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateSubscription updateSubscription = null;
            //var response = instance.UpdateSubscription(id, updateSubscription);
            //Assert.IsInstanceOf<UpdateSubscriptionResponse> (response, "response is UpdateSubscriptionResponse");
        }
        
    }

}
