/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2intentsSenderInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2intentsSenderInformation :  IEquatable<Ptsv2intentsSenderInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2intentsSenderInformation" /> class.
        /// </summary>
        /// <param name="Account">Account.</param>
        /// <param name="FirstName">The first name of the sender. .</param>
        /// <param name="LastName">The last name of the sender. .</param>
        /// <param name="Email">The email address of the sender. .</param>
        /// <param name="PhoneNumber">The phone number of the sender. .</param>
        /// <param name="CountryCode">The country code of the sender. .</param>
        /// <param name="CreateDate">The date when the sender&#39;s account was created. .</param>
        /// <param name="PostalCode">The postal code of the sender. .</param>
        /// <param name="RiskPopularityScore">The risk popularity score of the sender. .</param>
        public Ptsv2intentsSenderInformation(Ptsv2intentsSenderInformationAccount Account = default(Ptsv2intentsSenderInformationAccount), string FirstName = default(string), string LastName = default(string), string Email = default(string), string PhoneNumber = default(string), string CountryCode = default(string), string CreateDate = default(string), string PostalCode = default(string), string RiskPopularityScore = default(string))
        {
            this.Account = Account;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.PhoneNumber = PhoneNumber;
            this.CountryCode = CountryCode;
            this.CreateDate = CreateDate;
            this.PostalCode = PostalCode;
            this.RiskPopularityScore = RiskPopularityScore;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public Ptsv2intentsSenderInformationAccount Account { get; set; }

        /// <summary>
        /// The first name of the sender. 
        /// </summary>
        /// <value>The first name of the sender. </value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the sender. 
        /// </summary>
        /// <value>The last name of the sender. </value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The email address of the sender. 
        /// </summary>
        /// <value>The email address of the sender. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The phone number of the sender. 
        /// </summary>
        /// <value>The phone number of the sender. </value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The country code of the sender. 
        /// </summary>
        /// <value>The country code of the sender. </value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The date when the sender&#39;s account was created. 
        /// </summary>
        /// <value>The date when the sender&#39;s account was created. </value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public string CreateDate { get; set; }

        /// <summary>
        /// The postal code of the sender. 
        /// </summary>
        /// <value>The postal code of the sender. </value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The risk popularity score of the sender. 
        /// </summary>
        /// <value>The risk popularity score of the sender. </value>
        [DataMember(Name="riskPopularityScore", EmitDefaultValue=false)]
        public string RiskPopularityScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2intentsSenderInformation {\n");
            if (Account != null) sb.Append("  Account: ").Append(Account).Append("\n");
            if (FirstName != null) sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            if (LastName != null) sb.Append("  LastName: ").Append(LastName).Append("\n");
            if (Email != null) sb.Append("  Email: ").Append(Email).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (CountryCode != null) sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            if (CreateDate != null) sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            if (PostalCode != null) sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            if (RiskPopularityScore != null) sb.Append("  RiskPopularityScore: ").Append(RiskPopularityScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2intentsSenderInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2intentsSenderInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2intentsSenderInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2intentsSenderInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Account == other.Account ||
                    this.Account != null &&
                    this.Account.Equals(other.Account)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.CreateDate == other.CreateDate ||
                    this.CreateDate != null &&
                    this.CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.RiskPopularityScore == other.RiskPopularityScore ||
                    this.RiskPopularityScore != null &&
                    this.RiskPopularityScore.Equals(other.RiskPopularityScore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Account != null)
                    hash = hash * 59 + this.Account.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.CreateDate != null)
                    hash = hash * 59 + this.CreateDate.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.RiskPopularityScore != null)
                    hash = hash * 59 + this.RiskPopularityScore.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
