/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Rbsv1subscriptionsSubscriptionInformation
    /// </summary>
    [DataContract]
    public partial class Rbsv1subscriptionsSubscriptionInformation :  IEquatable<Rbsv1subscriptionsSubscriptionInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rbsv1subscriptionsSubscriptionInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Rbsv1subscriptionsSubscriptionInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rbsv1subscriptionsSubscriptionInformation" /> class.
        /// </summary>
        /// <param name="Code">Subscription code is an optional field, If not provided system generates and assign one .</param>
        /// <param name="PlanId">Plan Id. Use Plan Id from Create Plan Service. .</param>
        /// <param name="Name">Subscription Name  (required).</param>
        /// <param name="StartDate">Start date of the Subscription  Start date must be in UTC. Format: YYYY-MM-DDThh:mm:ssZ The T separates the date and the time. The Z indicates UTC.  Note: Subscription starts on the day provided in UTC.  **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.). Subscription will start on August 11,2022.  (required).</param>
        /// <param name="OriginalTransactionId">Network transaction identifier that was returned in the payment response field _processorInformation.transactionId_ in the reply message for the original subscription-initializing payment. .</param>
        /// <param name="OriginalTransactionAuthorizedAmount">Amount of the original subscription-initializing payment.  *Required when using a Diners or Discover card*. .</param>
        public Rbsv1subscriptionsSubscriptionInformation(string Code = default(string), string PlanId = default(string), string Name = default(string), string StartDate = default(string), string OriginalTransactionId = default(string), string OriginalTransactionAuthorizedAmount = default(string))
        {
            this.Code = Code;
            this.PlanId = PlanId;
            this.Name = Name;
            this.StartDate = StartDate;
            this.OriginalTransactionId = OriginalTransactionId;
            this.OriginalTransactionAuthorizedAmount = OriginalTransactionAuthorizedAmount;
        }
        
        /// <summary>
        /// Subscription code is an optional field, If not provided system generates and assign one 
        /// </summary>
        /// <value>Subscription code is an optional field, If not provided system generates and assign one </value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Plan Id. Use Plan Id from Create Plan Service. 
        /// </summary>
        /// <value>Plan Id. Use Plan Id from Create Plan Service. </value>
        [DataMember(Name="planId", EmitDefaultValue=false)]
        public string PlanId { get; set; }

        /// <summary>
        /// Subscription Name 
        /// </summary>
        /// <value>Subscription Name </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Start date of the Subscription  Start date must be in UTC. Format: YYYY-MM-DDThh:mm:ssZ The T separates the date and the time. The Z indicates UTC.  Note: Subscription starts on the day provided in UTC.  **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.). Subscription will start on August 11,2022. 
        /// </summary>
        /// <value>Start date of the Subscription  Start date must be in UTC. Format: YYYY-MM-DDThh:mm:ssZ The T separates the date and the time. The Z indicates UTC.  Note: Subscription starts on the day provided in UTC.  **Example** 2022-08-11T22:47:57Z equals August 11, 2022, at 22:47:57 (10:47:57 p.m.). Subscription will start on August 11,2022. </value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Network transaction identifier that was returned in the payment response field _processorInformation.transactionId_ in the reply message for the original subscription-initializing payment. 
        /// </summary>
        /// <value>Network transaction identifier that was returned in the payment response field _processorInformation.transactionId_ in the reply message for the original subscription-initializing payment. </value>
        [DataMember(Name="originalTransactionId", EmitDefaultValue=false)]
        public string OriginalTransactionId { get; set; }

        /// <summary>
        /// Amount of the original subscription-initializing payment.  *Required when using a Diners or Discover card*. 
        /// </summary>
        /// <value>Amount of the original subscription-initializing payment.  *Required when using a Diners or Discover card*. </value>
        [DataMember(Name="originalTransactionAuthorizedAmount", EmitDefaultValue=false)]
        public string OriginalTransactionAuthorizedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rbsv1subscriptionsSubscriptionInformation {\n");
            if (Code != null) sb.Append("  Code: ").Append(Code).Append("\n");
            if (PlanId != null) sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (StartDate != null) sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            if (OriginalTransactionId != null) sb.Append("  OriginalTransactionId: ").Append(OriginalTransactionId).Append("\n");
            if (OriginalTransactionAuthorizedAmount != null) sb.Append("  OriginalTransactionAuthorizedAmount: ").Append(OriginalTransactionAuthorizedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Rbsv1subscriptionsSubscriptionInformation);
        }

        /// <summary>
        /// Returns true if Rbsv1subscriptionsSubscriptionInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Rbsv1subscriptionsSubscriptionInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rbsv1subscriptionsSubscriptionInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.PlanId == other.PlanId ||
                    this.PlanId != null &&
                    this.PlanId.Equals(other.PlanId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.OriginalTransactionId == other.OriginalTransactionId ||
                    this.OriginalTransactionId != null &&
                    this.OriginalTransactionId.Equals(other.OriginalTransactionId)
                ) && 
                (
                    this.OriginalTransactionAuthorizedAmount == other.OriginalTransactionAuthorizedAmount ||
                    this.OriginalTransactionAuthorizedAmount != null &&
                    this.OriginalTransactionAuthorizedAmount.Equals(other.OriginalTransactionAuthorizedAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.PlanId != null)
                    hash = hash * 59 + this.PlanId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.OriginalTransactionId != null)
                    hash = hash * 59 + this.OriginalTransactionId.GetHashCode();
                if (this.OriginalTransactionAuthorizedAmount != null)
                    hash = hash * 59 + this.OriginalTransactionAuthorizedAmount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
