/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CyberSource.Client;
using CyberSource.Api;
using CyberSource.Model;

namespace CyberSource.Test
{
    /// <summary>
    ///  Class for testing ManageWebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ManageWebhooksApiTests
    {
        private ManageWebhooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ManageWebhooksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ManageWebhooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ManageWebhooksApi
            //Assert.IsInstanceOfType(typeof(ManageWebhooksApi), instance, "instance is a ManageWebhooksApi");
        }

        
        /// <summary>
        /// Test DeleteWebhookSubscription
        /// </summary>
        [Test]
        public void DeleteWebhookSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //instance.DeleteWebhookSubscription(webhookId);
            
        }
        
        /// <summary>
        /// Test GetWebhookSubscriptionById
        /// </summary>
        [Test]
        public void GetWebhookSubscriptionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //var response = instance.GetWebhookSubscriptionById(webhookId);
            //Assert.IsInstanceOf<InlineResponse2014> (response, "response is InlineResponse2014");
        }
        
        /// <summary>
        /// Test GetWebhookSubscriptionsByOrg
        /// </summary>
        [Test]
        public void GetWebhookSubscriptionsByOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //string productId = null;
            //string eventType = null;
            //var response = instance.GetWebhookSubscriptionsByOrg(organizationId, productId, eventType);
            //Assert.IsInstanceOf<List<InlineResponse2004>> (response, "response is List<InlineResponse2004>");
        }
        
        /// <summary>
        /// Test NotificationSubscriptionsV1WebhooksWebhookIdPost
        /// </summary>
        [Test]
        public void NotificationSubscriptionsV1WebhooksWebhookIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //var response = instance.NotificationSubscriptionsV1WebhooksWebhookIdPost(webhookId);
            //Assert.IsInstanceOf<InlineResponse2015> (response, "response is InlineResponse2015");
        }
        
        /// <summary>
        /// Test NotificationSubscriptionsV2WebhooksWebhookIdPatch
        /// </summary>
        [Test]
        public void NotificationSubscriptionsV2WebhooksWebhookIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //UpdateWebhook updateWebhook = null;
            //instance.NotificationSubscriptionsV2WebhooksWebhookIdPatch(webhookId, updateWebhook);
            
        }
        
        /// <summary>
        /// Test NotificationSubscriptionsV2WebhooksWebhookIdStatusPut
        /// </summary>
        [Test]
        public void NotificationSubscriptionsV2WebhooksWebhookIdStatusPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //UpdateStatus updateStatus = null;
            //instance.NotificationSubscriptionsV2WebhooksWebhookIdStatusPut(webhookId, updateStatus);
            
        }
        
        /// <summary>
        /// Test SaveAsymEgressKey
        /// </summary>
        [Test]
        public void SaveAsymEgressKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vCSenderOrganizationId = null;
            //string vCPermissions = null;
            //SaveAsymEgressKey saveAsymEgressKey = null;
            //string vCCorrelationId = null;
            //var response = instance.SaveAsymEgressKey(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId);
            //Assert.IsInstanceOf<InlineResponse2016> (response, "response is InlineResponse2016");
        }
        
    }

}
