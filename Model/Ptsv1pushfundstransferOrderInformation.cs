/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv1pushfundstransferOrderInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv1pushfundstransferOrderInformation :  IEquatable<Ptsv1pushfundstransferOrderInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv1pushfundstransferOrderInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ptsv1pushfundstransferOrderInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv1pushfundstransferOrderInformation" /> class.
        /// </summary>
        /// <param name="AmountDetails">AmountDetails (required).</param>
        /// <param name="IsCryptocurrencyPurchase">This indicates that the funds transfer is for a crypto currency transaction. Optional Y/y, true N/n, false .</param>
        /// <param name="Surcharge">Surcharge.</param>
        public Ptsv1pushfundstransferOrderInformation(Ptsv1pushfundstransferOrderInformationAmountDetails AmountDetails = default(Ptsv1pushfundstransferOrderInformationAmountDetails), string IsCryptocurrencyPurchase = default(string), Ptsv1pushfundstransferOrderInformationSurcharge Surcharge = default(Ptsv1pushfundstransferOrderInformationSurcharge))
        {
            // to ensure "AmountDetails" is required (not null)
            if (AmountDetails == null)
            {
                throw new InvalidDataException("AmountDetails is a required property for Ptsv1pushfundstransferOrderInformation and cannot be null");
            }
            else
            {
                this.AmountDetails = AmountDetails;
            }
            this.IsCryptocurrencyPurchase = IsCryptocurrencyPurchase;
            this.Surcharge = Surcharge;
        }
        
        /// <summary>
        /// Gets or Sets AmountDetails
        /// </summary>
        [DataMember(Name="amountDetails", EmitDefaultValue=false)]
        public Ptsv1pushfundstransferOrderInformationAmountDetails AmountDetails { get; set; }

        /// <summary>
        /// This indicates that the funds transfer is for a crypto currency transaction. Optional Y/y, true N/n, false 
        /// </summary>
        /// <value>This indicates that the funds transfer is for a crypto currency transaction. Optional Y/y, true N/n, false </value>
        [DataMember(Name="isCryptocurrencyPurchase", EmitDefaultValue=false)]
        public string IsCryptocurrencyPurchase { get; set; }

        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [DataMember(Name="surcharge", EmitDefaultValue=false)]
        public Ptsv1pushfundstransferOrderInformationSurcharge Surcharge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv1pushfundstransferOrderInformation {\n");
            sb.Append("  AmountDetails: ").Append(AmountDetails).Append("\n");
            sb.Append("  IsCryptocurrencyPurchase: ").Append(IsCryptocurrencyPurchase).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv1pushfundstransferOrderInformation);
        }

        /// <summary>
        /// Returns true if Ptsv1pushfundstransferOrderInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv1pushfundstransferOrderInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv1pushfundstransferOrderInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AmountDetails == other.AmountDetails ||
                    this.AmountDetails != null &&
                    this.AmountDetails.Equals(other.AmountDetails)
                ) && 
                (
                    this.IsCryptocurrencyPurchase == other.IsCryptocurrencyPurchase ||
                    this.IsCryptocurrencyPurchase != null &&
                    this.IsCryptocurrencyPurchase.Equals(other.IsCryptocurrencyPurchase)
                ) && 
                (
                    this.Surcharge == other.Surcharge ||
                    this.Surcharge != null &&
                    this.Surcharge.Equals(other.Surcharge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AmountDetails != null)
                    hash = hash * 59 + this.AmountDetails.GetHashCode();
                if (this.IsCryptocurrencyPurchase != null)
                    hash = hash * 59 + this.IsCryptocurrencyPurchase.GetHashCode();
                if (this.Surcharge != null)
                    hash = hash * 59 + this.Surcharge.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
