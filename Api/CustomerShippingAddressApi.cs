/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerShippingAddressApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns></returns>
        void DeleteCustomerShippingAddress (string customerId, string shippingAddressId, string profileId = null);

        /// <summary>
        /// Delete a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerShippingAddressWithHttpInfo (string customerId, string shippingAddressId, string profileId = null);
        /// <summary>
        /// Retrieve a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>PostCustomerShippingAddressRequest</returns>
        PostCustomerShippingAddressRequest GetCustomerShippingAddress (string customerId, string shippingAddressId, string profileId = null);

        /// <summary>
        /// Retrieve a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of PostCustomerShippingAddressRequest</returns>
        ApiResponse<PostCustomerShippingAddressRequest> GetCustomerShippingAddressWithHttpInfo (string customerId, string shippingAddressId, string profileId = null);
        /// <summary>
        /// List Shipping Addresses for a Customer
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>ShippingAddressListForCustomer</returns>
        ShippingAddressListForCustomer GetCustomerShippingAddressesList (string customerId, string profileId = null, long? offset = null, long? limit = null);

        /// <summary>
        /// List Shipping Addresses for a Customer
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>ApiResponse of ShippingAddressListForCustomer</returns>
        ApiResponse<ShippingAddressListForCustomer> GetCustomerShippingAddressesListWithHttpInfo (string customerId, string profileId = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Update a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>PatchCustomerShippingAddressRequest</returns>
        PatchCustomerShippingAddressRequest PatchCustomersShippingAddress (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null);

        /// <summary>
        /// Update a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>ApiResponse of PatchCustomerShippingAddressRequest</returns>
        ApiResponse<PatchCustomerShippingAddressRequest> PatchCustomersShippingAddressWithHttpInfo (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null);
        /// <summary>
        /// Create a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>PostCustomerShippingAddressRequest</returns>
        PostCustomerShippingAddressRequest PostCustomerShippingAddress (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null);

        /// <summary>
        /// Create a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of PostCustomerShippingAddressRequest</returns>
        ApiResponse<PostCustomerShippingAddressRequest> PostCustomerShippingAddressWithHttpInfo (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerShippingAddressAsync (string customerId, string shippingAddressId, string profileId = null);

        /// <summary>
        /// Delete a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerShippingAddressAsyncWithHttpInfo (string customerId, string shippingAddressId, string profileId = null);
        /// <summary>
        /// Retrieve a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of PostCustomerShippingAddressRequest</returns>
        System.Threading.Tasks.Task<PostCustomerShippingAddressRequest> GetCustomerShippingAddressAsync (string customerId, string shippingAddressId, string profileId = null);

        /// <summary>
        /// Retrieve a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (PostCustomerShippingAddressRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCustomerShippingAddressRequest>> GetCustomerShippingAddressAsyncWithHttpInfo (string customerId, string shippingAddressId, string profileId = null);
        /// <summary>
        /// List Shipping Addresses for a Customer
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>Task of ShippingAddressListForCustomer</returns>
        System.Threading.Tasks.Task<ShippingAddressListForCustomer> GetCustomerShippingAddressesListAsync (string customerId, string profileId = null, long? offset = null, long? limit = null);

        /// <summary>
        /// List Shipping Addresses for a Customer
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (ShippingAddressListForCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingAddressListForCustomer>> GetCustomerShippingAddressesListAsyncWithHttpInfo (string customerId, string profileId = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Update a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of PatchCustomerShippingAddressRequest</returns>
        System.Threading.Tasks.Task<PatchCustomerShippingAddressRequest> PatchCustomersShippingAddressAsync (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null);

        /// <summary>
        /// Update a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of ApiResponse (PatchCustomerShippingAddressRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PatchCustomerShippingAddressRequest>> PatchCustomersShippingAddressAsyncWithHttpInfo (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null);
        /// <summary>
        /// Create a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of PostCustomerShippingAddressRequest</returns>
        System.Threading.Tasks.Task<PostCustomerShippingAddressRequest> PostCustomerShippingAddressAsync (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null);

        /// <summary>
        /// Create a Customer Shipping Address
        /// </summary>
        /// <remarks>
        /// |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (PostCustomerShippingAddressRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCustomerShippingAddressRequest>> PostCustomerShippingAddressAsyncWithHttpInfo (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerShippingAddressApi : ICustomerShippingAddressApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerShippingAddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerShippingAddressApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerShippingAddressApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerShippingAddressApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Delete a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns></returns>
        public void DeleteCustomerShippingAddress (string customerId, string shippingAddressId, string profileId = null)
        {
            logger.Debug("CALLING API \"DeleteCustomerShippingAddress\" STARTED");
            this.SetStatusCode(null);
            DeleteCustomerShippingAddressWithHttpInfo(customerId, shippingAddressId, profileId);
        }

        /// <summary>
        /// Delete a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomerShippingAddressWithHttpInfo (string customerId, string shippingAddressId, string profileId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
            }
            // verify the required parameter 'shippingAddressId' is set
            if (shippingAddressId == null)
            {
                logger.Error("ApiException : Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            if (shippingAddressId != null)
            {
                localVarPathParams.Add("shippingAddressId", Configuration.ApiClient.ParameterToString(shippingAddressId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// Delete a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerShippingAddressAsync (string customerId, string shippingAddressId, string profileId = null)
        {
            logger.Debug("CALLING API \"DeleteCustomerShippingAddressAsync\" STARTED");
            this.SetStatusCode(null);
            await DeleteCustomerShippingAddressAsyncWithHttpInfo(customerId, shippingAddressId, profileId);

        }

        /// <summary>
        /// Delete a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Deleting a Customers Shipping Address**&lt;br&gt;Your system can use this API to delete an existing Shipping Address for a Customer.&lt;br&gt;If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerShippingAddressAsyncWithHttpInfo (string customerId, string shippingAddressId, string profileId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
            }
            // verify the required parameter 'shippingAddressId' is set
            if (shippingAddressId == null)
            {
                logger.Error("ApiException : Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->DeleteCustomerShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            if (shippingAddressId != null)
            {
                localVarPathParams.Add("shippingAddressId", Configuration.ApiClient.ParameterToString(shippingAddressId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomerShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
        /// <summary>
        /// Retrieve a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>PostCustomerShippingAddressRequest</returns>
        public PostCustomerShippingAddressRequest GetCustomerShippingAddress (string customerId, string shippingAddressId, string profileId = null)
        {
            logger.Debug("CALLING API \"GetCustomerShippingAddress\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PostCustomerShippingAddressRequest> localVarResponse = GetCustomerShippingAddressWithHttpInfo(customerId, shippingAddressId, profileId);
            logger.Debug("CALLING API \"GetCustomerShippingAddress\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of PostCustomerShippingAddressRequest</returns>
        public ApiResponse< PostCustomerShippingAddressRequest > GetCustomerShippingAddressWithHttpInfo (string customerId, string shippingAddressId, string profileId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
            }
            // verify the required parameter 'shippingAddressId' is set
            if (shippingAddressId == null)
            {
                logger.Error("ApiException : Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            if (shippingAddressId != null)
            {
                localVarPathParams.Add("shippingAddressId", Configuration.ApiClient.ParameterToString(shippingAddressId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PostCustomerShippingAddressRequest>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PostCustomerShippingAddressRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCustomerShippingAddressRequest))); // Return statement
        }

        /// <summary>
        /// Retrieve a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of PostCustomerShippingAddressRequest</returns>
        public async System.Threading.Tasks.Task<PostCustomerShippingAddressRequest> GetCustomerShippingAddressAsync (string customerId, string shippingAddressId, string profileId = null)
        {
            logger.Debug("CALLING API \"GetCustomerShippingAddressAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PostCustomerShippingAddressRequest> localVarResponse = await GetCustomerShippingAddressAsyncWithHttpInfo(customerId, shippingAddressId, profileId);
            logger.Debug("CALLING API \"GetCustomerShippingAddressAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving a Customer Shipping Address**&lt;br&gt;Your system can use this API to retrieve an existing Shipping Address for a Customer.&lt;br&gt;To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (PostCustomerShippingAddressRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostCustomerShippingAddressRequest>> GetCustomerShippingAddressAsyncWithHttpInfo (string customerId, string shippingAddressId, string profileId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
            }
            // verify the required parameter 'shippingAddressId' is set
            if (shippingAddressId == null)
            {
                logger.Error("ApiException : Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->GetCustomerShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            if (shippingAddressId != null)
            {
                localVarPathParams.Add("shippingAddressId", Configuration.ApiClient.ParameterToString(shippingAddressId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PostCustomerShippingAddressRequest>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PostCustomerShippingAddressRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCustomerShippingAddressRequest))); // Return statement
        }
        /// <summary>
        /// List Shipping Addresses for a Customer |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>ShippingAddressListForCustomer</returns>
        public ShippingAddressListForCustomer GetCustomerShippingAddressesList (string customerId, string profileId = null, long? offset = null, long? limit = null)
        {
            logger.Debug("CALLING API \"GetCustomerShippingAddressesList\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ShippingAddressListForCustomer> localVarResponse = GetCustomerShippingAddressesListWithHttpInfo(customerId, profileId, offset, limit);
            logger.Debug("CALLING API \"GetCustomerShippingAddressesList\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Shipping Addresses for a Customer |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>ApiResponse of ShippingAddressListForCustomer</returns>
        public ApiResponse< ShippingAddressListForCustomer > GetCustomerShippingAddressesListWithHttpInfo (string customerId, string profileId = null, long? offset = null, long? limit = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddressesList");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddressesList");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerShippingAddressesList", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ShippingAddressListForCustomer>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ShippingAddressListForCustomer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingAddressListForCustomer))); // Return statement
        }

        /// <summary>
        /// List Shipping Addresses for a Customer |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>Task of ShippingAddressListForCustomer</returns>
        public async System.Threading.Tasks.Task<ShippingAddressListForCustomer> GetCustomerShippingAddressesListAsync (string customerId, string profileId = null, long? offset = null, long? limit = null)
        {
            logger.Debug("CALLING API \"GetCustomerShippingAddressesListAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ShippingAddressListForCustomer> localVarResponse = await GetCustomerShippingAddressesListAsyncWithHttpInfo(customerId, profileId, offset, limit);
            logger.Debug("CALLING API \"GetCustomerShippingAddressesListAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// List Shipping Addresses for a Customer |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Retrieving all Customer Shipping Addresses**&lt;br&gt;Your system can use this API to retrieve all existing Shipping Addresses for a Customer. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="offset">Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (ShippingAddressListForCustomer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShippingAddressListForCustomer>> GetCustomerShippingAddressesListAsyncWithHttpInfo (string customerId, string profileId = null, long? offset = null, long? limit = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddressesList");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->GetCustomerShippingAddressesList");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerShippingAddressesList", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ShippingAddressListForCustomer>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ShippingAddressListForCustomer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingAddressListForCustomer))); // Return statement
        }
        /// <summary>
        /// Update a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>PatchCustomerShippingAddressRequest</returns>
        public PatchCustomerShippingAddressRequest PatchCustomersShippingAddress (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null)
        {
            logger.Debug("CALLING API \"PatchCustomersShippingAddress\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PatchCustomerShippingAddressRequest> localVarResponse = PatchCustomersShippingAddressWithHttpInfo(customerId, shippingAddressId, patchCustomerShippingAddressRequest, profileId, ifMatch);
            logger.Debug("CALLING API \"PatchCustomersShippingAddress\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>ApiResponse of PatchCustomerShippingAddressRequest</returns>
        public ApiResponse< PatchCustomerShippingAddressRequest > PatchCustomersShippingAddressWithHttpInfo (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
            }
            // verify the required parameter 'shippingAddressId' is set
            if (shippingAddressId == null)
            {
                logger.Error("ApiException : Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
                throw new ApiException(400, "Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
            }
            // verify the required parameter 'patchCustomerShippingAddressRequest' is set
            if (patchCustomerShippingAddressRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'patchCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
                throw new ApiException(400, "Missing required parameter 'patchCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            if (shippingAddressId != null)
            {
                localVarPathParams.Add("shippingAddressId", Configuration.ApiClient.ParameterToString(shippingAddressId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (ifMatch != null)
            {
                localVarHeaderParams.Add("if-match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            }
            if (patchCustomerShippingAddressRequest != null && patchCustomerShippingAddressRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                patchCustomerShippingAddressRequest = (PatchCustomerShippingAddressRequest)sdkTracker.InsertDeveloperIdTracker(patchCustomerShippingAddressRequest, patchCustomerShippingAddressRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(patchCustomerShippingAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchCustomerShippingAddressRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchCustomersShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PatchCustomerShippingAddressRequest>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PatchCustomerShippingAddressRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatchCustomerShippingAddressRequest))); // Return statement
        }

        /// <summary>
        /// Update a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of PatchCustomerShippingAddressRequest</returns>
        public async System.Threading.Tasks.Task<PatchCustomerShippingAddressRequest> PatchCustomersShippingAddressAsync (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null)
        {
            logger.Debug("CALLING API \"PatchCustomersShippingAddressAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PatchCustomerShippingAddressRequest> localVarResponse = await PatchCustomersShippingAddressAsyncWithHttpInfo(customerId, shippingAddressId, patchCustomerShippingAddressRequest, profileId, ifMatch);
            logger.Debug("CALLING API \"PatchCustomersShippingAddressAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Updating a Customers Shipping Address**&lt;br&gt;Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="shippingAddressId">The Id of a shipping address.</param>
        /// <param name="patchCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of ApiResponse (PatchCustomerShippingAddressRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PatchCustomerShippingAddressRequest>> PatchCustomersShippingAddressAsyncWithHttpInfo (string customerId, string shippingAddressId, PatchCustomerShippingAddressRequest patchCustomerShippingAddressRequest, string profileId = null, string ifMatch = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
            }
            // verify the required parameter 'shippingAddressId' is set
            if (shippingAddressId == null)
            {
                logger.Error("ApiException : Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
                throw new ApiException(400, "Missing required parameter 'shippingAddressId' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
            }
            // verify the required parameter 'patchCustomerShippingAddressRequest' is set
            if (patchCustomerShippingAddressRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'patchCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
                throw new ApiException(400, "Missing required parameter 'patchCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PatchCustomersShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            if (shippingAddressId != null)
            {
                localVarPathParams.Add("shippingAddressId", Configuration.ApiClient.ParameterToString(shippingAddressId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (ifMatch != null)
            {
                localVarHeaderParams.Add("if-match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            }
            if (patchCustomerShippingAddressRequest != null && patchCustomerShippingAddressRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                patchCustomerShippingAddressRequest = (PatchCustomerShippingAddressRequest)sdkTracker.InsertDeveloperIdTracker(patchCustomerShippingAddressRequest, patchCustomerShippingAddressRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(patchCustomerShippingAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchCustomerShippingAddressRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchCustomersShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PatchCustomerShippingAddressRequest>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PatchCustomerShippingAddressRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatchCustomerShippingAddressRequest))); // Return statement
        }
        /// <summary>
        /// Create a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>PostCustomerShippingAddressRequest</returns>
        public PostCustomerShippingAddressRequest PostCustomerShippingAddress (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null)
        {
            logger.Debug("CALLING API \"PostCustomerShippingAddress\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PostCustomerShippingAddressRequest> localVarResponse = PostCustomerShippingAddressWithHttpInfo(customerId, postCustomerShippingAddressRequest, profileId);
            logger.Debug("CALLING API \"PostCustomerShippingAddress\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of PostCustomerShippingAddressRequest</returns>
        public ApiResponse< PostCustomerShippingAddressRequest > PostCustomerShippingAddressWithHttpInfo (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
            }
            // verify the required parameter 'postCustomerShippingAddressRequest' is set
            if (postCustomerShippingAddressRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'postCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'postCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (postCustomerShippingAddressRequest != null && postCustomerShippingAddressRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                postCustomerShippingAddressRequest = (PostCustomerShippingAddressRequest)sdkTracker.InsertDeveloperIdTracker(postCustomerShippingAddressRequest, postCustomerShippingAddressRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(postCustomerShippingAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postCustomerShippingAddressRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCustomerShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PostCustomerShippingAddressRequest>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PostCustomerShippingAddressRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCustomerShippingAddressRequest))); // Return statement
        }

        /// <summary>
        /// Create a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of PostCustomerShippingAddressRequest</returns>
        public async System.Threading.Tasks.Task<PostCustomerShippingAddressRequest> PostCustomerShippingAddressAsync (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null)
        {
            logger.Debug("CALLING API \"PostCustomerShippingAddressAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PostCustomerShippingAddressRequest> localVarResponse = await PostCustomerShippingAddressAsyncWithHttpInfo(customerId, postCustomerShippingAddressRequest, profileId);
            logger.Debug("CALLING API \"PostCustomerShippingAddressAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Customer Shipping Address |  |  |  | | - -- | - -- | - -- | |**Customer Shipping Address**&lt;br&gt;A Customer Shipping Address represents tokenized customer shipping information.&lt;br&gt;A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Creating a Customer Shipping Address**&lt;br&gt;Your system can use this API to create an existing Customers default or non default Shipping Address.&lt;br&gt;You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body). 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The Id of a Customer.</param>
        /// <param name="postCustomerShippingAddressRequest"></param>
        /// <param name="profileId">The Id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (PostCustomerShippingAddressRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostCustomerShippingAddressRequest>> PostCustomerShippingAddressAsyncWithHttpInfo (string customerId, PostCustomerShippingAddressRequest postCustomerShippingAddressRequest, string profileId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                logger.Error("ApiException : Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
            }
            // verify the required parameter 'postCustomerShippingAddressRequest' is set
            if (postCustomerShippingAddressRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'postCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
                throw new ApiException(400, "Missing required parameter 'postCustomerShippingAddressRequest' when calling CustomerShippingAddressApi->PostCustomerShippingAddress");
            }

            var localVarPath = $"/tms/v2/customers/{customerId}/shipping-addresses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (customerId != null)
            {
                localVarPathParams.Add("customerId", Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (profileId != null)
            {
                localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            }
            if (postCustomerShippingAddressRequest != null && postCustomerShippingAddressRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                postCustomerShippingAddressRequest = (PostCustomerShippingAddressRequest)sdkTracker.InsertDeveloperIdTracker(postCustomerShippingAddressRequest, postCustomerShippingAddressRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(postCustomerShippingAddressRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postCustomerShippingAddressRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCustomerShippingAddress", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PostCustomerShippingAddressRequest>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PostCustomerShippingAddressRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCustomerShippingAddressRequest))); // Return statement
        }
    }
}
