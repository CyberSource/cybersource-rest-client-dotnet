/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv1pushfundstransferProcessingInformationPayoutsOptions
    /// </summary>
    [DataContract]
    public partial class Ptsv1pushfundstransferProcessingInformationPayoutsOptions :  IEquatable<Ptsv1pushfundstransferProcessingInformationPayoutsOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv1pushfundstransferProcessingInformationPayoutsOptions" /> class.
        /// </summary>
        /// <param name="AccountFundingReferenceId">Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request.  Applicable only for Visa Platform Connect .</param>
        /// <param name="RetrievalReferenceNumber">This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Format: Positions 1-4: The yddd equivalent of the date, where y &#x3D; 0-9 and ddd &#x3D; 001 – 366. Positions 5-12: A unique identification number generated by the merchant  Applicable only for Visa Platform Connect .</param>
        public Ptsv1pushfundstransferProcessingInformationPayoutsOptions(string AccountFundingReferenceId = default(string), string RetrievalReferenceNumber = default(string))
        {
            this.AccountFundingReferenceId = AccountFundingReferenceId;
            this.RetrievalReferenceNumber = RetrievalReferenceNumber;
        }
        
        /// <summary>
        /// Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request.  Applicable only for Visa Platform Connect 
        /// </summary>
        /// <value>Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request.  Applicable only for Visa Platform Connect </value>
        [DataMember(Name="accountFundingReferenceId", EmitDefaultValue=false)]
        public string AccountFundingReferenceId { get; set; }

        /// <summary>
        /// This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Format: Positions 1-4: The yddd equivalent of the date, where y &#x3D; 0-9 and ddd &#x3D; 001 – 366. Positions 5-12: A unique identification number generated by the merchant  Applicable only for Visa Platform Connect 
        /// </summary>
        /// <value>This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Format: Positions 1-4: The yddd equivalent of the date, where y &#x3D; 0-9 and ddd &#x3D; 001 – 366. Positions 5-12: A unique identification number generated by the merchant  Applicable only for Visa Platform Connect </value>
        [DataMember(Name="retrievalReferenceNumber", EmitDefaultValue=false)]
        public string RetrievalReferenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv1pushfundstransferProcessingInformationPayoutsOptions {\n");
            sb.Append("  AccountFundingReferenceId: ").Append(AccountFundingReferenceId).Append("\n");
            sb.Append("  RetrievalReferenceNumber: ").Append(RetrievalReferenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv1pushfundstransferProcessingInformationPayoutsOptions);
        }

        /// <summary>
        /// Returns true if Ptsv1pushfundstransferProcessingInformationPayoutsOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv1pushfundstransferProcessingInformationPayoutsOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv1pushfundstransferProcessingInformationPayoutsOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountFundingReferenceId == other.AccountFundingReferenceId ||
                    this.AccountFundingReferenceId != null &&
                    this.AccountFundingReferenceId.Equals(other.AccountFundingReferenceId)
                ) && 
                (
                    this.RetrievalReferenceNumber == other.RetrievalReferenceNumber ||
                    this.RetrievalReferenceNumber != null &&
                    this.RetrievalReferenceNumber.Equals(other.RetrievalReferenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountFundingReferenceId != null)
                    hash = hash * 59 + this.AccountFundingReferenceId.GetHashCode();
                if (this.RetrievalReferenceNumber != null)
                    hash = hash * 59 + this.RetrievalReferenceNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
