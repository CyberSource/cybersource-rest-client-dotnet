/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// *NEW* Name of the payment processor. Example - \&quot;wellsfargoach\&quot;
    /// </summary>
    [DataContract]
    public partial class ECheckConfigFeaturesAccountValidationServiceProcessors :  IEquatable<ECheckConfigFeaturesAccountValidationServiceProcessors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECheckConfigFeaturesAccountValidationServiceProcessors" /> class.
        /// </summary>
        /// <param name="AvsAccountOwnershipService">*NEW* Determined in WF eTicket if account has opted into the Account Ownership Service..</param>
        /// <param name="AvsAccountStatusService">*NEW* Determined in WF eTicket if account has opted into the Account Status Service..</param>
        /// <param name="AvsSignedAgreement">*NEW* Taken from Addendum Agreement Column in boarding form..</param>
        /// <param name="AvsCalculatedResponseBehavior">*NEW*.</param>
        /// <param name="AvsAdditionalId">*NEW* Also known as the Additional ID. Taken from the boarding form..</param>
        /// <param name="EnableAvs">*NEW* (default to true).</param>
        /// <param name="AvsEntityId">*NEW* Also known as the AVS Gateway Entity ID..</param>
        /// <param name="AvsResultMode">*NEW*.</param>
        /// <param name="EnableAvsTokenCreation">*NEW* Applicable if the merchant wants to run AVS on token creation requests only. (default to false).</param>
        public ECheckConfigFeaturesAccountValidationServiceProcessors(bool? AvsAccountOwnershipService = default(bool?), bool? AvsAccountStatusService = default(bool?), bool? AvsSignedAgreement = default(bool?), Object AvsCalculatedResponseBehavior = default(Object), string AvsAdditionalId = default(string), bool? EnableAvs = true, string AvsEntityId = default(string), Object AvsResultMode = default(Object), bool? EnableAvsTokenCreation = false)
        {
            this.AvsAccountOwnershipService = AvsAccountOwnershipService;
            this.AvsAccountStatusService = AvsAccountStatusService;
            this.AvsSignedAgreement = AvsSignedAgreement;
            this.AvsCalculatedResponseBehavior = AvsCalculatedResponseBehavior;
            this.AvsAdditionalId = AvsAdditionalId;
            // use default value if no "EnableAvs" provided
            if (EnableAvs == null)
            {
                this.EnableAvs = true;
            }
            else
            {
                this.EnableAvs = EnableAvs;
            }
            this.AvsEntityId = AvsEntityId;
            this.AvsResultMode = AvsResultMode;
            // use default value if no "EnableAvsTokenCreation" provided
            if (EnableAvsTokenCreation == null)
            {
                this.EnableAvsTokenCreation = false;
            }
            else
            {
                this.EnableAvsTokenCreation = EnableAvsTokenCreation;
            }
        }
        
        /// <summary>
        /// *NEW* Determined in WF eTicket if account has opted into the Account Ownership Service.
        /// </summary>
        /// <value>*NEW* Determined in WF eTicket if account has opted into the Account Ownership Service.</value>
        [DataMember(Name="avsAccountOwnershipService", EmitDefaultValue=false)]
        public bool? AvsAccountOwnershipService { get; set; }

        /// <summary>
        /// *NEW* Determined in WF eTicket if account has opted into the Account Status Service.
        /// </summary>
        /// <value>*NEW* Determined in WF eTicket if account has opted into the Account Status Service.</value>
        [DataMember(Name="avsAccountStatusService", EmitDefaultValue=false)]
        public bool? AvsAccountStatusService { get; set; }

        /// <summary>
        /// *NEW* Taken from Addendum Agreement Column in boarding form.
        /// </summary>
        /// <value>*NEW* Taken from Addendum Agreement Column in boarding form.</value>
        [DataMember(Name="avsSignedAgreement", EmitDefaultValue=false)]
        public bool? AvsSignedAgreement { get; set; }

        /// <summary>
        /// *NEW*
        /// </summary>
        /// <value>*NEW*</value>
        [DataMember(Name="avsCalculatedResponseBehavior", EmitDefaultValue=false)]
        public Object AvsCalculatedResponseBehavior { get; set; }

        /// <summary>
        /// *NEW* Also known as the Additional ID. Taken from the boarding form.
        /// </summary>
        /// <value>*NEW* Also known as the Additional ID. Taken from the boarding form.</value>
        [DataMember(Name="avsAdditionalId", EmitDefaultValue=false)]
        public string AvsAdditionalId { get; set; }

        /// <summary>
        /// *NEW*
        /// </summary>
        /// <value>*NEW*</value>
        [DataMember(Name="enableAvs", EmitDefaultValue=false)]
        public bool? EnableAvs { get; set; }

        /// <summary>
        /// *NEW* Also known as the AVS Gateway Entity ID.
        /// </summary>
        /// <value>*NEW* Also known as the AVS Gateway Entity ID.</value>
        [DataMember(Name="avsEntityId", EmitDefaultValue=false)]
        public string AvsEntityId { get; set; }

        /// <summary>
        /// *NEW*
        /// </summary>
        /// <value>*NEW*</value>
        [DataMember(Name="avsResultMode", EmitDefaultValue=false)]
        public Object AvsResultMode { get; set; }

        /// <summary>
        /// *NEW* Applicable if the merchant wants to run AVS on token creation requests only.
        /// </summary>
        /// <value>*NEW* Applicable if the merchant wants to run AVS on token creation requests only.</value>
        [DataMember(Name="enableAvsTokenCreation", EmitDefaultValue=false)]
        public bool? EnableAvsTokenCreation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECheckConfigFeaturesAccountValidationServiceProcessors {\n");
            sb.Append("  AvsAccountOwnershipService: ").Append(AvsAccountOwnershipService).Append("\n");
            sb.Append("  AvsAccountStatusService: ").Append(AvsAccountStatusService).Append("\n");
            sb.Append("  AvsSignedAgreement: ").Append(AvsSignedAgreement).Append("\n");
            sb.Append("  AvsCalculatedResponseBehavior: ").Append(AvsCalculatedResponseBehavior).Append("\n");
            sb.Append("  AvsAdditionalId: ").Append(AvsAdditionalId).Append("\n");
            sb.Append("  EnableAvs: ").Append(EnableAvs).Append("\n");
            sb.Append("  AvsEntityId: ").Append(AvsEntityId).Append("\n");
            sb.Append("  AvsResultMode: ").Append(AvsResultMode).Append("\n");
            sb.Append("  EnableAvsTokenCreation: ").Append(EnableAvsTokenCreation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ECheckConfigFeaturesAccountValidationServiceProcessors);
        }

        /// <summary>
        /// Returns true if ECheckConfigFeaturesAccountValidationServiceProcessors instances are equal
        /// </summary>
        /// <param name="other">Instance of ECheckConfigFeaturesAccountValidationServiceProcessors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECheckConfigFeaturesAccountValidationServiceProcessors other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AvsAccountOwnershipService == other.AvsAccountOwnershipService ||
                    this.AvsAccountOwnershipService != null &&
                    this.AvsAccountOwnershipService.Equals(other.AvsAccountOwnershipService)
                ) && 
                (
                    this.AvsAccountStatusService == other.AvsAccountStatusService ||
                    this.AvsAccountStatusService != null &&
                    this.AvsAccountStatusService.Equals(other.AvsAccountStatusService)
                ) && 
                (
                    this.AvsSignedAgreement == other.AvsSignedAgreement ||
                    this.AvsSignedAgreement != null &&
                    this.AvsSignedAgreement.Equals(other.AvsSignedAgreement)
                ) && 
                (
                    this.AvsCalculatedResponseBehavior == other.AvsCalculatedResponseBehavior ||
                    this.AvsCalculatedResponseBehavior != null &&
                    this.AvsCalculatedResponseBehavior.Equals(other.AvsCalculatedResponseBehavior)
                ) && 
                (
                    this.AvsAdditionalId == other.AvsAdditionalId ||
                    this.AvsAdditionalId != null &&
                    this.AvsAdditionalId.Equals(other.AvsAdditionalId)
                ) && 
                (
                    this.EnableAvs == other.EnableAvs ||
                    this.EnableAvs != null &&
                    this.EnableAvs.Equals(other.EnableAvs)
                ) && 
                (
                    this.AvsEntityId == other.AvsEntityId ||
                    this.AvsEntityId != null &&
                    this.AvsEntityId.Equals(other.AvsEntityId)
                ) && 
                (
                    this.AvsResultMode == other.AvsResultMode ||
                    this.AvsResultMode != null &&
                    this.AvsResultMode.Equals(other.AvsResultMode)
                ) && 
                (
                    this.EnableAvsTokenCreation == other.EnableAvsTokenCreation ||
                    this.EnableAvsTokenCreation != null &&
                    this.EnableAvsTokenCreation.Equals(other.EnableAvsTokenCreation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AvsAccountOwnershipService != null)
                    hash = hash * 59 + this.AvsAccountOwnershipService.GetHashCode();
                if (this.AvsAccountStatusService != null)
                    hash = hash * 59 + this.AvsAccountStatusService.GetHashCode();
                if (this.AvsSignedAgreement != null)
                    hash = hash * 59 + this.AvsSignedAgreement.GetHashCode();
                if (this.AvsCalculatedResponseBehavior != null)
                    hash = hash * 59 + this.AvsCalculatedResponseBehavior.GetHashCode();
                if (this.AvsAdditionalId != null)
                    hash = hash * 59 + this.AvsAdditionalId.GetHashCode();
                if (this.EnableAvs != null)
                    hash = hash * 59 + this.EnableAvs.GetHashCode();
                if (this.AvsEntityId != null)
                    hash = hash * 59 + this.AvsEntityId.GetHashCode();
                if (this.AvsResultMode != null)
                    hash = hash * 59 + this.AvsResultMode.GetHashCode();
                if (this.EnableAvsTokenCreation != null)
                    hash = hash * 59 + this.EnableAvsTokenCreation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
