/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentreferencesUserInterface
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentreferencesUserInterface :  IEquatable<Ptsv2paymentreferencesUserInterface>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentreferencesUserInterface" /> class.
        /// </summary>
        /// <param name="BorderRadius">Border Radius, Allowed Values - Number, Chars, SPACE, Percentage(%), DOT(.), Example &#39;25px 10px 25px 10px&#39;; &#39;2em 1em 0.5em 3em&#39; .</param>
        /// <param name="Theme">UI Theme Name/Design Name - Allowed Chars: Alpha Numeric, Dot (.), Hyphen (-), Underscore (_) .</param>
        /// <param name="Color">Color.</param>
        public Ptsv2paymentreferencesUserInterface(string BorderRadius = default(string), string Theme = default(string), Ptsv2paymentreferencesUserInterfaceColor Color = default(Ptsv2paymentreferencesUserInterfaceColor))
        {
            this.BorderRadius = BorderRadius;
            this.Theme = Theme;
            this.Color = Color;
        }
        
        /// <summary>
        /// Border Radius, Allowed Values - Number, Chars, SPACE, Percentage(%), DOT(.), Example &#39;25px 10px 25px 10px&#39;; &#39;2em 1em 0.5em 3em&#39; 
        /// </summary>
        /// <value>Border Radius, Allowed Values - Number, Chars, SPACE, Percentage(%), DOT(.), Example &#39;25px 10px 25px 10px&#39;; &#39;2em 1em 0.5em 3em&#39; </value>
        [DataMember(Name="borderRadius", EmitDefaultValue=false)]
        public string BorderRadius { get; set; }

        /// <summary>
        /// UI Theme Name/Design Name - Allowed Chars: Alpha Numeric, Dot (.), Hyphen (-), Underscore (_) 
        /// </summary>
        /// <value>UI Theme Name/Design Name - Allowed Chars: Alpha Numeric, Dot (.), Hyphen (-), Underscore (_) </value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public Ptsv2paymentreferencesUserInterfaceColor Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentreferencesUserInterface {\n");
            sb.Append("  BorderRadius: ").Append(BorderRadius).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentreferencesUserInterface);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentreferencesUserInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentreferencesUserInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentreferencesUserInterface other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BorderRadius == other.BorderRadius ||
                    this.BorderRadius != null &&
                    this.BorderRadius.Equals(other.BorderRadius)
                ) && 
                (
                    this.Theme == other.Theme ||
                    this.Theme != null &&
                    this.Theme.Equals(other.Theme)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BorderRadius != null)
                    hash = hash * 59 + this.BorderRadius.GetHashCode();
                if (this.Theme != null)
                    hash = hash * 59 + this.Theme.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
