/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails
    /// </summary>
    [DataContract]
    public partial class PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails :  IEquatable<PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails" /> class.
        /// </summary>
        /// <param name="SettlementAmount">This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder&#39;s account. This field is returned for OCT transactions. .</param>
        /// <param name="SettlementCurrency">This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder&#39;s account. This field is returned for OCT transactions. .</param>
        /// <param name="ExchangeRate">Exchange rate returned by the DCC service. Includes a decimal point and a maximum of 4 decimal places.  For details, see &#x60;exchange_rate&#x60; request-level field description in the [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf) .</param>
        /// <param name="ForeignAmount">Set this field to the converted amount that was returned by the DCC provider. For processor-specific information, see the &#x60;foreign_amount&#x60; field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) .</param>
        /// <param name="ForeignCurrency">Set this field to the converted amount that was returned by the DCC provider. .</param>
        public PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails(string SettlementAmount = default(string), string SettlementCurrency = default(string), string ExchangeRate = default(string), string ForeignAmount = default(string), string ForeignCurrency = default(string))
        {
            this.SettlementAmount = SettlementAmount;
            this.SettlementCurrency = SettlementCurrency;
            this.ExchangeRate = ExchangeRate;
            this.ForeignAmount = ForeignAmount;
            this.ForeignCurrency = ForeignCurrency;
        }
        
        /// <summary>
        /// This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder&#39;s account. This field is returned for OCT transactions. 
        /// </summary>
        /// <value>This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder&#39;s account. This field is returned for OCT transactions. </value>
        [DataMember(Name="settlementAmount", EmitDefaultValue=false)]
        public string SettlementAmount { get; set; }

        /// <summary>
        /// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder&#39;s account. This field is returned for OCT transactions. 
        /// </summary>
        /// <value>This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder&#39;s account. This field is returned for OCT transactions. </value>
        [DataMember(Name="settlementCurrency", EmitDefaultValue=false)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// Exchange rate returned by the DCC service. Includes a decimal point and a maximum of 4 decimal places.  For details, see &#x60;exchange_rate&#x60; request-level field description in the [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf) 
        /// </summary>
        /// <value>Exchange rate returned by the DCC service. Includes a decimal point and a maximum of 4 decimal places.  For details, see &#x60;exchange_rate&#x60; request-level field description in the [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf) </value>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public string ExchangeRate { get; set; }

        /// <summary>
        /// Set this field to the converted amount that was returned by the DCC provider. For processor-specific information, see the &#x60;foreign_amount&#x60; field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
        /// </summary>
        /// <value>Set this field to the converted amount that was returned by the DCC provider. For processor-specific information, see the &#x60;foreign_amount&#x60; field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) </value>
        [DataMember(Name="foreignAmount", EmitDefaultValue=false)]
        public string ForeignAmount { get; set; }

        /// <summary>
        /// Set this field to the converted amount that was returned by the DCC provider. 
        /// </summary>
        /// <value>Set this field to the converted amount that was returned by the DCC provider. </value>
        [DataMember(Name="foreignCurrency", EmitDefaultValue=false)]
        public string ForeignCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails {\n");
            sb.Append("  SettlementAmount: ").Append(SettlementAmount).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  ForeignCurrency: ").Append(ForeignCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails);
        }

        /// <summary>
        /// Returns true if PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SettlementAmount == other.SettlementAmount ||
                    this.SettlementAmount != null &&
                    this.SettlementAmount.Equals(other.SettlementAmount)
                ) && 
                (
                    this.SettlementCurrency == other.SettlementCurrency ||
                    this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(other.SettlementCurrency)
                ) && 
                (
                    this.ExchangeRate == other.ExchangeRate ||
                    this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(other.ExchangeRate)
                ) && 
                (
                    this.ForeignAmount == other.ForeignAmount ||
                    this.ForeignAmount != null &&
                    this.ForeignAmount.Equals(other.ForeignAmount)
                ) && 
                (
                    this.ForeignCurrency == other.ForeignCurrency ||
                    this.ForeignCurrency != null &&
                    this.ForeignCurrency.Equals(other.ForeignCurrency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SettlementAmount != null)
                    hash = hash * 59 + this.SettlementAmount.GetHashCode();
                if (this.SettlementCurrency != null)
                    hash = hash * 59 + this.SettlementCurrency.GetHashCode();
                if (this.ExchangeRate != null)
                    hash = hash * 59 + this.ExchangeRate.GetHashCode();
                if (this.ForeignAmount != null)
                    hash = hash * 59 + this.ForeignAmount.GetHashCode();
                if (this.ForeignCurrency != null)
                    hash = hash * 59 + this.ForeignCurrency.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
