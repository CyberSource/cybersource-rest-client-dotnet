/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsProcessingInformationAuthorizationOptions
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsProcessingInformationAuthorizationOptions :  IEquatable<Ptsv2paymentsProcessingInformationAuthorizationOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsProcessingInformationAuthorizationOptions" /> class.
        /// </summary>
        /// <param name="AuthType">Authorization type. Possible values:   - &#x60;AUTOCAPTURE&#x60;: automatic capture.  - &#x60;STANDARDCAPTURE&#x60;: standard capture.  - &#x60;VERBAL&#x60;: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to &#x60;AUTOCAPTURE&#x60; and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to &#x60;STANDARDCAPTURE&#x60; and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the &#x60;auth_type&#x60; field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to &#x60;VERBAL&#x60; and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to &#x60;VERBAL&#x60; and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \&quot;Verbal Authorizations\&quot; in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html). .</param>
        /// <param name="VerbalAuthCode">Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the &#x60;auth_code&#x60; field description in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html). .</param>
        /// <param name="VerbalAuthTransactionId">Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of &#x60;000000000000000&#x60; (15 zeros). .</param>
        /// <param name="AuthIndicator">Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. .</param>
        /// <param name="PartialAuthIndicator">Flag that indicates whether the transaction is enabled for partial authorization. When the request includes this field, this value overrides the information in your account. Possible values: - &#x60;true&#x60;: Enable the transaction for partial authorization. - &#x60;false&#x60;: Do not enable the transaction for partial authorization.  #### PIN debit Required field for partial authorizations that use PIN debit purchase; otherwise, not used.  #### Used by **Authorization** Optional field.  #### CyberSource through VisaNet To set the default for this field, contact CyberSource Customer Support. The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR0 - Position: 164 - Field: Additional Authorization Indicators .</param>
        /// <param name="BalanceInquiry">Flag that indicates whether to return balance information.  Possible values: - &#x60;true&#x60;: Return balance information. - &#x60;false&#x60;: Do not return balance information.  #### Used by **Authorization** Required for a balance inquiry; otherwise, not used.  #### PIN debit Required for a balance inquiry request of a PIN debit purchase; otherwise, not used. .</param>
        /// <param name="IgnoreAvsResult">Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline, as indicated by a reply flag value of DAVSNO.  Possible values: - &#x60;true&#x60;: Ignore the results of AVS checking and run the capture service. - &#x60;false&#x60; (default): If the authorization receives an AVS decline, do not run the capture service. When the value of this field is &#x60;true&#x60;, the list in the &#x60;processingInformation.authorizationOptions.declineAvsFlags&#x60; field is ignored.  #### Used by **Authorization** Optional field. String (3)  (default to false).</param>
        /// <param name="DeclineAvsFlags">Comma-separated list of AVS flags that cause the reply flag &#x60;DAVSNO&#x60; to be returned.  **Important** To receive declines for the AVS code &#x60;N&#x60;, you must include the value &#x60;N&#x60; in the comma-separated list.    ### AVS Codes for Cielo 3.0 and CyberSource Latin American Processing    **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports.   In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America.   The information in this section is for the specific processing connection called CyberSource Latin American Processing.   It is not for any other Latin American processors that CyberSource supports.  |AVS Code|Description| |- -- |- -- | |D|Partial match: postal code and address match.| |E|Not supported: AVS is not supported for this card type. _or_ Invalid: the acquirer returned an unrecognized value for the AVS response.| |F|Partial match: postal code matches, but CPF and address do not match.*| |G|Not supported: AVS not supported or not verified.| |I|No match: AVS information is not available.| |K|Partial match: CPF matches, but postal code and address do not match.*| |L|Partial match: postal code and CPF match, but address does not match.*| |N|No match: postal code, CPF, and address do not match.*| |O|Partial match: CPF and address match, but postal code does not match.*| |R|Not supported: your implementation does not support AVS _or_ System unavailable.| |T|Partial match: address matches, but postal code and CPF do not match.*| |V|Match: postal code, CPF, and address match.*| |* CPF (Cadastro de Pessoas Fisicas) is required only for Redecard in Brazil.||  ### AVS Codes for All Other Processors  **Note** The list of AVS codes for all other processors follows these descriptions of the processor-specific information for these codes.  #### American Express Cards For American Express cards only, you can receive Visa and CyberSource AVS codes in addition to the American Express AVS codes.  **Note** For CyberSource through VisaNet, the American Express AVS codes are converted to Visa AVS codes before they are returned to you. As a result, you will not receive American Express AVS codes for the American Express card type.&lt;br/&gt;&lt;br/&gt;  _American Express Card codes_: &#x60;F&#x60;, &#x60;H&#x60;, &#x60;K&#x60;, &#x60;L&#x60;, &#x60;O&#x60;, &#x60;T&#x60;, &#x60;V&#x60;  #### Domestic and International Visa Cards The international and domestic alphabetic AVS codes are the Visa standard AVS codes. CyberSource maps the standard AVS return codes for other types of payment cards, including American Express cards, to the Visa standard AVS codes.  AVS is considered either domestic or international, depending on the location of the bank that issued the customer&#39;s payment card: - When the bank is in the U.S., the AVS is domestic. - When the bank is outside the U.S., the AVS is international.  You should be prepared to handle both domestic and international AVS result codes: - For international cards, you can receive domestic AVS codes in addition to the international AVS codes. - For domestic cards, you can receive international AVS codes in addition to the domestic AVS codes.  _International Visa Codes_: &#x60;B&#x60;, &#x60;C&#x60;, &#x60;D&#x60;, &#x60;G&#x60;, &#x60;I&#x60;, &#x60;M&#x60;, &#x60;P&#x60;  _Domestic Visa Codes_: &#x60;A&#x60;, &#x60;E&#x60;,&#x60;N&#x60;, &#x60;R&#x60;, &#x60;S&#x60;, &#x60;U&#x60;, &#x60;W&#x60;, &#x60;X&#x60;, &#x60;Y&#x60;, &#x60;Z&#x60;  #### CyberSource Codes The numeric AVS codes are created by CyberSource and are not standard Visa codes. These AVS codes can be returned for any card type.  _CyberSource Codes_: &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, &#x60;4&#x60;  ### Table of AVS Codes for All Other Processors  |AVS Code|Description| |- -- |- -- | |A|Partial match: street address matches, but 5-digit and 9-digit postal codes do not match.| |B|Partial match: street address matches, but postal code is not verified. Returned only for Visa cards not issued in the U.S.| |C|No match: street address and postal code do not match. Returned only for Visa cards not issued in the U.S.| |D &amp; M|Match: street address and postal code match. Returned only for Visa cards not issued in the U.S.| |E|Invalid: AVS data is invalid or AVS is not allowed for this card type.| |F|Partial match: card member’s name does not match, but billing postal code matches.| |G|Not supported: issuing bank outside the U.S. does not support AVS.| |H|Partial match: card member’s name does not match, but street address and postal code match. Returned only for the American Express card type.| |I|No match: address not verified. Returned only for Visa cards not issued in the U.S.| |K|Partial match: card member’s name matches, but billing address and billing postal code do not match. Returned only for the American Express card type.| |L|Partial match: card member’s name and billing postal code match, but billing address does not match. Returned only for the American Express card type.| |M|See the entry for D &amp; M.| |N|No match: one of the following: street address and postal code do not match _or_ (American Express card type only) card member’s name, street address, and postal code do not match.| |O|Partial match: card member’s name and billing address match, but billing postal code does not match. Returned only for the American Express card type.| |P|Partial match: postal code matches, but street address not verified. Returned only for Visa cards not issued in the U.S.| |R|System unavailable.| |S|Not supported: issuing bank in the U.S. does not support AVS.| |T|Partial match: card member’s name does not match, but street address matches. Returned only for the American Express card type.| |U|System unavailable: address information unavailable for one of these reasons: The U.S. bank does not support AVS outside the U.S. _or_ The AVS in a U.S. bank is not functioning properly.| |V|Match: card member’s name, billing address, and billing postal code match. Returned only for the American Express card type.| |W|Partial match: street address does not match, but 9-digit postal code matches.| |X|Match: street address and 9-digit postal code match.| |Y|Match: street address and 5-digit postal code match.| |Z|Partial match: street address does not match, but 5-digit postal code matches.| |1|Not supported: one of the following: AVS is not supported for this processor or card type _or_ AVS is disabled for your CyberSource account. To enable AVS, contact CyberSource Customer Support.| |2|Unrecognized: the processor returned an unrecognized value for the AVS response.| |3|Match: address is confirmed. Returned only for PayPal Express Checkout.| |4|No match: address is not confirmed. Returned only for PayPal Express Checkout.| |5|No match: no AVS code was returned by the processor.| .</param>
        /// <param name="IgnoreCvResult">Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives a CVN decline, as indicated by an &#x60;processorInformation.cardVerification.resultCode&#x60; value of &#x60;D&#x60; or &#x60;N&#x60;. Possible values: - &#x60;true&#x60;: Ignore the results of CVN checking and run the capture service. - &#x60;false&#x60; (default): If the authorization receives a CVN decline, do not run the capture service.  #### Used by **Authorization** Optional field.  (default to false).</param>
        /// <param name="Initiator">Initiator.</param>
        /// <param name="BillPayment">Indicates payment for bill or payment towards existing contractual loan.  Possible values: - &#x60;true&#x60;: Bill payment or loan payment. - &#x60;false&#x60; (default): Not a bill payment or loan payment.  Optional request field. .</param>
        /// <param name="BillPaymentType">Reason for the payment.  Possible values: - 001: Utility payment - 002: Government services - 003: Mobile phone top-up - 004: Coupon payment  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 48-50 - Field: Bill Payment Transaction Type Identifier  This field is supported only for bill payments in Brazil with Mastercard on CyberSource through VisaNet. .</param>
        /// <param name="RedemptionInquiry">Flag that indicates the payment request is a redemption inquiry.  Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; .</param>
        /// <param name="TransportationMode">Type of transportation mode :  Possible Values: - 00 &#x3D; Unknown - 01 &#x3D; Urban bus - 02 &#x3D; Interurban bus - 03&#x3D;Lighttrainmasstransit(Underground Metro LTR) - 04 &#x3D; Train - 05 &#x3D; Commuter train - 06 &#x3D; Water-borne vehicle - 07 &#x3D; Toll - 08 &#x3D; Parking - 09 &#x3D; Taxi - 10 &#x3D; High-speed train - 11 &#x3D; Rural bus - 12 &#x3D; Express commuter train - 13 &#x3D; Para transit - 14 &#x3D; Self drive vehicle - 15 &#x3D; Coach - 16 &#x3D; Locomotive - 17 &#x3D; Powered motor coach - 18 &#x3D; Trailer - 19 &#x3D; Regional train - 20 &#x3D; Inter-city - 21 &#x3D; Funicular train - 22 &#x3D; Cable car .</param>
        /// <param name="AggregatedAuthIndicator">Indicates if transaction is an aggregated auth  Possible values: - **true** - **false** .</param>
        /// <param name="DebtRecoveryIndicator">Indicates if transaction is a debt recovery request  Possible values: - **true** - **false** .</param>
        /// <param name="DeferredAuthIndicator">Flag that indicates whether the authorization request was delayed because connectivity was interrupted.  Possible values:   - &#x60;true&#x60; (Deferred authorization)   - &#x60;false&#x60; (default: Not a deferred authorization) .</param>
        public Ptsv2paymentsProcessingInformationAuthorizationOptions(string AuthType = default(string), string VerbalAuthCode = default(string), string VerbalAuthTransactionId = default(string), string AuthIndicator = default(string), bool? PartialAuthIndicator = default(bool?), bool? BalanceInquiry = default(bool?), bool? IgnoreAvsResult = false, List<string> DeclineAvsFlags = default(List<string>), bool? IgnoreCvResult = false, Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator Initiator = default(Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator), bool? BillPayment = default(bool?), string BillPaymentType = default(string), bool? RedemptionInquiry = default(bool?), string TransportationMode = default(string), string AggregatedAuthIndicator = default(string), string DebtRecoveryIndicator = default(string), bool? DeferredAuthIndicator = default(bool?))
        {
            this.AuthType = AuthType;
            this.VerbalAuthCode = VerbalAuthCode;
            this.VerbalAuthTransactionId = VerbalAuthTransactionId;
            this.AuthIndicator = AuthIndicator;
            this.PartialAuthIndicator = PartialAuthIndicator;
            this.BalanceInquiry = BalanceInquiry;
            // use default value if no "IgnoreAvsResult" provided
            if (IgnoreAvsResult == null)
            {
                this.IgnoreAvsResult = false;
            }
            else
            {
                this.IgnoreAvsResult = IgnoreAvsResult;
            }
            this.DeclineAvsFlags = DeclineAvsFlags;
            // use default value if no "IgnoreCvResult" provided
            if (IgnoreCvResult == null)
            {
                this.IgnoreCvResult = false;
            }
            else
            {
                this.IgnoreCvResult = IgnoreCvResult;
            }
            this.Initiator = Initiator;
            this.BillPayment = BillPayment;
            this.BillPaymentType = BillPaymentType;
            this.RedemptionInquiry = RedemptionInquiry;
            this.TransportationMode = TransportationMode;
            this.AggregatedAuthIndicator = AggregatedAuthIndicator;
            this.DebtRecoveryIndicator = DebtRecoveryIndicator;
            this.DeferredAuthIndicator = DeferredAuthIndicator;
        }
        
        /// <summary>
        /// Authorization type. Possible values:   - &#x60;AUTOCAPTURE&#x60;: automatic capture.  - &#x60;STANDARDCAPTURE&#x60;: standard capture.  - &#x60;VERBAL&#x60;: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to &#x60;AUTOCAPTURE&#x60; and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to &#x60;STANDARDCAPTURE&#x60; and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the &#x60;auth_type&#x60; field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to &#x60;VERBAL&#x60; and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to &#x60;VERBAL&#x60; and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \&quot;Verbal Authorizations\&quot; in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html). 
        /// </summary>
        /// <value>Authorization type. Possible values:   - &#x60;AUTOCAPTURE&#x60;: automatic capture.  - &#x60;STANDARDCAPTURE&#x60;: standard capture.  - &#x60;VERBAL&#x60;: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to &#x60;AUTOCAPTURE&#x60; and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to &#x60;STANDARDCAPTURE&#x60; and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the &#x60;auth_type&#x60; field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to &#x60;VERBAL&#x60; and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to &#x60;VERBAL&#x60; and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \&quot;Verbal Authorizations\&quot; in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html). </value>
        [DataMember(Name="authType", EmitDefaultValue=false)]
        public string AuthType { get; set; }

        /// <summary>
        /// Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the &#x60;auth_code&#x60; field description in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html). 
        /// </summary>
        /// <value>Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the &#x60;auth_code&#x60; field description in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html). </value>
        [DataMember(Name="verbalAuthCode", EmitDefaultValue=false)]
        public string VerbalAuthCode { get; set; }

        /// <summary>
        /// Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of &#x60;000000000000000&#x60; (15 zeros). 
        /// </summary>
        /// <value>Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of &#x60;000000000000000&#x60; (15 zeros). </value>
        [DataMember(Name="verbalAuthTransactionId", EmitDefaultValue=false)]
        public string VerbalAuthTransactionId { get; set; }

        /// <summary>
        /// Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. 
        /// </summary>
        /// <value>Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. </value>
        [DataMember(Name="authIndicator", EmitDefaultValue=false)]
        public string AuthIndicator { get; set; }

        /// <summary>
        /// Flag that indicates whether the transaction is enabled for partial authorization. When the request includes this field, this value overrides the information in your account. Possible values: - &#x60;true&#x60;: Enable the transaction for partial authorization. - &#x60;false&#x60;: Do not enable the transaction for partial authorization.  #### PIN debit Required field for partial authorizations that use PIN debit purchase; otherwise, not used.  #### Used by **Authorization** Optional field.  #### CyberSource through VisaNet To set the default for this field, contact CyberSource Customer Support. The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR0 - Position: 164 - Field: Additional Authorization Indicators 
        /// </summary>
        /// <value>Flag that indicates whether the transaction is enabled for partial authorization. When the request includes this field, this value overrides the information in your account. Possible values: - &#x60;true&#x60;: Enable the transaction for partial authorization. - &#x60;false&#x60;: Do not enable the transaction for partial authorization.  #### PIN debit Required field for partial authorizations that use PIN debit purchase; otherwise, not used.  #### Used by **Authorization** Optional field.  #### CyberSource through VisaNet To set the default for this field, contact CyberSource Customer Support. The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR0 - Position: 164 - Field: Additional Authorization Indicators </value>
        [DataMember(Name="partialAuthIndicator", EmitDefaultValue=false)]
        public bool? PartialAuthIndicator { get; set; }

        /// <summary>
        /// Flag that indicates whether to return balance information.  Possible values: - &#x60;true&#x60;: Return balance information. - &#x60;false&#x60;: Do not return balance information.  #### Used by **Authorization** Required for a balance inquiry; otherwise, not used.  #### PIN debit Required for a balance inquiry request of a PIN debit purchase; otherwise, not used. 
        /// </summary>
        /// <value>Flag that indicates whether to return balance information.  Possible values: - &#x60;true&#x60;: Return balance information. - &#x60;false&#x60;: Do not return balance information.  #### Used by **Authorization** Required for a balance inquiry; otherwise, not used.  #### PIN debit Required for a balance inquiry request of a PIN debit purchase; otherwise, not used. </value>
        [DataMember(Name="balanceInquiry", EmitDefaultValue=false)]
        public bool? BalanceInquiry { get; set; }

        /// <summary>
        /// Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline, as indicated by a reply flag value of DAVSNO.  Possible values: - &#x60;true&#x60;: Ignore the results of AVS checking and run the capture service. - &#x60;false&#x60; (default): If the authorization receives an AVS decline, do not run the capture service. When the value of this field is &#x60;true&#x60;, the list in the &#x60;processingInformation.authorizationOptions.declineAvsFlags&#x60; field is ignored.  #### Used by **Authorization** Optional field. String (3) 
        /// </summary>
        /// <value>Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline, as indicated by a reply flag value of DAVSNO.  Possible values: - &#x60;true&#x60;: Ignore the results of AVS checking and run the capture service. - &#x60;false&#x60; (default): If the authorization receives an AVS decline, do not run the capture service. When the value of this field is &#x60;true&#x60;, the list in the &#x60;processingInformation.authorizationOptions.declineAvsFlags&#x60; field is ignored.  #### Used by **Authorization** Optional field. String (3) </value>
        [DataMember(Name="ignoreAvsResult", EmitDefaultValue=false)]
        public bool? IgnoreAvsResult { get; set; }

        /// <summary>
        /// Comma-separated list of AVS flags that cause the reply flag &#x60;DAVSNO&#x60; to be returned.  **Important** To receive declines for the AVS code &#x60;N&#x60;, you must include the value &#x60;N&#x60; in the comma-separated list.    ### AVS Codes for Cielo 3.0 and CyberSource Latin American Processing    **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports.   In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America.   The information in this section is for the specific processing connection called CyberSource Latin American Processing.   It is not for any other Latin American processors that CyberSource supports.  |AVS Code|Description| |- -- |- -- | |D|Partial match: postal code and address match.| |E|Not supported: AVS is not supported for this card type. _or_ Invalid: the acquirer returned an unrecognized value for the AVS response.| |F|Partial match: postal code matches, but CPF and address do not match.*| |G|Not supported: AVS not supported or not verified.| |I|No match: AVS information is not available.| |K|Partial match: CPF matches, but postal code and address do not match.*| |L|Partial match: postal code and CPF match, but address does not match.*| |N|No match: postal code, CPF, and address do not match.*| |O|Partial match: CPF and address match, but postal code does not match.*| |R|Not supported: your implementation does not support AVS _or_ System unavailable.| |T|Partial match: address matches, but postal code and CPF do not match.*| |V|Match: postal code, CPF, and address match.*| |* CPF (Cadastro de Pessoas Fisicas) is required only for Redecard in Brazil.||  ### AVS Codes for All Other Processors  **Note** The list of AVS codes for all other processors follows these descriptions of the processor-specific information for these codes.  #### American Express Cards For American Express cards only, you can receive Visa and CyberSource AVS codes in addition to the American Express AVS codes.  **Note** For CyberSource through VisaNet, the American Express AVS codes are converted to Visa AVS codes before they are returned to you. As a result, you will not receive American Express AVS codes for the American Express card type.&lt;br/&gt;&lt;br/&gt;  _American Express Card codes_: &#x60;F&#x60;, &#x60;H&#x60;, &#x60;K&#x60;, &#x60;L&#x60;, &#x60;O&#x60;, &#x60;T&#x60;, &#x60;V&#x60;  #### Domestic and International Visa Cards The international and domestic alphabetic AVS codes are the Visa standard AVS codes. CyberSource maps the standard AVS return codes for other types of payment cards, including American Express cards, to the Visa standard AVS codes.  AVS is considered either domestic or international, depending on the location of the bank that issued the customer&#39;s payment card: - When the bank is in the U.S., the AVS is domestic. - When the bank is outside the U.S., the AVS is international.  You should be prepared to handle both domestic and international AVS result codes: - For international cards, you can receive domestic AVS codes in addition to the international AVS codes. - For domestic cards, you can receive international AVS codes in addition to the domestic AVS codes.  _International Visa Codes_: &#x60;B&#x60;, &#x60;C&#x60;, &#x60;D&#x60;, &#x60;G&#x60;, &#x60;I&#x60;, &#x60;M&#x60;, &#x60;P&#x60;  _Domestic Visa Codes_: &#x60;A&#x60;, &#x60;E&#x60;,&#x60;N&#x60;, &#x60;R&#x60;, &#x60;S&#x60;, &#x60;U&#x60;, &#x60;W&#x60;, &#x60;X&#x60;, &#x60;Y&#x60;, &#x60;Z&#x60;  #### CyberSource Codes The numeric AVS codes are created by CyberSource and are not standard Visa codes. These AVS codes can be returned for any card type.  _CyberSource Codes_: &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, &#x60;4&#x60;  ### Table of AVS Codes for All Other Processors  |AVS Code|Description| |- -- |- -- | |A|Partial match: street address matches, but 5-digit and 9-digit postal codes do not match.| |B|Partial match: street address matches, but postal code is not verified. Returned only for Visa cards not issued in the U.S.| |C|No match: street address and postal code do not match. Returned only for Visa cards not issued in the U.S.| |D &amp; M|Match: street address and postal code match. Returned only for Visa cards not issued in the U.S.| |E|Invalid: AVS data is invalid or AVS is not allowed for this card type.| |F|Partial match: card member’s name does not match, but billing postal code matches.| |G|Not supported: issuing bank outside the U.S. does not support AVS.| |H|Partial match: card member’s name does not match, but street address and postal code match. Returned only for the American Express card type.| |I|No match: address not verified. Returned only for Visa cards not issued in the U.S.| |K|Partial match: card member’s name matches, but billing address and billing postal code do not match. Returned only for the American Express card type.| |L|Partial match: card member’s name and billing postal code match, but billing address does not match. Returned only for the American Express card type.| |M|See the entry for D &amp; M.| |N|No match: one of the following: street address and postal code do not match _or_ (American Express card type only) card member’s name, street address, and postal code do not match.| |O|Partial match: card member’s name and billing address match, but billing postal code does not match. Returned only for the American Express card type.| |P|Partial match: postal code matches, but street address not verified. Returned only for Visa cards not issued in the U.S.| |R|System unavailable.| |S|Not supported: issuing bank in the U.S. does not support AVS.| |T|Partial match: card member’s name does not match, but street address matches. Returned only for the American Express card type.| |U|System unavailable: address information unavailable for one of these reasons: The U.S. bank does not support AVS outside the U.S. _or_ The AVS in a U.S. bank is not functioning properly.| |V|Match: card member’s name, billing address, and billing postal code match. Returned only for the American Express card type.| |W|Partial match: street address does not match, but 9-digit postal code matches.| |X|Match: street address and 9-digit postal code match.| |Y|Match: street address and 5-digit postal code match.| |Z|Partial match: street address does not match, but 5-digit postal code matches.| |1|Not supported: one of the following: AVS is not supported for this processor or card type _or_ AVS is disabled for your CyberSource account. To enable AVS, contact CyberSource Customer Support.| |2|Unrecognized: the processor returned an unrecognized value for the AVS response.| |3|Match: address is confirmed. Returned only for PayPal Express Checkout.| |4|No match: address is not confirmed. Returned only for PayPal Express Checkout.| |5|No match: no AVS code was returned by the processor.| 
        /// </summary>
        /// <value>Comma-separated list of AVS flags that cause the reply flag &#x60;DAVSNO&#x60; to be returned.  **Important** To receive declines for the AVS code &#x60;N&#x60;, you must include the value &#x60;N&#x60; in the comma-separated list.    ### AVS Codes for Cielo 3.0 and CyberSource Latin American Processing    **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports.   In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America.   The information in this section is for the specific processing connection called CyberSource Latin American Processing.   It is not for any other Latin American processors that CyberSource supports.  |AVS Code|Description| |- -- |- -- | |D|Partial match: postal code and address match.| |E|Not supported: AVS is not supported for this card type. _or_ Invalid: the acquirer returned an unrecognized value for the AVS response.| |F|Partial match: postal code matches, but CPF and address do not match.*| |G|Not supported: AVS not supported or not verified.| |I|No match: AVS information is not available.| |K|Partial match: CPF matches, but postal code and address do not match.*| |L|Partial match: postal code and CPF match, but address does not match.*| |N|No match: postal code, CPF, and address do not match.*| |O|Partial match: CPF and address match, but postal code does not match.*| |R|Not supported: your implementation does not support AVS _or_ System unavailable.| |T|Partial match: address matches, but postal code and CPF do not match.*| |V|Match: postal code, CPF, and address match.*| |* CPF (Cadastro de Pessoas Fisicas) is required only for Redecard in Brazil.||  ### AVS Codes for All Other Processors  **Note** The list of AVS codes for all other processors follows these descriptions of the processor-specific information for these codes.  #### American Express Cards For American Express cards only, you can receive Visa and CyberSource AVS codes in addition to the American Express AVS codes.  **Note** For CyberSource through VisaNet, the American Express AVS codes are converted to Visa AVS codes before they are returned to you. As a result, you will not receive American Express AVS codes for the American Express card type.&lt;br/&gt;&lt;br/&gt;  _American Express Card codes_: &#x60;F&#x60;, &#x60;H&#x60;, &#x60;K&#x60;, &#x60;L&#x60;, &#x60;O&#x60;, &#x60;T&#x60;, &#x60;V&#x60;  #### Domestic and International Visa Cards The international and domestic alphabetic AVS codes are the Visa standard AVS codes. CyberSource maps the standard AVS return codes for other types of payment cards, including American Express cards, to the Visa standard AVS codes.  AVS is considered either domestic or international, depending on the location of the bank that issued the customer&#39;s payment card: - When the bank is in the U.S., the AVS is domestic. - When the bank is outside the U.S., the AVS is international.  You should be prepared to handle both domestic and international AVS result codes: - For international cards, you can receive domestic AVS codes in addition to the international AVS codes. - For domestic cards, you can receive international AVS codes in addition to the domestic AVS codes.  _International Visa Codes_: &#x60;B&#x60;, &#x60;C&#x60;, &#x60;D&#x60;, &#x60;G&#x60;, &#x60;I&#x60;, &#x60;M&#x60;, &#x60;P&#x60;  _Domestic Visa Codes_: &#x60;A&#x60;, &#x60;E&#x60;,&#x60;N&#x60;, &#x60;R&#x60;, &#x60;S&#x60;, &#x60;U&#x60;, &#x60;W&#x60;, &#x60;X&#x60;, &#x60;Y&#x60;, &#x60;Z&#x60;  #### CyberSource Codes The numeric AVS codes are created by CyberSource and are not standard Visa codes. These AVS codes can be returned for any card type.  _CyberSource Codes_: &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, &#x60;4&#x60;  ### Table of AVS Codes for All Other Processors  |AVS Code|Description| |- -- |- -- | |A|Partial match: street address matches, but 5-digit and 9-digit postal codes do not match.| |B|Partial match: street address matches, but postal code is not verified. Returned only for Visa cards not issued in the U.S.| |C|No match: street address and postal code do not match. Returned only for Visa cards not issued in the U.S.| |D &amp; M|Match: street address and postal code match. Returned only for Visa cards not issued in the U.S.| |E|Invalid: AVS data is invalid or AVS is not allowed for this card type.| |F|Partial match: card member’s name does not match, but billing postal code matches.| |G|Not supported: issuing bank outside the U.S. does not support AVS.| |H|Partial match: card member’s name does not match, but street address and postal code match. Returned only for the American Express card type.| |I|No match: address not verified. Returned only for Visa cards not issued in the U.S.| |K|Partial match: card member’s name matches, but billing address and billing postal code do not match. Returned only for the American Express card type.| |L|Partial match: card member’s name and billing postal code match, but billing address does not match. Returned only for the American Express card type.| |M|See the entry for D &amp; M.| |N|No match: one of the following: street address and postal code do not match _or_ (American Express card type only) card member’s name, street address, and postal code do not match.| |O|Partial match: card member’s name and billing address match, but billing postal code does not match. Returned only for the American Express card type.| |P|Partial match: postal code matches, but street address not verified. Returned only for Visa cards not issued in the U.S.| |R|System unavailable.| |S|Not supported: issuing bank in the U.S. does not support AVS.| |T|Partial match: card member’s name does not match, but street address matches. Returned only for the American Express card type.| |U|System unavailable: address information unavailable for one of these reasons: The U.S. bank does not support AVS outside the U.S. _or_ The AVS in a U.S. bank is not functioning properly.| |V|Match: card member’s name, billing address, and billing postal code match. Returned only for the American Express card type.| |W|Partial match: street address does not match, but 9-digit postal code matches.| |X|Match: street address and 9-digit postal code match.| |Y|Match: street address and 5-digit postal code match.| |Z|Partial match: street address does not match, but 5-digit postal code matches.| |1|Not supported: one of the following: AVS is not supported for this processor or card type _or_ AVS is disabled for your CyberSource account. To enable AVS, contact CyberSource Customer Support.| |2|Unrecognized: the processor returned an unrecognized value for the AVS response.| |3|Match: address is confirmed. Returned only for PayPal Express Checkout.| |4|No match: address is not confirmed. Returned only for PayPal Express Checkout.| |5|No match: no AVS code was returned by the processor.| </value>
        [DataMember(Name="declineAvsFlags", EmitDefaultValue=false)]
        public List<string> DeclineAvsFlags { get; set; }

        /// <summary>
        /// Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives a CVN decline, as indicated by an &#x60;processorInformation.cardVerification.resultCode&#x60; value of &#x60;D&#x60; or &#x60;N&#x60;. Possible values: - &#x60;true&#x60;: Ignore the results of CVN checking and run the capture service. - &#x60;false&#x60; (default): If the authorization receives a CVN decline, do not run the capture service.  #### Used by **Authorization** Optional field. 
        /// </summary>
        /// <value>Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives a CVN decline, as indicated by an &#x60;processorInformation.cardVerification.resultCode&#x60; value of &#x60;D&#x60; or &#x60;N&#x60;. Possible values: - &#x60;true&#x60;: Ignore the results of CVN checking and run the capture service. - &#x60;false&#x60; (default): If the authorization receives a CVN decline, do not run the capture service.  #### Used by **Authorization** Optional field. </value>
        [DataMember(Name="ignoreCvResult", EmitDefaultValue=false)]
        public bool? IgnoreCvResult { get; set; }

        /// <summary>
        /// Gets or Sets Initiator
        /// </summary>
        [DataMember(Name="initiator", EmitDefaultValue=false)]
        public Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator Initiator { get; set; }

        /// <summary>
        /// Indicates payment for bill or payment towards existing contractual loan.  Possible values: - &#x60;true&#x60;: Bill payment or loan payment. - &#x60;false&#x60; (default): Not a bill payment or loan payment.  Optional request field. 
        /// </summary>
        /// <value>Indicates payment for bill or payment towards existing contractual loan.  Possible values: - &#x60;true&#x60;: Bill payment or loan payment. - &#x60;false&#x60; (default): Not a bill payment or loan payment.  Optional request field. </value>
        [DataMember(Name="billPayment", EmitDefaultValue=false)]
        public bool? BillPayment { get; set; }

        /// <summary>
        /// Reason for the payment.  Possible values: - 001: Utility payment - 002: Government services - 003: Mobile phone top-up - 004: Coupon payment  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 48-50 - Field: Bill Payment Transaction Type Identifier  This field is supported only for bill payments in Brazil with Mastercard on CyberSource through VisaNet. 
        /// </summary>
        /// <value>Reason for the payment.  Possible values: - 001: Utility payment - 002: Government services - 003: Mobile phone top-up - 004: Coupon payment  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 48-50 - Field: Bill Payment Transaction Type Identifier  This field is supported only for bill payments in Brazil with Mastercard on CyberSource through VisaNet. </value>
        [DataMember(Name="billPaymentType", EmitDefaultValue=false)]
        public string BillPaymentType { get; set; }

        /// <summary>
        /// Flag that indicates the payment request is a redemption inquiry.  Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; 
        /// </summary>
        /// <value>Flag that indicates the payment request is a redemption inquiry.  Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; </value>
        [DataMember(Name="redemptionInquiry", EmitDefaultValue=false)]
        public bool? RedemptionInquiry { get; set; }

        /// <summary>
        /// Type of transportation mode :  Possible Values: - 00 &#x3D; Unknown - 01 &#x3D; Urban bus - 02 &#x3D; Interurban bus - 03&#x3D;Lighttrainmasstransit(Underground Metro LTR) - 04 &#x3D; Train - 05 &#x3D; Commuter train - 06 &#x3D; Water-borne vehicle - 07 &#x3D; Toll - 08 &#x3D; Parking - 09 &#x3D; Taxi - 10 &#x3D; High-speed train - 11 &#x3D; Rural bus - 12 &#x3D; Express commuter train - 13 &#x3D; Para transit - 14 &#x3D; Self drive vehicle - 15 &#x3D; Coach - 16 &#x3D; Locomotive - 17 &#x3D; Powered motor coach - 18 &#x3D; Trailer - 19 &#x3D; Regional train - 20 &#x3D; Inter-city - 21 &#x3D; Funicular train - 22 &#x3D; Cable car 
        /// </summary>
        /// <value>Type of transportation mode :  Possible Values: - 00 &#x3D; Unknown - 01 &#x3D; Urban bus - 02 &#x3D; Interurban bus - 03&#x3D;Lighttrainmasstransit(Underground Metro LTR) - 04 &#x3D; Train - 05 &#x3D; Commuter train - 06 &#x3D; Water-borne vehicle - 07 &#x3D; Toll - 08 &#x3D; Parking - 09 &#x3D; Taxi - 10 &#x3D; High-speed train - 11 &#x3D; Rural bus - 12 &#x3D; Express commuter train - 13 &#x3D; Para transit - 14 &#x3D; Self drive vehicle - 15 &#x3D; Coach - 16 &#x3D; Locomotive - 17 &#x3D; Powered motor coach - 18 &#x3D; Trailer - 19 &#x3D; Regional train - 20 &#x3D; Inter-city - 21 &#x3D; Funicular train - 22 &#x3D; Cable car </value>
        [DataMember(Name="transportationMode", EmitDefaultValue=false)]
        public string TransportationMode { get; set; }

        /// <summary>
        /// Indicates if transaction is an aggregated auth  Possible values: - **true** - **false** 
        /// </summary>
        /// <value>Indicates if transaction is an aggregated auth  Possible values: - **true** - **false** </value>
        [DataMember(Name="aggregatedAuthIndicator", EmitDefaultValue=false)]
        public string AggregatedAuthIndicator { get; set; }

        /// <summary>
        /// Indicates if transaction is a debt recovery request  Possible values: - **true** - **false** 
        /// </summary>
        /// <value>Indicates if transaction is a debt recovery request  Possible values: - **true** - **false** </value>
        [DataMember(Name="debtRecoveryIndicator", EmitDefaultValue=false)]
        public string DebtRecoveryIndicator { get; set; }

        /// <summary>
        /// Flag that indicates whether the authorization request was delayed because connectivity was interrupted.  Possible values:   - &#x60;true&#x60; (Deferred authorization)   - &#x60;false&#x60; (default: Not a deferred authorization) 
        /// </summary>
        /// <value>Flag that indicates whether the authorization request was delayed because connectivity was interrupted.  Possible values:   - &#x60;true&#x60; (Deferred authorization)   - &#x60;false&#x60; (default: Not a deferred authorization) </value>
        [DataMember(Name="deferredAuthIndicator", EmitDefaultValue=false)]
        public bool? DeferredAuthIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsProcessingInformationAuthorizationOptions {\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  VerbalAuthCode: ").Append(VerbalAuthCode).Append("\n");
            sb.Append("  VerbalAuthTransactionId: ").Append(VerbalAuthTransactionId).Append("\n");
            sb.Append("  AuthIndicator: ").Append(AuthIndicator).Append("\n");
            sb.Append("  PartialAuthIndicator: ").Append(PartialAuthIndicator).Append("\n");
            sb.Append("  BalanceInquiry: ").Append(BalanceInquiry).Append("\n");
            sb.Append("  IgnoreAvsResult: ").Append(IgnoreAvsResult).Append("\n");
            sb.Append("  DeclineAvsFlags: ").Append(DeclineAvsFlags).Append("\n");
            sb.Append("  IgnoreCvResult: ").Append(IgnoreCvResult).Append("\n");
            sb.Append("  Initiator: ").Append(Initiator).Append("\n");
            sb.Append("  BillPayment: ").Append(BillPayment).Append("\n");
            sb.Append("  BillPaymentType: ").Append(BillPaymentType).Append("\n");
            sb.Append("  RedemptionInquiry: ").Append(RedemptionInquiry).Append("\n");
            sb.Append("  TransportationMode: ").Append(TransportationMode).Append("\n");
            sb.Append("  AggregatedAuthIndicator: ").Append(AggregatedAuthIndicator).Append("\n");
            sb.Append("  DebtRecoveryIndicator: ").Append(DebtRecoveryIndicator).Append("\n");
            sb.Append("  DeferredAuthIndicator: ").Append(DeferredAuthIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsProcessingInformationAuthorizationOptions);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsProcessingInformationAuthorizationOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsProcessingInformationAuthorizationOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsProcessingInformationAuthorizationOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AuthType == other.AuthType ||
                    this.AuthType != null &&
                    this.AuthType.Equals(other.AuthType)
                ) && 
                (
                    this.VerbalAuthCode == other.VerbalAuthCode ||
                    this.VerbalAuthCode != null &&
                    this.VerbalAuthCode.Equals(other.VerbalAuthCode)
                ) && 
                (
                    this.VerbalAuthTransactionId == other.VerbalAuthTransactionId ||
                    this.VerbalAuthTransactionId != null &&
                    this.VerbalAuthTransactionId.Equals(other.VerbalAuthTransactionId)
                ) && 
                (
                    this.AuthIndicator == other.AuthIndicator ||
                    this.AuthIndicator != null &&
                    this.AuthIndicator.Equals(other.AuthIndicator)
                ) && 
                (
                    this.PartialAuthIndicator == other.PartialAuthIndicator ||
                    this.PartialAuthIndicator != null &&
                    this.PartialAuthIndicator.Equals(other.PartialAuthIndicator)
                ) && 
                (
                    this.BalanceInquiry == other.BalanceInquiry ||
                    this.BalanceInquiry != null &&
                    this.BalanceInquiry.Equals(other.BalanceInquiry)
                ) && 
                (
                    this.IgnoreAvsResult == other.IgnoreAvsResult ||
                    this.IgnoreAvsResult != null &&
                    this.IgnoreAvsResult.Equals(other.IgnoreAvsResult)
                ) && 
                (
                    this.DeclineAvsFlags == other.DeclineAvsFlags ||
                    this.DeclineAvsFlags != null &&
                    this.DeclineAvsFlags.SequenceEqual(other.DeclineAvsFlags)
                ) && 
                (
                    this.IgnoreCvResult == other.IgnoreCvResult ||
                    this.IgnoreCvResult != null &&
                    this.IgnoreCvResult.Equals(other.IgnoreCvResult)
                ) && 
                (
                    this.Initiator == other.Initiator ||
                    this.Initiator != null &&
                    this.Initiator.Equals(other.Initiator)
                ) && 
                (
                    this.BillPayment == other.BillPayment ||
                    this.BillPayment != null &&
                    this.BillPayment.Equals(other.BillPayment)
                ) && 
                (
                    this.BillPaymentType == other.BillPaymentType ||
                    this.BillPaymentType != null &&
                    this.BillPaymentType.Equals(other.BillPaymentType)
                ) && 
                (
                    this.RedemptionInquiry == other.RedemptionInquiry ||
                    this.RedemptionInquiry != null &&
                    this.RedemptionInquiry.Equals(other.RedemptionInquiry)
                ) && 
                (
                    this.TransportationMode == other.TransportationMode ||
                    this.TransportationMode != null &&
                    this.TransportationMode.Equals(other.TransportationMode)
                ) && 
                (
                    this.AggregatedAuthIndicator == other.AggregatedAuthIndicator ||
                    this.AggregatedAuthIndicator != null &&
                    this.AggregatedAuthIndicator.Equals(other.AggregatedAuthIndicator)
                ) && 
                (
                    this.DebtRecoveryIndicator == other.DebtRecoveryIndicator ||
                    this.DebtRecoveryIndicator != null &&
                    this.DebtRecoveryIndicator.Equals(other.DebtRecoveryIndicator)
                ) && 
                (
                    this.DeferredAuthIndicator == other.DeferredAuthIndicator ||
                    this.DeferredAuthIndicator != null &&
                    this.DeferredAuthIndicator.Equals(other.DeferredAuthIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AuthType != null)
                    hash = hash * 59 + this.AuthType.GetHashCode();
                if (this.VerbalAuthCode != null)
                    hash = hash * 59 + this.VerbalAuthCode.GetHashCode();
                if (this.VerbalAuthTransactionId != null)
                    hash = hash * 59 + this.VerbalAuthTransactionId.GetHashCode();
                if (this.AuthIndicator != null)
                    hash = hash * 59 + this.AuthIndicator.GetHashCode();
                if (this.PartialAuthIndicator != null)
                    hash = hash * 59 + this.PartialAuthIndicator.GetHashCode();
                if (this.BalanceInquiry != null)
                    hash = hash * 59 + this.BalanceInquiry.GetHashCode();
                if (this.IgnoreAvsResult != null)
                    hash = hash * 59 + this.IgnoreAvsResult.GetHashCode();
                if (this.DeclineAvsFlags != null)
                    hash = hash * 59 + this.DeclineAvsFlags.GetHashCode();
                if (this.IgnoreCvResult != null)
                    hash = hash * 59 + this.IgnoreCvResult.GetHashCode();
                if (this.Initiator != null)
                    hash = hash * 59 + this.Initiator.GetHashCode();
                if (this.BillPayment != null)
                    hash = hash * 59 + this.BillPayment.GetHashCode();
                if (this.BillPaymentType != null)
                    hash = hash * 59 + this.BillPaymentType.GetHashCode();
                if (this.RedemptionInquiry != null)
                    hash = hash * 59 + this.RedemptionInquiry.GetHashCode();
                if (this.TransportationMode != null)
                    hash = hash * 59 + this.TransportationMode.GetHashCode();
                if (this.AggregatedAuthIndicator != null)
                    hash = hash * 59 + this.AggregatedAuthIndicator.GetHashCode();
                if (this.DebtRecoveryIndicator != null)
                    hash = hash * 59 + this.DebtRecoveryIndicator.GetHashCode();
                if (this.DeferredAuthIndicator != null)
                    hash = hash * 59 + this.DeferredAuthIndicator.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthType (string) maxLength
            if(this.AuthType != null && this.AuthType.Length >= 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthType, length must be less than or equal to 15.", new [] { "AuthType" });
            }

            // VerbalAuthCode (string) maxLength
            if(this.VerbalAuthCode != null && this.VerbalAuthCode.Length >= 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VerbalAuthCode, length must be less than or equal to 7.", new [] { "VerbalAuthCode" });
            }

            // VerbalAuthTransactionId (string) maxLength
            if(this.VerbalAuthTransactionId != null && this.VerbalAuthTransactionId.Length >= 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VerbalAuthTransactionId, length must be less than or equal to 15.", new [] { "VerbalAuthTransactionId" });
            }

            // AuthIndicator (string) maxLength
            if(this.AuthIndicator != null && this.AuthIndicator.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthIndicator, length must be less than or equal to 1.", new [] { "AuthIndicator" });
            }

            yield break;
        }
    }

}
