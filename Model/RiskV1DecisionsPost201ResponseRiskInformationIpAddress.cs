/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Contains detailed response information about the customer&#39;s IP address.
    /// </summary>
    [DataContract]
    public partial class RiskV1DecisionsPost201ResponseRiskInformationIpAddress :  IEquatable<RiskV1DecisionsPost201ResponseRiskInformationIpAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1DecisionsPost201ResponseRiskInformationIpAddress" /> class.
        /// </summary>
        /// <param name="AnonymizerStatus">Indicates whether the transaction IP address is associated with a known anonymous proxy. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for &#39;Reply Fields&#39;: \&quot;afsReply_ipAnonymizerStatus\&quot;. .</param>
        /// <param name="City">Name of the city decoded from the IP address used directly or indirectly by the customer to send the order. .</param>
        /// <param name="Country">Name of the country decoded from the IP address used directly or indirectly by the customer to send the order. .</param>
        /// <param name="State">Name of the state decoded from the IP address used directly or indirectly by the customer to send the order. .</param>
        /// <param name="RoutingMethod">Routing method decoded from the IP address used directly or indirectly by the customer to send the order. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for &#39;Reply Fields&#39;: \&quot;afsService_ipRoutingMethod \&quot;. .</param>
        public RiskV1DecisionsPost201ResponseRiskInformationIpAddress(string AnonymizerStatus = default(string), string City = default(string), string Country = default(string), string State = default(string), string RoutingMethod = default(string))
        {
            this.AnonymizerStatus = AnonymizerStatus;
            this.City = City;
            this.Country = Country;
            this.State = State;
            this.RoutingMethod = RoutingMethod;
        }
        
        /// <summary>
        /// Indicates whether the transaction IP address is associated with a known anonymous proxy. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for &#39;Reply Fields&#39;: \&quot;afsReply_ipAnonymizerStatus\&quot;. 
        /// </summary>
        /// <value>Indicates whether the transaction IP address is associated with a known anonymous proxy. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for &#39;Reply Fields&#39;: \&quot;afsReply_ipAnonymizerStatus\&quot;. </value>
        [DataMember(Name="anonymizerStatus", EmitDefaultValue=false)]
        public string AnonymizerStatus { get; set; }

        /// <summary>
        /// Name of the city decoded from the IP address used directly or indirectly by the customer to send the order. 
        /// </summary>
        /// <value>Name of the city decoded from the IP address used directly or indirectly by the customer to send the order. </value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Name of the country decoded from the IP address used directly or indirectly by the customer to send the order. 
        /// </summary>
        /// <value>Name of the country decoded from the IP address used directly or indirectly by the customer to send the order. </value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Name of the state decoded from the IP address used directly or indirectly by the customer to send the order. 
        /// </summary>
        /// <value>Name of the state decoded from the IP address used directly or indirectly by the customer to send the order. </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Routing method decoded from the IP address used directly or indirectly by the customer to send the order. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for &#39;Reply Fields&#39;: \&quot;afsService_ipRoutingMethod \&quot;. 
        /// </summary>
        /// <value>Routing method decoded from the IP address used directly or indirectly by the customer to send the order. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for &#39;Reply Fields&#39;: \&quot;afsService_ipRoutingMethod \&quot;. </value>
        [DataMember(Name="routingMethod", EmitDefaultValue=false)]
        public string RoutingMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1DecisionsPost201ResponseRiskInformationIpAddress {\n");
            sb.Append("  AnonymizerStatus: ").Append(AnonymizerStatus).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RoutingMethod: ").Append(RoutingMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1DecisionsPost201ResponseRiskInformationIpAddress);
        }

        /// <summary>
        /// Returns true if RiskV1DecisionsPost201ResponseRiskInformationIpAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1DecisionsPost201ResponseRiskInformationIpAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1DecisionsPost201ResponseRiskInformationIpAddress other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AnonymizerStatus == other.AnonymizerStatus ||
                    this.AnonymizerStatus != null &&
                    this.AnonymizerStatus.Equals(other.AnonymizerStatus)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.RoutingMethod == other.RoutingMethod ||
                    this.RoutingMethod != null &&
                    this.RoutingMethod.Equals(other.RoutingMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AnonymizerStatus != null)
                    hash = hash * 59 + this.AnonymizerStatus.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.RoutingMethod != null)
                    hash = hash * 59 + this.RoutingMethod.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AnonymizerStatus (string) maxLength
            if(this.AnonymizerStatus != null && this.AnonymizerStatus.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnonymizerStatus, length must be less than 255.", new [] { "AnonymizerStatus" });
            }

            // City (string) maxLength
            if(this.City != null && this.City.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 255.", new [] { "City" });
            }

            // Country (string) maxLength
            if(this.Country != null && this.Country.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 255.", new [] { "Country" });
            }

            // State (string) maxLength
            if(this.State != null && this.State.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 255.", new [] { "State" });
            }

            // RoutingMethod (string) maxLength
            if(this.RoutingMethod != null && this.RoutingMethod.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RoutingMethod, length must be less than 255.", new [] { "RoutingMethod" });
            }

            yield break;
        }
    }

}
