/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;
using AuthenticationSdk.core;
using CyberSource.Utilities;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceDeAssociationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// De-associate a device from merchant or account V2
        /// </summary>
        /// <remarks>
        /// The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns></returns>
        void DeleteTerminalAssociation (DeAssociationRequestBody deAssociationRequestBody);

        /// <summary>
        /// De-associate a device from merchant or account V2
        /// </summary>
        /// <remarks>
        /// The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTerminalAssociationWithHttpInfo (DeAssociationRequestBody deAssociationRequestBody);
        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller
        /// </summary>
        /// <remarks>
        /// A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>List&lt;InlineResponse2006&gt;</returns>
        List<InlineResponse2006> PostDeAssociateV3Terminal (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request);

        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller
        /// </summary>
        /// <remarks>
        /// A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2006&gt;</returns>
        ApiResponse<List<InlineResponse2006>> PostDeAssociateV3TerminalWithHttpInfo (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// De-associate a device from merchant or account V2
        /// </summary>
        /// <remarks>
        /// The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTerminalAssociationAsync (DeAssociationRequestBody deAssociationRequestBody);

        /// <summary>
        /// De-associate a device from merchant or account V2
        /// </summary>
        /// <remarks>
        /// The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTerminalAssociationAsyncWithHttpInfo (DeAssociationRequestBody deAssociationRequestBody);
        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller
        /// </summary>
        /// <remarks>
        /// A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>Task of List&lt;InlineResponse2006&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2006>> PostDeAssociateV3TerminalAsync (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request);

        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller
        /// </summary>
        /// <remarks>
        /// A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2006&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2006>>> PostDeAssociateV3TerminalAsyncWithHttpInfo (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceDeAssociationApi : IDeviceDeAssociationApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDeAssociationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceDeAssociationApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceDeAssociationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceDeAssociationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// De-associate a device from merchant or account V2 The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns></returns>
        public void DeleteTerminalAssociation (DeAssociationRequestBody deAssociationRequestBody)
        {
            logger.Debug("CALLING API \"DeleteTerminalAssociation\" STARTED");
            this.SetStatusCode(null);
            DeleteTerminalAssociationWithHttpInfo(deAssociationRequestBody);
        }

        /// <summary>
        /// De-associate a device from merchant or account V2 The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTerminalAssociationWithHttpInfo (DeAssociationRequestBody deAssociationRequestBody)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'deAssociationRequestBody' is set
            if (deAssociationRequestBody == null)
            {
                logger.Error("ApiException : Missing required parameter 'deAssociationRequestBody' when calling DeviceDeAssociationApi->DeleteTerminalAssociation");
                throw new ApiException(400, "Missing required parameter 'deAssociationRequestBody' when calling DeviceDeAssociationApi->DeleteTerminalAssociation");
            }

            var localVarPath = $"/dms/v2/devices/deassociate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=UTF-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (deAssociationRequestBody != null && deAssociationRequestBody.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                deAssociationRequestBody = (DeAssociationRequestBody)sdkTracker.InsertDeveloperIdTracker(deAssociationRequestBody, deAssociationRequestBody.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(deAssociationRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deAssociationRequestBody; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "DeleteTerminalAssociation,DeleteTerminalAssociationAsync,DeleteTerminalAssociationWithHttpInfo,DeleteTerminalAssociationAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTerminalAssociation", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// De-associate a device from merchant or account V2 The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTerminalAssociationAsync (DeAssociationRequestBody deAssociationRequestBody)
        {
            logger.Debug("CALLING API \"DeleteTerminalAssociationAsync\" STARTED");
            this.SetStatusCode(null);
            await DeleteTerminalAssociationAsyncWithHttpInfo(deAssociationRequestBody);

        }

        /// <summary>
        /// De-associate a device from merchant or account V2 The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deAssociationRequestBody">de association of the deviceId in the request body.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTerminalAssociationAsyncWithHttpInfo (DeAssociationRequestBody deAssociationRequestBody)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'deAssociationRequestBody' is set
            if (deAssociationRequestBody == null)
            {
                logger.Error("ApiException : Missing required parameter 'deAssociationRequestBody' when calling DeviceDeAssociationApi->DeleteTerminalAssociation");
                throw new ApiException(400, "Missing required parameter 'deAssociationRequestBody' when calling DeviceDeAssociationApi->DeleteTerminalAssociation");
            }

            var localVarPath = $"/dms/v2/devices/deassociate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=UTF-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (deAssociationRequestBody != null && deAssociationRequestBody.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                deAssociationRequestBody = (DeAssociationRequestBody)sdkTracker.InsertDeveloperIdTracker(deAssociationRequestBody, deAssociationRequestBody.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(deAssociationRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deAssociationRequestBody; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "DeleteTerminalAssociation,DeleteTerminalAssociationAsync,DeleteTerminalAssociationWithHttpInfo,DeleteTerminalAssociationAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTerminalAssociation", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>List&lt;InlineResponse2006&gt;</returns>
        public List<InlineResponse2006> PostDeAssociateV3Terminal (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request)
        {
            logger.Debug("CALLING API \"PostDeAssociateV3Terminal\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<List<InlineResponse2006>> localVarResponse = PostDeAssociateV3TerminalWithHttpInfo(deviceDeAssociateV3Request);
            logger.Debug("CALLING API \"PostDeAssociateV3Terminal\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2006&gt;</returns>
        public ApiResponse< List<InlineResponse2006> > PostDeAssociateV3TerminalWithHttpInfo (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'deviceDeAssociateV3Request' is set
            if (deviceDeAssociateV3Request == null)
            {
                logger.Error("ApiException : Missing required parameter 'deviceDeAssociateV3Request' when calling DeviceDeAssociationApi->PostDeAssociateV3Terminal");
                throw new ApiException(400, "Missing required parameter 'deviceDeAssociateV3Request' when calling DeviceDeAssociationApi->PostDeAssociateV3Terminal");
            }

            var localVarPath = $"/dms/v3/devices/deassociate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=UTF-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=UTF-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (deviceDeAssociateV3Request != null && deviceDeAssociateV3Request.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                deviceDeAssociateV3Request = (List<DeviceDeAssociateV3Request>)sdkTracker.InsertDeveloperIdTracker(deviceDeAssociateV3Request, deviceDeAssociateV3Request.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(deviceDeAssociateV3Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceDeAssociateV3Request; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "PostDeAssociateV3Terminal,PostDeAssociateV3TerminalAsync,PostDeAssociateV3TerminalWithHttpInfo,PostDeAssociateV3TerminalAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDeAssociateV3Terminal", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<List<InlineResponse2006>>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (List<InlineResponse2006>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2006>))); // Return statement
        }

        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>Task of List&lt;InlineResponse2006&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2006>> PostDeAssociateV3TerminalAsync (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request)
        {
            logger.Debug("CALLING API \"PostDeAssociateV3TerminalAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<List<InlineResponse2006>> localVarResponse = await PostDeAssociateV3TerminalAsyncWithHttpInfo(deviceDeAssociateV3Request);
            logger.Debug("CALLING API \"PostDeAssociateV3TerminalAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// De-associate a device from merchant to account or reseller and from account to reseller A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceDeAssociateV3Request">deviceId that has to be de-associated to the destination organizationId.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2006&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2006>>> PostDeAssociateV3TerminalAsyncWithHttpInfo (List<DeviceDeAssociateV3Request> deviceDeAssociateV3Request)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'deviceDeAssociateV3Request' is set
            if (deviceDeAssociateV3Request == null)
            {
                logger.Error("ApiException : Missing required parameter 'deviceDeAssociateV3Request' when calling DeviceDeAssociationApi->PostDeAssociateV3Terminal");
                throw new ApiException(400, "Missing required parameter 'deviceDeAssociateV3Request' when calling DeviceDeAssociationApi->PostDeAssociateV3Terminal");
            }

            var localVarPath = $"/dms/v3/devices/deassociate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=UTF-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=UTF-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (deviceDeAssociateV3Request != null && deviceDeAssociateV3Request.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                deviceDeAssociateV3Request = (List<DeviceDeAssociateV3Request>)sdkTracker.InsertDeveloperIdTracker(deviceDeAssociateV3Request, deviceDeAssociateV3Request.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(deviceDeAssociateV3Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceDeAssociateV3Request; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "PostDeAssociateV3Terminal,PostDeAssociateV3TerminalAsync,PostDeAssociateV3TerminalWithHttpInfo,PostDeAssociateV3TerminalAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDeAssociateV3Terminal", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<List<InlineResponse2006>>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (List<InlineResponse2006>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2006>))); // Return statement
        }
    }
}
