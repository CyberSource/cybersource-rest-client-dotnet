/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InvoicingV2InvoicesGet200ResponseInvoiceHistory
    /// </summary>
    [DataContract]
    public partial class InvoicingV2InvoicesGet200ResponseInvoiceHistory :  IEquatable<InvoicingV2InvoicesGet200ResponseInvoiceHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicingV2InvoicesGet200ResponseInvoiceHistory" /> class.
        /// </summary>
        /// <param name="Event">The event triggered for the invoice.  Possible values:  - &#x60;CREATE&#x60;  - &#x60;UPDATE&#x60;  - &#x60;SEND&#x60;  - &#x60;RESEND&#x60;  - &#x60;REMINDER&#x60;  - &#x60;PAYMENT&#x60;  - &#x60;CANCEL&#x60; .</param>
        /// <param name="Date">The date and time when the invoice event was triggered in ISO 8601 format. Format: YYYY-MM-DDThh:mm:ssZ .</param>
        /// <param name="TransactionDetails">TransactionDetails.</param>
        public InvoicingV2InvoicesGet200ResponseInvoiceHistory(string Event = default(string), DateTime? Date = default(DateTime?), InvoicingV2InvoicesGet200ResponseTransactionDetails TransactionDetails = default(InvoicingV2InvoicesGet200ResponseTransactionDetails))
        {
            this.Event = Event;
            this.Date = Date;
            this.TransactionDetails = TransactionDetails;
        }
        
        /// <summary>
        /// The event triggered for the invoice.  Possible values:  - &#x60;CREATE&#x60;  - &#x60;UPDATE&#x60;  - &#x60;SEND&#x60;  - &#x60;RESEND&#x60;  - &#x60;REMINDER&#x60;  - &#x60;PAYMENT&#x60;  - &#x60;CANCEL&#x60; 
        /// </summary>
        /// <value>The event triggered for the invoice.  Possible values:  - &#x60;CREATE&#x60;  - &#x60;UPDATE&#x60;  - &#x60;SEND&#x60;  - &#x60;RESEND&#x60;  - &#x60;REMINDER&#x60;  - &#x60;PAYMENT&#x60;  - &#x60;CANCEL&#x60; </value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string Event { get; set; }

        /// <summary>
        /// The date and time when the invoice event was triggered in ISO 8601 format. Format: YYYY-MM-DDThh:mm:ssZ 
        /// </summary>
        /// <value>The date and time when the invoice event was triggered in ISO 8601 format. Format: YYYY-MM-DDThh:mm:ssZ </value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDetails
        /// </summary>
        [DataMember(Name="transactionDetails", EmitDefaultValue=false)]
        public InvoicingV2InvoicesGet200ResponseTransactionDetails TransactionDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoicingV2InvoicesGet200ResponseInvoiceHistory {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TransactionDetails: ").Append(TransactionDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InvoicingV2InvoicesGet200ResponseInvoiceHistory);
        }

        /// <summary>
        /// Returns true if InvoicingV2InvoicesGet200ResponseInvoiceHistory instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoicingV2InvoicesGet200ResponseInvoiceHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoicingV2InvoicesGet200ResponseInvoiceHistory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Event == other.Event ||
                    this.Event != null &&
                    this.Event.Equals(other.Event)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.TransactionDetails == other.TransactionDetails ||
                    this.TransactionDetails != null &&
                    this.TransactionDetails.Equals(other.TransactionDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Event != null)
                    hash = hash * 59 + this.Event.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.TransactionDetails != null)
                    hash = hash * 59 + this.TransactionDetails.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
