/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation
    /// </summary>
    [DataContract]
    public partial class Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation :  IEquatable<Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation" /> class.
        /// </summary>
        /// <param name="PlatformType">Platform type.  Possible Values:   - iOS: iOS app   - ANDROID: Android app   - WINDOWS: Windows app   - WEB: Browser-based app .</param>
        /// <param name="IpAddress">IP address of the customer. .</param>
        /// <param name="HttpAcceptContent">The exact content of the HTTP accept header. .</param>
        /// <param name="HttpBrowserLanguage">Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details. .</param>
        /// <param name="HttpBrowserJavaEnabled">A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False .</param>
        /// <param name="HttpBrowserJavaScriptEnabled">A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder&#39;s browser. .</param>
        /// <param name="HttpBrowserColorDepth">Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details .</param>
        /// <param name="HttpBrowserScreenHeight">Total height of the Cardholder&#39;s screen in pixels. .</param>
        /// <param name="HttpBrowserScreenWidth">Total width of the cardholder&#39;s screen in pixels. .</param>
        /// <param name="HttpBrowserTimeDifference">Time difference between UTC time and the cardholder browser local time, in minutes. .</param>
        /// <param name="UserAgentBrowserValue">Value of the User-Agent header sent by the customer&#39;s web browser. Note If the customer&#39;s browser provides a value, you must include it in your request. .</param>
        public Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation(string PlatformType = default(string), string IpAddress = default(string), string HttpAcceptContent = default(string), string HttpBrowserLanguage = default(string), bool? HttpBrowserJavaEnabled = default(bool?), bool? HttpBrowserJavaScriptEnabled = default(bool?), string HttpBrowserColorDepth = default(string), string HttpBrowserScreenHeight = default(string), string HttpBrowserScreenWidth = default(string), string HttpBrowserTimeDifference = default(string), string UserAgentBrowserValue = default(string))
        {
            this.PlatformType = PlatformType;
            this.IpAddress = IpAddress;
            this.HttpAcceptContent = HttpAcceptContent;
            this.HttpBrowserLanguage = HttpBrowserLanguage;
            this.HttpBrowserJavaEnabled = HttpBrowserJavaEnabled;
            this.HttpBrowserJavaScriptEnabled = HttpBrowserJavaScriptEnabled;
            this.HttpBrowserColorDepth = HttpBrowserColorDepth;
            this.HttpBrowserScreenHeight = HttpBrowserScreenHeight;
            this.HttpBrowserScreenWidth = HttpBrowserScreenWidth;
            this.HttpBrowserTimeDifference = HttpBrowserTimeDifference;
            this.UserAgentBrowserValue = UserAgentBrowserValue;
        }
        
        /// <summary>
        /// Platform type.  Possible Values:   - iOS: iOS app   - ANDROID: Android app   - WINDOWS: Windows app   - WEB: Browser-based app 
        /// </summary>
        /// <value>Platform type.  Possible Values:   - iOS: iOS app   - ANDROID: Android app   - WINDOWS: Windows app   - WEB: Browser-based app </value>
        [DataMember(Name="platformType", EmitDefaultValue=false)]
        public string PlatformType { get; set; }

        /// <summary>
        /// IP address of the customer. 
        /// </summary>
        /// <value>IP address of the customer. </value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// The exact content of the HTTP accept header. 
        /// </summary>
        /// <value>The exact content of the HTTP accept header. </value>
        [DataMember(Name="httpAcceptContent", EmitDefaultValue=false)]
        public string HttpAcceptContent { get; set; }

        /// <summary>
        /// Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details. 
        /// </summary>
        /// <value>Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details. </value>
        [DataMember(Name="httpBrowserLanguage", EmitDefaultValue=false)]
        public string HttpBrowserLanguage { get; set; }

        /// <summary>
        /// A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False 
        /// </summary>
        /// <value>A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False </value>
        [DataMember(Name="httpBrowserJavaEnabled", EmitDefaultValue=false)]
        public bool? HttpBrowserJavaEnabled { get; set; }

        /// <summary>
        /// A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder&#39;s browser. 
        /// </summary>
        /// <value>A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder&#39;s browser. </value>
        [DataMember(Name="httpBrowserJavaScriptEnabled", EmitDefaultValue=false)]
        public bool? HttpBrowserJavaScriptEnabled { get; set; }

        /// <summary>
        /// Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details 
        /// </summary>
        /// <value>Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details </value>
        [DataMember(Name="httpBrowserColorDepth", EmitDefaultValue=false)]
        public string HttpBrowserColorDepth { get; set; }

        /// <summary>
        /// Total height of the Cardholder&#39;s screen in pixels. 
        /// </summary>
        /// <value>Total height of the Cardholder&#39;s screen in pixels. </value>
        [DataMember(Name="httpBrowserScreenHeight", EmitDefaultValue=false)]
        public string HttpBrowserScreenHeight { get; set; }

        /// <summary>
        /// Total width of the cardholder&#39;s screen in pixels. 
        /// </summary>
        /// <value>Total width of the cardholder&#39;s screen in pixels. </value>
        [DataMember(Name="httpBrowserScreenWidth", EmitDefaultValue=false)]
        public string HttpBrowserScreenWidth { get; set; }

        /// <summary>
        /// Time difference between UTC time and the cardholder browser local time, in minutes. 
        /// </summary>
        /// <value>Time difference between UTC time and the cardholder browser local time, in minutes. </value>
        [DataMember(Name="httpBrowserTimeDifference", EmitDefaultValue=false)]
        public string HttpBrowserTimeDifference { get; set; }

        /// <summary>
        /// Value of the User-Agent header sent by the customer&#39;s web browser. Note If the customer&#39;s browser provides a value, you must include it in your request. 
        /// </summary>
        /// <value>Value of the User-Agent header sent by the customer&#39;s web browser. Note If the customer&#39;s browser provides a value, you must include it in your request. </value>
        [DataMember(Name="userAgentBrowserValue", EmitDefaultValue=false)]
        public string UserAgentBrowserValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation {\n");
            if (PlatformType != null) sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            if (IpAddress != null) sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            if (HttpAcceptContent != null) sb.Append("  HttpAcceptContent: ").Append(HttpAcceptContent).Append("\n");
            if (HttpBrowserLanguage != null) sb.Append("  HttpBrowserLanguage: ").Append(HttpBrowserLanguage).Append("\n");
            if (HttpBrowserJavaEnabled != null) sb.Append("  HttpBrowserJavaEnabled: ").Append(HttpBrowserJavaEnabled).Append("\n");
            if (HttpBrowserJavaScriptEnabled != null) sb.Append("  HttpBrowserJavaScriptEnabled: ").Append(HttpBrowserJavaScriptEnabled).Append("\n");
            if (HttpBrowserColorDepth != null) sb.Append("  HttpBrowserColorDepth: ").Append(HttpBrowserColorDepth).Append("\n");
            if (HttpBrowserScreenHeight != null) sb.Append("  HttpBrowserScreenHeight: ").Append(HttpBrowserScreenHeight).Append("\n");
            if (HttpBrowserScreenWidth != null) sb.Append("  HttpBrowserScreenWidth: ").Append(HttpBrowserScreenWidth).Append("\n");
            if (HttpBrowserTimeDifference != null) sb.Append("  HttpBrowserTimeDifference: ").Append(HttpBrowserTimeDifference).Append("\n");
            if (UserAgentBrowserValue != null) sb.Append("  UserAgentBrowserValue: ").Append(UserAgentBrowserValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation);
        }

        /// <summary>
        /// Returns true if Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PlatformType == other.PlatformType ||
                    this.PlatformType != null &&
                    this.PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    this.IpAddress == other.IpAddress ||
                    this.IpAddress != null &&
                    this.IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    this.HttpAcceptContent == other.HttpAcceptContent ||
                    this.HttpAcceptContent != null &&
                    this.HttpAcceptContent.Equals(other.HttpAcceptContent)
                ) && 
                (
                    this.HttpBrowserLanguage == other.HttpBrowserLanguage ||
                    this.HttpBrowserLanguage != null &&
                    this.HttpBrowserLanguage.Equals(other.HttpBrowserLanguage)
                ) && 
                (
                    this.HttpBrowserJavaEnabled == other.HttpBrowserJavaEnabled ||
                    this.HttpBrowserJavaEnabled != null &&
                    this.HttpBrowserJavaEnabled.Equals(other.HttpBrowserJavaEnabled)
                ) && 
                (
                    this.HttpBrowserJavaScriptEnabled == other.HttpBrowserJavaScriptEnabled ||
                    this.HttpBrowserJavaScriptEnabled != null &&
                    this.HttpBrowserJavaScriptEnabled.Equals(other.HttpBrowserJavaScriptEnabled)
                ) && 
                (
                    this.HttpBrowserColorDepth == other.HttpBrowserColorDepth ||
                    this.HttpBrowserColorDepth != null &&
                    this.HttpBrowserColorDepth.Equals(other.HttpBrowserColorDepth)
                ) && 
                (
                    this.HttpBrowserScreenHeight == other.HttpBrowserScreenHeight ||
                    this.HttpBrowserScreenHeight != null &&
                    this.HttpBrowserScreenHeight.Equals(other.HttpBrowserScreenHeight)
                ) && 
                (
                    this.HttpBrowserScreenWidth == other.HttpBrowserScreenWidth ||
                    this.HttpBrowserScreenWidth != null &&
                    this.HttpBrowserScreenWidth.Equals(other.HttpBrowserScreenWidth)
                ) && 
                (
                    this.HttpBrowserTimeDifference == other.HttpBrowserTimeDifference ||
                    this.HttpBrowserTimeDifference != null &&
                    this.HttpBrowserTimeDifference.Equals(other.HttpBrowserTimeDifference)
                ) && 
                (
                    this.UserAgentBrowserValue == other.UserAgentBrowserValue ||
                    this.UserAgentBrowserValue != null &&
                    this.UserAgentBrowserValue.Equals(other.UserAgentBrowserValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PlatformType != null)
                    hash = hash * 59 + this.PlatformType.GetHashCode();
                if (this.IpAddress != null)
                    hash = hash * 59 + this.IpAddress.GetHashCode();
                if (this.HttpAcceptContent != null)
                    hash = hash * 59 + this.HttpAcceptContent.GetHashCode();
                if (this.HttpBrowserLanguage != null)
                    hash = hash * 59 + this.HttpBrowserLanguage.GetHashCode();
                if (this.HttpBrowserJavaEnabled != null)
                    hash = hash * 59 + this.HttpBrowserJavaEnabled.GetHashCode();
                if (this.HttpBrowserJavaScriptEnabled != null)
                    hash = hash * 59 + this.HttpBrowserJavaScriptEnabled.GetHashCode();
                if (this.HttpBrowserColorDepth != null)
                    hash = hash * 59 + this.HttpBrowserColorDepth.GetHashCode();
                if (this.HttpBrowserScreenHeight != null)
                    hash = hash * 59 + this.HttpBrowserScreenHeight.GetHashCode();
                if (this.HttpBrowserScreenWidth != null)
                    hash = hash * 59 + this.HttpBrowserScreenWidth.GetHashCode();
                if (this.HttpBrowserTimeDifference != null)
                    hash = hash * 59 + this.HttpBrowserTimeDifference.GetHashCode();
                if (this.UserAgentBrowserValue != null)
                    hash = hash * 59 + this.UserAgentBrowserValue.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
