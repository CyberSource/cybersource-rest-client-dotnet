/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2012SetupsPaymentsAlternativePaymentMethods
    /// </summary>
    [DataContract]
    public partial class InlineResponse2012SetupsPaymentsAlternativePaymentMethods :  IEquatable<InlineResponse2012SetupsPaymentsAlternativePaymentMethods>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2012SetupsPaymentsAlternativePaymentMethods" /> class.
        /// </summary>
        /// <param name="ConfigurationStatus">ConfigurationStatus.</param>
        /// <param name="SubscriptionStatus">SubscriptionStatus.</param>
        /// <param name="Status">Possible values: - PROCESSED - PARTIAL_PROCESSED.</param>
        /// <param name="SubmitTimeUtc">Time of request in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60; Example: 2024-09-08T09:37:38+0000 .</param>
        public InlineResponse2012SetupsPaymentsAlternativePaymentMethods(InlineResponse2012SetupsPaymentsAlternativePaymentMethodsConfigurationStatus ConfigurationStatus = default(InlineResponse2012SetupsPaymentsAlternativePaymentMethodsConfigurationStatus), InlineResponse2012SetupsPaymentsAlternativePaymentMethodsConfigurationStatus SubscriptionStatus = default(InlineResponse2012SetupsPaymentsAlternativePaymentMethodsConfigurationStatus), string Status = default(string), DateTime? SubmitTimeUtc = default(DateTime?))
        {
            this.ConfigurationStatus = ConfigurationStatus;
            this.SubscriptionStatus = SubscriptionStatus;
            this.Status = Status;
            this.SubmitTimeUtc = SubmitTimeUtc;
        }
        
        /// <summary>
        /// Gets or Sets ConfigurationStatus
        /// </summary>
        [DataMember(Name="configurationStatus", EmitDefaultValue=false)]
        public InlineResponse2012SetupsPaymentsAlternativePaymentMethodsConfigurationStatus ConfigurationStatus { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionStatus
        /// </summary>
        [DataMember(Name="subscriptionStatus", EmitDefaultValue=false)]
        public InlineResponse2012SetupsPaymentsAlternativePaymentMethodsConfigurationStatus SubscriptionStatus { get; set; }

        /// <summary>
        /// Possible values: - PROCESSED - PARTIAL_PROCESSED
        /// </summary>
        /// <value>Possible values: - PROCESSED - PARTIAL_PROCESSED</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Time of request in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60; Example: 2024-09-08T09:37:38+0000 
        /// </summary>
        /// <value>Time of request in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60; Example: 2024-09-08T09:37:38+0000 </value>
        [DataMember(Name="submitTimeUtc", EmitDefaultValue=false)]
        public DateTime? SubmitTimeUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2012SetupsPaymentsAlternativePaymentMethods {\n");
            if (ConfigurationStatus != null) sb.Append("  ConfigurationStatus: ").Append(ConfigurationStatus).Append("\n");
            if (SubscriptionStatus != null) sb.Append("  SubscriptionStatus: ").Append(SubscriptionStatus).Append("\n");
            if (Status != null) sb.Append("  Status: ").Append(Status).Append("\n");
            if (SubmitTimeUtc != null) sb.Append("  SubmitTimeUtc: ").Append(SubmitTimeUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2012SetupsPaymentsAlternativePaymentMethods);
        }

        /// <summary>
        /// Returns true if InlineResponse2012SetupsPaymentsAlternativePaymentMethods instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2012SetupsPaymentsAlternativePaymentMethods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2012SetupsPaymentsAlternativePaymentMethods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConfigurationStatus == other.ConfigurationStatus ||
                    this.ConfigurationStatus != null &&
                    this.ConfigurationStatus.Equals(other.ConfigurationStatus)
                ) && 
                (
                    this.SubscriptionStatus == other.SubscriptionStatus ||
                    this.SubscriptionStatus != null &&
                    this.SubscriptionStatus.Equals(other.SubscriptionStatus)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.SubmitTimeUtc == other.SubmitTimeUtc ||
                    this.SubmitTimeUtc != null &&
                    this.SubmitTimeUtc.Equals(other.SubmitTimeUtc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConfigurationStatus != null)
                    hash = hash * 59 + this.ConfigurationStatus.GetHashCode();
                if (this.SubscriptionStatus != null)
                    hash = hash * 59 + this.SubscriptionStatus.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.SubmitTimeUtc != null)
                    hash = hash * 59 + this.SubmitTimeUtc.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
