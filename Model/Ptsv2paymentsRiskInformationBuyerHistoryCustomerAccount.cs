/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount :  IEquatable<Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount" /> class.
        /// </summary>
        /// <param name="LastChangeDate">Date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added. Recommended for Discover ProtectBuy. .</param>
        /// <param name="CreationHistory">The values from the enum can be: - GUEST - NEW_ACCOUNT - EXISTING_ACCOUNT .</param>
        /// <param name="ModificationHistory">This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values: - ACCOUNT_UPDATED_NOW - ACCOUNT_UPDATED_PAST .</param>
        /// <param name="PasswordHistory">This only applies for EXISTING_ACCOUNT in creationHistory. The values from the enum can be: - PASSWORD_CHANGED_NOW - PASSWORD_CHANGED_PAST - PASSWORD_NEVER_CHANGED .</param>
        /// <param name="CreateDate">Date the cardholder opened the account. Recommended for Discover ProtectBuy. This only applies for EXISTING_ACCOUNT in creationHistory. .</param>
        /// <param name="PasswordChangeDate">Date the cardholder last changed or reset password on account. Recommended for Discover ProtectBuy. This only applies for PASSWORD_CHANGED_PAST in passwordHistory. .</param>
        public Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount(string LastChangeDate = default(string), string CreationHistory = default(string), string ModificationHistory = default(string), string PasswordHistory = default(string), string CreateDate = default(string), string PasswordChangeDate = default(string))
        {
            this.LastChangeDate = LastChangeDate;
            this.CreationHistory = CreationHistory;
            this.ModificationHistory = ModificationHistory;
            this.PasswordHistory = PasswordHistory;
            this.CreateDate = CreateDate;
            this.PasswordChangeDate = PasswordChangeDate;
        }
        
        /// <summary>
        /// Date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="lastChangeDate", EmitDefaultValue=false)]
        public string LastChangeDate { get; set; }

        /// <summary>
        /// The values from the enum can be: - GUEST - NEW_ACCOUNT - EXISTING_ACCOUNT 
        /// </summary>
        /// <value>The values from the enum can be: - GUEST - NEW_ACCOUNT - EXISTING_ACCOUNT </value>
        [DataMember(Name="creationHistory", EmitDefaultValue=false)]
        public string CreationHistory { get; set; }

        /// <summary>
        /// This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values: - ACCOUNT_UPDATED_NOW - ACCOUNT_UPDATED_PAST 
        /// </summary>
        /// <value>This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values: - ACCOUNT_UPDATED_NOW - ACCOUNT_UPDATED_PAST </value>
        [DataMember(Name="modificationHistory", EmitDefaultValue=false)]
        public string ModificationHistory { get; set; }

        /// <summary>
        /// This only applies for EXISTING_ACCOUNT in creationHistory. The values from the enum can be: - PASSWORD_CHANGED_NOW - PASSWORD_CHANGED_PAST - PASSWORD_NEVER_CHANGED 
        /// </summary>
        /// <value>This only applies for EXISTING_ACCOUNT in creationHistory. The values from the enum can be: - PASSWORD_CHANGED_NOW - PASSWORD_CHANGED_PAST - PASSWORD_NEVER_CHANGED </value>
        [DataMember(Name="passwordHistory", EmitDefaultValue=false)]
        public string PasswordHistory { get; set; }

        /// <summary>
        /// Date the cardholder opened the account. Recommended for Discover ProtectBuy. This only applies for EXISTING_ACCOUNT in creationHistory. 
        /// </summary>
        /// <value>Date the cardholder opened the account. Recommended for Discover ProtectBuy. This only applies for EXISTING_ACCOUNT in creationHistory. </value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public string CreateDate { get; set; }

        /// <summary>
        /// Date the cardholder last changed or reset password on account. Recommended for Discover ProtectBuy. This only applies for PASSWORD_CHANGED_PAST in passwordHistory. 
        /// </summary>
        /// <value>Date the cardholder last changed or reset password on account. Recommended for Discover ProtectBuy. This only applies for PASSWORD_CHANGED_PAST in passwordHistory. </value>
        [DataMember(Name="passwordChangeDate", EmitDefaultValue=false)]
        public string PasswordChangeDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount {\n");
            sb.Append("  LastChangeDate: ").Append(LastChangeDate).Append("\n");
            sb.Append("  CreationHistory: ").Append(CreationHistory).Append("\n");
            sb.Append("  ModificationHistory: ").Append(ModificationHistory).Append("\n");
            sb.Append("  PasswordHistory: ").Append(PasswordHistory).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  PasswordChangeDate: ").Append(PasswordChangeDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LastChangeDate == other.LastChangeDate ||
                    this.LastChangeDate != null &&
                    this.LastChangeDate.Equals(other.LastChangeDate)
                ) && 
                (
                    this.CreationHistory == other.CreationHistory ||
                    this.CreationHistory != null &&
                    this.CreationHistory.Equals(other.CreationHistory)
                ) && 
                (
                    this.ModificationHistory == other.ModificationHistory ||
                    this.ModificationHistory != null &&
                    this.ModificationHistory.Equals(other.ModificationHistory)
                ) && 
                (
                    this.PasswordHistory == other.PasswordHistory ||
                    this.PasswordHistory != null &&
                    this.PasswordHistory.Equals(other.PasswordHistory)
                ) && 
                (
                    this.CreateDate == other.CreateDate ||
                    this.CreateDate != null &&
                    this.CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    this.PasswordChangeDate == other.PasswordChangeDate ||
                    this.PasswordChangeDate != null &&
                    this.PasswordChangeDate.Equals(other.PasswordChangeDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LastChangeDate != null)
                    hash = hash * 59 + this.LastChangeDate.GetHashCode();
                if (this.CreationHistory != null)
                    hash = hash * 59 + this.CreationHistory.GetHashCode();
                if (this.ModificationHistory != null)
                    hash = hash * 59 + this.ModificationHistory.GetHashCode();
                if (this.PasswordHistory != null)
                    hash = hash * 59 + this.PasswordHistory.GetHashCode();
                if (this.CreateDate != null)
                    hash = hash * 59 + this.CreateDate.GetHashCode();
                if (this.PasswordChangeDate != null)
                    hash = hash * 59 + this.PasswordChangeDate.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
