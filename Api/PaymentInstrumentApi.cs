/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentInstrumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>TmsV1PaymentinstrumentsPatch200Response</returns>
        TmsV1PaymentinstrumentsPatch200Response CreatePaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null);

        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of TmsV1PaymentinstrumentsPatch200Response</returns>
        ApiResponse<TmsV1PaymentinstrumentsPatch200Response> CreatePaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null);
        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns></returns>
        void DeletePaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);

        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);
        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>TmsV1PaymentinstrumentsPatch200Response</returns>
        TmsV1PaymentinstrumentsPatch200Response GetPaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);

        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of TmsV1PaymentinstrumentsPatch200Response</returns>
        ApiResponse<TmsV1PaymentinstrumentsPatch200Response> GetPaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);
        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>TmsV1PaymentinstrumentsPatch200Response</returns>
        TmsV1PaymentinstrumentsPatch200Response UpdatePaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null);

        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of TmsV1PaymentinstrumentsPatch200Response</returns>
        ApiResponse<TmsV1PaymentinstrumentsPatch200Response> UpdatePaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of TmsV1PaymentinstrumentsPatch200Response</returns>
        System.Threading.Tasks.Task<TmsV1PaymentinstrumentsPatch200Response> CreatePaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null);

        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse (TmsV1PaymentinstrumentsPatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TmsV1PaymentinstrumentsPatch200Response>> CreatePaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null);
        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);

        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);
        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of TmsV1PaymentinstrumentsPatch200Response</returns>
        System.Threading.Tasks.Task<TmsV1PaymentinstrumentsPatch200Response> GetPaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);

        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse (TmsV1PaymentinstrumentsPatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TmsV1PaymentinstrumentsPatch200Response>> GetPaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null);
        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of TmsV1PaymentinstrumentsPatch200Response</returns>
        System.Threading.Tasks.Task<TmsV1PaymentinstrumentsPatch200Response> UpdatePaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null);

        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse (TmsV1PaymentinstrumentsPatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TmsV1PaymentinstrumentsPatch200Response>> UpdatePaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentInstrumentApi : IPaymentInstrumentApi
    {
        private CyberSource.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentInstrumentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentInstrumentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CyberSource.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>TmsV1PaymentinstrumentsPatch200Response</returns>
        public TmsV1PaymentinstrumentsPatch200Response CreatePaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null)
        {
             ApiResponse<TmsV1PaymentinstrumentsPatch200Response> localVarResponse = CreatePaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, clientApplication);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of TmsV1PaymentinstrumentsPatch200Response</returns>
        public ApiResponse< TmsV1PaymentinstrumentsPatch200Response > CreatePaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->CreatePaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->CreatePaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->CreatePaymentInstrument");
            // verify the required parameter 'createPaymentInstrumentRequest' is set
            if (createPaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'createPaymentInstrumentRequest' when calling PaymentInstrumentApi->CreatePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter
            if (createPaymentInstrumentRequest != null && createPaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createPaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TmsV1PaymentinstrumentsPatch200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TmsV1PaymentinstrumentsPatch200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TmsV1PaymentinstrumentsPatch200Response)));
        }

        /// <summary>
        /// Create a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of TmsV1PaymentinstrumentsPatch200Response</returns>
        public async System.Threading.Tasks.Task<TmsV1PaymentinstrumentsPatch200Response> CreatePaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null)
        {
             ApiResponse<TmsV1PaymentinstrumentsPatch200Response> localVarResponse = await CreatePaymentInstrumentAsyncWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, clientApplication);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="createPaymentInstrumentRequest">Specify the customer&#39;s payment details for card or bank account.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse (TmsV1PaymentinstrumentsPatch200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TmsV1PaymentinstrumentsPatch200Response>> CreatePaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->CreatePaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->CreatePaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->CreatePaymentInstrument");
            // verify the required parameter 'createPaymentInstrumentRequest' is set
            if (createPaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'createPaymentInstrumentRequest' when calling PaymentInstrumentApi->CreatePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter
            if (createPaymentInstrumentRequest != null && createPaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createPaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TmsV1PaymentinstrumentsPatch200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TmsV1PaymentinstrumentsPatch200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TmsV1PaymentinstrumentsPatch200Response)));
        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns></returns>
        public void DeletePaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
             DeletePaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication);
        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->DeletePaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->DeletePaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->DeletePaymentInstrument");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentInstrumentApi->DeletePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
             await DeletePaymentInstrumentAsyncWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication);

        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->DeletePaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->DeletePaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->DeletePaymentInstrument");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentInstrumentApi->DeletePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>TmsV1PaymentinstrumentsPatch200Response</returns>
        public TmsV1PaymentinstrumentsPatch200Response GetPaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
             ApiResponse<TmsV1PaymentinstrumentsPatch200Response> localVarResponse = GetPaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of TmsV1PaymentinstrumentsPatch200Response</returns>
        public ApiResponse< TmsV1PaymentinstrumentsPatch200Response > GetPaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->GetPaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->GetPaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->GetPaymentInstrument");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentInstrumentApi->GetPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TmsV1PaymentinstrumentsPatch200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TmsV1PaymentinstrumentsPatch200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TmsV1PaymentinstrumentsPatch200Response)));
        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of TmsV1PaymentinstrumentsPatch200Response</returns>
        public async System.Threading.Tasks.Task<TmsV1PaymentinstrumentsPatch200Response> GetPaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
             ApiResponse<TmsV1PaymentinstrumentsPatch200Response> localVarResponse = await GetPaymentInstrumentAsyncWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse (TmsV1PaymentinstrumentsPatch200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TmsV1PaymentinstrumentsPatch200Response>> GetPaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->GetPaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->GetPaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->GetPaymentInstrument");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentInstrumentApi->GetPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TmsV1PaymentinstrumentsPatch200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TmsV1PaymentinstrumentsPatch200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TmsV1PaymentinstrumentsPatch200Response)));
        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>TmsV1PaymentinstrumentsPatch200Response</returns>
        public TmsV1PaymentinstrumentsPatch200Response UpdatePaymentInstrument (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null)
        {
             ApiResponse<TmsV1PaymentinstrumentsPatch200Response> localVarResponse = UpdatePaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, clientApplication);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>ApiResponse of TmsV1PaymentinstrumentsPatch200Response</returns>
        public ApiResponse< TmsV1PaymentinstrumentsPatch200Response > UpdatePaymentInstrumentWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'updatePaymentInstrumentRequest' is set
            if (updatePaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePaymentInstrumentRequest' when calling PaymentInstrumentApi->UpdatePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter
            if (updatePaymentInstrumentRequest != null && updatePaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updatePaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TmsV1PaymentinstrumentsPatch200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TmsV1PaymentinstrumentsPatch200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TmsV1PaymentinstrumentsPatch200Response)));
        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of TmsV1PaymentinstrumentsPatch200Response</returns>
        public async System.Threading.Tasks.Task<TmsV1PaymentinstrumentsPatch200Response> UpdatePaymentInstrumentAsync (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null)
        {
             ApiResponse<TmsV1PaymentinstrumentsPatch200Response> localVarResponse = await UpdatePaymentInstrumentAsyncWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, clientApplication);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration.</param>
        /// <param name="vCMerchantId">CyberSource merchant id.</param>
        /// <param name="vCCorrelationId">The mandatory correlation id passed by upstream (calling) system.</param>
        /// <param name="tokenId">The TokenId of a Payment Instrument.</param>
        /// <param name="updatePaymentInstrumentRequest">Specify the customer&#39;s payment details.</param>
        /// <param name="clientApplication">Client application name (optional)</param>
        /// <returns>Task of ApiResponse (TmsV1PaymentinstrumentsPatch200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TmsV1PaymentinstrumentsPatch200Response>> UpdatePaymentInstrumentAsyncWithHttpInfo (string profileId, string vCMerchantId, string vCCorrelationId, string tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, string clientApplication = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'vCMerchantId' is set
            if (vCMerchantId == null)
                throw new ApiException(400, "Missing required parameter 'vCMerchantId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'vCCorrelationId' is set
            if (vCCorrelationId == null)
                throw new ApiException(400, "Missing required parameter 'vCCorrelationId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling PaymentInstrumentApi->UpdatePaymentInstrument");
            // verify the required parameter 'updatePaymentInstrumentRequest' is set
            if (updatePaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePaymentInstrumentRequest' when calling PaymentInstrumentApi->UpdatePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (vCMerchantId != null) localVarHeaderParams.Add("v-c-merchant-id", Configuration.ApiClient.ParameterToString(vCMerchantId)); // header parameter
            if (vCCorrelationId != null) localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            if (clientApplication != null) localVarHeaderParams.Add("Client-Application", Configuration.ApiClient.ParameterToString(clientApplication)); // header parameter
            if (updatePaymentInstrumentRequest != null && updatePaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updatePaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TmsV1PaymentinstrumentsPatch200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TmsV1PaymentinstrumentsPatch200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TmsV1PaymentinstrumentsPatch200Response)));
        }

    }
}
