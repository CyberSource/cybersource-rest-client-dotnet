/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CreateAdhocReportRequest
    /// </summary>
    [DataContract]
    public partial class CreateAdhocReportRequest :  IEquatable<CreateAdhocReportRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAdhocReportRequest" /> class.
        /// </summary>
        /// <param name="OrganizationId">Valid CyberSource Organization Id.</param>
        /// <param name="ReportDefinitionName">ReportDefinitionName.</param>
        /// <param name="ReportFields">List of fields which needs to get included in a report.</param>
        /// <param name="ReportMimeType">&#39;Format of the report&#39;                  Valid values: - application/xml - text/csv .</param>
        /// <param name="ReportName">Name of the report.</param>
        /// <param name="Timezone">Timezone of the report.</param>
        /// <param name="ReportStartTime">Start time of the report.</param>
        /// <param name="ReportEndTime">End time of the report.</param>
        /// <param name="ReportFilters">ReportFilters.</param>
        /// <param name="ReportPreferences">ReportPreferences.</param>
        /// <param name="GroupName">Specifies the group name.</param>
        public CreateAdhocReportRequest(string OrganizationId = default(string), string ReportDefinitionName = default(string), List<string> ReportFields = default(List<string>), string ReportMimeType = default(string), string ReportName = default(string), string Timezone = default(string), DateTime? ReportStartTime = default(DateTime?), DateTime? ReportEndTime = default(DateTime?), Reportingv3reportsReportFilters ReportFilters = default(Reportingv3reportsReportFilters), Reportingv3reportsReportPreferences ReportPreferences = default(Reportingv3reportsReportPreferences), string GroupName = default(string))
        {
            this.OrganizationId = OrganizationId;
            this.ReportDefinitionName = ReportDefinitionName;
            this.ReportFields = ReportFields;
            this.ReportMimeType = ReportMimeType;
            this.ReportName = ReportName;
            this.Timezone = Timezone;
            this.ReportStartTime = ReportStartTime;
            this.ReportEndTime = ReportEndTime;
            this.ReportFilters = ReportFilters;
            this.ReportPreferences = ReportPreferences;
            this.GroupName = GroupName;
        }
        
        /// <summary>
        /// Valid CyberSource Organization Id
        /// </summary>
        /// <value>Valid CyberSource Organization Id</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets ReportDefinitionName
        /// </summary>
        [DataMember(Name="reportDefinitionName", EmitDefaultValue=false)]
        public string ReportDefinitionName { get; set; }

        /// <summary>
        /// List of fields which needs to get included in a report
        /// </summary>
        /// <value>List of fields which needs to get included in a report</value>
        [DataMember(Name="reportFields", EmitDefaultValue=false)]
        public List<string> ReportFields { get; set; }

        /// <summary>
        /// &#39;Format of the report&#39;                  Valid values: - application/xml - text/csv 
        /// </summary>
        /// <value>&#39;Format of the report&#39;                  Valid values: - application/xml - text/csv </value>
        [DataMember(Name="reportMimeType", EmitDefaultValue=false)]
        public string ReportMimeType { get; set; }

        /// <summary>
        /// Name of the report
        /// </summary>
        /// <value>Name of the report</value>
        [DataMember(Name="reportName", EmitDefaultValue=false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Timezone of the report
        /// </summary>
        /// <value>Timezone of the report</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Start time of the report
        /// </summary>
        /// <value>Start time of the report</value>
        [DataMember(Name="reportStartTime", EmitDefaultValue=false)]
        public DateTime? ReportStartTime { get; set; }

        /// <summary>
        /// End time of the report
        /// </summary>
        /// <value>End time of the report</value>
        [DataMember(Name="reportEndTime", EmitDefaultValue=false)]
        public DateTime? ReportEndTime { get; set; }

        /// <summary>
        /// Gets or Sets ReportFilters
        /// </summary>
        [DataMember(Name="reportFilters", EmitDefaultValue=false)]
        public Reportingv3reportsReportFilters ReportFilters { get; set; }

        /// <summary>
        /// Gets or Sets ReportPreferences
        /// </summary>
        [DataMember(Name="reportPreferences", EmitDefaultValue=false)]
        public Reportingv3reportsReportPreferences ReportPreferences { get; set; }

        /// <summary>
        /// Specifies the group name
        /// </summary>
        /// <value>Specifies the group name</value>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAdhocReportRequest {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ReportDefinitionName: ").Append(ReportDefinitionName).Append("\n");
            sb.Append("  ReportFields: ").Append(ReportFields).Append("\n");
            sb.Append("  ReportMimeType: ").Append(ReportMimeType).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  ReportStartTime: ").Append(ReportStartTime).Append("\n");
            sb.Append("  ReportEndTime: ").Append(ReportEndTime).Append("\n");
            sb.Append("  ReportFilters: ").Append(ReportFilters).Append("\n");
            sb.Append("  ReportPreferences: ").Append(ReportPreferences).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateAdhocReportRequest);
        }

        /// <summary>
        /// Returns true if CreateAdhocReportRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateAdhocReportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAdhocReportRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.ReportDefinitionName == other.ReportDefinitionName ||
                    this.ReportDefinitionName != null &&
                    this.ReportDefinitionName.Equals(other.ReportDefinitionName)
                ) && 
                (
                    this.ReportFields == other.ReportFields ||
                    this.ReportFields != null &&
                    this.ReportFields.SequenceEqual(other.ReportFields)
                ) && 
                (
                    this.ReportMimeType == other.ReportMimeType ||
                    this.ReportMimeType != null &&
                    this.ReportMimeType.Equals(other.ReportMimeType)
                ) && 
                (
                    this.ReportName == other.ReportName ||
                    this.ReportName != null &&
                    this.ReportName.Equals(other.ReportName)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.ReportStartTime == other.ReportStartTime ||
                    this.ReportStartTime != null &&
                    this.ReportStartTime.Equals(other.ReportStartTime)
                ) && 
                (
                    this.ReportEndTime == other.ReportEndTime ||
                    this.ReportEndTime != null &&
                    this.ReportEndTime.Equals(other.ReportEndTime)
                ) && 
                (
                    this.ReportFilters == other.ReportFilters ||
                    this.ReportFilters != null &&
                    this.ReportFilters.Equals(other.ReportFilters)
                ) && 
                (
                    this.ReportPreferences == other.ReportPreferences ||
                    this.ReportPreferences != null &&
                    this.ReportPreferences.Equals(other.ReportPreferences)
                ) && 
                (
                    this.GroupName == other.GroupName ||
                    this.GroupName != null &&
                    this.GroupName.Equals(other.GroupName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.ReportDefinitionName != null)
                    hash = hash * 59 + this.ReportDefinitionName.GetHashCode();
                if (this.ReportFields != null)
                    hash = hash * 59 + this.ReportFields.GetHashCode();
                if (this.ReportMimeType != null)
                    hash = hash * 59 + this.ReportMimeType.GetHashCode();
                if (this.ReportName != null)
                    hash = hash * 59 + this.ReportName.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.ReportStartTime != null)
                    hash = hash * 59 + this.ReportStartTime.GetHashCode();
                if (this.ReportEndTime != null)
                    hash = hash * 59 + this.ReportEndTime.GetHashCode();
                if (this.ReportFilters != null)
                    hash = hash * 59 + this.ReportFilters.GetHashCode();
                if (this.ReportPreferences != null)
                    hash = hash * 59 + this.ReportPreferences.GetHashCode();
                if (this.GroupName != null)
                    hash = hash * 59 + this.GroupName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OrganizationId (string) pattern
            Regex regexOrganizationId = new Regex(@"[a-zA-Z0-9-_]+", RegexOptions.CultureInvariant);
            if (false == regexOrganizationId.Match(this.OrganizationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationId, must match a pattern of " + regexOrganizationId, new [] { "OrganizationId" });
            }

            // ReportDefinitionName (string) pattern
            Regex regexReportDefinitionName = new Regex(@"[a-zA-Z0-9-]+", RegexOptions.CultureInvariant);
            if (false == regexReportDefinitionName.Match(this.ReportDefinitionName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportDefinitionName, must match a pattern of " + regexReportDefinitionName, new [] { "ReportDefinitionName" });
            }

            // ReportName (string) pattern
            Regex regexReportName = new Regex(@"[a-zA-Z0-9-_ ]+", RegexOptions.CultureInvariant);
            if (false == regexReportName.Match(this.ReportName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportName, must match a pattern of " + regexReportName, new [] { "ReportName" });
            }

            // GroupName (string) pattern
            Regex regexGroupName = new Regex(@"[0-9]*", RegexOptions.CultureInvariant);
            if (false == regexGroupName.Match(this.GroupName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupName, must match a pattern of " + regexGroupName, new [] { "GroupName" });
            }

            yield break;
        }
    }

}
