/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Authorization Info Values
    /// </summary>
    [DataContract]
    public partial class ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations :  IEquatable<ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations" /> class.
        /// </summary>
        /// <param name="RequestId">An unique identification number assigned by CyberSource to identify the submitted request..</param>
        /// <param name="TransactionReferenceNumber">Authorization Transaction Reference Number.</param>
        /// <param name="Time">Authorization Date.</param>
        /// <param name="AuthorizationRequestId">Authorization Request Id.</param>
        /// <param name="Amount">Authorization Amount.</param>
        /// <param name="CurrencyCode">Valid ISO 4217 ALPHA-3 currency code.</param>
        /// <param name="Code">Authorization Code.</param>
        /// <param name="Rcode">Authorization RCode.</param>
        public ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations(string RequestId = default(string), string TransactionReferenceNumber = default(string), DateTime? Time = default(DateTime?), string AuthorizationRequestId = default(string), string Amount = default(string), string CurrencyCode = default(string), string Code = default(string), string Rcode = default(string))
        {
            this.RequestId = RequestId;
            this.TransactionReferenceNumber = TransactionReferenceNumber;
            this.Time = Time;
            this.AuthorizationRequestId = AuthorizationRequestId;
            this.Amount = Amount;
            this.CurrencyCode = CurrencyCode;
            this.Code = Code;
            this.Rcode = Rcode;
        }
        
        /// <summary>
        /// An unique identification number assigned by CyberSource to identify the submitted request.
        /// </summary>
        /// <value>An unique identification number assigned by CyberSource to identify the submitted request.</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Authorization Transaction Reference Number
        /// </summary>
        /// <value>Authorization Transaction Reference Number</value>
        [DataMember(Name="transactionReferenceNumber", EmitDefaultValue=false)]
        public string TransactionReferenceNumber { get; set; }

        /// <summary>
        /// Authorization Date
        /// </summary>
        /// <value>Authorization Date</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Authorization Request Id
        /// </summary>
        /// <value>Authorization Request Id</value>
        [DataMember(Name="authorizationRequestId", EmitDefaultValue=false)]
        public string AuthorizationRequestId { get; set; }

        /// <summary>
        /// Authorization Amount
        /// </summary>
        /// <value>Authorization Amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Valid ISO 4217 ALPHA-3 currency code
        /// </summary>
        /// <value>Valid ISO 4217 ALPHA-3 currency code</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Authorization Code
        /// </summary>
        /// <value>Authorization Code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Authorization RCode
        /// </summary>
        /// <value>Authorization RCode</value>
        [DataMember(Name="rcode", EmitDefaultValue=false)]
        public string Rcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations {\n");
            if (RequestId != null) sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            if (TransactionReferenceNumber != null) sb.Append("  TransactionReferenceNumber: ").Append(TransactionReferenceNumber).Append("\n");
            if (Time != null) sb.Append("  Time: ").Append(Time).Append("\n");
            if (AuthorizationRequestId != null) sb.Append("  AuthorizationRequestId: ").Append(AuthorizationRequestId).Append("\n");
            if (Amount != null) sb.Append("  Amount: ").Append(Amount).Append("\n");
            if (CurrencyCode != null) sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            if (Code != null) sb.Append("  Code: ").Append(Code).Append("\n");
            if (Rcode != null) sb.Append("  Rcode: ").Append(Rcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations);
        }

        /// <summary>
        /// Returns true if ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.TransactionReferenceNumber == other.TransactionReferenceNumber ||
                    this.TransactionReferenceNumber != null &&
                    this.TransactionReferenceNumber.Equals(other.TransactionReferenceNumber)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.AuthorizationRequestId == other.AuthorizationRequestId ||
                    this.AuthorizationRequestId != null &&
                    this.AuthorizationRequestId.Equals(other.AuthorizationRequestId)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Rcode == other.Rcode ||
                    this.Rcode != null &&
                    this.Rcode.Equals(other.Rcode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.TransactionReferenceNumber != null)
                    hash = hash * 59 + this.TransactionReferenceNumber.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.AuthorizationRequestId != null)
                    hash = hash * 59 + this.AuthorizationRequestId.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Rcode != null)
                    hash = hash * 59 + this.Rcode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
