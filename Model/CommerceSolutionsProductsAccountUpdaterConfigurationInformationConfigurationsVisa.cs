/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa
    /// </summary>
    [DataContract]
    public partial class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa :  IEquatable<CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa" /> class.
        /// </summary>
        /// <param name="MerchantId">Visa merchant identified number (required).</param>
        /// <param name="SegmentId">Visa assigned segment ID for each group of merchants participating in VAU. (required).</param>
        /// <param name="Active">Active.</param>
        public CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa(string MerchantId = default(string), string SegmentId = default(string), bool? Active = default(bool?))
        {
            // to ensure "MerchantId" is required (not null)
            if (MerchantId == null)
            {
                throw new InvalidDataException("MerchantId is a required property for CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa and cannot be null");
            }
            else
            {
                this.MerchantId = MerchantId;
            }
            // to ensure "SegmentId" is required (not null)
            if (SegmentId == null)
            {
                throw new InvalidDataException("SegmentId is a required property for CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa and cannot be null");
            }
            else
            {
                this.SegmentId = SegmentId;
            }
            this.Active = Active;
        }
        
        /// <summary>
        /// Visa merchant identified number
        /// </summary>
        /// <value>Visa merchant identified number</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Visa assigned segment ID for each group of merchants participating in VAU.
        /// </summary>
        /// <value>Visa assigned segment ID for each group of merchants participating in VAU.</value>
        [DataMember(Name="segmentId", EmitDefaultValue=false)]
        public string SegmentId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa {\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa);
        }

        /// <summary>
        /// Returns true if CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa instances are equal
        /// </summary>
        /// <param name="other">Instance of CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.SegmentId == other.SegmentId ||
                    this.SegmentId != null &&
                    this.SegmentId.Equals(other.SegmentId)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.SegmentId != null)
                    hash = hash * 59 + this.SegmentId.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
