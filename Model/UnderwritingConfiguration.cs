/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Underwriting configuration containing the complete VMES (Visa Merchant Evaluation Service) payload for merchant risk evaluation. 
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfiguration :  IEquatable<UnderwritingConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfiguration" /> class.
        /// </summary>
        /// <param name="ClientReferenceInformation">ClientReferenceInformation.</param>
        /// <param name="MerchantApplication">MerchantApplication.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="MetadataExternal">MetadataExternal.</param>
        /// <param name="OrganizationInformation">OrganizationInformation.</param>
        /// <param name="DeviceInformation">DeviceInformation.</param>
        /// <param name="DepositInformation">DepositInformation.</param>
        /// <param name="BillingInformation">BillingInformation.</param>
        /// <param name="SaleRepresentativeInformation">SaleRepresentativeInformation.</param>
        /// <param name="FileAttachmentInformation">FileAttachmentInformation.</param>
        public UnderwritingConfiguration(UnderwritingConfigurationClientReferenceInformation ClientReferenceInformation = default(UnderwritingConfigurationClientReferenceInformation), UnderwritingConfigurationMerchantApplication MerchantApplication = default(UnderwritingConfigurationMerchantApplication), Object Metadata = default(Object), Object MetadataExternal = default(Object), UnderwritingConfigurationOrganizationInformation OrganizationInformation = default(UnderwritingConfigurationOrganizationInformation), UnderwritingConfigurationDeviceInformation DeviceInformation = default(UnderwritingConfigurationDeviceInformation), UnderwritingConfigurationDepositInformation DepositInformation = default(UnderwritingConfigurationDepositInformation), UnderwritingConfigurationBillingInformation BillingInformation = default(UnderwritingConfigurationBillingInformation), UnderwritingConfigurationSaleRepresentativeInformation SaleRepresentativeInformation = default(UnderwritingConfigurationSaleRepresentativeInformation), UnderwritingConfigurationFileAttachmentInformation FileAttachmentInformation = default(UnderwritingConfigurationFileAttachmentInformation))
        {
            this.ClientReferenceInformation = ClientReferenceInformation;
            this.MerchantApplication = MerchantApplication;
            this.Metadata = Metadata;
            this.MetadataExternal = MetadataExternal;
            this.OrganizationInformation = OrganizationInformation;
            this.DeviceInformation = DeviceInformation;
            this.DepositInformation = DepositInformation;
            this.BillingInformation = BillingInformation;
            this.SaleRepresentativeInformation = SaleRepresentativeInformation;
            this.FileAttachmentInformation = FileAttachmentInformation;
        }
        
        /// <summary>
        /// Gets or Sets ClientReferenceInformation
        /// </summary>
        [DataMember(Name="clientReferenceInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationClientReferenceInformation ClientReferenceInformation { get; set; }

        /// <summary>
        /// Gets or Sets MerchantApplication
        /// </summary>
        [DataMember(Name="merchantApplication", EmitDefaultValue=false)]
        public UnderwritingConfigurationMerchantApplication MerchantApplication { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets MetadataExternal
        /// </summary>
        [DataMember(Name="metadataExternal", EmitDefaultValue=false)]
        public Object MetadataExternal { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationInformation
        /// </summary>
        [DataMember(Name="organizationInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformation OrganizationInformation { get; set; }

        /// <summary>
        /// Gets or Sets DeviceInformation
        /// </summary>
        [DataMember(Name="deviceInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationDeviceInformation DeviceInformation { get; set; }

        /// <summary>
        /// Gets or Sets DepositInformation
        /// </summary>
        [DataMember(Name="depositInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationDepositInformation DepositInformation { get; set; }

        /// <summary>
        /// Gets or Sets BillingInformation
        /// </summary>
        [DataMember(Name="billingInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationBillingInformation BillingInformation { get; set; }

        /// <summary>
        /// Gets or Sets SaleRepresentativeInformation
        /// </summary>
        [DataMember(Name="saleRepresentativeInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationSaleRepresentativeInformation SaleRepresentativeInformation { get; set; }

        /// <summary>
        /// Gets or Sets FileAttachmentInformation
        /// </summary>
        [DataMember(Name="fileAttachmentInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationFileAttachmentInformation FileAttachmentInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfiguration {\n");
            if (ClientReferenceInformation != null) sb.Append("  ClientReferenceInformation: ").Append(ClientReferenceInformation).Append("\n");
            if (MerchantApplication != null) sb.Append("  MerchantApplication: ").Append(MerchantApplication).Append("\n");
            if (Metadata != null) sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            if (MetadataExternal != null) sb.Append("  MetadataExternal: ").Append(MetadataExternal).Append("\n");
            if (OrganizationInformation != null) sb.Append("  OrganizationInformation: ").Append(OrganizationInformation).Append("\n");
            if (DeviceInformation != null) sb.Append("  DeviceInformation: ").Append(DeviceInformation).Append("\n");
            if (DepositInformation != null) sb.Append("  DepositInformation: ").Append(DepositInformation).Append("\n");
            if (BillingInformation != null) sb.Append("  BillingInformation: ").Append(BillingInformation).Append("\n");
            if (SaleRepresentativeInformation != null) sb.Append("  SaleRepresentativeInformation: ").Append(SaleRepresentativeInformation).Append("\n");
            if (FileAttachmentInformation != null) sb.Append("  FileAttachmentInformation: ").Append(FileAttachmentInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfiguration);
        }

        /// <summary>
        /// Returns true if UnderwritingConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientReferenceInformation == other.ClientReferenceInformation ||
                    this.ClientReferenceInformation != null &&
                    this.ClientReferenceInformation.Equals(other.ClientReferenceInformation)
                ) && 
                (
                    this.MerchantApplication == other.MerchantApplication ||
                    this.MerchantApplication != null &&
                    this.MerchantApplication.Equals(other.MerchantApplication)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.MetadataExternal == other.MetadataExternal ||
                    this.MetadataExternal != null &&
                    this.MetadataExternal.Equals(other.MetadataExternal)
                ) && 
                (
                    this.OrganizationInformation == other.OrganizationInformation ||
                    this.OrganizationInformation != null &&
                    this.OrganizationInformation.Equals(other.OrganizationInformation)
                ) && 
                (
                    this.DeviceInformation == other.DeviceInformation ||
                    this.DeviceInformation != null &&
                    this.DeviceInformation.Equals(other.DeviceInformation)
                ) && 
                (
                    this.DepositInformation == other.DepositInformation ||
                    this.DepositInformation != null &&
                    this.DepositInformation.Equals(other.DepositInformation)
                ) && 
                (
                    this.BillingInformation == other.BillingInformation ||
                    this.BillingInformation != null &&
                    this.BillingInformation.Equals(other.BillingInformation)
                ) && 
                (
                    this.SaleRepresentativeInformation == other.SaleRepresentativeInformation ||
                    this.SaleRepresentativeInformation != null &&
                    this.SaleRepresentativeInformation.Equals(other.SaleRepresentativeInformation)
                ) && 
                (
                    this.FileAttachmentInformation == other.FileAttachmentInformation ||
                    this.FileAttachmentInformation != null &&
                    this.FileAttachmentInformation.Equals(other.FileAttachmentInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientReferenceInformation != null)
                    hash = hash * 59 + this.ClientReferenceInformation.GetHashCode();
                if (this.MerchantApplication != null)
                    hash = hash * 59 + this.MerchantApplication.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.MetadataExternal != null)
                    hash = hash * 59 + this.MetadataExternal.GetHashCode();
                if (this.OrganizationInformation != null)
                    hash = hash * 59 + this.OrganizationInformation.GetHashCode();
                if (this.DeviceInformation != null)
                    hash = hash * 59 + this.DeviceInformation.GetHashCode();
                if (this.DepositInformation != null)
                    hash = hash * 59 + this.DepositInformation.GetHashCode();
                if (this.BillingInformation != null)
                    hash = hash * 59 + this.BillingInformation.GetHashCode();
                if (this.SaleRepresentativeInformation != null)
                    hash = hash * 59 + this.SaleRepresentativeInformation.GetHashCode();
                if (this.FileAttachmentInformation != null)
                    hash = hash * 59 + this.FileAttachmentInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
