/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsTravelInformationTransitAirline
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsTravelInformationTransitAirline :  IEquatable<Ptsv2paymentsTravelInformationTransitAirline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsTravelInformationTransitAirline" /> class.
        /// </summary>
        /// <param name="BookingReferenceNumber">Reference number for the airline booking. Required if ticket numbers are not issued. .</param>
        /// <param name="CarrierName">Airline that generated the ticket. Format: English characters only. Optional request field. .</param>
        /// <param name="TicketIssuer">TicketIssuer.</param>
        /// <param name="TicketNumber">Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. .</param>
        /// <param name="CheckDigit">Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero. .</param>
        /// <param name="RestrictedTicketIndicator">Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. .</param>
        /// <param name="TransactionType">Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket .</param>
        /// <param name="ExtendedPaymentCode">The field is not currently supported. .</param>
        /// <param name="PassengerName">Name of the passenger to whom the ticket was issued.  This will always be a single passenger&#39;s name. If there are more than one passengers, provide only the primary passenger&#39;s name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field. .</param>
        /// <param name="CustomerCode">Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. .</param>
        /// <param name="DocumentType">Airline document type code that specifies the purpose of the transaction. Format: English characters only. Optional request field.  | Code | Description | | - -- | - -- | | 01 | Passenger ticket | | 02 | Additional collection | | 03 | Excess baggage | | 04 | Miscellaneous charge order (MCO) or prepaid ticket authorization | | 05 | Special service ticket | | 06 | Supported refund | | 07 | Unsupported refund | | 08 | Lost ticket application | | 09 | Tour order voucher | | 10 | Ticket by mail | | 11 | Undercharge adjustment | | 12 | Group ticket | | 13 | Exchange adjustment | | 14 | SPD or air freight | | 15 | In-flight adjustment | | 16 | Agency passenger ticket | | 17 | Agency tour order or voucher | | 18 | Agency miscellaneous charge order (MCO) | | 19 | Agency exchange order | | 20 | Agency group ticket | | 21 | Debit adjustment for duplicate refund or use | | 22 | In-flight merchandise order | | 23 | Catalogue merchandise order | | 24 | In-flight phone charges | | 25 | Frequent flyer fee or purchase | | 26 | Kennel charge | | 27 | Animal transportation charge | | 28 | Firearms case | | 29 | Upgrade charge | | 30 | Credit for unused transportation | | 31 | Credit for class of service adjustment | | 32 | Credit for denied boarding | | 33 | Credit for miscellaneous refund | | 34 | Credit for lost ticket refund | | 35 | Credit for exchange refund | | 36 | Credit for overcharge adjustment | | 37 | Credit for multiple Unused tickets | | 38 | Exchange order | | 39 | Self-service ticket | | 41 | In-flight duty-free purchase | | 42 | Senior citizen discount booklets | | 43 | Club membership fee | | 44 | Coupon book | | 45 | In-flight charges | | 46 | Tour deposit | | 47 | Frequent flyer overnight delivery charge | | 48 | Frequent flyer fulfillment | | 49 | Small package delivery | | 50 | Vendor sale | | 51 | Miscellaneous taxes or fees | | 52 | Travel agency fee | | 60 | Vendor refund or credit | | 64 | Duty free sale | | 65 | Preferred seat upgrade | | 66 | Cabin upgrade | | 67 | Lounge or club access or day pass | | 68 | Agent assisted reservation or ticketing fee | | 69 | Ticket change or cancel fee | | 70 | Trip insurance | | 71 | Unaccompanied minor | | 72 | Standby fee | | 73 | Curbside baggage | | 74 | In-flight medical equipment | | 75 | Ticket or pass print fee | | 76 | Checked sporting or special equipment | | 77 | Dry ice fee | | 78 | Mail or postage fee | | 79 | Club membership fee or temporary trial | | 80 | Frequent flyer activation or reinstatement | | 81 | Gift certificate | | 82 | Onboard or in-flight prepaid voucher | | 83 | Optional services fee | | 84 | Advance purchase for excess baggage | | 85 | Advance purchase for preferred seat upgrade | | 86 | Advance purchase for cabin upgrade | | 87 | Advance purchase for optional services | | 88 | WiFi | | 89 | Packages | | 90 | In-flight entertainment or internet access | | 91 | Overweight bag fee | | 92 | Sleep sets | | 93 | Special purchase fee | .</param>
        /// <param name="DocumentNumber">The field is not currently supported. .</param>
        /// <param name="DocumentNumberOfParts">The field is not currently supported. .</param>
        /// <param name="InvoiceNumber">Invoice number for the airline transaction. .</param>
        /// <param name="InvoiceDate">Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \&quot;Invoice Number,\&quot; .</param>
        /// <param name="AdditionalCharges">Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage. .</param>
        /// <param name="TotalFeeAmount">Total fee for the ticket. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. Optional request field. .</param>
        /// <param name="ClearingSequence">Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field. .</param>
        /// <param name="ClearingCount">Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field. .</param>
        /// <param name="TotalClearingAmount">Total clearing amount for all transactions in the clearing count set. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization. .</param>
        /// <param name="NumberOfPassengers">Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field. .</param>
        /// <param name="ReservationSystemCode">Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. .</param>
        /// <param name="ProcessIdentifier">Airline process identifier. This value is the airlineâ€™s three-digit IATA1 code which is used to process extended payment airline tickets. .</param>
        /// <param name="TicketIssueDate">Date on which the transaction occurred. Format: &#x60;YYYYMMDD&#x60; Format: English characters only. Optional request field. .</param>
        /// <param name="ElectronicTicketIndicator">Flag that indicates whether an electronic ticket was issued. Possible values: - &#x60;true&#x60; - &#x60;false&#x60; Optional request field. .</param>
        /// <param name="OriginalTicketNumber">Original ticket number when the transaction is for a replacement ticket. .</param>
        /// <param name="PurchaseType">Type of purchase. Possible values: - &#x60;EXC&#x60;: Exchange ticket - &#x60;MSC&#x60;: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - &#x60;REF&#x60;: Refund - &#x60;TKT&#x60;: Ticket Format: English characters only. Optional request field. .</param>
        /// <param name="CreditReasonIndicator">Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only.  Optional request field. .</param>
        /// <param name="TicketChangeIndicator">Type of update. Possible values: - &#x60;C&#x60;: Change to the existing ticket. - &#x60;N&#x60;: New ticket. Format: English characters only Optional request field. .</param>
        /// <param name="PlanNumber">Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field. .</param>
        /// <param name="ArrivalDate">Date of arrival for the last leg of the trip. Format: &#x60;MMDDYYYY&#x60; English characters only. Optional request field. .</param>
        /// <param name="RestrictedTicketDesciption">Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field. .</param>
        /// <param name="ExchangeTicketAmount">Amount of the exchanged ticket. Format: English characters only. .</param>
        /// <param name="ExchangeTicketFeeAmount">Fee for exchanging the ticket. Format: English characters only. Optional request field. .</param>
        /// <param name="ReservationType">The field is not currently supported. .</param>
        /// <param name="BoardingFeeAmount">Boarding fee. .</param>
        /// <param name="Legs">Legs.</param>
        /// <param name="AncillaryInformation">AncillaryInformation.</param>
        public Ptsv2paymentsTravelInformationTransitAirline(string BookingReferenceNumber = default(string), string CarrierName = default(string), Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer TicketIssuer = default(Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer), string TicketNumber = default(string), string CheckDigit = default(string), int? RestrictedTicketIndicator = default(int?), int? TransactionType = default(int?), string ExtendedPaymentCode = default(string), string PassengerName = default(string), string CustomerCode = default(string), string DocumentType = default(string), string DocumentNumber = default(string), int? DocumentNumberOfParts = default(int?), string InvoiceNumber = default(string), int? InvoiceDate = default(int?), string AdditionalCharges = default(string), string TotalFeeAmount = default(string), string ClearingSequence = default(string), string ClearingCount = default(string), string TotalClearingAmount = default(string), int? NumberOfPassengers = default(int?), string ReservationSystemCode = default(string), string ProcessIdentifier = default(string), string TicketIssueDate = default(string), bool? ElectronicTicketIndicator = default(bool?), string OriginalTicketNumber = default(string), string PurchaseType = default(string), string CreditReasonIndicator = default(string), string TicketChangeIndicator = default(string), string PlanNumber = default(string), string ArrivalDate = default(string), string RestrictedTicketDesciption = default(string), string ExchangeTicketAmount = default(string), string ExchangeTicketFeeAmount = default(string), string ReservationType = default(string), string BoardingFeeAmount = default(string), List<Ptsv2paymentsTravelInformationTransitAirlineLegs> Legs = default(List<Ptsv2paymentsTravelInformationTransitAirlineLegs>), Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation AncillaryInformation = default(Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation))
        {
            this.BookingReferenceNumber = BookingReferenceNumber;
            this.CarrierName = CarrierName;
            this.TicketIssuer = TicketIssuer;
            this.TicketNumber = TicketNumber;
            this.CheckDigit = CheckDigit;
            this.RestrictedTicketIndicator = RestrictedTicketIndicator;
            this.TransactionType = TransactionType;
            this.ExtendedPaymentCode = ExtendedPaymentCode;
            this.PassengerName = PassengerName;
            this.CustomerCode = CustomerCode;
            this.DocumentType = DocumentType;
            this.DocumentNumber = DocumentNumber;
            this.DocumentNumberOfParts = DocumentNumberOfParts;
            this.InvoiceNumber = InvoiceNumber;
            this.InvoiceDate = InvoiceDate;
            this.AdditionalCharges = AdditionalCharges;
            this.TotalFeeAmount = TotalFeeAmount;
            this.ClearingSequence = ClearingSequence;
            this.ClearingCount = ClearingCount;
            this.TotalClearingAmount = TotalClearingAmount;
            this.NumberOfPassengers = NumberOfPassengers;
            this.ReservationSystemCode = ReservationSystemCode;
            this.ProcessIdentifier = ProcessIdentifier;
            this.TicketIssueDate = TicketIssueDate;
            this.ElectronicTicketIndicator = ElectronicTicketIndicator;
            this.OriginalTicketNumber = OriginalTicketNumber;
            this.PurchaseType = PurchaseType;
            this.CreditReasonIndicator = CreditReasonIndicator;
            this.TicketChangeIndicator = TicketChangeIndicator;
            this.PlanNumber = PlanNumber;
            this.ArrivalDate = ArrivalDate;
            this.RestrictedTicketDesciption = RestrictedTicketDesciption;
            this.ExchangeTicketAmount = ExchangeTicketAmount;
            this.ExchangeTicketFeeAmount = ExchangeTicketFeeAmount;
            this.ReservationType = ReservationType;
            this.BoardingFeeAmount = BoardingFeeAmount;
            this.Legs = Legs;
            this.AncillaryInformation = AncillaryInformation;
        }
        
        /// <summary>
        /// Reference number for the airline booking. Required if ticket numbers are not issued. 
        /// </summary>
        /// <value>Reference number for the airline booking. Required if ticket numbers are not issued. </value>
        [DataMember(Name="bookingReferenceNumber", EmitDefaultValue=false)]
        public string BookingReferenceNumber { get; set; }

        /// <summary>
        /// Airline that generated the ticket. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Airline that generated the ticket. Format: English characters only. Optional request field. </value>
        [DataMember(Name="carrierName", EmitDefaultValue=false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets TicketIssuer
        /// </summary>
        [DataMember(Name="ticketIssuer", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer TicketIssuer { get; set; }

        /// <summary>
        /// Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
        /// </summary>
        /// <value>Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. </value>
        [DataMember(Name="ticketNumber", EmitDefaultValue=false)]
        public string TicketNumber { get; set; }

        /// <summary>
        /// Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero. 
        /// </summary>
        /// <value>Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero. </value>
        [DataMember(Name="checkDigit", EmitDefaultValue=false)]
        public string CheckDigit { get; set; }

        /// <summary>
        /// Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
        /// </summary>
        /// <value>Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. </value>
        [DataMember(Name="restrictedTicketIndicator", EmitDefaultValue=false)]
        public int? RestrictedTicketIndicator { get; set; }

        /// <summary>
        /// Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket 
        /// </summary>
        /// <value>Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket </value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public int? TransactionType { get; set; }

        /// <summary>
        /// The field is not currently supported. 
        /// </summary>
        /// <value>The field is not currently supported. </value>
        [DataMember(Name="extendedPaymentCode", EmitDefaultValue=false)]
        public string ExtendedPaymentCode { get; set; }

        /// <summary>
        /// Name of the passenger to whom the ticket was issued.  This will always be a single passenger&#39;s name. If there are more than one passengers, provide only the primary passenger&#39;s name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Name of the passenger to whom the ticket was issued.  This will always be a single passenger&#39;s name. If there are more than one passengers, provide only the primary passenger&#39;s name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field. </value>
        [DataMember(Name="passengerName", EmitDefaultValue=false)]
        public string PassengerName { get; set; }

        /// <summary>
        /// Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
        /// </summary>
        /// <value>Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. </value>
        [DataMember(Name="customerCode", EmitDefaultValue=false)]
        public string CustomerCode { get; set; }

        /// <summary>
        /// Airline document type code that specifies the purpose of the transaction. Format: English characters only. Optional request field.  | Code | Description | | - -- | - -- | | 01 | Passenger ticket | | 02 | Additional collection | | 03 | Excess baggage | | 04 | Miscellaneous charge order (MCO) or prepaid ticket authorization | | 05 | Special service ticket | | 06 | Supported refund | | 07 | Unsupported refund | | 08 | Lost ticket application | | 09 | Tour order voucher | | 10 | Ticket by mail | | 11 | Undercharge adjustment | | 12 | Group ticket | | 13 | Exchange adjustment | | 14 | SPD or air freight | | 15 | In-flight adjustment | | 16 | Agency passenger ticket | | 17 | Agency tour order or voucher | | 18 | Agency miscellaneous charge order (MCO) | | 19 | Agency exchange order | | 20 | Agency group ticket | | 21 | Debit adjustment for duplicate refund or use | | 22 | In-flight merchandise order | | 23 | Catalogue merchandise order | | 24 | In-flight phone charges | | 25 | Frequent flyer fee or purchase | | 26 | Kennel charge | | 27 | Animal transportation charge | | 28 | Firearms case | | 29 | Upgrade charge | | 30 | Credit for unused transportation | | 31 | Credit for class of service adjustment | | 32 | Credit for denied boarding | | 33 | Credit for miscellaneous refund | | 34 | Credit for lost ticket refund | | 35 | Credit for exchange refund | | 36 | Credit for overcharge adjustment | | 37 | Credit for multiple Unused tickets | | 38 | Exchange order | | 39 | Self-service ticket | | 41 | In-flight duty-free purchase | | 42 | Senior citizen discount booklets | | 43 | Club membership fee | | 44 | Coupon book | | 45 | In-flight charges | | 46 | Tour deposit | | 47 | Frequent flyer overnight delivery charge | | 48 | Frequent flyer fulfillment | | 49 | Small package delivery | | 50 | Vendor sale | | 51 | Miscellaneous taxes or fees | | 52 | Travel agency fee | | 60 | Vendor refund or credit | | 64 | Duty free sale | | 65 | Preferred seat upgrade | | 66 | Cabin upgrade | | 67 | Lounge or club access or day pass | | 68 | Agent assisted reservation or ticketing fee | | 69 | Ticket change or cancel fee | | 70 | Trip insurance | | 71 | Unaccompanied minor | | 72 | Standby fee | | 73 | Curbside baggage | | 74 | In-flight medical equipment | | 75 | Ticket or pass print fee | | 76 | Checked sporting or special equipment | | 77 | Dry ice fee | | 78 | Mail or postage fee | | 79 | Club membership fee or temporary trial | | 80 | Frequent flyer activation or reinstatement | | 81 | Gift certificate | | 82 | Onboard or in-flight prepaid voucher | | 83 | Optional services fee | | 84 | Advance purchase for excess baggage | | 85 | Advance purchase for preferred seat upgrade | | 86 | Advance purchase for cabin upgrade | | 87 | Advance purchase for optional services | | 88 | WiFi | | 89 | Packages | | 90 | In-flight entertainment or internet access | | 91 | Overweight bag fee | | 92 | Sleep sets | | 93 | Special purchase fee | 
        /// </summary>
        /// <value>Airline document type code that specifies the purpose of the transaction. Format: English characters only. Optional request field.  | Code | Description | | - -- | - -- | | 01 | Passenger ticket | | 02 | Additional collection | | 03 | Excess baggage | | 04 | Miscellaneous charge order (MCO) or prepaid ticket authorization | | 05 | Special service ticket | | 06 | Supported refund | | 07 | Unsupported refund | | 08 | Lost ticket application | | 09 | Tour order voucher | | 10 | Ticket by mail | | 11 | Undercharge adjustment | | 12 | Group ticket | | 13 | Exchange adjustment | | 14 | SPD or air freight | | 15 | In-flight adjustment | | 16 | Agency passenger ticket | | 17 | Agency tour order or voucher | | 18 | Agency miscellaneous charge order (MCO) | | 19 | Agency exchange order | | 20 | Agency group ticket | | 21 | Debit adjustment for duplicate refund or use | | 22 | In-flight merchandise order | | 23 | Catalogue merchandise order | | 24 | In-flight phone charges | | 25 | Frequent flyer fee or purchase | | 26 | Kennel charge | | 27 | Animal transportation charge | | 28 | Firearms case | | 29 | Upgrade charge | | 30 | Credit for unused transportation | | 31 | Credit for class of service adjustment | | 32 | Credit for denied boarding | | 33 | Credit for miscellaneous refund | | 34 | Credit for lost ticket refund | | 35 | Credit for exchange refund | | 36 | Credit for overcharge adjustment | | 37 | Credit for multiple Unused tickets | | 38 | Exchange order | | 39 | Self-service ticket | | 41 | In-flight duty-free purchase | | 42 | Senior citizen discount booklets | | 43 | Club membership fee | | 44 | Coupon book | | 45 | In-flight charges | | 46 | Tour deposit | | 47 | Frequent flyer overnight delivery charge | | 48 | Frequent flyer fulfillment | | 49 | Small package delivery | | 50 | Vendor sale | | 51 | Miscellaneous taxes or fees | | 52 | Travel agency fee | | 60 | Vendor refund or credit | | 64 | Duty free sale | | 65 | Preferred seat upgrade | | 66 | Cabin upgrade | | 67 | Lounge or club access or day pass | | 68 | Agent assisted reservation or ticketing fee | | 69 | Ticket change or cancel fee | | 70 | Trip insurance | | 71 | Unaccompanied minor | | 72 | Standby fee | | 73 | Curbside baggage | | 74 | In-flight medical equipment | | 75 | Ticket or pass print fee | | 76 | Checked sporting or special equipment | | 77 | Dry ice fee | | 78 | Mail or postage fee | | 79 | Club membership fee or temporary trial | | 80 | Frequent flyer activation or reinstatement | | 81 | Gift certificate | | 82 | Onboard or in-flight prepaid voucher | | 83 | Optional services fee | | 84 | Advance purchase for excess baggage | | 85 | Advance purchase for preferred seat upgrade | | 86 | Advance purchase for cabin upgrade | | 87 | Advance purchase for optional services | | 88 | WiFi | | 89 | Packages | | 90 | In-flight entertainment or internet access | | 91 | Overweight bag fee | | 92 | Sleep sets | | 93 | Special purchase fee | </value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// The field is not currently supported. 
        /// </summary>
        /// <value>The field is not currently supported. </value>
        [DataMember(Name="documentNumber", EmitDefaultValue=false)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// The field is not currently supported. 
        /// </summary>
        /// <value>The field is not currently supported. </value>
        [DataMember(Name="documentNumberOfParts", EmitDefaultValue=false)]
        public int? DocumentNumberOfParts { get; set; }

        /// <summary>
        /// Invoice number for the airline transaction. 
        /// </summary>
        /// <value>Invoice number for the airline transaction. </value>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \&quot;Invoice Number,\&quot; 
        /// </summary>
        /// <value>Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \&quot;Invoice Number,\&quot; </value>
        [DataMember(Name="invoiceDate", EmitDefaultValue=false)]
        public int? InvoiceDate { get; set; }

        /// <summary>
        /// Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage. 
        /// </summary>
        /// <value>Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage. </value>
        [DataMember(Name="additionalCharges", EmitDefaultValue=false)]
        public string AdditionalCharges { get; set; }

        /// <summary>
        /// Total fee for the ticket. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Total fee for the ticket. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. Optional request field. </value>
        [DataMember(Name="totalFeeAmount", EmitDefaultValue=false)]
        public string TotalFeeAmount { get; set; }

        /// <summary>
        /// Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field. </value>
        [DataMember(Name="clearingSequence", EmitDefaultValue=false)]
        public string ClearingSequence { get; set; }

        /// <summary>
        /// Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field. </value>
        [DataMember(Name="clearingCount", EmitDefaultValue=false)]
        public string ClearingCount { get; set; }

        /// <summary>
        /// Total clearing amount for all transactions in the clearing count set. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization. 
        /// </summary>
        /// <value>Total clearing amount for all transactions in the clearing count set. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization. </value>
        [DataMember(Name="totalClearingAmount", EmitDefaultValue=false)]
        public string TotalClearingAmount { get; set; }

        /// <summary>
        /// Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field. </value>
        [DataMember(Name="numberOfPassengers", EmitDefaultValue=false)]
        public int? NumberOfPassengers { get; set; }

        /// <summary>
        /// Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
        /// </summary>
        /// <value>Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. </value>
        [DataMember(Name="reservationSystemCode", EmitDefaultValue=false)]
        public string ReservationSystemCode { get; set; }

        /// <summary>
        /// Airline process identifier. This value is the airlineâ€™s three-digit IATA1 code which is used to process extended payment airline tickets. 
        /// </summary>
        /// <value>Airline process identifier. This value is the airlineâ€™s three-digit IATA1 code which is used to process extended payment airline tickets. </value>
        [DataMember(Name="processIdentifier", EmitDefaultValue=false)]
        public string ProcessIdentifier { get; set; }

        /// <summary>
        /// Date on which the transaction occurred. Format: &#x60;YYYYMMDD&#x60; Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Date on which the transaction occurred. Format: &#x60;YYYYMMDD&#x60; Format: English characters only. Optional request field. </value>
        [DataMember(Name="ticketIssueDate", EmitDefaultValue=false)]
        public string TicketIssueDate { get; set; }

        /// <summary>
        /// Flag that indicates whether an electronic ticket was issued. Possible values: - &#x60;true&#x60; - &#x60;false&#x60; Optional request field. 
        /// </summary>
        /// <value>Flag that indicates whether an electronic ticket was issued. Possible values: - &#x60;true&#x60; - &#x60;false&#x60; Optional request field. </value>
        [DataMember(Name="electronicTicketIndicator", EmitDefaultValue=false)]
        public bool? ElectronicTicketIndicator { get; set; }

        /// <summary>
        /// Original ticket number when the transaction is for a replacement ticket. 
        /// </summary>
        /// <value>Original ticket number when the transaction is for a replacement ticket. </value>
        [DataMember(Name="originalTicketNumber", EmitDefaultValue=false)]
        public string OriginalTicketNumber { get; set; }

        /// <summary>
        /// Type of purchase. Possible values: - &#x60;EXC&#x60;: Exchange ticket - &#x60;MSC&#x60;: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - &#x60;REF&#x60;: Refund - &#x60;TKT&#x60;: Ticket Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Type of purchase. Possible values: - &#x60;EXC&#x60;: Exchange ticket - &#x60;MSC&#x60;: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - &#x60;REF&#x60;: Refund - &#x60;TKT&#x60;: Ticket Format: English characters only. Optional request field. </value>
        [DataMember(Name="purchaseType", EmitDefaultValue=false)]
        public string PurchaseType { get; set; }

        /// <summary>
        /// Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only.  Optional request field. 
        /// </summary>
        /// <value>Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only.  Optional request field. </value>
        [DataMember(Name="creditReasonIndicator", EmitDefaultValue=false)]
        public string CreditReasonIndicator { get; set; }

        /// <summary>
        /// Type of update. Possible values: - &#x60;C&#x60;: Change to the existing ticket. - &#x60;N&#x60;: New ticket. Format: English characters only Optional request field. 
        /// </summary>
        /// <value>Type of update. Possible values: - &#x60;C&#x60;: Change to the existing ticket. - &#x60;N&#x60;: New ticket. Format: English characters only Optional request field. </value>
        [DataMember(Name="ticketChangeIndicator", EmitDefaultValue=false)]
        public string TicketChangeIndicator { get; set; }

        /// <summary>
        /// Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field. </value>
        [DataMember(Name="planNumber", EmitDefaultValue=false)]
        public string PlanNumber { get; set; }

        /// <summary>
        /// Date of arrival for the last leg of the trip. Format: &#x60;MMDDYYYY&#x60; English characters only. Optional request field. 
        /// </summary>
        /// <value>Date of arrival for the last leg of the trip. Format: &#x60;MMDDYYYY&#x60; English characters only. Optional request field. </value>
        [DataMember(Name="arrivalDate", EmitDefaultValue=false)]
        public string ArrivalDate { get; set; }

        /// <summary>
        /// Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field. </value>
        [DataMember(Name="restrictedTicketDesciption", EmitDefaultValue=false)]
        public string RestrictedTicketDesciption { get; set; }

        /// <summary>
        /// Amount of the exchanged ticket. Format: English characters only. 
        /// </summary>
        /// <value>Amount of the exchanged ticket. Format: English characters only. </value>
        [DataMember(Name="exchangeTicketAmount", EmitDefaultValue=false)]
        public string ExchangeTicketAmount { get; set; }

        /// <summary>
        /// Fee for exchanging the ticket. Format: English characters only. Optional request field. 
        /// </summary>
        /// <value>Fee for exchanging the ticket. Format: English characters only. Optional request field. </value>
        [DataMember(Name="exchangeTicketFeeAmount", EmitDefaultValue=false)]
        public string ExchangeTicketFeeAmount { get; set; }

        /// <summary>
        /// The field is not currently supported. 
        /// </summary>
        /// <value>The field is not currently supported. </value>
        [DataMember(Name="reservationType", EmitDefaultValue=false)]
        public string ReservationType { get; set; }

        /// <summary>
        /// Boarding fee. 
        /// </summary>
        /// <value>Boarding fee. </value>
        [DataMember(Name="boardingFeeAmount", EmitDefaultValue=false)]
        public string BoardingFeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [DataMember(Name="legs", EmitDefaultValue=false)]
        public List<Ptsv2paymentsTravelInformationTransitAirlineLegs> Legs { get; set; }

        /// <summary>
        /// Gets or Sets AncillaryInformation
        /// </summary>
        [DataMember(Name="ancillaryInformation", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation AncillaryInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsTravelInformationTransitAirline {\n");
            sb.Append("  BookingReferenceNumber: ").Append(BookingReferenceNumber).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  TicketIssuer: ").Append(TicketIssuer).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  CheckDigit: ").Append(CheckDigit).Append("\n");
            sb.Append("  RestrictedTicketIndicator: ").Append(RestrictedTicketIndicator).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  ExtendedPaymentCode: ").Append(ExtendedPaymentCode).Append("\n");
            sb.Append("  PassengerName: ").Append(PassengerName).Append("\n");
            sb.Append("  CustomerCode: ").Append(CustomerCode).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  DocumentNumberOfParts: ").Append(DocumentNumberOfParts).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  AdditionalCharges: ").Append(AdditionalCharges).Append("\n");
            sb.Append("  TotalFeeAmount: ").Append(TotalFeeAmount).Append("\n");
            sb.Append("  ClearingSequence: ").Append(ClearingSequence).Append("\n");
            sb.Append("  ClearingCount: ").Append(ClearingCount).Append("\n");
            sb.Append("  TotalClearingAmount: ").Append(TotalClearingAmount).Append("\n");
            sb.Append("  NumberOfPassengers: ").Append(NumberOfPassengers).Append("\n");
            sb.Append("  ReservationSystemCode: ").Append(ReservationSystemCode).Append("\n");
            sb.Append("  ProcessIdentifier: ").Append(ProcessIdentifier).Append("\n");
            sb.Append("  TicketIssueDate: ").Append(TicketIssueDate).Append("\n");
            sb.Append("  ElectronicTicketIndicator: ").Append(ElectronicTicketIndicator).Append("\n");
            sb.Append("  OriginalTicketNumber: ").Append(OriginalTicketNumber).Append("\n");
            sb.Append("  PurchaseType: ").Append(PurchaseType).Append("\n");
            sb.Append("  CreditReasonIndicator: ").Append(CreditReasonIndicator).Append("\n");
            sb.Append("  TicketChangeIndicator: ").Append(TicketChangeIndicator).Append("\n");
            sb.Append("  PlanNumber: ").Append(PlanNumber).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  RestrictedTicketDesciption: ").Append(RestrictedTicketDesciption).Append("\n");
            sb.Append("  ExchangeTicketAmount: ").Append(ExchangeTicketAmount).Append("\n");
            sb.Append("  ExchangeTicketFeeAmount: ").Append(ExchangeTicketFeeAmount).Append("\n");
            sb.Append("  ReservationType: ").Append(ReservationType).Append("\n");
            sb.Append("  BoardingFeeAmount: ").Append(BoardingFeeAmount).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  AncillaryInformation: ").Append(AncillaryInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsTravelInformationTransitAirline);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsTravelInformationTransitAirline instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsTravelInformationTransitAirline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsTravelInformationTransitAirline other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BookingReferenceNumber == other.BookingReferenceNumber ||
                    this.BookingReferenceNumber != null &&
                    this.BookingReferenceNumber.Equals(other.BookingReferenceNumber)
                ) && 
                (
                    this.CarrierName == other.CarrierName ||
                    this.CarrierName != null &&
                    this.CarrierName.Equals(other.CarrierName)
                ) && 
                (
                    this.TicketIssuer == other.TicketIssuer ||
                    this.TicketIssuer != null &&
                    this.TicketIssuer.Equals(other.TicketIssuer)
                ) && 
                (
                    this.TicketNumber == other.TicketNumber ||
                    this.TicketNumber != null &&
                    this.TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    this.CheckDigit == other.CheckDigit ||
                    this.CheckDigit != null &&
                    this.CheckDigit.Equals(other.CheckDigit)
                ) && 
                (
                    this.RestrictedTicketIndicator == other.RestrictedTicketIndicator ||
                    this.RestrictedTicketIndicator != null &&
                    this.RestrictedTicketIndicator.Equals(other.RestrictedTicketIndicator)
                ) && 
                (
                    this.TransactionType == other.TransactionType ||
                    this.TransactionType != null &&
                    this.TransactionType.Equals(other.TransactionType)
                ) && 
                (
                    this.ExtendedPaymentCode == other.ExtendedPaymentCode ||
                    this.ExtendedPaymentCode != null &&
                    this.ExtendedPaymentCode.Equals(other.ExtendedPaymentCode)
                ) && 
                (
                    this.PassengerName == other.PassengerName ||
                    this.PassengerName != null &&
                    this.PassengerName.Equals(other.PassengerName)
                ) && 
                (
                    this.CustomerCode == other.CustomerCode ||
                    this.CustomerCode != null &&
                    this.CustomerCode.Equals(other.CustomerCode)
                ) && 
                (
                    this.DocumentType == other.DocumentType ||
                    this.DocumentType != null &&
                    this.DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    this.DocumentNumber == other.DocumentNumber ||
                    this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(other.DocumentNumber)
                ) && 
                (
                    this.DocumentNumberOfParts == other.DocumentNumberOfParts ||
                    this.DocumentNumberOfParts != null &&
                    this.DocumentNumberOfParts.Equals(other.DocumentNumberOfParts)
                ) && 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.InvoiceDate == other.InvoiceDate ||
                    this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(other.InvoiceDate)
                ) && 
                (
                    this.AdditionalCharges == other.AdditionalCharges ||
                    this.AdditionalCharges != null &&
                    this.AdditionalCharges.Equals(other.AdditionalCharges)
                ) && 
                (
                    this.TotalFeeAmount == other.TotalFeeAmount ||
                    this.TotalFeeAmount != null &&
                    this.TotalFeeAmount.Equals(other.TotalFeeAmount)
                ) && 
                (
                    this.ClearingSequence == other.ClearingSequence ||
                    this.ClearingSequence != null &&
                    this.ClearingSequence.Equals(other.ClearingSequence)
                ) && 
                (
                    this.ClearingCount == other.ClearingCount ||
                    this.ClearingCount != null &&
                    this.ClearingCount.Equals(other.ClearingCount)
                ) && 
                (
                    this.TotalClearingAmount == other.TotalClearingAmount ||
                    this.TotalClearingAmount != null &&
                    this.TotalClearingAmount.Equals(other.TotalClearingAmount)
                ) && 
                (
                    this.NumberOfPassengers == other.NumberOfPassengers ||
                    this.NumberOfPassengers != null &&
                    this.NumberOfPassengers.Equals(other.NumberOfPassengers)
                ) && 
                (
                    this.ReservationSystemCode == other.ReservationSystemCode ||
                    this.ReservationSystemCode != null &&
                    this.ReservationSystemCode.Equals(other.ReservationSystemCode)
                ) && 
                (
                    this.ProcessIdentifier == other.ProcessIdentifier ||
                    this.ProcessIdentifier != null &&
                    this.ProcessIdentifier.Equals(other.ProcessIdentifier)
                ) && 
                (
                    this.TicketIssueDate == other.TicketIssueDate ||
                    this.TicketIssueDate != null &&
                    this.TicketIssueDate.Equals(other.TicketIssueDate)
                ) && 
                (
                    this.ElectronicTicketIndicator == other.ElectronicTicketIndicator ||
                    this.ElectronicTicketIndicator != null &&
                    this.ElectronicTicketIndicator.Equals(other.ElectronicTicketIndicator)
                ) && 
                (
                    this.OriginalTicketNumber == other.OriginalTicketNumber ||
                    this.OriginalTicketNumber != null &&
                    this.OriginalTicketNumber.Equals(other.OriginalTicketNumber)
                ) && 
                (
                    this.PurchaseType == other.PurchaseType ||
                    this.PurchaseType != null &&
                    this.PurchaseType.Equals(other.PurchaseType)
                ) && 
                (
                    this.CreditReasonIndicator == other.CreditReasonIndicator ||
                    this.CreditReasonIndicator != null &&
                    this.CreditReasonIndicator.Equals(other.CreditReasonIndicator)
                ) && 
                (
                    this.TicketChangeIndicator == other.TicketChangeIndicator ||
                    this.TicketChangeIndicator != null &&
                    this.TicketChangeIndicator.Equals(other.TicketChangeIndicator)
                ) && 
                (
                    this.PlanNumber == other.PlanNumber ||
                    this.PlanNumber != null &&
                    this.PlanNumber.Equals(other.PlanNumber)
                ) && 
                (
                    this.ArrivalDate == other.ArrivalDate ||
                    this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(other.ArrivalDate)
                ) && 
                (
                    this.RestrictedTicketDesciption == other.RestrictedTicketDesciption ||
                    this.RestrictedTicketDesciption != null &&
                    this.RestrictedTicketDesciption.Equals(other.RestrictedTicketDesciption)
                ) && 
                (
                    this.ExchangeTicketAmount == other.ExchangeTicketAmount ||
                    this.ExchangeTicketAmount != null &&
                    this.ExchangeTicketAmount.Equals(other.ExchangeTicketAmount)
                ) && 
                (
                    this.ExchangeTicketFeeAmount == other.ExchangeTicketFeeAmount ||
                    this.ExchangeTicketFeeAmount != null &&
                    this.ExchangeTicketFeeAmount.Equals(other.ExchangeTicketFeeAmount)
                ) && 
                (
                    this.ReservationType == other.ReservationType ||
                    this.ReservationType != null &&
                    this.ReservationType.Equals(other.ReservationType)
                ) && 
                (
                    this.BoardingFeeAmount == other.BoardingFeeAmount ||
                    this.BoardingFeeAmount != null &&
                    this.BoardingFeeAmount.Equals(other.BoardingFeeAmount)
                ) && 
                (
                    this.Legs == other.Legs ||
                    this.Legs != null &&
                    this.Legs.SequenceEqual(other.Legs)
                ) && 
                (
                    this.AncillaryInformation == other.AncillaryInformation ||
                    this.AncillaryInformation != null &&
                    this.AncillaryInformation.Equals(other.AncillaryInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BookingReferenceNumber != null)
                    hash = hash * 59 + this.BookingReferenceNumber.GetHashCode();
                if (this.CarrierName != null)
                    hash = hash * 59 + this.CarrierName.GetHashCode();
                if (this.TicketIssuer != null)
                    hash = hash * 59 + this.TicketIssuer.GetHashCode();
                if (this.TicketNumber != null)
                    hash = hash * 59 + this.TicketNumber.GetHashCode();
                if (this.CheckDigit != null)
                    hash = hash * 59 + this.CheckDigit.GetHashCode();
                if (this.RestrictedTicketIndicator != null)
                    hash = hash * 59 + this.RestrictedTicketIndicator.GetHashCode();
                if (this.TransactionType != null)
                    hash = hash * 59 + this.TransactionType.GetHashCode();
                if (this.ExtendedPaymentCode != null)
                    hash = hash * 59 + this.ExtendedPaymentCode.GetHashCode();
                if (this.PassengerName != null)
                    hash = hash * 59 + this.PassengerName.GetHashCode();
                if (this.CustomerCode != null)
                    hash = hash * 59 + this.CustomerCode.GetHashCode();
                if (this.DocumentType != null)
                    hash = hash * 59 + this.DocumentType.GetHashCode();
                if (this.DocumentNumber != null)
                    hash = hash * 59 + this.DocumentNumber.GetHashCode();
                if (this.DocumentNumberOfParts != null)
                    hash = hash * 59 + this.DocumentNumberOfParts.GetHashCode();
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.InvoiceDate != null)
                    hash = hash * 59 + this.InvoiceDate.GetHashCode();
                if (this.AdditionalCharges != null)
                    hash = hash * 59 + this.AdditionalCharges.GetHashCode();
                if (this.TotalFeeAmount != null)
                    hash = hash * 59 + this.TotalFeeAmount.GetHashCode();
                if (this.ClearingSequence != null)
                    hash = hash * 59 + this.ClearingSequence.GetHashCode();
                if (this.ClearingCount != null)
                    hash = hash * 59 + this.ClearingCount.GetHashCode();
                if (this.TotalClearingAmount != null)
                    hash = hash * 59 + this.TotalClearingAmount.GetHashCode();
                if (this.NumberOfPassengers != null)
                    hash = hash * 59 + this.NumberOfPassengers.GetHashCode();
                if (this.ReservationSystemCode != null)
                    hash = hash * 59 + this.ReservationSystemCode.GetHashCode();
                if (this.ProcessIdentifier != null)
                    hash = hash * 59 + this.ProcessIdentifier.GetHashCode();
                if (this.TicketIssueDate != null)
                    hash = hash * 59 + this.TicketIssueDate.GetHashCode();
                if (this.ElectronicTicketIndicator != null)
                    hash = hash * 59 + this.ElectronicTicketIndicator.GetHashCode();
                if (this.OriginalTicketNumber != null)
                    hash = hash * 59 + this.OriginalTicketNumber.GetHashCode();
                if (this.PurchaseType != null)
                    hash = hash * 59 + this.PurchaseType.GetHashCode();
                if (this.CreditReasonIndicator != null)
                    hash = hash * 59 + this.CreditReasonIndicator.GetHashCode();
                if (this.TicketChangeIndicator != null)
                    hash = hash * 59 + this.TicketChangeIndicator.GetHashCode();
                if (this.PlanNumber != null)
                    hash = hash * 59 + this.PlanNumber.GetHashCode();
                if (this.ArrivalDate != null)
                    hash = hash * 59 + this.ArrivalDate.GetHashCode();
                if (this.RestrictedTicketDesciption != null)
                    hash = hash * 59 + this.RestrictedTicketDesciption.GetHashCode();
                if (this.ExchangeTicketAmount != null)
                    hash = hash * 59 + this.ExchangeTicketAmount.GetHashCode();
                if (this.ExchangeTicketFeeAmount != null)
                    hash = hash * 59 + this.ExchangeTicketFeeAmount.GetHashCode();
                if (this.ReservationType != null)
                    hash = hash * 59 + this.ReservationType.GetHashCode();
                if (this.BoardingFeeAmount != null)
                    hash = hash * 59 + this.BoardingFeeAmount.GetHashCode();
                if (this.Legs != null)
                    hash = hash * 59 + this.Legs.GetHashCode();
                if (this.AncillaryInformation != null)
                    hash = hash * 59 + this.AncillaryInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
