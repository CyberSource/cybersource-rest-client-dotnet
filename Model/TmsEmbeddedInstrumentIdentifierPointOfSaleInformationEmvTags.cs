/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags
    /// </summary>
    [DataContract]
    public partial class TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags :  IEquatable<TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags" /> class.
        /// </summary>
        /// <param name="Tag">EMV tag, 1-10 hex characters. (required).</param>
        /// <param name="Value">EMV tag value, 1-64 characters. (required).</param>
        /// <param name="Source">Source of the tag.  Possible Values:   - CARD   - TERMINAL  (required).</param>
        public TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags(string Tag = default(string), string Value = default(string), string Source = default(string))
        {
            this.Tag = Tag;
            this.Value = Value;
            this.Source = Source;
        }
        
        /// <summary>
        /// EMV tag, 1-10 hex characters.
        /// </summary>
        /// <value>EMV tag, 1-10 hex characters.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// EMV tag value, 1-64 characters.
        /// </summary>
        /// <value>EMV tag value, 1-64 characters.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Source of the tag.  Possible Values:   - CARD   - TERMINAL 
        /// </summary>
        /// <value>Source of the tag.  Possible Values:   - CARD   - TERMINAL </value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags {\n");
            if (Tag != null) sb.Append("  Tag: ").Append(Tag).Append("\n");
            if (Value != null) sb.Append("  Value: ").Append(Value).Append("\n");
            if (Source != null) sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags);
        }

        /// <summary>
        /// Returns true if TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsEmbeddedInstrumentIdentifierPointOfSaleInformationEmvTags other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Tag == other.Tag ||
                    this.Tag != null &&
                    this.Tag.Equals(other.Tag)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Tag != null)
                    hash = hash * 59 + this.Tag.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
