/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CardProcessingConfigFeaturesCardNotPresentPayouts
    /// </summary>
    [DataContract]
    public partial class CardProcessingConfigFeaturesCardNotPresentPayouts :  IEquatable<CardProcessingConfigFeaturesCardNotPresentPayouts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigFeaturesCardNotPresentPayouts" /> class.
        /// </summary>
        /// <param name="ReimbursementCode">Applicable for VPC processors..</param>
        /// <param name="AcquiringInstitutionId">This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant. This number is usually a Visa-assigned. Applicable for VPC processors..</param>
        /// <param name="BusinessApplicationId">Transaction type. List of supported identifiers documented in the Developer Guide. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="FinancialInstitutionId">Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="MerchantAbaNumber">Routing Number to identify banks within the United States. Applicable for VPC processors..</param>
        /// <param name="NetworkOrder">Order of the networks in which Visa should make routing decisions. Applicable for VPC processors..</param>
        /// <param name="Currencies">Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).</param>
        /// <param name="MerchantId">Merchant ID assigned by an acquirer or a processor. Should not be overridden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="TerminalId">The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;td&gt;^[0-9:&amp;#92;-]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        public CardProcessingConfigFeaturesCardNotPresentPayouts(string ReimbursementCode = default(string), string AcquiringInstitutionId = default(string), string BusinessApplicationId = default(string), string FinancialInstitutionId = default(string), string MerchantAbaNumber = default(string), string NetworkOrder = default(string), Dictionary<string, CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies> Currencies = default(Dictionary<string, CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies>), string MerchantId = default(string), string TerminalId = default(string))
        {
            this.ReimbursementCode = ReimbursementCode;
            this.AcquiringInstitutionId = AcquiringInstitutionId;
            this.BusinessApplicationId = BusinessApplicationId;
            this.FinancialInstitutionId = FinancialInstitutionId;
            this.MerchantAbaNumber = MerchantAbaNumber;
            this.NetworkOrder = NetworkOrder;
            this.Currencies = Currencies;
            this.MerchantId = MerchantId;
            this.TerminalId = TerminalId;
        }
        
        /// <summary>
        /// Applicable for VPC processors.
        /// </summary>
        /// <value>Applicable for VPC processors.</value>
        [DataMember(Name="reimbursementCode", EmitDefaultValue=false)]
        public string ReimbursementCode { get; set; }

        /// <summary>
        /// This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant. This number is usually a Visa-assigned. Applicable for VPC processors.
        /// </summary>
        /// <value>This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant. This number is usually a Visa-assigned. Applicable for VPC processors.</value>
        [DataMember(Name="acquiringInstitutionId", EmitDefaultValue=false)]
        public string AcquiringInstitutionId { get; set; }

        /// <summary>
        /// Transaction type. List of supported identifiers documented in the Developer Guide. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Transaction type. List of supported identifiers documented in the Developer Guide. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="businessApplicationId", EmitDefaultValue=false)]
        public string BusinessApplicationId { get; set; }

        /// <summary>
        /// Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="financialInstitutionId", EmitDefaultValue=false)]
        public string FinancialInstitutionId { get; set; }

        /// <summary>
        /// Routing Number to identify banks within the United States. Applicable for VPC processors.
        /// </summary>
        /// <value>Routing Number to identify banks within the United States. Applicable for VPC processors.</value>
        [DataMember(Name="merchantAbaNumber", EmitDefaultValue=false)]
        public string MerchantAbaNumber { get; set; }

        /// <summary>
        /// Order of the networks in which Visa should make routing decisions. Applicable for VPC processors.
        /// </summary>
        /// <value>Order of the networks in which Visa should make routing decisions. Applicable for VPC processors.</value>
        [DataMember(Name="networkOrder", EmitDefaultValue=false)]
        public string NetworkOrder { get; set; }

        /// <summary>
        /// Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
        /// </summary>
        /// <value>Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)</value>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public Dictionary<string, CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies> Currencies { get; set; }

        /// <summary>
        /// Merchant ID assigned by an acquirer or a processor. Should not be overridden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Merchant ID assigned by an acquirer or a processor. Should not be overridden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;td&gt;^[0-9:&amp;#92;-]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;td&gt;^[0-9:&amp;#92;-]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProcessingConfigFeaturesCardNotPresentPayouts {\n");
            sb.Append("  ReimbursementCode: ").Append(ReimbursementCode).Append("\n");
            sb.Append("  AcquiringInstitutionId: ").Append(AcquiringInstitutionId).Append("\n");
            sb.Append("  BusinessApplicationId: ").Append(BusinessApplicationId).Append("\n");
            sb.Append("  FinancialInstitutionId: ").Append(FinancialInstitutionId).Append("\n");
            sb.Append("  MerchantAbaNumber: ").Append(MerchantAbaNumber).Append("\n");
            sb.Append("  NetworkOrder: ").Append(NetworkOrder).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardProcessingConfigFeaturesCardNotPresentPayouts);
        }

        /// <summary>
        /// Returns true if CardProcessingConfigFeaturesCardNotPresentPayouts instances are equal
        /// </summary>
        /// <param name="other">Instance of CardProcessingConfigFeaturesCardNotPresentPayouts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProcessingConfigFeaturesCardNotPresentPayouts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReimbursementCode == other.ReimbursementCode ||
                    this.ReimbursementCode != null &&
                    this.ReimbursementCode.Equals(other.ReimbursementCode)
                ) && 
                (
                    this.AcquiringInstitutionId == other.AcquiringInstitutionId ||
                    this.AcquiringInstitutionId != null &&
                    this.AcquiringInstitutionId.Equals(other.AcquiringInstitutionId)
                ) && 
                (
                    this.BusinessApplicationId == other.BusinessApplicationId ||
                    this.BusinessApplicationId != null &&
                    this.BusinessApplicationId.Equals(other.BusinessApplicationId)
                ) && 
                (
                    this.FinancialInstitutionId == other.FinancialInstitutionId ||
                    this.FinancialInstitutionId != null &&
                    this.FinancialInstitutionId.Equals(other.FinancialInstitutionId)
                ) && 
                (
                    this.MerchantAbaNumber == other.MerchantAbaNumber ||
                    this.MerchantAbaNumber != null &&
                    this.MerchantAbaNumber.Equals(other.MerchantAbaNumber)
                ) && 
                (
                    this.NetworkOrder == other.NetworkOrder ||
                    this.NetworkOrder != null &&
                    this.NetworkOrder.Equals(other.NetworkOrder)
                ) && 
                (
                    this.Currencies == other.Currencies ||
                    this.Currencies != null &&
                    this.Currencies.SequenceEqual(other.Currencies)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.TerminalId == other.TerminalId ||
                    this.TerminalId != null &&
                    this.TerminalId.Equals(other.TerminalId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReimbursementCode != null)
                    hash = hash * 59 + this.ReimbursementCode.GetHashCode();
                if (this.AcquiringInstitutionId != null)
                    hash = hash * 59 + this.AcquiringInstitutionId.GetHashCode();
                if (this.BusinessApplicationId != null)
                    hash = hash * 59 + this.BusinessApplicationId.GetHashCode();
                if (this.FinancialInstitutionId != null)
                    hash = hash * 59 + this.FinancialInstitutionId.GetHashCode();
                if (this.MerchantAbaNumber != null)
                    hash = hash * 59 + this.MerchantAbaNumber.GetHashCode();
                if (this.NetworkOrder != null)
                    hash = hash * 59 + this.NetworkOrder.GetHashCode();
                if (this.Currencies != null)
                    hash = hash * 59 + this.Currencies.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.TerminalId != null)
                    hash = hash * 59 + this.TerminalId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
