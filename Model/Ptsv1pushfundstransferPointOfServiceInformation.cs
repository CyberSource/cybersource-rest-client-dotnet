/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv1pushfundstransferPointOfServiceInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv1pushfundstransferPointOfServiceInformation :  IEquatable<Ptsv1pushfundstransferPointOfServiceInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv1pushfundstransferPointOfServiceInformation" /> class.
        /// </summary>
        /// <param name="TerminalId">Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  Visa Platform Connect A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.   Used by Authorization Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.  Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include pointOfSaleInformation.catLevel. .</param>
        /// <param name="CatLevel">Type of cardholder-activated terminal. Possible values:  - &#x60;1&#x60;: Automated dispensing machine - &#x60;2&#x60;: Self-service terminal - &#x60;3&#x60;: Limited amount terminal - &#x60;4&#x60;: In-flight commerce (IFC) terminal - &#x60;5&#x60;: Radio frequency device - &#x60;6&#x60;: Mobile acceptance terminal - &#x60;7&#x60;: Electronic cash register - &#x60;8&#x60;: E-commerce device at your location - &#x60;9&#x60;: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  Chase Paymentech Solutions Only values 1, 2, and 3 are supported. Required if pointOfSaleInformation.terminalID is included in the request; otherwise, optional.  Visa Platform COnnect Values 1 through 6 are supported on CyberSource through VisaNet, but some acquirers do not support all six values. Optional field.  Nonnegative integer. .</param>
        /// <param name="EntryMode">Method of entering payment card information into the POS terminal. Possible values:  - &#x60;contact&#x60;: Read from direct contact with chip card. - &#x60;contactless&#x60;: Read from a contactless interface using chip data. - &#x60;keyed&#x60;: Manually keyed into POS terminal. This value is not supported on OmniPay Direct. - &#x60;msd&#x60;: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct. - &#x60;swiped&#x60;: Read from credit card magnetic stripe. The contact, contactless, and msd values are supported only for EMV transactions. .</param>
        /// <param name="PinEntryCapability">PIN Entry Capability - 0 Unknown. - 1 Indicates terminal can accept and forward online PINs. - 2 Indicates terminal cannot accept and forward online PINs. - 8 Terminal PIN pad down. - 9 Reserved for future use. .</param>
        /// <param name="TerminalCapability">integer [ 1 .. 5 ] POS terminal&#39;s capability. Possible values:  - &#x60;1&#x60;: Terminal has a magnetic stripe reader only. - &#x60;2&#x60;: Terminal has a magnetic stripe reader and manual entry capability. - &#x60;3&#x60;: Terminal has manual entry capability only. - &#x60;4&#x60;: Terminal can read chip cards. - &#x60;5&#x60;: Terminal can read contactless chip cards; cannot use contact to read chip cards. For an EMV transaction, the value of this field must be 4 or 5.  Used by Authorization Required for the following processors: Chase Paymentech Solutions  Optional for the following processors: Visa Platform Connect .</param>
        public Ptsv1pushfundstransferPointOfServiceInformation(string TerminalId = default(string), int? CatLevel = default(int?), string EntryMode = default(string), int? PinEntryCapability = default(int?), int? TerminalCapability = default(int?))
        {
            this.TerminalId = TerminalId;
            this.CatLevel = CatLevel;
            this.EntryMode = EntryMode;
            this.PinEntryCapability = PinEntryCapability;
            this.TerminalCapability = TerminalCapability;
        }
        
        /// <summary>
        /// Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  Visa Platform Connect A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.   Used by Authorization Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.  Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include pointOfSaleInformation.catLevel. 
        /// </summary>
        /// <value>Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  Visa Platform Connect A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.   Used by Authorization Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.  Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include pointOfSaleInformation.catLevel. </value>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Type of cardholder-activated terminal. Possible values:  - &#x60;1&#x60;: Automated dispensing machine - &#x60;2&#x60;: Self-service terminal - &#x60;3&#x60;: Limited amount terminal - &#x60;4&#x60;: In-flight commerce (IFC) terminal - &#x60;5&#x60;: Radio frequency device - &#x60;6&#x60;: Mobile acceptance terminal - &#x60;7&#x60;: Electronic cash register - &#x60;8&#x60;: E-commerce device at your location - &#x60;9&#x60;: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  Chase Paymentech Solutions Only values 1, 2, and 3 are supported. Required if pointOfSaleInformation.terminalID is included in the request; otherwise, optional.  Visa Platform COnnect Values 1 through 6 are supported on CyberSource through VisaNet, but some acquirers do not support all six values. Optional field.  Nonnegative integer. 
        /// </summary>
        /// <value>Type of cardholder-activated terminal. Possible values:  - &#x60;1&#x60;: Automated dispensing machine - &#x60;2&#x60;: Self-service terminal - &#x60;3&#x60;: Limited amount terminal - &#x60;4&#x60;: In-flight commerce (IFC) terminal - &#x60;5&#x60;: Radio frequency device - &#x60;6&#x60;: Mobile acceptance terminal - &#x60;7&#x60;: Electronic cash register - &#x60;8&#x60;: E-commerce device at your location - &#x60;9&#x60;: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  Chase Paymentech Solutions Only values 1, 2, and 3 are supported. Required if pointOfSaleInformation.terminalID is included in the request; otherwise, optional.  Visa Platform COnnect Values 1 through 6 are supported on CyberSource through VisaNet, but some acquirers do not support all six values. Optional field.  Nonnegative integer. </value>
        [DataMember(Name="catLevel", EmitDefaultValue=false)]
        public int? CatLevel { get; set; }

        /// <summary>
        /// Method of entering payment card information into the POS terminal. Possible values:  - &#x60;contact&#x60;: Read from direct contact with chip card. - &#x60;contactless&#x60;: Read from a contactless interface using chip data. - &#x60;keyed&#x60;: Manually keyed into POS terminal. This value is not supported on OmniPay Direct. - &#x60;msd&#x60;: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct. - &#x60;swiped&#x60;: Read from credit card magnetic stripe. The contact, contactless, and msd values are supported only for EMV transactions. 
        /// </summary>
        /// <value>Method of entering payment card information into the POS terminal. Possible values:  - &#x60;contact&#x60;: Read from direct contact with chip card. - &#x60;contactless&#x60;: Read from a contactless interface using chip data. - &#x60;keyed&#x60;: Manually keyed into POS terminal. This value is not supported on OmniPay Direct. - &#x60;msd&#x60;: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct. - &#x60;swiped&#x60;: Read from credit card magnetic stripe. The contact, contactless, and msd values are supported only for EMV transactions. </value>
        [DataMember(Name="entryMode", EmitDefaultValue=false)]
        public string EntryMode { get; set; }

        /// <summary>
        /// PIN Entry Capability - 0 Unknown. - 1 Indicates terminal can accept and forward online PINs. - 2 Indicates terminal cannot accept and forward online PINs. - 8 Terminal PIN pad down. - 9 Reserved for future use. 
        /// </summary>
        /// <value>PIN Entry Capability - 0 Unknown. - 1 Indicates terminal can accept and forward online PINs. - 2 Indicates terminal cannot accept and forward online PINs. - 8 Terminal PIN pad down. - 9 Reserved for future use. </value>
        [DataMember(Name="pinEntryCapability", EmitDefaultValue=false)]
        public int? PinEntryCapability { get; set; }

        /// <summary>
        /// integer [ 1 .. 5 ] POS terminal&#39;s capability. Possible values:  - &#x60;1&#x60;: Terminal has a magnetic stripe reader only. - &#x60;2&#x60;: Terminal has a magnetic stripe reader and manual entry capability. - &#x60;3&#x60;: Terminal has manual entry capability only. - &#x60;4&#x60;: Terminal can read chip cards. - &#x60;5&#x60;: Terminal can read contactless chip cards; cannot use contact to read chip cards. For an EMV transaction, the value of this field must be 4 or 5.  Used by Authorization Required for the following processors: Chase Paymentech Solutions  Optional for the following processors: Visa Platform Connect 
        /// </summary>
        /// <value>integer [ 1 .. 5 ] POS terminal&#39;s capability. Possible values:  - &#x60;1&#x60;: Terminal has a magnetic stripe reader only. - &#x60;2&#x60;: Terminal has a magnetic stripe reader and manual entry capability. - &#x60;3&#x60;: Terminal has manual entry capability only. - &#x60;4&#x60;: Terminal can read chip cards. - &#x60;5&#x60;: Terminal can read contactless chip cards; cannot use contact to read chip cards. For an EMV transaction, the value of this field must be 4 or 5.  Used by Authorization Required for the following processors: Chase Paymentech Solutions  Optional for the following processors: Visa Platform Connect </value>
        [DataMember(Name="terminalCapability", EmitDefaultValue=false)]
        public int? TerminalCapability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv1pushfundstransferPointOfServiceInformation {\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  CatLevel: ").Append(CatLevel).Append("\n");
            sb.Append("  EntryMode: ").Append(EntryMode).Append("\n");
            sb.Append("  PinEntryCapability: ").Append(PinEntryCapability).Append("\n");
            sb.Append("  TerminalCapability: ").Append(TerminalCapability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv1pushfundstransferPointOfServiceInformation);
        }

        /// <summary>
        /// Returns true if Ptsv1pushfundstransferPointOfServiceInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv1pushfundstransferPointOfServiceInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv1pushfundstransferPointOfServiceInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TerminalId == other.TerminalId ||
                    this.TerminalId != null &&
                    this.TerminalId.Equals(other.TerminalId)
                ) && 
                (
                    this.CatLevel == other.CatLevel ||
                    this.CatLevel != null &&
                    this.CatLevel.Equals(other.CatLevel)
                ) && 
                (
                    this.EntryMode == other.EntryMode ||
                    this.EntryMode != null &&
                    this.EntryMode.Equals(other.EntryMode)
                ) && 
                (
                    this.PinEntryCapability == other.PinEntryCapability ||
                    this.PinEntryCapability != null &&
                    this.PinEntryCapability.Equals(other.PinEntryCapability)
                ) && 
                (
                    this.TerminalCapability == other.TerminalCapability ||
                    this.TerminalCapability != null &&
                    this.TerminalCapability.Equals(other.TerminalCapability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TerminalId != null)
                    hash = hash * 59 + this.TerminalId.GetHashCode();
                if (this.CatLevel != null)
                    hash = hash * 59 + this.CatLevel.GetHashCode();
                if (this.EntryMode != null)
                    hash = hash * 59 + this.EntryMode.GetHashCode();
                if (this.PinEntryCapability != null)
                    hash = hash * 59 + this.PinEntryCapability.GetHashCode();
                if (this.TerminalCapability != null)
                    hash = hash * 59 + this.TerminalCapability.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
