/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Configure Unified Checkout to create a TMS token at the end of the payment journey 
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsCompleteMandateTms :  IEquatable<Upv1capturecontextsCompleteMandateTms>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsCompleteMandateTms" /> class.
        /// </summary>
        /// <param name="TokenCreate">Use this when you want to create a token from the card/bank data in your payment request.   Possible values:   - True   - False&lt;br&gt;&lt;br&gt; .</param>
        /// <param name="TokenTypes">Cybersource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Possible values: - Customer - paymentInstrument - instrumentIdentifier - shippingAddress .</param>
        public Upv1capturecontextsCompleteMandateTms(bool? TokenCreate = default(bool?), List<string> TokenTypes = default(List<string>))
        {
            this.TokenCreate = TokenCreate;
            this.TokenTypes = TokenTypes;
        }
        
        /// <summary>
        /// Use this when you want to create a token from the card/bank data in your payment request.   Possible values:   - True   - False&lt;br&gt;&lt;br&gt; 
        /// </summary>
        /// <value>Use this when you want to create a token from the card/bank data in your payment request.   Possible values:   - True   - False&lt;br&gt;&lt;br&gt; </value>
        [DataMember(Name="tokenCreate", EmitDefaultValue=false)]
        public bool? TokenCreate { get; set; }

        /// <summary>
        /// Cybersource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Possible values: - Customer - paymentInstrument - instrumentIdentifier - shippingAddress 
        /// </summary>
        /// <value>Cybersource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Possible values: - Customer - paymentInstrument - instrumentIdentifier - shippingAddress </value>
        [DataMember(Name="tokenTypes", EmitDefaultValue=false)]
        public List<string> TokenTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsCompleteMandateTms {\n");
            if (TokenCreate != null) sb.Append("  TokenCreate: ").Append(TokenCreate).Append("\n");
            if (TokenTypes != null) sb.Append("  TokenTypes: ").Append(TokenTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsCompleteMandateTms);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsCompleteMandateTms instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsCompleteMandateTms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsCompleteMandateTms other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TokenCreate == other.TokenCreate ||
                    this.TokenCreate != null &&
                    this.TokenCreate.Equals(other.TokenCreate)
                ) && 
                (
                    this.TokenTypes == other.TokenTypes ||
                    this.TokenTypes != null &&
                    this.TokenTypes.SequenceEqual(other.TokenTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TokenCreate != null)
                    hash = hash * 59 + this.TokenCreate.GetHashCode();
                if (this.TokenTypes != null)
                    hash = hash * 59 + this.TokenTypes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
