/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator
    /// </summary>
    [DataContract]
    public partial class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator :  IEquatable<TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator" /> class.
        /// </summary>
        /// <param name="Type">This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.  Valid values: - **customer** - **merchant** .</param>
        /// <param name="CredentialStoredOnFile">Indicates to the issuing bank two things: - The merchant has received consent from the cardholder to store their card details on file - The merchant wants the issuing bank to check out the card details before the merchant initiates their first transaction for this cardholder. The purpose of the merchant-initiated transaction is to ensure that the cardholder’s credentials are valid (that the card is not stolen or has restrictions) and that the card details are good to be stored on the merchant’s file for future transactions.  Valid values: - &#x60;Y&#x60; means merchant will use this transaction to store payment credentials for follow-up merchant-initiated transactions. - &#x60;N&#x60; means merchant will not use this transaction to store payment credentials for follow-up merchant-initiated transactions.  For details, see &#x60;subsequent_auth_first&#x60; field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  **NOTE:** The value for this field does not correspond to any data in the TC 33 capture file5.  This field is supported only for Visa transactions on CyberSource through VisaNet. .</param>
        /// <param name="StoredCredentialUsed">Indicates to an issuing bank whether a merchant-initiated transaction came from a card that was already stored on file.  Possible values: - **Y** means the merchant-initiated transaction came from a card that was already stored on file. - **N**  means the merchant-initiated transaction came from a card that was not stored on file. .</param>
        /// <param name="MerchantInitiatedTransaction">MerchantInitiatedTransaction.</param>
        public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator(string Type = default(string), string CredentialStoredOnFile = default(string), string StoredCredentialUsed = default(string), Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction MerchantInitiatedTransaction = default(Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction))
        {
            this.Type = Type;
            this.CredentialStoredOnFile = CredentialStoredOnFile;
            this.StoredCredentialUsed = StoredCredentialUsed;
            this.MerchantInitiatedTransaction = MerchantInitiatedTransaction;
        }
        
        /// <summary>
        /// This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.  Valid values: - **customer** - **merchant** 
        /// </summary>
        /// <value>This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.  Valid values: - **customer** - **merchant** </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Indicates to the issuing bank two things: - The merchant has received consent from the cardholder to store their card details on file - The merchant wants the issuing bank to check out the card details before the merchant initiates their first transaction for this cardholder. The purpose of the merchant-initiated transaction is to ensure that the cardholder’s credentials are valid (that the card is not stolen or has restrictions) and that the card details are good to be stored on the merchant’s file for future transactions.  Valid values: - &#x60;Y&#x60; means merchant will use this transaction to store payment credentials for follow-up merchant-initiated transactions. - &#x60;N&#x60; means merchant will not use this transaction to store payment credentials for follow-up merchant-initiated transactions.  For details, see &#x60;subsequent_auth_first&#x60; field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  **NOTE:** The value for this field does not correspond to any data in the TC 33 capture file5.  This field is supported only for Visa transactions on CyberSource through VisaNet. 
        /// </summary>
        /// <value>Indicates to the issuing bank two things: - The merchant has received consent from the cardholder to store their card details on file - The merchant wants the issuing bank to check out the card details before the merchant initiates their first transaction for this cardholder. The purpose of the merchant-initiated transaction is to ensure that the cardholder’s credentials are valid (that the card is not stolen or has restrictions) and that the card details are good to be stored on the merchant’s file for future transactions.  Valid values: - &#x60;Y&#x60; means merchant will use this transaction to store payment credentials for follow-up merchant-initiated transactions. - &#x60;N&#x60; means merchant will not use this transaction to store payment credentials for follow-up merchant-initiated transactions.  For details, see &#x60;subsequent_auth_first&#x60; field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  **NOTE:** The value for this field does not correspond to any data in the TC 33 capture file5.  This field is supported only for Visa transactions on CyberSource through VisaNet. </value>
        [DataMember(Name="credentialStoredOnFile", EmitDefaultValue=false)]
        public string CredentialStoredOnFile { get; set; }

        /// <summary>
        /// Indicates to an issuing bank whether a merchant-initiated transaction came from a card that was already stored on file.  Possible values: - **Y** means the merchant-initiated transaction came from a card that was already stored on file. - **N**  means the merchant-initiated transaction came from a card that was not stored on file. 
        /// </summary>
        /// <value>Indicates to an issuing bank whether a merchant-initiated transaction came from a card that was already stored on file.  Possible values: - **Y** means the merchant-initiated transaction came from a card that was already stored on file. - **N**  means the merchant-initiated transaction came from a card that was not stored on file. </value>
        [DataMember(Name="storedCredentialUsed", EmitDefaultValue=false)]
        public string StoredCredentialUsed { get; set; }

        /// <summary>
        /// Gets or Sets MerchantInitiatedTransaction
        /// </summary>
        [DataMember(Name="merchantInitiatedTransaction", EmitDefaultValue=false)]
        public Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction MerchantInitiatedTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CredentialStoredOnFile: ").Append(CredentialStoredOnFile).Append("\n");
            sb.Append("  StoredCredentialUsed: ").Append(StoredCredentialUsed).Append("\n");
            sb.Append("  MerchantInitiatedTransaction: ").Append(MerchantInitiatedTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator);
        }

        /// <summary>
        /// Returns true if TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator instances are equal
        /// </summary>
        /// <param name="other">Instance of TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.CredentialStoredOnFile == other.CredentialStoredOnFile ||
                    this.CredentialStoredOnFile != null &&
                    this.CredentialStoredOnFile.Equals(other.CredentialStoredOnFile)
                ) && 
                (
                    this.StoredCredentialUsed == other.StoredCredentialUsed ||
                    this.StoredCredentialUsed != null &&
                    this.StoredCredentialUsed.Equals(other.StoredCredentialUsed)
                ) && 
                (
                    this.MerchantInitiatedTransaction == other.MerchantInitiatedTransaction ||
                    this.MerchantInitiatedTransaction != null &&
                    this.MerchantInitiatedTransaction.Equals(other.MerchantInitiatedTransaction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.CredentialStoredOnFile != null)
                    hash = hash * 59 + this.CredentialStoredOnFile.GetHashCode();
                if (this.StoredCredentialUsed != null)
                    hash = hash * 59 + this.StoredCredentialUsed.GetHashCode();
                if (this.MerchantInitiatedTransaction != null)
                    hash = hash * 59 + this.MerchantInitiatedTransaction.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
