/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Upv1capturecontextsCaptureMandate
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsCaptureMandate :  IEquatable<Upv1capturecontextsCaptureMandate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsCaptureMandate" /> class.
        /// </summary>
        /// <param name="BillingType">Configure Unified Checkout to capture billing address information.  Possible values: - FULL: Capture complete billing address information. - PARTIAL: Capture first name, last name, country and postal/zip code only. - NONE: Capture only first name and last name. .</param>
        /// <param name="RequestEmail">Configure Unified Checkout to capture customer email address.  Possible values:  - True  - False .</param>
        /// <param name="RequestPhone">Configure Unified Checkout to capture customer phone number.  Possible values: - True - False .</param>
        /// <param name="RequestShipping">Configure Unified Checkout to capture customer shipping details.  Possible values: - True - False .</param>
        /// <param name="ShipToCountries">List of countries available to ship to.   Use the two-character ISO Standard Country Codes. .</param>
        /// <param name="ShowAcceptedNetworkIcons">Configure Unified Checkout to display the list of accepted card networks beneath the payment button  Possible values: - True - False .</param>
        /// <param name="RequestSaveCard">Configure Unified Checkout to display the \&quot;Save card for future use\&quot; checkbox.&lt;br&gt;  Configurable check box that will show in a Manual card entry flow to allow a Cardholder to give consent to store their manually entered credential with the Merchant that they are paying.&lt;br&gt;  Applicable when manually entering the details and not enrolling in Click to Pay.  Possible values:  - True   - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer consumers option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to true. - When set to true, this will show a checkbox with the message &#39;Save card for future use&#39; in Unified Checkout. - When selected this provides a response in both the Transient Token and Get Credentials API response.&lt;br&gt;&lt;br&gt;  **Do not offer consumers the option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to false OR omit the field from the capture context request. - When set to false, the save card option is not shown to consumers when manually entering card details. .</param>
        /// <param name="ComboCard">Configure Unified Checkout to display combo card at checkout.&lt;br&gt;  A combo debit/credit card is a single card that functions both as a Debit/Credit card.  Unified Checkout / Click to Pay Drop-in UI allows the Cardholder to choose whether they would like the transaction to be paid for using either debit or credit card. **Important:** This is applicable to Visa cards only.  Possible values: - True  - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to true. - When set to true, Combo Card selection is shown at checkout &lt;br&gt;&lt;br&gt;  **Do not offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to false OR omit the field from the capture context request. - The Combo Card selection is not shown at checkout. .</param>
        /// <param name="CPF">Configure Unified Checkout to display and capture the CPF number (Cadastro de Pessoas FÃ­sicas).  The CPF number is a unique 11-digit identifier issued to Brazilian citizens and residents for tax purposes.  Possible values: - True - False&lt;br&gt;&lt;br&gt;  This field is optional.   If set to true the field is required. If set to false the field is optional. If the field is not included in the capture context then it is not captured.&lt;br&gt;&lt;br&gt;  **Important:**  - If PANENTRY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout regardless of what card number is entered.  - If CLICKTOPAY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout only when a Visa Click To Pay card is entered. .</param>
        public Upv1capturecontextsCaptureMandate(string BillingType = default(string), bool? RequestEmail = default(bool?), bool? RequestPhone = default(bool?), bool? RequestShipping = default(bool?), List<string> ShipToCountries = default(List<string>), bool? ShowAcceptedNetworkIcons = default(bool?), bool? RequestSaveCard = default(bool?), bool? ComboCard = default(bool?), bool? CPF = default(bool?))
        {
            this.BillingType = BillingType;
            this.RequestEmail = RequestEmail;
            this.RequestPhone = RequestPhone;
            this.RequestShipping = RequestShipping;
            this.ShipToCountries = ShipToCountries;
            this.ShowAcceptedNetworkIcons = ShowAcceptedNetworkIcons;
            this.RequestSaveCard = RequestSaveCard;
            this.ComboCard = ComboCard;
            this.CPF = CPF;
        }
        
        /// <summary>
        /// Configure Unified Checkout to capture billing address information.  Possible values: - FULL: Capture complete billing address information. - PARTIAL: Capture first name, last name, country and postal/zip code only. - NONE: Capture only first name and last name. 
        /// </summary>
        /// <value>Configure Unified Checkout to capture billing address information.  Possible values: - FULL: Capture complete billing address information. - PARTIAL: Capture first name, last name, country and postal/zip code only. - NONE: Capture only first name and last name. </value>
        [DataMember(Name="billingType", EmitDefaultValue=false)]
        public string BillingType { get; set; }

        /// <summary>
        /// Configure Unified Checkout to capture customer email address.  Possible values:  - True  - False 
        /// </summary>
        /// <value>Configure Unified Checkout to capture customer email address.  Possible values:  - True  - False </value>
        [DataMember(Name="requestEmail", EmitDefaultValue=false)]
        public bool? RequestEmail { get; set; }

        /// <summary>
        /// Configure Unified Checkout to capture customer phone number.  Possible values: - True - False 
        /// </summary>
        /// <value>Configure Unified Checkout to capture customer phone number.  Possible values: - True - False </value>
        [DataMember(Name="requestPhone", EmitDefaultValue=false)]
        public bool? RequestPhone { get; set; }

        /// <summary>
        /// Configure Unified Checkout to capture customer shipping details.  Possible values: - True - False 
        /// </summary>
        /// <value>Configure Unified Checkout to capture customer shipping details.  Possible values: - True - False </value>
        [DataMember(Name="requestShipping", EmitDefaultValue=false)]
        public bool? RequestShipping { get; set; }

        /// <summary>
        /// List of countries available to ship to.   Use the two-character ISO Standard Country Codes. 
        /// </summary>
        /// <value>List of countries available to ship to.   Use the two-character ISO Standard Country Codes. </value>
        [DataMember(Name="shipToCountries", EmitDefaultValue=false)]
        public List<string> ShipToCountries { get; set; }

        /// <summary>
        /// Configure Unified Checkout to display the list of accepted card networks beneath the payment button  Possible values: - True - False 
        /// </summary>
        /// <value>Configure Unified Checkout to display the list of accepted card networks beneath the payment button  Possible values: - True - False </value>
        [DataMember(Name="showAcceptedNetworkIcons", EmitDefaultValue=false)]
        public bool? ShowAcceptedNetworkIcons { get; set; }

        /// <summary>
        /// Configure Unified Checkout to display the \&quot;Save card for future use\&quot; checkbox.&lt;br&gt;  Configurable check box that will show in a Manual card entry flow to allow a Cardholder to give consent to store their manually entered credential with the Merchant that they are paying.&lt;br&gt;  Applicable when manually entering the details and not enrolling in Click to Pay.  Possible values:  - True   - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer consumers option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to true. - When set to true, this will show a checkbox with the message &#39;Save card for future use&#39; in Unified Checkout. - When selected this provides a response in both the Transient Token and Get Credentials API response.&lt;br&gt;&lt;br&gt;  **Do not offer consumers the option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to false OR omit the field from the capture context request. - When set to false, the save card option is not shown to consumers when manually entering card details. 
        /// </summary>
        /// <value>Configure Unified Checkout to display the \&quot;Save card for future use\&quot; checkbox.&lt;br&gt;  Configurable check box that will show in a Manual card entry flow to allow a Cardholder to give consent to store their manually entered credential with the Merchant that they are paying.&lt;br&gt;  Applicable when manually entering the details and not enrolling in Click to Pay.  Possible values:  - True   - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer consumers option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to true. - When set to true, this will show a checkbox with the message &#39;Save card for future use&#39; in Unified Checkout. - When selected this provides a response in both the Transient Token and Get Credentials API response.&lt;br&gt;&lt;br&gt;  **Do not offer consumers the option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to false OR omit the field from the capture context request. - When set to false, the save card option is not shown to consumers when manually entering card details. </value>
        [DataMember(Name="requestSaveCard", EmitDefaultValue=false)]
        public bool? RequestSaveCard { get; set; }

        /// <summary>
        /// Configure Unified Checkout to display combo card at checkout.&lt;br&gt;  A combo debit/credit card is a single card that functions both as a Debit/Credit card.  Unified Checkout / Click to Pay Drop-in UI allows the Cardholder to choose whether they would like the transaction to be paid for using either debit or credit card. **Important:** This is applicable to Visa cards only.  Possible values: - True  - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to true. - When set to true, Combo Card selection is shown at checkout &lt;br&gt;&lt;br&gt;  **Do not offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to false OR omit the field from the capture context request. - The Combo Card selection is not shown at checkout. 
        /// </summary>
        /// <value>Configure Unified Checkout to display combo card at checkout.&lt;br&gt;  A combo debit/credit card is a single card that functions both as a Debit/Credit card.  Unified Checkout / Click to Pay Drop-in UI allows the Cardholder to choose whether they would like the transaction to be paid for using either debit or credit card. **Important:** This is applicable to Visa cards only.  Possible values: - True  - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to true. - When set to true, Combo Card selection is shown at checkout &lt;br&gt;&lt;br&gt;  **Do not offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to false OR omit the field from the capture context request. - The Combo Card selection is not shown at checkout. </value>
        [DataMember(Name="comboCard", EmitDefaultValue=false)]
        public bool? ComboCard { get; set; }

        /// <summary>
        /// Configure Unified Checkout to display and capture the CPF number (Cadastro de Pessoas FÃ­sicas).  The CPF number is a unique 11-digit identifier issued to Brazilian citizens and residents for tax purposes.  Possible values: - True - False&lt;br&gt;&lt;br&gt;  This field is optional.   If set to true the field is required. If set to false the field is optional. If the field is not included in the capture context then it is not captured.&lt;br&gt;&lt;br&gt;  **Important:**  - If PANENTRY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout regardless of what card number is entered.  - If CLICKTOPAY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout only when a Visa Click To Pay card is entered. 
        /// </summary>
        /// <value>Configure Unified Checkout to display and capture the CPF number (Cadastro de Pessoas FÃ­sicas).  The CPF number is a unique 11-digit identifier issued to Brazilian citizens and residents for tax purposes.  Possible values: - True - False&lt;br&gt;&lt;br&gt;  This field is optional.   If set to true the field is required. If set to false the field is optional. If the field is not included in the capture context then it is not captured.&lt;br&gt;&lt;br&gt;  **Important:**  - If PANENTRY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout regardless of what card number is entered.  - If CLICKTOPAY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout only when a Visa Click To Pay card is entered. </value>
        [DataMember(Name="CPF", EmitDefaultValue=false)]
        public bool? CPF { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsCaptureMandate {\n");
            if (BillingType != null) sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            if (RequestEmail != null) sb.Append("  RequestEmail: ").Append(RequestEmail).Append("\n");
            if (RequestPhone != null) sb.Append("  RequestPhone: ").Append(RequestPhone).Append("\n");
            if (RequestShipping != null) sb.Append("  RequestShipping: ").Append(RequestShipping).Append("\n");
            if (ShipToCountries != null) sb.Append("  ShipToCountries: ").Append(ShipToCountries).Append("\n");
            if (ShowAcceptedNetworkIcons != null) sb.Append("  ShowAcceptedNetworkIcons: ").Append(ShowAcceptedNetworkIcons).Append("\n");
            if (RequestSaveCard != null) sb.Append("  RequestSaveCard: ").Append(RequestSaveCard).Append("\n");
            if (ComboCard != null) sb.Append("  ComboCard: ").Append(ComboCard).Append("\n");
            if (CPF != null) sb.Append("  CPF: ").Append(CPF).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsCaptureMandate);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsCaptureMandate instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsCaptureMandate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsCaptureMandate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BillingType == other.BillingType ||
                    this.BillingType != null &&
                    this.BillingType.Equals(other.BillingType)
                ) && 
                (
                    this.RequestEmail == other.RequestEmail ||
                    this.RequestEmail != null &&
                    this.RequestEmail.Equals(other.RequestEmail)
                ) && 
                (
                    this.RequestPhone == other.RequestPhone ||
                    this.RequestPhone != null &&
                    this.RequestPhone.Equals(other.RequestPhone)
                ) && 
                (
                    this.RequestShipping == other.RequestShipping ||
                    this.RequestShipping != null &&
                    this.RequestShipping.Equals(other.RequestShipping)
                ) && 
                (
                    this.ShipToCountries == other.ShipToCountries ||
                    this.ShipToCountries != null &&
                    this.ShipToCountries.SequenceEqual(other.ShipToCountries)
                ) && 
                (
                    this.ShowAcceptedNetworkIcons == other.ShowAcceptedNetworkIcons ||
                    this.ShowAcceptedNetworkIcons != null &&
                    this.ShowAcceptedNetworkIcons.Equals(other.ShowAcceptedNetworkIcons)
                ) && 
                (
                    this.RequestSaveCard == other.RequestSaveCard ||
                    this.RequestSaveCard != null &&
                    this.RequestSaveCard.Equals(other.RequestSaveCard)
                ) && 
                (
                    this.ComboCard == other.ComboCard ||
                    this.ComboCard != null &&
                    this.ComboCard.Equals(other.ComboCard)
                ) && 
                (
                    this.CPF == other.CPF ||
                    this.CPF != null &&
                    this.CPF.Equals(other.CPF)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BillingType != null)
                    hash = hash * 59 + this.BillingType.GetHashCode();
                if (this.RequestEmail != null)
                    hash = hash * 59 + this.RequestEmail.GetHashCode();
                if (this.RequestPhone != null)
                    hash = hash * 59 + this.RequestPhone.GetHashCode();
                if (this.RequestShipping != null)
                    hash = hash * 59 + this.RequestShipping.GetHashCode();
                if (this.ShipToCountries != null)
                    hash = hash * 59 + this.ShipToCountries.GetHashCode();
                if (this.ShowAcceptedNetworkIcons != null)
                    hash = hash * 59 + this.ShowAcceptedNetworkIcons.GetHashCode();
                if (this.RequestSaveCard != null)
                    hash = hash * 59 + this.RequestSaveCard.GetHashCode();
                if (this.ComboCard != null)
                    hash = hash * 59 + this.ComboCard.GetHashCode();
                if (this.CPF != null)
                    hash = hash * 59 + this.CPF.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
