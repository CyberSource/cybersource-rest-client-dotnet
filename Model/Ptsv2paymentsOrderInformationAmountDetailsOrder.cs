/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsOrderInformationAmountDetailsOrder
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsOrderInformationAmountDetailsOrder :  IEquatable<Ptsv2paymentsOrderInformationAmountDetailsOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsOrderInformationAmountDetailsOrder" /> class.
        /// </summary>
        /// <param name="TotalAmount">Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places .</param>
        /// <param name="Currency">Currency used for the order .</param>
        /// <param name="SubTotalAmount">Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. .</param>
        /// <param name="HandlingAmount">Aggregate handling charges for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. .</param>
        /// <param name="ShippingAmount">Aggregate shipping charges for the transaction If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. .</param>
        /// <param name="ShippingDiscountAmount">Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. .</param>
        /// <param name="TaxAmount">Total tax amount. When the purchaseTotals_ taxAmount and ap_subtotalAmount fields are included in the request, do not include the tax amount as part of the subtotal amount calculation.  .</param>
        /// <param name="InsuranceAmount">Amount being charged for the insurance fee. Only supported when the payment_method is set to paypal. .</param>
        /// <param name="GiftWrapAmount">Amount being charged as gift wrap fee.            .</param>
        public Ptsv2paymentsOrderInformationAmountDetailsOrder(string TotalAmount = default(string), string Currency = default(string), string SubTotalAmount = default(string), string HandlingAmount = default(string), string ShippingAmount = default(string), string ShippingDiscountAmount = default(string), string TaxAmount = default(string), string InsuranceAmount = default(string), string GiftWrapAmount = default(string))
        {
            this.TotalAmount = TotalAmount;
            this.Currency = Currency;
            this.SubTotalAmount = SubTotalAmount;
            this.HandlingAmount = HandlingAmount;
            this.ShippingAmount = ShippingAmount;
            this.ShippingDiscountAmount = ShippingDiscountAmount;
            this.TaxAmount = TaxAmount;
            this.InsuranceAmount = InsuranceAmount;
            this.GiftWrapAmount = GiftWrapAmount;
        }
        
        /// <summary>
        /// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places 
        /// </summary>
        /// <value>Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places </value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// Currency used for the order 
        /// </summary>
        /// <value>Currency used for the order </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
        /// </summary>
        /// <value>Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. </value>
        [DataMember(Name="subTotalAmount", EmitDefaultValue=false)]
        public string SubTotalAmount { get; set; }

        /// <summary>
        /// Aggregate handling charges for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
        /// </summary>
        /// <value>Aggregate handling charges for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. </value>
        [DataMember(Name="handlingAmount", EmitDefaultValue=false)]
        public string HandlingAmount { get; set; }

        /// <summary>
        /// Aggregate shipping charges for the transaction If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
        /// </summary>
        /// <value>Aggregate shipping charges for the transaction If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. </value>
        [DataMember(Name="shippingAmount", EmitDefaultValue=false)]
        public string ShippingAmount { get; set; }

        /// <summary>
        /// Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
        /// </summary>
        /// <value>Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. </value>
        [DataMember(Name="shippingDiscountAmount", EmitDefaultValue=false)]
        public string ShippingDiscountAmount { get; set; }

        /// <summary>
        /// Total tax amount. When the purchaseTotals_ taxAmount and ap_subtotalAmount fields are included in the request, do not include the tax amount as part of the subtotal amount calculation.  
        /// </summary>
        /// <value>Total tax amount. When the purchaseTotals_ taxAmount and ap_subtotalAmount fields are included in the request, do not include the tax amount as part of the subtotal amount calculation.  </value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Amount being charged for the insurance fee. Only supported when the payment_method is set to paypal. 
        /// </summary>
        /// <value>Amount being charged for the insurance fee. Only supported when the payment_method is set to paypal. </value>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public string InsuranceAmount { get; set; }

        /// <summary>
        /// Amount being charged as gift wrap fee.            
        /// </summary>
        /// <value>Amount being charged as gift wrap fee.            </value>
        [DataMember(Name="giftWrapAmount", EmitDefaultValue=false)]
        public string GiftWrapAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsOrderInformationAmountDetailsOrder {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SubTotalAmount: ").Append(SubTotalAmount).Append("\n");
            sb.Append("  HandlingAmount: ").Append(HandlingAmount).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  ShippingDiscountAmount: ").Append(ShippingDiscountAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  GiftWrapAmount: ").Append(GiftWrapAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsOrderInformationAmountDetailsOrder);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsOrderInformationAmountDetailsOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsOrderInformationAmountDetailsOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsOrderInformationAmountDetailsOrder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.SubTotalAmount == other.SubTotalAmount ||
                    this.SubTotalAmount != null &&
                    this.SubTotalAmount.Equals(other.SubTotalAmount)
                ) && 
                (
                    this.HandlingAmount == other.HandlingAmount ||
                    this.HandlingAmount != null &&
                    this.HandlingAmount.Equals(other.HandlingAmount)
                ) && 
                (
                    this.ShippingAmount == other.ShippingAmount ||
                    this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(other.ShippingAmount)
                ) && 
                (
                    this.ShippingDiscountAmount == other.ShippingDiscountAmount ||
                    this.ShippingDiscountAmount != null &&
                    this.ShippingDiscountAmount.Equals(other.ShippingDiscountAmount)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.InsuranceAmount == other.InsuranceAmount ||
                    this.InsuranceAmount != null &&
                    this.InsuranceAmount.Equals(other.InsuranceAmount)
                ) && 
                (
                    this.GiftWrapAmount == other.GiftWrapAmount ||
                    this.GiftWrapAmount != null &&
                    this.GiftWrapAmount.Equals(other.GiftWrapAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.SubTotalAmount != null)
                    hash = hash * 59 + this.SubTotalAmount.GetHashCode();
                if (this.HandlingAmount != null)
                    hash = hash * 59 + this.HandlingAmount.GetHashCode();
                if (this.ShippingAmount != null)
                    hash = hash * 59 + this.ShippingAmount.GetHashCode();
                if (this.ShippingDiscountAmount != null)
                    hash = hash * 59 + this.ShippingDiscountAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.InsuranceAmount != null)
                    hash = hash * 59 + this.InsuranceAmount.GetHashCode();
                if (this.GiftWrapAmount != null)
                    hash = hash * 59 + this.GiftWrapAmount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
