/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse201PaymentInformation
    /// </summary>
    [DataContract]
    public partial class InlineResponse201PaymentInformation :  IEquatable<InlineResponse201PaymentInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse201PaymentInformation" /> class.
        /// </summary>
        /// <param name="TokenizedPaymentMethod">TokenizedPaymentMethod.</param>
        /// <param name="EWallet">EWallet.</param>
        public InlineResponse201PaymentInformation(InlineResponse201PaymentInformationTokenizedPaymentMethod TokenizedPaymentMethod = default(InlineResponse201PaymentInformationTokenizedPaymentMethod), InlineResponse201PaymentInformationEWallet EWallet = default(InlineResponse201PaymentInformationEWallet))
        {
            this.TokenizedPaymentMethod = TokenizedPaymentMethod;
            this.EWallet = EWallet;
        }
        
        /// <summary>
        /// Gets or Sets TokenizedPaymentMethod
        /// </summary>
        [DataMember(Name="tokenizedPaymentMethod", EmitDefaultValue=false)]
        public InlineResponse201PaymentInformationTokenizedPaymentMethod TokenizedPaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets EWallet
        /// </summary>
        [DataMember(Name="eWallet", EmitDefaultValue=false)]
        public InlineResponse201PaymentInformationEWallet EWallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse201PaymentInformation {\n");
            if (TokenizedPaymentMethod != null) sb.Append("  TokenizedPaymentMethod: ").Append(TokenizedPaymentMethod).Append("\n");
            if (EWallet != null) sb.Append("  EWallet: ").Append(EWallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse201PaymentInformation);
        }

        /// <summary>
        /// Returns true if InlineResponse201PaymentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse201PaymentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse201PaymentInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TokenizedPaymentMethod == other.TokenizedPaymentMethod ||
                    this.TokenizedPaymentMethod != null &&
                    this.TokenizedPaymentMethod.Equals(other.TokenizedPaymentMethod)
                ) && 
                (
                    this.EWallet == other.EWallet ||
                    this.EWallet != null &&
                    this.EWallet.Equals(other.EWallet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TokenizedPaymentMethod != null)
                    hash = hash * 59 + this.TokenizedPaymentMethod.GetHashCode();
                if (this.EWallet != null)
                    hash = hash * 59 + this.EWallet.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
