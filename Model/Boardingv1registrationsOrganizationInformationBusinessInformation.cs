/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Boardingv1registrationsOrganizationInformationBusinessInformation
    /// </summary>
    [DataContract]
    public partial class Boardingv1registrationsOrganizationInformationBusinessInformation :  IEquatable<Boardingv1registrationsOrganizationInformationBusinessInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationBusinessInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Boardingv1registrationsOrganizationInformationBusinessInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationBusinessInformation" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="DoingBusinessAs">DoingBusinessAs.</param>
        /// <param name="Description">Description.</param>
        /// <param name="StartDate">&#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 .</param>
        /// <param name="Address">Address.</param>
        /// <param name="TimeZone">Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; .</param>
        /// <param name="WebsiteUrl">WebsiteUrl.</param>
        /// <param name="Type">Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; .</param>
        /// <param name="TaxId">TaxId.</param>
        /// <param name="PhoneNumber">PhoneNumber.</param>
        /// <param name="BusinessContact">BusinessContact.</param>
        /// <param name="TechnicalContact">TechnicalContact.</param>
        /// <param name="EmergencyContact">EmergencyContact.</param>
        /// <param name="MerchantCategoryCode">Industry standard Merchant Category Code (MCC).</param>
        public Boardingv1registrationsOrganizationInformationBusinessInformation(string Name = default(string), string DoingBusinessAs = default(string), string Description = default(string), DateTime? StartDate = default(DateTime?), Boardingv1registrationsOrganizationInformationBusinessInformationAddress Address = default(Boardingv1registrationsOrganizationInformationBusinessInformationAddress), string TimeZone = default(string), string WebsiteUrl = default(string), string Type = default(string), string TaxId = default(string), string PhoneNumber = default(string), Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact BusinessContact = default(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact), Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact TechnicalContact = default(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact), Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact EmergencyContact = default(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact), string MerchantCategoryCode = default(string))
        {
            this.Name = Name;
            this.DoingBusinessAs = DoingBusinessAs;
            this.Description = Description;
            this.StartDate = StartDate;
            this.Address = Address;
            this.TimeZone = TimeZone;
            this.WebsiteUrl = WebsiteUrl;
            this.Type = Type;
            this.TaxId = TaxId;
            this.PhoneNumber = PhoneNumber;
            this.BusinessContact = BusinessContact;
            this.TechnicalContact = TechnicalContact;
            this.EmergencyContact = EmergencyContact;
            this.MerchantCategoryCode = MerchantCategoryCode;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DoingBusinessAs
        /// </summary>
        [DataMember(Name="doingBusinessAs", EmitDefaultValue=false)]
        public string DoingBusinessAs { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// &#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 
        /// </summary>
        /// <value>&#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 </value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationAddress Address { get; set; }

        /// <summary>
        /// Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; 
        /// </summary>
        /// <value>Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; </value>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets WebsiteUrl
        /// </summary>
        [DataMember(Name="websiteUrl", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; 
        /// </summary>
        /// <value>Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name="taxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets BusinessContact
        /// </summary>
        [DataMember(Name="businessContact", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact BusinessContact { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalContact
        /// </summary>
        [DataMember(Name="technicalContact", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact TechnicalContact { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyContact
        /// </summary>
        [DataMember(Name="emergencyContact", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact EmergencyContact { get; set; }

        /// <summary>
        /// Industry standard Merchant Category Code (MCC)
        /// </summary>
        /// <value>Industry standard Merchant Category Code (MCC)</value>
        [DataMember(Name="merchantCategoryCode", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Boardingv1registrationsOrganizationInformationBusinessInformation {\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (DoingBusinessAs != null) sb.Append("  DoingBusinessAs: ").Append(DoingBusinessAs).Append("\n");
            if (Description != null) sb.Append("  Description: ").Append(Description).Append("\n");
            if (StartDate != null) sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            if (Address != null) sb.Append("  Address: ").Append(Address).Append("\n");
            if (TimeZone != null) sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            if (WebsiteUrl != null) sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (TaxId != null) sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (BusinessContact != null) sb.Append("  BusinessContact: ").Append(BusinessContact).Append("\n");
            if (TechnicalContact != null) sb.Append("  TechnicalContact: ").Append(TechnicalContact).Append("\n");
            if (EmergencyContact != null) sb.Append("  EmergencyContact: ").Append(EmergencyContact).Append("\n");
            if (MerchantCategoryCode != null) sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Boardingv1registrationsOrganizationInformationBusinessInformation);
        }

        /// <summary>
        /// Returns true if Boardingv1registrationsOrganizationInformationBusinessInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Boardingv1registrationsOrganizationInformationBusinessInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Boardingv1registrationsOrganizationInformationBusinessInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DoingBusinessAs == other.DoingBusinessAs ||
                    this.DoingBusinessAs != null &&
                    this.DoingBusinessAs.Equals(other.DoingBusinessAs)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.TimeZone == other.TimeZone ||
                    this.TimeZone != null &&
                    this.TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TaxId == other.TaxId ||
                    this.TaxId != null &&
                    this.TaxId.Equals(other.TaxId)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.BusinessContact == other.BusinessContact ||
                    this.BusinessContact != null &&
                    this.BusinessContact.Equals(other.BusinessContact)
                ) && 
                (
                    this.TechnicalContact == other.TechnicalContact ||
                    this.TechnicalContact != null &&
                    this.TechnicalContact.Equals(other.TechnicalContact)
                ) && 
                (
                    this.EmergencyContact == other.EmergencyContact ||
                    this.EmergencyContact != null &&
                    this.EmergencyContact.Equals(other.EmergencyContact)
                ) && 
                (
                    this.MerchantCategoryCode == other.MerchantCategoryCode ||
                    this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(other.MerchantCategoryCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DoingBusinessAs != null)
                    hash = hash * 59 + this.DoingBusinessAs.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.TimeZone != null)
                    hash = hash * 59 + this.TimeZone.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TaxId != null)
                    hash = hash * 59 + this.TaxId.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.BusinessContact != null)
                    hash = hash * 59 + this.BusinessContact.GetHashCode();
                if (this.TechnicalContact != null)
                    hash = hash * 59 + this.TechnicalContact.GetHashCode();
                if (this.EmergencyContact != null)
                    hash = hash * 59 + this.EmergencyContact.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hash = hash * 59 + this.MerchantCategoryCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
