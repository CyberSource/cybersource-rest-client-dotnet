/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1authenticationsOrderInformationLineItems
    /// </summary>
    [DataContract]
    public partial class Riskv1authenticationsOrderInformationLineItems :  IEquatable<Riskv1authenticationsOrderInformationLineItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationsOrderInformationLineItems" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Riskv1authenticationsOrderInformationLineItems() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationsOrderInformationLineItems" /> class.
        /// </summary>
        /// <param name="TotalAmount">Total amount for the item. Normally calculated as the unit price times quantity.  When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD &#x3D; 123 .</param>
        /// <param name="UnitPrice">Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)  (required).</param>
        /// <param name="Quantity">Number of units for this order. Must be a non-negative integer.  The default is &#x60;1&#x60;. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. .</param>
        /// <param name="GiftCardCurrency">When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the currency used for the gift card purchase.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) .</param>
        /// <param name="ProductSKU">Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the values related to shipping and/or handling. .</param>
        /// <param name="ProductDescription">Brief description of item..</param>
        /// <param name="ProductName">For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. .</param>
        /// <param name="Passenger">Passenger.</param>
        /// <param name="ShippingDestinationTypes">Destination to where the item will be shipped. Example: Commercial, Residential, Store .</param>
        /// <param name="TaxAmount">Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount&#x3D;10.00, quantity&#x3D;1, and taxAmount&#x3D;0.80  ..- 2nd line item has amount&#x3D;20.00, quantity&#x3D;1, and taxAmount&#x3D;1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine .</param>
        /// <param name="ShippingAddress1">Address where item will be shipped.</param>
        /// <param name="ShippingAddress2">Address where item will be shipped.</param>
        /// <param name="ShippingCity">City where item will be shipped.</param>
        /// <param name="ShippingCountryCode">Country where item will be shipped.</param>
        /// <param name="ShippingFirstName">Customer&#39;s first name.</param>
        /// <param name="ShippingLastName">Customer&#39;s last name.</param>
        /// <param name="ShippingMiddleName">Customer&#39;s middle name.</param>
        /// <param name="ShippingPhone">Phone number where item will be shipped.</param>
        /// <param name="ShippingPostalCode">Postal code where item will be shipped.</param>
        /// <param name="ShippingState">State where item will be shipped.</param>
        public Riskv1authenticationsOrderInformationLineItems(string TotalAmount = default(string), string UnitPrice = default(string), int? Quantity = default(int?), int? GiftCardCurrency = default(int?), string ProductSKU = default(string), string ProductDescription = default(string), string ProductName = default(string), Ptsv2paymentsOrderInformationPassenger Passenger = default(Ptsv2paymentsOrderInformationPassenger), string ShippingDestinationTypes = default(string), string TaxAmount = default(string), string ShippingAddress1 = default(string), string ShippingAddress2 = default(string), string ShippingCity = default(string), string ShippingCountryCode = default(string), string ShippingFirstName = default(string), string ShippingLastName = default(string), string ShippingMiddleName = default(string), int? ShippingPhone = default(int?), int? ShippingPostalCode = default(int?), string ShippingState = default(string))
        {
            this.TotalAmount = TotalAmount;
            this.UnitPrice = UnitPrice;
            this.Quantity = Quantity;
            this.GiftCardCurrency = GiftCardCurrency;
            this.ProductSKU = ProductSKU;
            this.ProductDescription = ProductDescription;
            this.ProductName = ProductName;
            this.Passenger = Passenger;
            this.ShippingDestinationTypes = ShippingDestinationTypes;
            this.TaxAmount = TaxAmount;
            this.ShippingAddress1 = ShippingAddress1;
            this.ShippingAddress2 = ShippingAddress2;
            this.ShippingCity = ShippingCity;
            this.ShippingCountryCode = ShippingCountryCode;
            this.ShippingFirstName = ShippingFirstName;
            this.ShippingLastName = ShippingLastName;
            this.ShippingMiddleName = ShippingMiddleName;
            this.ShippingPhone = ShippingPhone;
            this.ShippingPostalCode = ShippingPostalCode;
            this.ShippingState = ShippingState;
        }
        
        /// <summary>
        /// Total amount for the item. Normally calculated as the unit price times quantity.  When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD &#x3D; 123 
        /// </summary>
        /// <value>Total amount for the item. Normally calculated as the unit price times quantity.  When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD &#x3D; 123 </value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15) 
        /// </summary>
        /// <value>Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15) </value>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Number of units for this order. Must be a non-negative integer.  The default is &#x60;1&#x60;. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>Number of units for this order. Must be a non-negative integer.  The default is &#x60;1&#x60;. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the currency used for the gift card purchase.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) 
        /// </summary>
        /// <value>When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the currency used for the gift card purchase.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) </value>
        [DataMember(Name="giftCardCurrency", EmitDefaultValue=false)]
        public int? GiftCardCurrency { get; set; }

        /// <summary>
        /// Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the values related to shipping and/or handling. 
        /// </summary>
        /// <value>Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the values related to shipping and/or handling. </value>
        [DataMember(Name="productSKU", EmitDefaultValue=false)]
        public string ProductSKU { get; set; }

        /// <summary>
        /// Brief description of item.
        /// </summary>
        /// <value>Brief description of item.</value>
        [DataMember(Name="productDescription", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. 
        /// </summary>
        /// <value>For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. </value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets Passenger
        /// </summary>
        [DataMember(Name="passenger", EmitDefaultValue=false)]
        public Ptsv2paymentsOrderInformationPassenger Passenger { get; set; }

        /// <summary>
        /// Destination to where the item will be shipped. Example: Commercial, Residential, Store 
        /// </summary>
        /// <value>Destination to where the item will be shipped. Example: Commercial, Residential, Store </value>
        [DataMember(Name="shippingDestinationTypes", EmitDefaultValue=false)]
        public string ShippingDestinationTypes { get; set; }

        /// <summary>
        /// Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount&#x3D;10.00, quantity&#x3D;1, and taxAmount&#x3D;0.80  ..- 2nd line item has amount&#x3D;20.00, quantity&#x3D;1, and taxAmount&#x3D;1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine 
        /// </summary>
        /// <value>Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount&#x3D;10.00, quantity&#x3D;1, and taxAmount&#x3D;0.80  ..- 2nd line item has amount&#x3D;20.00, quantity&#x3D;1, and taxAmount&#x3D;1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine </value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Address where item will be shipped
        /// </summary>
        /// <value>Address where item will be shipped</value>
        [DataMember(Name="shippingAddress1", EmitDefaultValue=false)]
        public string ShippingAddress1 { get; set; }

        /// <summary>
        /// Address where item will be shipped
        /// </summary>
        /// <value>Address where item will be shipped</value>
        [DataMember(Name="shippingAddress2", EmitDefaultValue=false)]
        public string ShippingAddress2 { get; set; }

        /// <summary>
        /// City where item will be shipped
        /// </summary>
        /// <value>City where item will be shipped</value>
        [DataMember(Name="shippingCity", EmitDefaultValue=false)]
        public string ShippingCity { get; set; }

        /// <summary>
        /// Country where item will be shipped
        /// </summary>
        /// <value>Country where item will be shipped</value>
        [DataMember(Name="shippingCountryCode", EmitDefaultValue=false)]
        public string ShippingCountryCode { get; set; }

        /// <summary>
        /// Customer&#39;s first name
        /// </summary>
        /// <value>Customer&#39;s first name</value>
        [DataMember(Name="shippingFirstName", EmitDefaultValue=false)]
        public string ShippingFirstName { get; set; }

        /// <summary>
        /// Customer&#39;s last name
        /// </summary>
        /// <value>Customer&#39;s last name</value>
        [DataMember(Name="shippingLastName", EmitDefaultValue=false)]
        public string ShippingLastName { get; set; }

        /// <summary>
        /// Customer&#39;s middle name
        /// </summary>
        /// <value>Customer&#39;s middle name</value>
        [DataMember(Name="shippingMiddleName", EmitDefaultValue=false)]
        public string ShippingMiddleName { get; set; }

        /// <summary>
        /// Phone number where item will be shipped
        /// </summary>
        /// <value>Phone number where item will be shipped</value>
        [DataMember(Name="shippingPhone", EmitDefaultValue=false)]
        public int? ShippingPhone { get; set; }

        /// <summary>
        /// Postal code where item will be shipped
        /// </summary>
        /// <value>Postal code where item will be shipped</value>
        [DataMember(Name="shippingPostalCode", EmitDefaultValue=false)]
        public int? ShippingPostalCode { get; set; }

        /// <summary>
        /// State where item will be shipped
        /// </summary>
        /// <value>State where item will be shipped</value>
        [DataMember(Name="shippingState", EmitDefaultValue=false)]
        public string ShippingState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1authenticationsOrderInformationLineItems {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  GiftCardCurrency: ").Append(GiftCardCurrency).Append("\n");
            sb.Append("  ProductSKU: ").Append(ProductSKU).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  Passenger: ").Append(Passenger).Append("\n");
            sb.Append("  ShippingDestinationTypes: ").Append(ShippingDestinationTypes).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  ShippingAddress1: ").Append(ShippingAddress1).Append("\n");
            sb.Append("  ShippingAddress2: ").Append(ShippingAddress2).Append("\n");
            sb.Append("  ShippingCity: ").Append(ShippingCity).Append("\n");
            sb.Append("  ShippingCountryCode: ").Append(ShippingCountryCode).Append("\n");
            sb.Append("  ShippingFirstName: ").Append(ShippingFirstName).Append("\n");
            sb.Append("  ShippingLastName: ").Append(ShippingLastName).Append("\n");
            sb.Append("  ShippingMiddleName: ").Append(ShippingMiddleName).Append("\n");
            sb.Append("  ShippingPhone: ").Append(ShippingPhone).Append("\n");
            sb.Append("  ShippingPostalCode: ").Append(ShippingPostalCode).Append("\n");
            sb.Append("  ShippingState: ").Append(ShippingState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1authenticationsOrderInformationLineItems);
        }

        /// <summary>
        /// Returns true if Riskv1authenticationsOrderInformationLineItems instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1authenticationsOrderInformationLineItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1authenticationsOrderInformationLineItems other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.UnitPrice == other.UnitPrice ||
                    this.UnitPrice != null &&
                    this.UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.GiftCardCurrency == other.GiftCardCurrency ||
                    this.GiftCardCurrency != null &&
                    this.GiftCardCurrency.Equals(other.GiftCardCurrency)
                ) && 
                (
                    this.ProductSKU == other.ProductSKU ||
                    this.ProductSKU != null &&
                    this.ProductSKU.Equals(other.ProductSKU)
                ) && 
                (
                    this.ProductDescription == other.ProductDescription ||
                    this.ProductDescription != null &&
                    this.ProductDescription.Equals(other.ProductDescription)
                ) && 
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) && 
                (
                    this.Passenger == other.Passenger ||
                    this.Passenger != null &&
                    this.Passenger.Equals(other.Passenger)
                ) && 
                (
                    this.ShippingDestinationTypes == other.ShippingDestinationTypes ||
                    this.ShippingDestinationTypes != null &&
                    this.ShippingDestinationTypes.Equals(other.ShippingDestinationTypes)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.ShippingAddress1 == other.ShippingAddress1 ||
                    this.ShippingAddress1 != null &&
                    this.ShippingAddress1.Equals(other.ShippingAddress1)
                ) && 
                (
                    this.ShippingAddress2 == other.ShippingAddress2 ||
                    this.ShippingAddress2 != null &&
                    this.ShippingAddress2.Equals(other.ShippingAddress2)
                ) && 
                (
                    this.ShippingCity == other.ShippingCity ||
                    this.ShippingCity != null &&
                    this.ShippingCity.Equals(other.ShippingCity)
                ) && 
                (
                    this.ShippingCountryCode == other.ShippingCountryCode ||
                    this.ShippingCountryCode != null &&
                    this.ShippingCountryCode.Equals(other.ShippingCountryCode)
                ) && 
                (
                    this.ShippingFirstName == other.ShippingFirstName ||
                    this.ShippingFirstName != null &&
                    this.ShippingFirstName.Equals(other.ShippingFirstName)
                ) && 
                (
                    this.ShippingLastName == other.ShippingLastName ||
                    this.ShippingLastName != null &&
                    this.ShippingLastName.Equals(other.ShippingLastName)
                ) && 
                (
                    this.ShippingMiddleName == other.ShippingMiddleName ||
                    this.ShippingMiddleName != null &&
                    this.ShippingMiddleName.Equals(other.ShippingMiddleName)
                ) && 
                (
                    this.ShippingPhone == other.ShippingPhone ||
                    this.ShippingPhone != null &&
                    this.ShippingPhone.Equals(other.ShippingPhone)
                ) && 
                (
                    this.ShippingPostalCode == other.ShippingPostalCode ||
                    this.ShippingPostalCode != null &&
                    this.ShippingPostalCode.Equals(other.ShippingPostalCode)
                ) && 
                (
                    this.ShippingState == other.ShippingState ||
                    this.ShippingState != null &&
                    this.ShippingState.Equals(other.ShippingState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.UnitPrice != null)
                    hash = hash * 59 + this.UnitPrice.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.GiftCardCurrency != null)
                    hash = hash * 59 + this.GiftCardCurrency.GetHashCode();
                if (this.ProductSKU != null)
                    hash = hash * 59 + this.ProductSKU.GetHashCode();
                if (this.ProductDescription != null)
                    hash = hash * 59 + this.ProductDescription.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.Passenger != null)
                    hash = hash * 59 + this.Passenger.GetHashCode();
                if (this.ShippingDestinationTypes != null)
                    hash = hash * 59 + this.ShippingDestinationTypes.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.ShippingAddress1 != null)
                    hash = hash * 59 + this.ShippingAddress1.GetHashCode();
                if (this.ShippingAddress2 != null)
                    hash = hash * 59 + this.ShippingAddress2.GetHashCode();
                if (this.ShippingCity != null)
                    hash = hash * 59 + this.ShippingCity.GetHashCode();
                if (this.ShippingCountryCode != null)
                    hash = hash * 59 + this.ShippingCountryCode.GetHashCode();
                if (this.ShippingFirstName != null)
                    hash = hash * 59 + this.ShippingFirstName.GetHashCode();
                if (this.ShippingLastName != null)
                    hash = hash * 59 + this.ShippingLastName.GetHashCode();
                if (this.ShippingMiddleName != null)
                    hash = hash * 59 + this.ShippingMiddleName.GetHashCode();
                if (this.ShippingPhone != null)
                    hash = hash * 59 + this.ShippingPhone.GetHashCode();
                if (this.ShippingPostalCode != null)
                    hash = hash * 59 + this.ShippingPostalCode.GetHashCode();
                if (this.ShippingState != null)
                    hash = hash * 59 + this.ShippingState.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
