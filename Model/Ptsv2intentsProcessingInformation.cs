/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2intentsProcessingInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2intentsProcessingInformation :  IEquatable<Ptsv2intentsProcessingInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2intentsProcessingInformation" /> class.
        /// </summary>
        /// <param name="ProcessingInstruction">The instruction to process an order. - default value: &#39;NO_INSTRUCTION&#39; - &#39;ORDER_SAVED_EXPLICITLY&#39; .</param>
        /// <param name="AuthorizationOptions">AuthorizationOptions.</param>
        /// <param name="ActionList">Array of actions (one or more) to be included in the order to invoke bundled services along with order. Possible values: - &#x60;AP_ORDER&#x60;: Use this when Alternative Payment Order service is requested. .</param>
        /// <param name="HighRiskTransactionFlag">Indicates if the transaction is flagged as high risk. .</param>
        /// <param name="TransactionRetry">Indicates if the transaction is a retry. .</param>
        /// <param name="LastOneHrTransactionCount">The number of transactions in the last one hour. .</param>
        /// <param name="LastOneDayTransactionCount">The number of transactions in the last one day. .</param>
        /// <param name="LastThreeMonthsTxnCount">The number of transactions in the last three months. .</param>
        /// <param name="TotalTransactionCount">The total number of transactions. .</param>
        /// <param name="PinVerification">Indicates if PIN verification is required. .</param>
        /// <param name="FaceIdVerification">Indicates if face ID verification is required. .</param>
        /// <param name="UserPassedVerification">Indicates if the user passed verification. .</param>
        /// <param name="IpAddress">The IP address of the user. .</param>
        /// <param name="TransactionDate">The date of the transaction. .</param>
        /// <param name="Tangible">Indicates if the transaction involves tangible goods. .</param>
        public Ptsv2intentsProcessingInformation(string ProcessingInstruction = default(string), Ptsv2intentsProcessingInformationAuthorizationOptions AuthorizationOptions = default(Ptsv2intentsProcessingInformationAuthorizationOptions), List<string> ActionList = default(List<string>), string HighRiskTransactionFlag = default(string), string TransactionRetry = default(string), string LastOneHrTransactionCount = default(string), string LastOneDayTransactionCount = default(string), string LastThreeMonthsTxnCount = default(string), string TotalTransactionCount = default(string), string PinVerification = default(string), string FaceIdVerification = default(string), string UserPassedVerification = default(string), string IpAddress = default(string), string TransactionDate = default(string), string Tangible = default(string))
        {
            this.ProcessingInstruction = ProcessingInstruction;
            this.AuthorizationOptions = AuthorizationOptions;
            this.ActionList = ActionList;
            this.HighRiskTransactionFlag = HighRiskTransactionFlag;
            this.TransactionRetry = TransactionRetry;
            this.LastOneHrTransactionCount = LastOneHrTransactionCount;
            this.LastOneDayTransactionCount = LastOneDayTransactionCount;
            this.LastThreeMonthsTxnCount = LastThreeMonthsTxnCount;
            this.TotalTransactionCount = TotalTransactionCount;
            this.PinVerification = PinVerification;
            this.FaceIdVerification = FaceIdVerification;
            this.UserPassedVerification = UserPassedVerification;
            this.IpAddress = IpAddress;
            this.TransactionDate = TransactionDate;
            this.Tangible = Tangible;
        }
        
        /// <summary>
        /// The instruction to process an order. - default value: &#39;NO_INSTRUCTION&#39; - &#39;ORDER_SAVED_EXPLICITLY&#39; 
        /// </summary>
        /// <value>The instruction to process an order. - default value: &#39;NO_INSTRUCTION&#39; - &#39;ORDER_SAVED_EXPLICITLY&#39; </value>
        [DataMember(Name="processingInstruction", EmitDefaultValue=false)]
        public string ProcessingInstruction { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationOptions
        /// </summary>
        [DataMember(Name="authorizationOptions", EmitDefaultValue=false)]
        public Ptsv2intentsProcessingInformationAuthorizationOptions AuthorizationOptions { get; set; }

        /// <summary>
        /// Array of actions (one or more) to be included in the order to invoke bundled services along with order. Possible values: - &#x60;AP_ORDER&#x60;: Use this when Alternative Payment Order service is requested. 
        /// </summary>
        /// <value>Array of actions (one or more) to be included in the order to invoke bundled services along with order. Possible values: - &#x60;AP_ORDER&#x60;: Use this when Alternative Payment Order service is requested. </value>
        [DataMember(Name="actionList", EmitDefaultValue=false)]
        public List<string> ActionList { get; set; }

        /// <summary>
        /// Indicates if the transaction is flagged as high risk. 
        /// </summary>
        /// <value>Indicates if the transaction is flagged as high risk. </value>
        [DataMember(Name="highRiskTransactionFlag", EmitDefaultValue=false)]
        public string HighRiskTransactionFlag { get; set; }

        /// <summary>
        /// Indicates if the transaction is a retry. 
        /// </summary>
        /// <value>Indicates if the transaction is a retry. </value>
        [DataMember(Name="transactionRetry", EmitDefaultValue=false)]
        public string TransactionRetry { get; set; }

        /// <summary>
        /// The number of transactions in the last one hour. 
        /// </summary>
        /// <value>The number of transactions in the last one hour. </value>
        [DataMember(Name="lastOneHrTransactionCount", EmitDefaultValue=false)]
        public string LastOneHrTransactionCount { get; set; }

        /// <summary>
        /// The number of transactions in the last one day. 
        /// </summary>
        /// <value>The number of transactions in the last one day. </value>
        [DataMember(Name="lastOneDayTransactionCount", EmitDefaultValue=false)]
        public string LastOneDayTransactionCount { get; set; }

        /// <summary>
        /// The number of transactions in the last three months. 
        /// </summary>
        /// <value>The number of transactions in the last three months. </value>
        [DataMember(Name="lastThreeMonthsTxnCount", EmitDefaultValue=false)]
        public string LastThreeMonthsTxnCount { get; set; }

        /// <summary>
        /// The total number of transactions. 
        /// </summary>
        /// <value>The total number of transactions. </value>
        [DataMember(Name="totalTransactionCount", EmitDefaultValue=false)]
        public string TotalTransactionCount { get; set; }

        /// <summary>
        /// Indicates if PIN verification is required. 
        /// </summary>
        /// <value>Indicates if PIN verification is required. </value>
        [DataMember(Name="pinVerification", EmitDefaultValue=false)]
        public string PinVerification { get; set; }

        /// <summary>
        /// Indicates if face ID verification is required. 
        /// </summary>
        /// <value>Indicates if face ID verification is required. </value>
        [DataMember(Name="faceIdVerification", EmitDefaultValue=false)]
        public string FaceIdVerification { get; set; }

        /// <summary>
        /// Indicates if the user passed verification. 
        /// </summary>
        /// <value>Indicates if the user passed verification. </value>
        [DataMember(Name="userPassedVerification", EmitDefaultValue=false)]
        public string UserPassedVerification { get; set; }

        /// <summary>
        /// The IP address of the user. 
        /// </summary>
        /// <value>The IP address of the user. </value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// The date of the transaction. 
        /// </summary>
        /// <value>The date of the transaction. </value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// Indicates if the transaction involves tangible goods. 
        /// </summary>
        /// <value>Indicates if the transaction involves tangible goods. </value>
        [DataMember(Name="tangible", EmitDefaultValue=false)]
        public string Tangible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2intentsProcessingInformation {\n");
            if (ProcessingInstruction != null) sb.Append("  ProcessingInstruction: ").Append(ProcessingInstruction).Append("\n");
            if (AuthorizationOptions != null) sb.Append("  AuthorizationOptions: ").Append(AuthorizationOptions).Append("\n");
            if (ActionList != null) sb.Append("  ActionList: ").Append(ActionList).Append("\n");
            if (HighRiskTransactionFlag != null) sb.Append("  HighRiskTransactionFlag: ").Append(HighRiskTransactionFlag).Append("\n");
            if (TransactionRetry != null) sb.Append("  TransactionRetry: ").Append(TransactionRetry).Append("\n");
            if (LastOneHrTransactionCount != null) sb.Append("  LastOneHrTransactionCount: ").Append(LastOneHrTransactionCount).Append("\n");
            if (LastOneDayTransactionCount != null) sb.Append("  LastOneDayTransactionCount: ").Append(LastOneDayTransactionCount).Append("\n");
            if (LastThreeMonthsTxnCount != null) sb.Append("  LastThreeMonthsTxnCount: ").Append(LastThreeMonthsTxnCount).Append("\n");
            if (TotalTransactionCount != null) sb.Append("  TotalTransactionCount: ").Append(TotalTransactionCount).Append("\n");
            if (PinVerification != null) sb.Append("  PinVerification: ").Append(PinVerification).Append("\n");
            if (FaceIdVerification != null) sb.Append("  FaceIdVerification: ").Append(FaceIdVerification).Append("\n");
            if (UserPassedVerification != null) sb.Append("  UserPassedVerification: ").Append(UserPassedVerification).Append("\n");
            if (IpAddress != null) sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            if (TransactionDate != null) sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            if (Tangible != null) sb.Append("  Tangible: ").Append(Tangible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2intentsProcessingInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2intentsProcessingInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2intentsProcessingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2intentsProcessingInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProcessingInstruction == other.ProcessingInstruction ||
                    this.ProcessingInstruction != null &&
                    this.ProcessingInstruction.Equals(other.ProcessingInstruction)
                ) && 
                (
                    this.AuthorizationOptions == other.AuthorizationOptions ||
                    this.AuthorizationOptions != null &&
                    this.AuthorizationOptions.Equals(other.AuthorizationOptions)
                ) && 
                (
                    this.ActionList == other.ActionList ||
                    this.ActionList != null &&
                    this.ActionList.SequenceEqual(other.ActionList)
                ) && 
                (
                    this.HighRiskTransactionFlag == other.HighRiskTransactionFlag ||
                    this.HighRiskTransactionFlag != null &&
                    this.HighRiskTransactionFlag.Equals(other.HighRiskTransactionFlag)
                ) && 
                (
                    this.TransactionRetry == other.TransactionRetry ||
                    this.TransactionRetry != null &&
                    this.TransactionRetry.Equals(other.TransactionRetry)
                ) && 
                (
                    this.LastOneHrTransactionCount == other.LastOneHrTransactionCount ||
                    this.LastOneHrTransactionCount != null &&
                    this.LastOneHrTransactionCount.Equals(other.LastOneHrTransactionCount)
                ) && 
                (
                    this.LastOneDayTransactionCount == other.LastOneDayTransactionCount ||
                    this.LastOneDayTransactionCount != null &&
                    this.LastOneDayTransactionCount.Equals(other.LastOneDayTransactionCount)
                ) && 
                (
                    this.LastThreeMonthsTxnCount == other.LastThreeMonthsTxnCount ||
                    this.LastThreeMonthsTxnCount != null &&
                    this.LastThreeMonthsTxnCount.Equals(other.LastThreeMonthsTxnCount)
                ) && 
                (
                    this.TotalTransactionCount == other.TotalTransactionCount ||
                    this.TotalTransactionCount != null &&
                    this.TotalTransactionCount.Equals(other.TotalTransactionCount)
                ) && 
                (
                    this.PinVerification == other.PinVerification ||
                    this.PinVerification != null &&
                    this.PinVerification.Equals(other.PinVerification)
                ) && 
                (
                    this.FaceIdVerification == other.FaceIdVerification ||
                    this.FaceIdVerification != null &&
                    this.FaceIdVerification.Equals(other.FaceIdVerification)
                ) && 
                (
                    this.UserPassedVerification == other.UserPassedVerification ||
                    this.UserPassedVerification != null &&
                    this.UserPassedVerification.Equals(other.UserPassedVerification)
                ) && 
                (
                    this.IpAddress == other.IpAddress ||
                    this.IpAddress != null &&
                    this.IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    this.TransactionDate == other.TransactionDate ||
                    this.TransactionDate != null &&
                    this.TransactionDate.Equals(other.TransactionDate)
                ) && 
                (
                    this.Tangible == other.Tangible ||
                    this.Tangible != null &&
                    this.Tangible.Equals(other.Tangible)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProcessingInstruction != null)
                    hash = hash * 59 + this.ProcessingInstruction.GetHashCode();
                if (this.AuthorizationOptions != null)
                    hash = hash * 59 + this.AuthorizationOptions.GetHashCode();
                if (this.ActionList != null)
                    hash = hash * 59 + this.ActionList.GetHashCode();
                if (this.HighRiskTransactionFlag != null)
                    hash = hash * 59 + this.HighRiskTransactionFlag.GetHashCode();
                if (this.TransactionRetry != null)
                    hash = hash * 59 + this.TransactionRetry.GetHashCode();
                if (this.LastOneHrTransactionCount != null)
                    hash = hash * 59 + this.LastOneHrTransactionCount.GetHashCode();
                if (this.LastOneDayTransactionCount != null)
                    hash = hash * 59 + this.LastOneDayTransactionCount.GetHashCode();
                if (this.LastThreeMonthsTxnCount != null)
                    hash = hash * 59 + this.LastThreeMonthsTxnCount.GetHashCode();
                if (this.TotalTransactionCount != null)
                    hash = hash * 59 + this.TotalTransactionCount.GetHashCode();
                if (this.PinVerification != null)
                    hash = hash * 59 + this.PinVerification.GetHashCode();
                if (this.FaceIdVerification != null)
                    hash = hash * 59 + this.FaceIdVerification.GetHashCode();
                if (this.UserPassedVerification != null)
                    hash = hash * 59 + this.UserPassedVerification.GetHashCode();
                if (this.IpAddress != null)
                    hash = hash * 59 + this.IpAddress.GetHashCode();
                if (this.TransactionDate != null)
                    hash = hash * 59 + this.TransactionDate.GetHashCode();
                if (this.Tangible != null)
                    hash = hash * 59 + this.Tangible.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
