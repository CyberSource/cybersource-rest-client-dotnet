/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PaymentsProductsServiceFeeConfigurationInformationConfigurations
    /// </summary>
    [DataContract]
    public partial class PaymentsProductsServiceFeeConfigurationInformationConfigurations :  IEquatable<PaymentsProductsServiceFeeConfigurationInformationConfigurations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsProductsServiceFeeConfigurationInformationConfigurations" /> class.
        /// </summary>
        /// <param name="Products">Products enabled for this account. The following values are supported: virtualTerminal paymentTokenizationOtp subscriptionsOtp virtualTerminalCp eCheck .</param>
        /// <param name="TerminalId">Identifier of the terminal at the retail location..</param>
        /// <param name="MerchantId">Identifier of a merchant account..</param>
        /// <param name="MerchantInformation">MerchantInformation.</param>
        /// <param name="PaymentInformation">PaymentInformation.</param>
        public PaymentsProductsServiceFeeConfigurationInformationConfigurations(Dictionary<string, PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts> Products = default(Dictionary<string, PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts>), string TerminalId = default(string), string MerchantId = default(string), PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation MerchantInformation = default(PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation), List<PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation> PaymentInformation = default(List<PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation>))
        {
            this.Products = Products;
            this.TerminalId = TerminalId;
            this.MerchantId = MerchantId;
            this.MerchantInformation = MerchantInformation;
            this.PaymentInformation = PaymentInformation;
        }
        
        /// <summary>
        /// Products enabled for this account. The following values are supported: virtualTerminal paymentTokenizationOtp subscriptionsOtp virtualTerminalCp eCheck 
        /// </summary>
        /// <value>Products enabled for this account. The following values are supported: virtualTerminal paymentTokenizationOtp subscriptionsOtp virtualTerminalCp eCheck </value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public Dictionary<string, PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts> Products { get; set; }

        /// <summary>
        /// Identifier of the terminal at the retail location.
        /// </summary>
        /// <value>Identifier of the terminal at the retail location.</value>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Identifier of a merchant account.
        /// </summary>
        /// <value>Identifier of a merchant account.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantInformation
        /// </summary>
        [DataMember(Name="merchantInformation", EmitDefaultValue=false)]
        public PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation MerchantInformation { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInformation
        /// </summary>
        [DataMember(Name="paymentInformation", EmitDefaultValue=false)]
        public List<PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation> PaymentInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsProductsServiceFeeConfigurationInformationConfigurations {\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantInformation: ").Append(MerchantInformation).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsProductsServiceFeeConfigurationInformationConfigurations);
        }

        /// <summary>
        /// Returns true if PaymentsProductsServiceFeeConfigurationInformationConfigurations instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsProductsServiceFeeConfigurationInformationConfigurations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsProductsServiceFeeConfigurationInformationConfigurations other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.TerminalId == other.TerminalId ||
                    this.TerminalId != null &&
                    this.TerminalId.Equals(other.TerminalId)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.MerchantInformation == other.MerchantInformation ||
                    this.MerchantInformation != null &&
                    this.MerchantInformation.Equals(other.MerchantInformation)
                ) && 
                (
                    this.PaymentInformation == other.PaymentInformation ||
                    this.PaymentInformation != null &&
                    this.PaymentInformation.SequenceEqual(other.PaymentInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.TerminalId != null)
                    hash = hash * 59 + this.TerminalId.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantInformation != null)
                    hash = hash * 59 + this.MerchantInformation.GetHashCode();
                if (this.PaymentInformation != null)
                    hash = hash * 59 + this.PaymentInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
