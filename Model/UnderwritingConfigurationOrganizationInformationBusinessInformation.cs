/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationOrganizationInformationBusinessInformation
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationOrganizationInformationBusinessInformation :  IEquatable<UnderwritingConfigurationOrganizationInformationBusinessInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnderwritingConfigurationOrganizationInformationBusinessInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformation" /> class.
        /// </summary>
        /// <param name="BusinessIdentifier">Tax ID for the business (required).</param>
        /// <param name="CountryRegistration">Country where the business is registered. Two character country code, ISO 3166-1 alpha-2. (required).</param>
        /// <param name="LegalName">The legally registered name of the business (required).</param>
        /// <param name="DoingBusinessAs">The DBA of the business. (required).</param>
        /// <param name="BusinessDescription">Short description of the Business (required).</param>
        /// <param name="RegistrationNumber">Registration ID for Enterprise Merchant.</param>
        /// <param name="StockExchange">Which stock exchange is the company trading in?.</param>
        /// <param name="TickerSymbol">Stock Symbol on the exchange.</param>
        /// <param name="StartDate">When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016 (required).</param>
        /// <param name="MerchantCategoryCode">Industry standard Merchant Category Code (MCC) (required).</param>
        /// <param name="MccDescription">MCC Description.</param>
        /// <param name="WebsiteURL">Website for the Business.</param>
        /// <param name="BusinessType">Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST (required).</param>
        /// <param name="LocalMCC">LocalMCC.</param>
        /// <param name="CountryPhoneNumber">Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2. (required).</param>
        /// <param name="PhoneNumber">Business Phone Number (required).</param>
        /// <param name="Email">Business Email Address (required).</param>
        /// <param name="WhatYourCompanyDoes">What your company does and how you market your service.</param>
        /// <param name="Address">Address.</param>
        /// <param name="TradingAddress">TradingAddress.</param>
        /// <param name="BusinessContact">BusinessContact.</param>
        /// <param name="BusinessDetails">BusinessDetails.</param>
        /// <param name="OwnerInformation">OwnerInformation.</param>
        /// <param name="DirectorInformation">DirectorInformation.</param>
        public UnderwritingConfigurationOrganizationInformationBusinessInformation(string BusinessIdentifier = default(string), string CountryRegistration = default(string), string LegalName = default(string), string DoingBusinessAs = default(string), string BusinessDescription = default(string), string RegistrationNumber = default(string), string StockExchange = default(string), string TickerSymbol = default(string), DateTime? StartDate = default(DateTime?), string MerchantCategoryCode = default(string), string MccDescription = default(string), string WebsiteURL = default(string), string BusinessType = default(string), List<string> LocalMCC = default(List<string>), string CountryPhoneNumber = default(string), string PhoneNumber = default(string), string Email = default(string), string WhatYourCompanyDoes = default(string), UnderwritingConfigurationOrganizationInformationBusinessInformationAddress Address = default(UnderwritingConfigurationOrganizationInformationBusinessInformationAddress), UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress TradingAddress = default(UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress), UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact BusinessContact = default(UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact), UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails BusinessDetails = default(UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails), List<UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation> OwnerInformation = default(List<UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation>), List<UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation> DirectorInformation = default(List<UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation>))
        {
            this.BusinessIdentifier = BusinessIdentifier;
            this.CountryRegistration = CountryRegistration;
            this.LegalName = LegalName;
            this.DoingBusinessAs = DoingBusinessAs;
            this.BusinessDescription = BusinessDescription;
            this.RegistrationNumber = RegistrationNumber;
            this.StockExchange = StockExchange;
            this.TickerSymbol = TickerSymbol;
            this.StartDate = StartDate;
            this.MerchantCategoryCode = MerchantCategoryCode;
            this.MccDescription = MccDescription;
            this.WebsiteURL = WebsiteURL;
            this.BusinessType = BusinessType;
            this.LocalMCC = LocalMCC;
            this.CountryPhoneNumber = CountryPhoneNumber;
            this.PhoneNumber = PhoneNumber;
            this.Email = Email;
            this.WhatYourCompanyDoes = WhatYourCompanyDoes;
            this.Address = Address;
            this.TradingAddress = TradingAddress;
            this.BusinessContact = BusinessContact;
            this.BusinessDetails = BusinessDetails;
            this.OwnerInformation = OwnerInformation;
            this.DirectorInformation = DirectorInformation;
        }
        
        /// <summary>
        /// Tax ID for the business
        /// </summary>
        /// <value>Tax ID for the business</value>
        [DataMember(Name="businessIdentifier", EmitDefaultValue=false)]
        public string BusinessIdentifier { get; set; }

        /// <summary>
        /// Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="countryRegistration", EmitDefaultValue=false)]
        public string CountryRegistration { get; set; }

        /// <summary>
        /// The legally registered name of the business
        /// </summary>
        /// <value>The legally registered name of the business</value>
        [DataMember(Name="legalName", EmitDefaultValue=false)]
        public string LegalName { get; set; }

        /// <summary>
        /// The DBA of the business.
        /// </summary>
        /// <value>The DBA of the business.</value>
        [DataMember(Name="doingBusinessAs", EmitDefaultValue=false)]
        public string DoingBusinessAs { get; set; }

        /// <summary>
        /// Short description of the Business
        /// </summary>
        /// <value>Short description of the Business</value>
        [DataMember(Name="businessDescription", EmitDefaultValue=false)]
        public string BusinessDescription { get; set; }

        /// <summary>
        /// Registration ID for Enterprise Merchant
        /// </summary>
        /// <value>Registration ID for Enterprise Merchant</value>
        [DataMember(Name="registrationNumber", EmitDefaultValue=false)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Which stock exchange is the company trading in?
        /// </summary>
        /// <value>Which stock exchange is the company trading in?</value>
        [DataMember(Name="stockExchange", EmitDefaultValue=false)]
        public string StockExchange { get; set; }

        /// <summary>
        /// Stock Symbol on the exchange
        /// </summary>
        /// <value>Stock Symbol on the exchange</value>
        [DataMember(Name="tickerSymbol", EmitDefaultValue=false)]
        public string TickerSymbol { get; set; }

        /// <summary>
        /// When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016
        /// </summary>
        /// <value>When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Industry standard Merchant Category Code (MCC)
        /// </summary>
        /// <value>Industry standard Merchant Category Code (MCC)</value>
        [DataMember(Name="merchantCategoryCode", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// MCC Description
        /// </summary>
        /// <value>MCC Description</value>
        [DataMember(Name="mccDescription", EmitDefaultValue=false)]
        public string MccDescription { get; set; }

        /// <summary>
        /// Website for the Business
        /// </summary>
        /// <value>Website for the Business</value>
        [DataMember(Name="websiteURL", EmitDefaultValue=false)]
        public string WebsiteURL { get; set; }

        /// <summary>
        /// Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST
        /// </summary>
        /// <value>Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST</value>
        [DataMember(Name="businessType", EmitDefaultValue=false)]
        public string BusinessType { get; set; }

        /// <summary>
        /// Gets or Sets LocalMCC
        /// </summary>
        [DataMember(Name="localMCC", EmitDefaultValue=false)]
        public List<string> LocalMCC { get; set; }

        /// <summary>
        /// Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="countryPhoneNumber", EmitDefaultValue=false)]
        public string CountryPhoneNumber { get; set; }

        /// <summary>
        /// Business Phone Number
        /// </summary>
        /// <value>Business Phone Number</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Business Email Address
        /// </summary>
        /// <value>Business Email Address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// What your company does and how you market your service
        /// </summary>
        /// <value>What your company does and how you market your service</value>
        [DataMember(Name="whatYourCompanyDoes", EmitDefaultValue=false)]
        public string WhatYourCompanyDoes { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformationAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets TradingAddress
        /// </summary>
        [DataMember(Name="tradingAddress", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress TradingAddress { get; set; }

        /// <summary>
        /// Gets or Sets BusinessContact
        /// </summary>
        [DataMember(Name="businessContact", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact BusinessContact { get; set; }

        /// <summary>
        /// Gets or Sets BusinessDetails
        /// </summary>
        [DataMember(Name="businessDetails", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails BusinessDetails { get; set; }

        /// <summary>
        /// Gets or Sets OwnerInformation
        /// </summary>
        [DataMember(Name="ownerInformation", EmitDefaultValue=false)]
        public List<UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation> OwnerInformation { get; set; }

        /// <summary>
        /// Gets or Sets DirectorInformation
        /// </summary>
        [DataMember(Name="directorInformation", EmitDefaultValue=false)]
        public List<UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation> DirectorInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationOrganizationInformationBusinessInformation {\n");
            if (BusinessIdentifier != null) sb.Append("  BusinessIdentifier: ").Append(BusinessIdentifier).Append("\n");
            if (CountryRegistration != null) sb.Append("  CountryRegistration: ").Append(CountryRegistration).Append("\n");
            if (LegalName != null) sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            if (DoingBusinessAs != null) sb.Append("  DoingBusinessAs: ").Append(DoingBusinessAs).Append("\n");
            if (BusinessDescription != null) sb.Append("  BusinessDescription: ").Append(BusinessDescription).Append("\n");
            if (RegistrationNumber != null) sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            if (StockExchange != null) sb.Append("  StockExchange: ").Append(StockExchange).Append("\n");
            if (TickerSymbol != null) sb.Append("  TickerSymbol: ").Append(TickerSymbol).Append("\n");
            if (StartDate != null) sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            if (MerchantCategoryCode != null) sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            if (MccDescription != null) sb.Append("  MccDescription: ").Append(MccDescription).Append("\n");
            if (WebsiteURL != null) sb.Append("  WebsiteURL: ").Append(WebsiteURL).Append("\n");
            if (BusinessType != null) sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            if (LocalMCC != null) sb.Append("  LocalMCC: ").Append(LocalMCC).Append("\n");
            if (CountryPhoneNumber != null) sb.Append("  CountryPhoneNumber: ").Append(CountryPhoneNumber).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (Email != null) sb.Append("  Email: ").Append(Email).Append("\n");
            if (WhatYourCompanyDoes != null) sb.Append("  WhatYourCompanyDoes: ").Append(WhatYourCompanyDoes).Append("\n");
            if (Address != null) sb.Append("  Address: ").Append(Address).Append("\n");
            if (TradingAddress != null) sb.Append("  TradingAddress: ").Append(TradingAddress).Append("\n");
            if (BusinessContact != null) sb.Append("  BusinessContact: ").Append(BusinessContact).Append("\n");
            if (BusinessDetails != null) sb.Append("  BusinessDetails: ").Append(BusinessDetails).Append("\n");
            if (OwnerInformation != null) sb.Append("  OwnerInformation: ").Append(OwnerInformation).Append("\n");
            if (DirectorInformation != null) sb.Append("  DirectorInformation: ").Append(DirectorInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationOrganizationInformationBusinessInformation);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationOrganizationInformationBusinessInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationOrganizationInformationBusinessInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationOrganizationInformationBusinessInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BusinessIdentifier == other.BusinessIdentifier ||
                    this.BusinessIdentifier != null &&
                    this.BusinessIdentifier.Equals(other.BusinessIdentifier)
                ) && 
                (
                    this.CountryRegistration == other.CountryRegistration ||
                    this.CountryRegistration != null &&
                    this.CountryRegistration.Equals(other.CountryRegistration)
                ) && 
                (
                    this.LegalName == other.LegalName ||
                    this.LegalName != null &&
                    this.LegalName.Equals(other.LegalName)
                ) && 
                (
                    this.DoingBusinessAs == other.DoingBusinessAs ||
                    this.DoingBusinessAs != null &&
                    this.DoingBusinessAs.Equals(other.DoingBusinessAs)
                ) && 
                (
                    this.BusinessDescription == other.BusinessDescription ||
                    this.BusinessDescription != null &&
                    this.BusinessDescription.Equals(other.BusinessDescription)
                ) && 
                (
                    this.RegistrationNumber == other.RegistrationNumber ||
                    this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(other.RegistrationNumber)
                ) && 
                (
                    this.StockExchange == other.StockExchange ||
                    this.StockExchange != null &&
                    this.StockExchange.Equals(other.StockExchange)
                ) && 
                (
                    this.TickerSymbol == other.TickerSymbol ||
                    this.TickerSymbol != null &&
                    this.TickerSymbol.Equals(other.TickerSymbol)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.MerchantCategoryCode == other.MerchantCategoryCode ||
                    this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(other.MerchantCategoryCode)
                ) && 
                (
                    this.MccDescription == other.MccDescription ||
                    this.MccDescription != null &&
                    this.MccDescription.Equals(other.MccDescription)
                ) && 
                (
                    this.WebsiteURL == other.WebsiteURL ||
                    this.WebsiteURL != null &&
                    this.WebsiteURL.Equals(other.WebsiteURL)
                ) && 
                (
                    this.BusinessType == other.BusinessType ||
                    this.BusinessType != null &&
                    this.BusinessType.Equals(other.BusinessType)
                ) && 
                (
                    this.LocalMCC == other.LocalMCC ||
                    this.LocalMCC != null &&
                    this.LocalMCC.SequenceEqual(other.LocalMCC)
                ) && 
                (
                    this.CountryPhoneNumber == other.CountryPhoneNumber ||
                    this.CountryPhoneNumber != null &&
                    this.CountryPhoneNumber.Equals(other.CountryPhoneNumber)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.WhatYourCompanyDoes == other.WhatYourCompanyDoes ||
                    this.WhatYourCompanyDoes != null &&
                    this.WhatYourCompanyDoes.Equals(other.WhatYourCompanyDoes)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.TradingAddress == other.TradingAddress ||
                    this.TradingAddress != null &&
                    this.TradingAddress.Equals(other.TradingAddress)
                ) && 
                (
                    this.BusinessContact == other.BusinessContact ||
                    this.BusinessContact != null &&
                    this.BusinessContact.Equals(other.BusinessContact)
                ) && 
                (
                    this.BusinessDetails == other.BusinessDetails ||
                    this.BusinessDetails != null &&
                    this.BusinessDetails.Equals(other.BusinessDetails)
                ) && 
                (
                    this.OwnerInformation == other.OwnerInformation ||
                    this.OwnerInformation != null &&
                    this.OwnerInformation.SequenceEqual(other.OwnerInformation)
                ) && 
                (
                    this.DirectorInformation == other.DirectorInformation ||
                    this.DirectorInformation != null &&
                    this.DirectorInformation.SequenceEqual(other.DirectorInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BusinessIdentifier != null)
                    hash = hash * 59 + this.BusinessIdentifier.GetHashCode();
                if (this.CountryRegistration != null)
                    hash = hash * 59 + this.CountryRegistration.GetHashCode();
                if (this.LegalName != null)
                    hash = hash * 59 + this.LegalName.GetHashCode();
                if (this.DoingBusinessAs != null)
                    hash = hash * 59 + this.DoingBusinessAs.GetHashCode();
                if (this.BusinessDescription != null)
                    hash = hash * 59 + this.BusinessDescription.GetHashCode();
                if (this.RegistrationNumber != null)
                    hash = hash * 59 + this.RegistrationNumber.GetHashCode();
                if (this.StockExchange != null)
                    hash = hash * 59 + this.StockExchange.GetHashCode();
                if (this.TickerSymbol != null)
                    hash = hash * 59 + this.TickerSymbol.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hash = hash * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.MccDescription != null)
                    hash = hash * 59 + this.MccDescription.GetHashCode();
                if (this.WebsiteURL != null)
                    hash = hash * 59 + this.WebsiteURL.GetHashCode();
                if (this.BusinessType != null)
                    hash = hash * 59 + this.BusinessType.GetHashCode();
                if (this.LocalMCC != null)
                    hash = hash * 59 + this.LocalMCC.GetHashCode();
                if (this.CountryPhoneNumber != null)
                    hash = hash * 59 + this.CountryPhoneNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.WhatYourCompanyDoes != null)
                    hash = hash * 59 + this.WhatYourCompanyDoes.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.TradingAddress != null)
                    hash = hash * 59 + this.TradingAddress.GetHashCode();
                if (this.BusinessContact != null)
                    hash = hash * 59 + this.BusinessContact.GetHashCode();
                if (this.BusinessDetails != null)
                    hash = hash * 59 + this.BusinessDetails.GetHashCode();
                if (this.OwnerInformation != null)
                    hash = hash * 59 + this.OwnerInformation.GetHashCode();
                if (this.DirectorInformation != null)
                    hash = hash * 59 + this.DirectorInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
