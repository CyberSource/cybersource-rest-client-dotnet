/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// ReportingV3NetFundingsGet200Response
    /// </summary>
    [DataContract]
    public partial class ReportingV3NetFundingsGet200Response :  IEquatable<ReportingV3NetFundingsGet200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3NetFundingsGet200Response" /> class.
        /// </summary>
        /// <param name="StartTime">Valid report Start Date in **ISO 8601 format**. Please refer the following link to know more about ISO 8601 format. - https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14  **Example:** - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ .</param>
        /// <param name="EndTime">Valid report End Date in **ISO 8601 format** **Example date format:** - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ .</param>
        /// <param name="NetFundingSummaries">List of Netfunding summary objects.</param>
        /// <param name="TotalPurchases">List of total purchases currency wise.</param>
        /// <param name="TotalRefunds">List of total refunds currency wise.</param>
        /// <param name="TotalFees">List of total fees currency wise.</param>
        /// <param name="TotalChargebacks">List of total chargebacks currency wise.</param>
        /// <param name="NetTotal">List of new total currency wise.</param>
        public ReportingV3NetFundingsGet200Response(DateTime? StartTime = default(DateTime?), DateTime? EndTime = default(DateTime?), List<ReportingV3NetFundingsGet200ResponseNetFundingSummaries> NetFundingSummaries = default(List<ReportingV3NetFundingsGet200ResponseNetFundingSummaries>), List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalPurchases = default(List<ReportingV3NetFundingsGet200ResponseTotalPurchases>), List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalRefunds = default(List<ReportingV3NetFundingsGet200ResponseTotalPurchases>), List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalFees = default(List<ReportingV3NetFundingsGet200ResponseTotalPurchases>), List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalChargebacks = default(List<ReportingV3NetFundingsGet200ResponseTotalPurchases>), List<ReportingV3NetFundingsGet200ResponseTotalPurchases> NetTotal = default(List<ReportingV3NetFundingsGet200ResponseTotalPurchases>))
        {
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.NetFundingSummaries = NetFundingSummaries;
            this.TotalPurchases = TotalPurchases;
            this.TotalRefunds = TotalRefunds;
            this.TotalFees = TotalFees;
            this.TotalChargebacks = TotalChargebacks;
            this.NetTotal = NetTotal;
        }
        
        /// <summary>
        /// Valid report Start Date in **ISO 8601 format**. Please refer the following link to know more about ISO 8601 format. - https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14  **Example:** - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ 
        /// </summary>
        /// <value>Valid report Start Date in **ISO 8601 format**. Please refer the following link to know more about ISO 8601 format. - https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14  **Example:** - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ </value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Valid report End Date in **ISO 8601 format** **Example date format:** - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ 
        /// </summary>
        /// <value>Valid report End Date in **ISO 8601 format** **Example date format:** - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ </value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// List of Netfunding summary objects
        /// </summary>
        /// <value>List of Netfunding summary objects</value>
        [DataMember(Name="netFundingSummaries", EmitDefaultValue=false)]
        public List<ReportingV3NetFundingsGet200ResponseNetFundingSummaries> NetFundingSummaries { get; set; }

        /// <summary>
        /// List of total purchases currency wise
        /// </summary>
        /// <value>List of total purchases currency wise</value>
        [DataMember(Name="totalPurchases", EmitDefaultValue=false)]
        public List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalPurchases { get; set; }

        /// <summary>
        /// List of total refunds currency wise
        /// </summary>
        /// <value>List of total refunds currency wise</value>
        [DataMember(Name="totalRefunds", EmitDefaultValue=false)]
        public List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalRefunds { get; set; }

        /// <summary>
        /// List of total fees currency wise
        /// </summary>
        /// <value>List of total fees currency wise</value>
        [DataMember(Name="totalFees", EmitDefaultValue=false)]
        public List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalFees { get; set; }

        /// <summary>
        /// List of total chargebacks currency wise
        /// </summary>
        /// <value>List of total chargebacks currency wise</value>
        [DataMember(Name="totalChargebacks", EmitDefaultValue=false)]
        public List<ReportingV3NetFundingsGet200ResponseTotalPurchases> TotalChargebacks { get; set; }

        /// <summary>
        /// List of new total currency wise
        /// </summary>
        /// <value>List of new total currency wise</value>
        [DataMember(Name="netTotal", EmitDefaultValue=false)]
        public List<ReportingV3NetFundingsGet200ResponseTotalPurchases> NetTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3NetFundingsGet200Response {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  NetFundingSummaries: ").Append(NetFundingSummaries).Append("\n");
            sb.Append("  TotalPurchases: ").Append(TotalPurchases).Append("\n");
            sb.Append("  TotalRefunds: ").Append(TotalRefunds).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("  TotalChargebacks: ").Append(TotalChargebacks).Append("\n");
            sb.Append("  NetTotal: ").Append(NetTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3NetFundingsGet200Response);
        }

        /// <summary>
        /// Returns true if ReportingV3NetFundingsGet200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3NetFundingsGet200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3NetFundingsGet200Response other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.NetFundingSummaries == other.NetFundingSummaries ||
                    this.NetFundingSummaries != null &&
                    this.NetFundingSummaries.SequenceEqual(other.NetFundingSummaries)
                ) && 
                (
                    this.TotalPurchases == other.TotalPurchases ||
                    this.TotalPurchases != null &&
                    this.TotalPurchases.SequenceEqual(other.TotalPurchases)
                ) && 
                (
                    this.TotalRefunds == other.TotalRefunds ||
                    this.TotalRefunds != null &&
                    this.TotalRefunds.SequenceEqual(other.TotalRefunds)
                ) && 
                (
                    this.TotalFees == other.TotalFees ||
                    this.TotalFees != null &&
                    this.TotalFees.SequenceEqual(other.TotalFees)
                ) && 
                (
                    this.TotalChargebacks == other.TotalChargebacks ||
                    this.TotalChargebacks != null &&
                    this.TotalChargebacks.SequenceEqual(other.TotalChargebacks)
                ) && 
                (
                    this.NetTotal == other.NetTotal ||
                    this.NetTotal != null &&
                    this.NetTotal.SequenceEqual(other.NetTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.NetFundingSummaries != null)
                    hash = hash * 59 + this.NetFundingSummaries.GetHashCode();
                if (this.TotalPurchases != null)
                    hash = hash * 59 + this.TotalPurchases.GetHashCode();
                if (this.TotalRefunds != null)
                    hash = hash * 59 + this.TotalRefunds.GetHashCode();
                if (this.TotalFees != null)
                    hash = hash * 59 + this.TotalFees.GetHashCode();
                if (this.TotalChargebacks != null)
                    hash = hash * 59 + this.TotalChargebacks.GetHashCode();
                if (this.NetTotal != null)
                    hash = hash * 59 + this.NetTotal.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
