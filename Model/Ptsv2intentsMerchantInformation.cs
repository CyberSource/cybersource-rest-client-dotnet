/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2intentsMerchantInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2intentsMerchantInformation :  IEquatable<Ptsv2intentsMerchantInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2intentsMerchantInformation" /> class.
        /// </summary>
        /// <param name="MerchantDescriptor">MerchantDescriptor.</param>
        /// <param name="CancelUrl">customer would be redirected to this url based on the decision of the transaction.</param>
        /// <param name="SuccessUrl">customer would be redirected to this url based on the decision of the transaction.</param>
        public Ptsv2intentsMerchantInformation(Ptsv2intentsMerchantInformationMerchantDescriptor MerchantDescriptor = default(Ptsv2intentsMerchantInformationMerchantDescriptor), string CancelUrl = default(string), string SuccessUrl = default(string))
        {
            this.MerchantDescriptor = MerchantDescriptor;
            this.CancelUrl = CancelUrl;
            this.SuccessUrl = SuccessUrl;
        }
        
        /// <summary>
        /// Gets or Sets MerchantDescriptor
        /// </summary>
        [DataMember(Name="merchantDescriptor", EmitDefaultValue=false)]
        public Ptsv2intentsMerchantInformationMerchantDescriptor MerchantDescriptor { get; set; }

        /// <summary>
        /// customer would be redirected to this url based on the decision of the transaction
        /// </summary>
        /// <value>customer would be redirected to this url based on the decision of the transaction</value>
        [DataMember(Name="cancelUrl", EmitDefaultValue=false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// customer would be redirected to this url based on the decision of the transaction
        /// </summary>
        /// <value>customer would be redirected to this url based on the decision of the transaction</value>
        [DataMember(Name="successUrl", EmitDefaultValue=false)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2intentsMerchantInformation {\n");
            if (MerchantDescriptor != null) sb.Append("  MerchantDescriptor: ").Append(MerchantDescriptor).Append("\n");
            if (CancelUrl != null) sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            if (SuccessUrl != null) sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2intentsMerchantInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2intentsMerchantInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2intentsMerchantInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2intentsMerchantInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantDescriptor == other.MerchantDescriptor ||
                    this.MerchantDescriptor != null &&
                    this.MerchantDescriptor.Equals(other.MerchantDescriptor)
                ) && 
                (
                    this.CancelUrl == other.CancelUrl ||
                    this.CancelUrl != null &&
                    this.CancelUrl.Equals(other.CancelUrl)
                ) && 
                (
                    this.SuccessUrl == other.SuccessUrl ||
                    this.SuccessUrl != null &&
                    this.SuccessUrl.Equals(other.SuccessUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantDescriptor != null)
                    hash = hash * 59 + this.MerchantDescriptor.GetHashCode();
                if (this.CancelUrl != null)
                    hash = hash * 59 + this.CancelUrl.GetHashCode();
                if (this.SuccessUrl != null)
                    hash = hash * 59 + this.SuccessUrl.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
