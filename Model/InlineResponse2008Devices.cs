/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2008Devices
    /// </summary>
    [DataContract]
    public partial class InlineResponse2008Devices :  IEquatable<InlineResponse2008Devices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2008Devices" /> class.
        /// </summary>
        /// <param name="ReaderId">ReaderId.</param>
        /// <param name="SerialNumber">SerialNumber.</param>
        /// <param name="Model">Model.</param>
        /// <param name="Make">Make.</param>
        /// <param name="HardwareRevision">HardwareRevision.</param>
        /// <param name="Status">Status of the device. Possible Values:   - &#39;ACTIVE&#39;   - &#39;INACTIVE&#39; .</param>
        /// <param name="StatusChangeReason">Reason for change in status..</param>
        /// <param name="MerchantId">ID of the merchant to whom this device is assigned..</param>
        /// <param name="AccountId">ID of the account to whom the device assigned..</param>
        /// <param name="TerminalCreationDate">Timestamp in which the device was created..</param>
        /// <param name="TerminalUpdationDate">Timestamp in which the device was updated/modified..</param>
        /// <param name="PaymentProcessorToTerminalMap">PaymentProcessorToTerminalMap.</param>
        public InlineResponse2008Devices(string ReaderId = default(string), string SerialNumber = default(string), string Model = default(string), string Make = default(string), string HardwareRevision = default(string), string Status = default(string), string StatusChangeReason = default(string), string MerchantId = default(string), string AccountId = default(string), DateTime? TerminalCreationDate = default(DateTime?), DateTime? TerminalUpdationDate = default(DateTime?), InlineResponse2008PaymentProcessorToTerminalMap PaymentProcessorToTerminalMap = default(InlineResponse2008PaymentProcessorToTerminalMap))
        {
            this.ReaderId = ReaderId;
            this.SerialNumber = SerialNumber;
            this.Model = Model;
            this.Make = Make;
            this.HardwareRevision = HardwareRevision;
            this.Status = Status;
            this.StatusChangeReason = StatusChangeReason;
            this.MerchantId = MerchantId;
            this.AccountId = AccountId;
            this.TerminalCreationDate = TerminalCreationDate;
            this.TerminalUpdationDate = TerminalUpdationDate;
            this.PaymentProcessorToTerminalMap = PaymentProcessorToTerminalMap;
        }
        
        /// <summary>
        /// Gets or Sets ReaderId
        /// </summary>
        [DataMember(Name="readerId", EmitDefaultValue=false)]
        public string ReaderId { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name="make", EmitDefaultValue=false)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets HardwareRevision
        /// </summary>
        [DataMember(Name="hardwareRevision", EmitDefaultValue=false)]
        public string HardwareRevision { get; set; }

        /// <summary>
        /// Status of the device. Possible Values:   - &#39;ACTIVE&#39;   - &#39;INACTIVE&#39; 
        /// </summary>
        /// <value>Status of the device. Possible Values:   - &#39;ACTIVE&#39;   - &#39;INACTIVE&#39; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Reason for change in status.
        /// </summary>
        /// <value>Reason for change in status.</value>
        [DataMember(Name="statusChangeReason", EmitDefaultValue=false)]
        public string StatusChangeReason { get; set; }

        /// <summary>
        /// ID of the merchant to whom this device is assigned.
        /// </summary>
        /// <value>ID of the merchant to whom this device is assigned.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// ID of the account to whom the device assigned.
        /// </summary>
        /// <value>ID of the account to whom the device assigned.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Timestamp in which the device was created.
        /// </summary>
        /// <value>Timestamp in which the device was created.</value>
        [DataMember(Name="terminalCreationDate", EmitDefaultValue=false)]
        public DateTime? TerminalCreationDate { get; set; }

        /// <summary>
        /// Timestamp in which the device was updated/modified.
        /// </summary>
        /// <value>Timestamp in which the device was updated/modified.</value>
        [DataMember(Name="terminalUpdationDate", EmitDefaultValue=false)]
        public DateTime? TerminalUpdationDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProcessorToTerminalMap
        /// </summary>
        [DataMember(Name="paymentProcessorToTerminalMap", EmitDefaultValue=false)]
        public InlineResponse2008PaymentProcessorToTerminalMap PaymentProcessorToTerminalMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2008Devices {\n");
            if (ReaderId != null) sb.Append("  ReaderId: ").Append(ReaderId).Append("\n");
            if (SerialNumber != null) sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            if (Model != null) sb.Append("  Model: ").Append(Model).Append("\n");
            if (Make != null) sb.Append("  Make: ").Append(Make).Append("\n");
            if (HardwareRevision != null) sb.Append("  HardwareRevision: ").Append(HardwareRevision).Append("\n");
            if (Status != null) sb.Append("  Status: ").Append(Status).Append("\n");
            if (StatusChangeReason != null) sb.Append("  StatusChangeReason: ").Append(StatusChangeReason).Append("\n");
            if (MerchantId != null) sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            if (AccountId != null) sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            if (TerminalCreationDate != null) sb.Append("  TerminalCreationDate: ").Append(TerminalCreationDate).Append("\n");
            if (TerminalUpdationDate != null) sb.Append("  TerminalUpdationDate: ").Append(TerminalUpdationDate).Append("\n");
            if (PaymentProcessorToTerminalMap != null) sb.Append("  PaymentProcessorToTerminalMap: ").Append(PaymentProcessorToTerminalMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2008Devices);
        }

        /// <summary>
        /// Returns true if InlineResponse2008Devices instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2008Devices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2008Devices other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReaderId == other.ReaderId ||
                    this.ReaderId != null &&
                    this.ReaderId.Equals(other.ReaderId)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Make == other.Make ||
                    this.Make != null &&
                    this.Make.Equals(other.Make)
                ) && 
                (
                    this.HardwareRevision == other.HardwareRevision ||
                    this.HardwareRevision != null &&
                    this.HardwareRevision.Equals(other.HardwareRevision)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusChangeReason == other.StatusChangeReason ||
                    this.StatusChangeReason != null &&
                    this.StatusChangeReason.Equals(other.StatusChangeReason)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.TerminalCreationDate == other.TerminalCreationDate ||
                    this.TerminalCreationDate != null &&
                    this.TerminalCreationDate.Equals(other.TerminalCreationDate)
                ) && 
                (
                    this.TerminalUpdationDate == other.TerminalUpdationDate ||
                    this.TerminalUpdationDate != null &&
                    this.TerminalUpdationDate.Equals(other.TerminalUpdationDate)
                ) && 
                (
                    this.PaymentProcessorToTerminalMap == other.PaymentProcessorToTerminalMap ||
                    this.PaymentProcessorToTerminalMap != null &&
                    this.PaymentProcessorToTerminalMap.Equals(other.PaymentProcessorToTerminalMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReaderId != null)
                    hash = hash * 59 + this.ReaderId.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Make != null)
                    hash = hash * 59 + this.Make.GetHashCode();
                if (this.HardwareRevision != null)
                    hash = hash * 59 + this.HardwareRevision.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusChangeReason != null)
                    hash = hash * 59 + this.StatusChangeReason.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.TerminalCreationDate != null)
                    hash = hash * 59 + this.TerminalCreationDate.GetHashCode();
                if (this.TerminalUpdationDate != null)
                    hash = hash * 59 + this.TerminalUpdationDate.GetHashCode();
                if (this.PaymentProcessorToTerminalMap != null)
                    hash = hash * 59 + this.PaymentProcessorToTerminalMap.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
