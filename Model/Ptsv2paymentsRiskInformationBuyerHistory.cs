/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsRiskInformationBuyerHistory
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsRiskInformationBuyerHistory :  IEquatable<Ptsv2paymentsRiskInformationBuyerHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsRiskInformationBuyerHistory" /> class.
        /// </summary>
        /// <param name="CustomerAccount">CustomerAccount.</param>
        /// <param name="AccountHistory">AccountHistory.</param>
        /// <param name="AccountPurchases">Number of purchases with this cardholder account during the previous six months. Recommended for Discover ProtectBuy. .</param>
        /// <param name="AddCardAttempts">Number of add card attempts in the last 24 hours. Recommended for Discover ProtectBuy. .</param>
        /// <param name="PriorSuspiciousActivity">Indicates whether the merchant experienced suspicious activity (including previous fraud) on the account. Recommended for Discover ProtectBuy. .</param>
        /// <param name="PaymentAccountHistory">This only applies for NEW_ACCOUNT and EXISTING_ACCOUNT in creationHistory. Possible values are: - PAYMENT_ACCOUNT_EXISTS - PAYMENT_ACCOUNT_ADDED_NOW .</param>
        /// <param name="PaymentAccountDate">Date applicable only for PAYMENT_ACCOUNT_EXISTS in paymentAccountHistory .</param>
        /// <param name="TransactionCountDay">Number of transaction (successful or abandoned) for this cardholder account within the last 24 hours. Recommended for Discover ProtectBuy. .</param>
        /// <param name="TransactionCountYear">Number of transaction (successful or abandoned) for this cardholder account within the last year. Recommended for Discover ProtectBuy. .</param>
        public Ptsv2paymentsRiskInformationBuyerHistory(Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount CustomerAccount = default(Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount), Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory AccountHistory = default(Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory), int? AccountPurchases = default(int?), int? AddCardAttempts = default(int?), bool? PriorSuspiciousActivity = default(bool?), string PaymentAccountHistory = default(string), int? PaymentAccountDate = default(int?), int? TransactionCountDay = default(int?), int? TransactionCountYear = default(int?))
        {
            this.CustomerAccount = CustomerAccount;
            this.AccountHistory = AccountHistory;
            this.AccountPurchases = AccountPurchases;
            this.AddCardAttempts = AddCardAttempts;
            this.PriorSuspiciousActivity = PriorSuspiciousActivity;
            this.PaymentAccountHistory = PaymentAccountHistory;
            this.PaymentAccountDate = PaymentAccountDate;
            this.TransactionCountDay = TransactionCountDay;
            this.TransactionCountYear = TransactionCountYear;
        }
        
        /// <summary>
        /// Gets or Sets CustomerAccount
        /// </summary>
        [DataMember(Name="customerAccount", EmitDefaultValue=false)]
        public Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount CustomerAccount { get; set; }

        /// <summary>
        /// Gets or Sets AccountHistory
        /// </summary>
        [DataMember(Name="accountHistory", EmitDefaultValue=false)]
        public Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory AccountHistory { get; set; }

        /// <summary>
        /// Number of purchases with this cardholder account during the previous six months. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Number of purchases with this cardholder account during the previous six months. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="accountPurchases", EmitDefaultValue=false)]
        public int? AccountPurchases { get; set; }

        /// <summary>
        /// Number of add card attempts in the last 24 hours. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Number of add card attempts in the last 24 hours. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="addCardAttempts", EmitDefaultValue=false)]
        public int? AddCardAttempts { get; set; }

        /// <summary>
        /// Indicates whether the merchant experienced suspicious activity (including previous fraud) on the account. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates whether the merchant experienced suspicious activity (including previous fraud) on the account. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="priorSuspiciousActivity", EmitDefaultValue=false)]
        public bool? PriorSuspiciousActivity { get; set; }

        /// <summary>
        /// This only applies for NEW_ACCOUNT and EXISTING_ACCOUNT in creationHistory. Possible values are: - PAYMENT_ACCOUNT_EXISTS - PAYMENT_ACCOUNT_ADDED_NOW 
        /// </summary>
        /// <value>This only applies for NEW_ACCOUNT and EXISTING_ACCOUNT in creationHistory. Possible values are: - PAYMENT_ACCOUNT_EXISTS - PAYMENT_ACCOUNT_ADDED_NOW </value>
        [DataMember(Name="paymentAccountHistory", EmitDefaultValue=false)]
        public string PaymentAccountHistory { get; set; }

        /// <summary>
        /// Date applicable only for PAYMENT_ACCOUNT_EXISTS in paymentAccountHistory 
        /// </summary>
        /// <value>Date applicable only for PAYMENT_ACCOUNT_EXISTS in paymentAccountHistory </value>
        [DataMember(Name="paymentAccountDate", EmitDefaultValue=false)]
        public int? PaymentAccountDate { get; set; }

        /// <summary>
        /// Number of transaction (successful or abandoned) for this cardholder account within the last 24 hours. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Number of transaction (successful or abandoned) for this cardholder account within the last 24 hours. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="transactionCountDay", EmitDefaultValue=false)]
        public int? TransactionCountDay { get; set; }

        /// <summary>
        /// Number of transaction (successful or abandoned) for this cardholder account within the last year. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Number of transaction (successful or abandoned) for this cardholder account within the last year. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="transactionCountYear", EmitDefaultValue=false)]
        public int? TransactionCountYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsRiskInformationBuyerHistory {\n");
            if (CustomerAccount != null) sb.Append("  CustomerAccount: ").Append(CustomerAccount).Append("\n");
            if (AccountHistory != null) sb.Append("  AccountHistory: ").Append(AccountHistory).Append("\n");
            if (AccountPurchases != null) sb.Append("  AccountPurchases: ").Append(AccountPurchases).Append("\n");
            if (AddCardAttempts != null) sb.Append("  AddCardAttempts: ").Append(AddCardAttempts).Append("\n");
            if (PriorSuspiciousActivity != null) sb.Append("  PriorSuspiciousActivity: ").Append(PriorSuspiciousActivity).Append("\n");
            if (PaymentAccountHistory != null) sb.Append("  PaymentAccountHistory: ").Append(PaymentAccountHistory).Append("\n");
            if (PaymentAccountDate != null) sb.Append("  PaymentAccountDate: ").Append(PaymentAccountDate).Append("\n");
            if (TransactionCountDay != null) sb.Append("  TransactionCountDay: ").Append(TransactionCountDay).Append("\n");
            if (TransactionCountYear != null) sb.Append("  TransactionCountYear: ").Append(TransactionCountYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsRiskInformationBuyerHistory);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsRiskInformationBuyerHistory instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsRiskInformationBuyerHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsRiskInformationBuyerHistory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomerAccount == other.CustomerAccount ||
                    this.CustomerAccount != null &&
                    this.CustomerAccount.Equals(other.CustomerAccount)
                ) && 
                (
                    this.AccountHistory == other.AccountHistory ||
                    this.AccountHistory != null &&
                    this.AccountHistory.Equals(other.AccountHistory)
                ) && 
                (
                    this.AccountPurchases == other.AccountPurchases ||
                    this.AccountPurchases != null &&
                    this.AccountPurchases.Equals(other.AccountPurchases)
                ) && 
                (
                    this.AddCardAttempts == other.AddCardAttempts ||
                    this.AddCardAttempts != null &&
                    this.AddCardAttempts.Equals(other.AddCardAttempts)
                ) && 
                (
                    this.PriorSuspiciousActivity == other.PriorSuspiciousActivity ||
                    this.PriorSuspiciousActivity != null &&
                    this.PriorSuspiciousActivity.Equals(other.PriorSuspiciousActivity)
                ) && 
                (
                    this.PaymentAccountHistory == other.PaymentAccountHistory ||
                    this.PaymentAccountHistory != null &&
                    this.PaymentAccountHistory.Equals(other.PaymentAccountHistory)
                ) && 
                (
                    this.PaymentAccountDate == other.PaymentAccountDate ||
                    this.PaymentAccountDate != null &&
                    this.PaymentAccountDate.Equals(other.PaymentAccountDate)
                ) && 
                (
                    this.TransactionCountDay == other.TransactionCountDay ||
                    this.TransactionCountDay != null &&
                    this.TransactionCountDay.Equals(other.TransactionCountDay)
                ) && 
                (
                    this.TransactionCountYear == other.TransactionCountYear ||
                    this.TransactionCountYear != null &&
                    this.TransactionCountYear.Equals(other.TransactionCountYear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomerAccount != null)
                    hash = hash * 59 + this.CustomerAccount.GetHashCode();
                if (this.AccountHistory != null)
                    hash = hash * 59 + this.AccountHistory.GetHashCode();
                if (this.AccountPurchases != null)
                    hash = hash * 59 + this.AccountPurchases.GetHashCode();
                if (this.AddCardAttempts != null)
                    hash = hash * 59 + this.AddCardAttempts.GetHashCode();
                if (this.PriorSuspiciousActivity != null)
                    hash = hash * 59 + this.PriorSuspiciousActivity.GetHashCode();
                if (this.PaymentAccountHistory != null)
                    hash = hash * 59 + this.PaymentAccountHistory.GetHashCode();
                if (this.PaymentAccountDate != null)
                    hash = hash * 59 + this.PaymentAccountDate.GetHashCode();
                if (this.TransactionCountDay != null)
                    hash = hash * 59 + this.TransactionCountDay.GetHashCode();
                if (this.TransactionCountYear != null)
                    hash = hash * 59 + this.TransactionCountYear.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
