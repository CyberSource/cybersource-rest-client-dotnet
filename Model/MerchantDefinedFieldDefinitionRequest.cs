/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// MerchantDefinedFieldDefinitionRequest
    /// </summary>
    [DataContract]
    public partial class MerchantDefinedFieldDefinitionRequest :  IEquatable<MerchantDefinedFieldDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantDefinedFieldDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantDefinedFieldDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantDefinedFieldDefinitionRequest" /> class.
        /// </summary>
        /// <param name="FieldType">Possible values: - text - select (required).</param>
        /// <param name="Label">Label (required).</param>
        /// <param name="CustomerVisible">CustomerVisible (default to false).</param>
        /// <param name="TextMinLength">Should be used only if fieldType &#x3D; \&quot;text\&quot;.</param>
        /// <param name="TextMaxLength">Should be used only if fieldType &#x3D; \&quot;text\&quot;.</param>
        /// <param name="TextDefaultValue">Should be used only if fieldType &#x3D; \&quot;text\&quot;.</param>
        /// <param name="PossibleValues">Should be mandatory and used only if fieldType &#x3D; \&quot;select\&quot;.</param>
        /// <param name="ReadOnly">ReadOnly (default to false).</param>
        /// <param name="MerchantDefinedDataIndex">MerchantDefinedDataIndex (required).</param>
        public MerchantDefinedFieldDefinitionRequest(string FieldType = default(string), string Label = default(string), bool? CustomerVisible = false, int? TextMinLength = default(int?), int? TextMaxLength = default(int?), string TextDefaultValue = default(string), string PossibleValues = default(string), bool? ReadOnly = false, int? MerchantDefinedDataIndex = default(int?))
        {
            this.FieldType = FieldType;
            this.Label = Label;
            // use default value if no "CustomerVisible" provided
            if (CustomerVisible == null)
            {
                this.CustomerVisible = false;
            }
            else
            {
                this.CustomerVisible = CustomerVisible;
            }
            this.TextMinLength = TextMinLength;
            this.TextMaxLength = TextMaxLength;
            this.TextDefaultValue = TextDefaultValue;
            this.PossibleValues = PossibleValues;
            // use default value if no "ReadOnly" provided
            if (ReadOnly == null)
            {
                this.ReadOnly = false;
            }
            else
            {
                this.ReadOnly = ReadOnly;
            }
            this.MerchantDefinedDataIndex = MerchantDefinedDataIndex;
        }
        
        /// <summary>
        /// Possible values: - text - select
        /// </summary>
        /// <value>Possible values: - text - select</value>
        [DataMember(Name="fieldType", EmitDefaultValue=false)]
        public string FieldType { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets CustomerVisible
        /// </summary>
        [DataMember(Name="customerVisible", EmitDefaultValue=false)]
        public bool? CustomerVisible { get; set; }

        /// <summary>
        /// Should be used only if fieldType &#x3D; \&quot;text\&quot;
        /// </summary>
        /// <value>Should be used only if fieldType &#x3D; \&quot;text\&quot;</value>
        [DataMember(Name="textMinLength", EmitDefaultValue=false)]
        public int? TextMinLength { get; set; }

        /// <summary>
        /// Should be used only if fieldType &#x3D; \&quot;text\&quot;
        /// </summary>
        /// <value>Should be used only if fieldType &#x3D; \&quot;text\&quot;</value>
        [DataMember(Name="textMaxLength", EmitDefaultValue=false)]
        public int? TextMaxLength { get; set; }

        /// <summary>
        /// Should be used only if fieldType &#x3D; \&quot;text\&quot;
        /// </summary>
        /// <value>Should be used only if fieldType &#x3D; \&quot;text\&quot;</value>
        [DataMember(Name="textDefaultValue", EmitDefaultValue=false)]
        public string TextDefaultValue { get; set; }

        /// <summary>
        /// Should be mandatory and used only if fieldType &#x3D; \&quot;select\&quot;
        /// </summary>
        /// <value>Should be mandatory and used only if fieldType &#x3D; \&quot;select\&quot;</value>
        [DataMember(Name="possibleValues", EmitDefaultValue=false)]
        public string PossibleValues { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets MerchantDefinedDataIndex
        /// </summary>
        [DataMember(Name="merchantDefinedDataIndex", EmitDefaultValue=false)]
        public int? MerchantDefinedDataIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantDefinedFieldDefinitionRequest {\n");
            if (FieldType != null) sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            if (Label != null) sb.Append("  Label: ").Append(Label).Append("\n");
            if (CustomerVisible != null) sb.Append("  CustomerVisible: ").Append(CustomerVisible).Append("\n");
            if (TextMinLength != null) sb.Append("  TextMinLength: ").Append(TextMinLength).Append("\n");
            if (TextMaxLength != null) sb.Append("  TextMaxLength: ").Append(TextMaxLength).Append("\n");
            if (TextDefaultValue != null) sb.Append("  TextDefaultValue: ").Append(TextDefaultValue).Append("\n");
            if (PossibleValues != null) sb.Append("  PossibleValues: ").Append(PossibleValues).Append("\n");
            if (ReadOnly != null) sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            if (MerchantDefinedDataIndex != null) sb.Append("  MerchantDefinedDataIndex: ").Append(MerchantDefinedDataIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MerchantDefinedFieldDefinitionRequest);
        }

        /// <summary>
        /// Returns true if MerchantDefinedFieldDefinitionRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of MerchantDefinedFieldDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantDefinedFieldDefinitionRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FieldType == other.FieldType ||
                    this.FieldType != null &&
                    this.FieldType.Equals(other.FieldType)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.CustomerVisible == other.CustomerVisible ||
                    this.CustomerVisible != null &&
                    this.CustomerVisible.Equals(other.CustomerVisible)
                ) && 
                (
                    this.TextMinLength == other.TextMinLength ||
                    this.TextMinLength != null &&
                    this.TextMinLength.Equals(other.TextMinLength)
                ) && 
                (
                    this.TextMaxLength == other.TextMaxLength ||
                    this.TextMaxLength != null &&
                    this.TextMaxLength.Equals(other.TextMaxLength)
                ) && 
                (
                    this.TextDefaultValue == other.TextDefaultValue ||
                    this.TextDefaultValue != null &&
                    this.TextDefaultValue.Equals(other.TextDefaultValue)
                ) && 
                (
                    this.PossibleValues == other.PossibleValues ||
                    this.PossibleValues != null &&
                    this.PossibleValues.Equals(other.PossibleValues)
                ) && 
                (
                    this.ReadOnly == other.ReadOnly ||
                    this.ReadOnly != null &&
                    this.ReadOnly.Equals(other.ReadOnly)
                ) && 
                (
                    this.MerchantDefinedDataIndex == other.MerchantDefinedDataIndex ||
                    this.MerchantDefinedDataIndex != null &&
                    this.MerchantDefinedDataIndex.Equals(other.MerchantDefinedDataIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FieldType != null)
                    hash = hash * 59 + this.FieldType.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.CustomerVisible != null)
                    hash = hash * 59 + this.CustomerVisible.GetHashCode();
                if (this.TextMinLength != null)
                    hash = hash * 59 + this.TextMinLength.GetHashCode();
                if (this.TextMaxLength != null)
                    hash = hash * 59 + this.TextMaxLength.GetHashCode();
                if (this.TextDefaultValue != null)
                    hash = hash * 59 + this.TextDefaultValue.GetHashCode();
                if (this.PossibleValues != null)
                    hash = hash * 59 + this.PossibleValues.GetHashCode();
                if (this.ReadOnly != null)
                    hash = hash * 59 + this.ReadOnly.GetHashCode();
                if (this.MerchantDefinedDataIndex != null)
                    hash = hash * 59 + this.MerchantDefinedDataIndex.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
