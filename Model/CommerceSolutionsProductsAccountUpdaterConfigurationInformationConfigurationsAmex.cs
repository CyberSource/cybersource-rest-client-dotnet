/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex
    /// </summary>
    [DataContract]
    public partial class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex :  IEquatable<CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex" /> class.
        /// </summary>
        /// <param name="Mode">Type of mode. Valid values are &#x60;tokenApi&#x60; or &#x60;dailyHarvest&#x60;..</param>
        /// <param name="SeNumber">SeNumber.</param>
        /// <param name="SubscriberId">SubscriberId.</param>
        /// <param name="Active">Active.</param>
        public CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex(string Mode = default(string), string SeNumber = default(string), string SubscriberId = default(string), bool? Active = default(bool?))
        {
            this.Mode = Mode;
            this.SeNumber = SeNumber;
            this.SubscriberId = SubscriberId;
            this.Active = Active;
        }
        
        /// <summary>
        /// Type of mode. Valid values are &#x60;tokenApi&#x60; or &#x60;dailyHarvest&#x60;.
        /// </summary>
        /// <value>Type of mode. Valid values are &#x60;tokenApi&#x60; or &#x60;dailyHarvest&#x60;.</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets SeNumber
        /// </summary>
        [DataMember(Name="seNumber", EmitDefaultValue=false)]
        public string SeNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberId
        /// </summary>
        [DataMember(Name="subscriberId", EmitDefaultValue=false)]
        public string SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SeNumber: ").Append(SeNumber).Append("\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex);
        }

        /// <summary>
        /// Returns true if CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex instances are equal
        /// </summary>
        /// <param name="other">Instance of CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.SeNumber == other.SeNumber ||
                    this.SeNumber != null &&
                    this.SeNumber.Equals(other.SeNumber)
                ) && 
                (
                    this.SubscriberId == other.SubscriberId ||
                    this.SubscriberId != null &&
                    this.SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.SeNumber != null)
                    hash = hash * 59 + this.SeNumber.GetHashCode();
                if (this.SubscriberId != null)
                    hash = hash * 59 + this.SubscriberId.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
