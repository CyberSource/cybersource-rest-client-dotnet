/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PushFunds201ResponseProcessorInformation
    /// </summary>
    [DataContract]
    public partial class PushFunds201ResponseProcessorInformation :  IEquatable<PushFunds201ResponseProcessorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushFunds201ResponseProcessorInformation" /> class.
        /// </summary>
        /// <param name="TransactionId">Network transaction identifier (TID). This value can be used to identify a specific transaction when you are discussing the transaction with your processor. .</param>
        /// <param name="ResponseCode">Transaction status from the processor. .</param>
        /// <param name="SystemTraceAuditNumber">This field is returned by authorization and incremental authorization services. System trace number that must be printed on the customer&#39;s receipt. .</param>
        /// <param name="RetrievalReferenceNumber">This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Recommended format: ydddhhnnnnnn  Positions 1-4: The yddd equivalent of the date, where y &#x3D; 0-9 and ddd &#x3D; 001 – 366. Positions 5-12: A unique identification number generated by the merchant or assigned by Cybersource. .</param>
        /// <param name="ActionCode">The results of the transaction request  Note: The VisaNet Response Code for the transaction .</param>
        /// <param name="ApprovalCode">Issuer-generated approval code for the transaction. .</param>
        /// <param name="FeeProgramIndicator">This field identifies the interchange fee program applicable to each financial transaction. Fee program indicator (FPI) values correspond to the fee descriptor and rate for each existing fee program. .</param>
        /// <param name="Name">Name of the processor. .</param>
        /// <param name="Routing">Routing.</param>
        /// <param name="Settlement">Settlement.</param>
        public PushFunds201ResponseProcessorInformation(int? TransactionId = default(int?), string ResponseCode = default(string), string SystemTraceAuditNumber = default(string), string RetrievalReferenceNumber = default(string), string ActionCode = default(string), string ApprovalCode = default(string), string FeeProgramIndicator = default(string), string Name = default(string), PushFunds201ResponseProcessorInformationRouting Routing = default(PushFunds201ResponseProcessorInformationRouting), PushFunds201ResponseProcessorInformationSettlement Settlement = default(PushFunds201ResponseProcessorInformationSettlement))
        {
            this.TransactionId = TransactionId;
            this.ResponseCode = ResponseCode;
            this.SystemTraceAuditNumber = SystemTraceAuditNumber;
            this.RetrievalReferenceNumber = RetrievalReferenceNumber;
            this.ActionCode = ActionCode;
            this.ApprovalCode = ApprovalCode;
            this.FeeProgramIndicator = FeeProgramIndicator;
            this.Name = Name;
            this.Routing = Routing;
            this.Settlement = Settlement;
        }
        
        /// <summary>
        /// Network transaction identifier (TID). This value can be used to identify a specific transaction when you are discussing the transaction with your processor. 
        /// </summary>
        /// <value>Network transaction identifier (TID). This value can be used to identify a specific transaction when you are discussing the transaction with your processor. </value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public int? TransactionId { get; set; }

        /// <summary>
        /// Transaction status from the processor. 
        /// </summary>
        /// <value>Transaction status from the processor. </value>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// This field is returned by authorization and incremental authorization services. System trace number that must be printed on the customer&#39;s receipt. 
        /// </summary>
        /// <value>This field is returned by authorization and incremental authorization services. System trace number that must be printed on the customer&#39;s receipt. </value>
        [DataMember(Name="systemTraceAuditNumber", EmitDefaultValue=false)]
        public string SystemTraceAuditNumber { get; set; }

        /// <summary>
        /// This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Recommended format: ydddhhnnnnnn  Positions 1-4: The yddd equivalent of the date, where y &#x3D; 0-9 and ddd &#x3D; 001 – 366. Positions 5-12: A unique identification number generated by the merchant or assigned by Cybersource. 
        /// </summary>
        /// <value>This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Recommended format: ydddhhnnnnnn  Positions 1-4: The yddd equivalent of the date, where y &#x3D; 0-9 and ddd &#x3D; 001 – 366. Positions 5-12: A unique identification number generated by the merchant or assigned by Cybersource. </value>
        [DataMember(Name="retrievalReferenceNumber", EmitDefaultValue=false)]
        public string RetrievalReferenceNumber { get; set; }

        /// <summary>
        /// The results of the transaction request  Note: The VisaNet Response Code for the transaction 
        /// </summary>
        /// <value>The results of the transaction request  Note: The VisaNet Response Code for the transaction </value>
        [DataMember(Name="actionCode", EmitDefaultValue=false)]
        public string ActionCode { get; set; }

        /// <summary>
        /// Issuer-generated approval code for the transaction. 
        /// </summary>
        /// <value>Issuer-generated approval code for the transaction. </value>
        [DataMember(Name="approvalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// This field identifies the interchange fee program applicable to each financial transaction. Fee program indicator (FPI) values correspond to the fee descriptor and rate for each existing fee program. 
        /// </summary>
        /// <value>This field identifies the interchange fee program applicable to each financial transaction. Fee program indicator (FPI) values correspond to the fee descriptor and rate for each existing fee program. </value>
        [DataMember(Name="feeProgramIndicator", EmitDefaultValue=false)]
        public string FeeProgramIndicator { get; set; }

        /// <summary>
        /// Name of the processor. 
        /// </summary>
        /// <value>Name of the processor. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Routing
        /// </summary>
        [DataMember(Name="routing", EmitDefaultValue=false)]
        public PushFunds201ResponseProcessorInformationRouting Routing { get; set; }

        /// <summary>
        /// Gets or Sets Settlement
        /// </summary>
        [DataMember(Name="settlement", EmitDefaultValue=false)]
        public PushFunds201ResponseProcessorInformationSettlement Settlement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushFunds201ResponseProcessorInformation {\n");
            if (TransactionId != null) sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            if (ResponseCode != null) sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            if (SystemTraceAuditNumber != null) sb.Append("  SystemTraceAuditNumber: ").Append(SystemTraceAuditNumber).Append("\n");
            if (RetrievalReferenceNumber != null) sb.Append("  RetrievalReferenceNumber: ").Append(RetrievalReferenceNumber).Append("\n");
            if (ActionCode != null) sb.Append("  ActionCode: ").Append(ActionCode).Append("\n");
            if (ApprovalCode != null) sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            if (FeeProgramIndicator != null) sb.Append("  FeeProgramIndicator: ").Append(FeeProgramIndicator).Append("\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (Routing != null) sb.Append("  Routing: ").Append(Routing).Append("\n");
            if (Settlement != null) sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PushFunds201ResponseProcessorInformation);
        }

        /// <summary>
        /// Returns true if PushFunds201ResponseProcessorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PushFunds201ResponseProcessorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushFunds201ResponseProcessorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.ResponseCode == other.ResponseCode ||
                    this.ResponseCode != null &&
                    this.ResponseCode.Equals(other.ResponseCode)
                ) && 
                (
                    this.SystemTraceAuditNumber == other.SystemTraceAuditNumber ||
                    this.SystemTraceAuditNumber != null &&
                    this.SystemTraceAuditNumber.Equals(other.SystemTraceAuditNumber)
                ) && 
                (
                    this.RetrievalReferenceNumber == other.RetrievalReferenceNumber ||
                    this.RetrievalReferenceNumber != null &&
                    this.RetrievalReferenceNumber.Equals(other.RetrievalReferenceNumber)
                ) && 
                (
                    this.ActionCode == other.ActionCode ||
                    this.ActionCode != null &&
                    this.ActionCode.Equals(other.ActionCode)
                ) && 
                (
                    this.ApprovalCode == other.ApprovalCode ||
                    this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    this.FeeProgramIndicator == other.FeeProgramIndicator ||
                    this.FeeProgramIndicator != null &&
                    this.FeeProgramIndicator.Equals(other.FeeProgramIndicator)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Routing == other.Routing ||
                    this.Routing != null &&
                    this.Routing.Equals(other.Routing)
                ) && 
                (
                    this.Settlement == other.Settlement ||
                    this.Settlement != null &&
                    this.Settlement.Equals(other.Settlement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.ResponseCode != null)
                    hash = hash * 59 + this.ResponseCode.GetHashCode();
                if (this.SystemTraceAuditNumber != null)
                    hash = hash * 59 + this.SystemTraceAuditNumber.GetHashCode();
                if (this.RetrievalReferenceNumber != null)
                    hash = hash * 59 + this.RetrievalReferenceNumber.GetHashCode();
                if (this.ActionCode != null)
                    hash = hash * 59 + this.ActionCode.GetHashCode();
                if (this.ApprovalCode != null)
                    hash = hash * 59 + this.ApprovalCode.GetHashCode();
                if (this.FeeProgramIndicator != null)
                    hash = hash * 59 + this.FeeProgramIndicator.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Routing != null)
                    hash = hash * 59 + this.Routing.GetHashCode();
                if (this.Settlement != null)
                    hash = hash * 59 + this.Settlement.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
