/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Body
    /// </summary>
    [DataContract]
    public partial class Body :  IEquatable<Body>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Body() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body" /> class.
        /// </summary>
        /// <param name="Type">Valid Values:   * oneOff   * amexRegistration  (default to &quot;oneOff&quot;).</param>
        /// <param name="Included">Included (required).</param>
        /// <param name="MerchantReference">Reference used by merchant to identify batch..</param>
        /// <param name="NotificationEmail">Email used to notify the batch status. (required).</param>
        public Body(string Type = "oneOff", Accountupdaterv1batchesIncluded Included = default(Accountupdaterv1batchesIncluded), string MerchantReference = default(string), string NotificationEmail = default(string))
        {
            // to ensure "Included" is required (not null)
            if (Included == null)
            {
                throw new InvalidDataException("Included is a required property for Body and cannot be null");
            }
            else
            {
                this.Included = Included;
            }
            // to ensure "NotificationEmail" is required (not null)
            if (NotificationEmail == null)
            {
                throw new InvalidDataException("NotificationEmail is a required property for Body and cannot be null");
            }
            else
            {
                this.NotificationEmail = NotificationEmail;
            }
            // use default value if no "Type" provided
            if (Type == null)
            {
                this.Type = "oneOff";
            }
            else
            {
                this.Type = Type;
            }
            this.MerchantReference = MerchantReference;
        }
        
        /// <summary>
        /// Valid Values:   * oneOff   * amexRegistration 
        /// </summary>
        /// <value>Valid Values:   * oneOff   * amexRegistration </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Included
        /// </summary>
        [DataMember(Name="included", EmitDefaultValue=false)]
        public Accountupdaterv1batchesIncluded Included { get; set; }

        /// <summary>
        /// Reference used by merchant to identify batch.
        /// </summary>
        /// <value>Reference used by merchant to identify batch.</value>
        [DataMember(Name="merchantReference", EmitDefaultValue=false)]
        public string MerchantReference { get; set; }

        /// <summary>
        /// Email used to notify the batch status.
        /// </summary>
        /// <value>Email used to notify the batch status.</value>
        [DataMember(Name="notificationEmail", EmitDefaultValue=false)]
        public string NotificationEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Included: ").Append(Included).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  NotificationEmail: ").Append(NotificationEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Body);
        }

        /// <summary>
        /// Returns true if Body instances are equal
        /// </summary>
        /// <param name="other">Instance of Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Included == other.Included ||
                    this.Included != null &&
                    this.Included.Equals(other.Included)
                ) && 
                (
                    this.MerchantReference == other.MerchantReference ||
                    this.MerchantReference != null &&
                    this.MerchantReference.Equals(other.MerchantReference)
                ) && 
                (
                    this.NotificationEmail == other.NotificationEmail ||
                    this.NotificationEmail != null &&
                    this.NotificationEmail.Equals(other.NotificationEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Included != null)
                    hash = hash * 59 + this.Included.GetHashCode();
                if (this.MerchantReference != null)
                    hash = hash * 59 + this.MerchantReference.GetHashCode();
                if (this.NotificationEmail != null)
                    hash = hash * 59 + this.NotificationEmail.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
