/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1decisionsDeviceInformation
    /// </summary>
    [DataContract]
    public partial class Riskv1decisionsDeviceInformation :  IEquatable<Riskv1decisionsDeviceInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1decisionsDeviceInformation" /> class.
        /// </summary>
        /// <param name="CookiesAccepted">Boolean that indicates whether the customer’s browser accepts cookies. This field can contain one of the following values:   - &#x60;yes&#x60;: The customer’s browser accepts cookies.   - &#x60;no&#x60;: The customer’s browser does not accept cookies. .</param>
        /// <param name="IpAddress">Customer’s IP address, such as 10.1.27.63, reported by your Web server via socket information. .</param>
        /// <param name="HostName">Host name reported by the customer’s browser to your Web server identified via the HTTP header..</param>
        /// <param name="FingerprintSessionId">Contains the session ID that you send to Decision Manager to obtain the device fingerprint information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and underscore (_). However, do not use the same uppercase and lowercase letters to indicate different session IDs. The session ID must be unique for each merchant ID. You can use any string that you are already generating, such as an order number or web session ID.The session ID must be unique for each page load, regardless of an individual’s web session ID. If the same user navigates to a profiled page and is assigned a web session, navigates away from the profiled page, then navigates back to the profiled page, the generated session ID should be different and unique. An example of an ideal session ID would be a web session ID plus the timestamp. This measure ensures that a unique ID is generated every time the page is loaded, even if it is the same user reloading the page. .</param>
        /// <param name="HttpBrowserEmail">Email address set in the customer’s browser, which may differ from customer email. .</param>
        /// <param name="UserAgent">Customer’s browser as identified from the HTTP header data. For example, Mozilla is the value that identifies the Netscape browser. .</param>
        public Riskv1decisionsDeviceInformation(string CookiesAccepted = default(string), string IpAddress = default(string), string HostName = default(string), string FingerprintSessionId = default(string), string HttpBrowserEmail = default(string), string UserAgent = default(string))
        {
            this.CookiesAccepted = CookiesAccepted;
            this.IpAddress = IpAddress;
            this.HostName = HostName;
            this.FingerprintSessionId = FingerprintSessionId;
            this.HttpBrowserEmail = HttpBrowserEmail;
            this.UserAgent = UserAgent;
        }
        
        /// <summary>
        /// Boolean that indicates whether the customer’s browser accepts cookies. This field can contain one of the following values:   - &#x60;yes&#x60;: The customer’s browser accepts cookies.   - &#x60;no&#x60;: The customer’s browser does not accept cookies. 
        /// </summary>
        /// <value>Boolean that indicates whether the customer’s browser accepts cookies. This field can contain one of the following values:   - &#x60;yes&#x60;: The customer’s browser accepts cookies.   - &#x60;no&#x60;: The customer’s browser does not accept cookies. </value>
        [DataMember(Name="cookiesAccepted", EmitDefaultValue=false)]
        public string CookiesAccepted { get; set; }

        /// <summary>
        /// Customer’s IP address, such as 10.1.27.63, reported by your Web server via socket information. 
        /// </summary>
        /// <value>Customer’s IP address, such as 10.1.27.63, reported by your Web server via socket information. </value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Host name reported by the customer’s browser to your Web server identified via the HTTP header.
        /// </summary>
        /// <value>Host name reported by the customer’s browser to your Web server identified via the HTTP header.</value>
        [DataMember(Name="hostName", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Contains the session ID that you send to Decision Manager to obtain the device fingerprint information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and underscore (_). However, do not use the same uppercase and lowercase letters to indicate different session IDs. The session ID must be unique for each merchant ID. You can use any string that you are already generating, such as an order number or web session ID.The session ID must be unique for each page load, regardless of an individual’s web session ID. If the same user navigates to a profiled page and is assigned a web session, navigates away from the profiled page, then navigates back to the profiled page, the generated session ID should be different and unique. An example of an ideal session ID would be a web session ID plus the timestamp. This measure ensures that a unique ID is generated every time the page is loaded, even if it is the same user reloading the page. 
        /// </summary>
        /// <value>Contains the session ID that you send to Decision Manager to obtain the device fingerprint information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and underscore (_). However, do not use the same uppercase and lowercase letters to indicate different session IDs. The session ID must be unique for each merchant ID. You can use any string that you are already generating, such as an order number or web session ID.The session ID must be unique for each page load, regardless of an individual’s web session ID. If the same user navigates to a profiled page and is assigned a web session, navigates away from the profiled page, then navigates back to the profiled page, the generated session ID should be different and unique. An example of an ideal session ID would be a web session ID plus the timestamp. This measure ensures that a unique ID is generated every time the page is loaded, even if it is the same user reloading the page. </value>
        [DataMember(Name="fingerprintSessionId", EmitDefaultValue=false)]
        public string FingerprintSessionId { get; set; }

        /// <summary>
        /// Email address set in the customer’s browser, which may differ from customer email. 
        /// </summary>
        /// <value>Email address set in the customer’s browser, which may differ from customer email. </value>
        [DataMember(Name="httpBrowserEmail", EmitDefaultValue=false)]
        public string HttpBrowserEmail { get; set; }

        /// <summary>
        /// Customer’s browser as identified from the HTTP header data. For example, Mozilla is the value that identifies the Netscape browser. 
        /// </summary>
        /// <value>Customer’s browser as identified from the HTTP header data. For example, Mozilla is the value that identifies the Netscape browser. </value>
        [DataMember(Name="userAgent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1decisionsDeviceInformation {\n");
            sb.Append("  CookiesAccepted: ").Append(CookiesAccepted).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  FingerprintSessionId: ").Append(FingerprintSessionId).Append("\n");
            sb.Append("  HttpBrowserEmail: ").Append(HttpBrowserEmail).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1decisionsDeviceInformation);
        }

        /// <summary>
        /// Returns true if Riskv1decisionsDeviceInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1decisionsDeviceInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1decisionsDeviceInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CookiesAccepted == other.CookiesAccepted ||
                    this.CookiesAccepted != null &&
                    this.CookiesAccepted.Equals(other.CookiesAccepted)
                ) && 
                (
                    this.IpAddress == other.IpAddress ||
                    this.IpAddress != null &&
                    this.IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    this.HostName == other.HostName ||
                    this.HostName != null &&
                    this.HostName.Equals(other.HostName)
                ) && 
                (
                    this.FingerprintSessionId == other.FingerprintSessionId ||
                    this.FingerprintSessionId != null &&
                    this.FingerprintSessionId.Equals(other.FingerprintSessionId)
                ) && 
                (
                    this.HttpBrowserEmail == other.HttpBrowserEmail ||
                    this.HttpBrowserEmail != null &&
                    this.HttpBrowserEmail.Equals(other.HttpBrowserEmail)
                ) && 
                (
                    this.UserAgent == other.UserAgent ||
                    this.UserAgent != null &&
                    this.UserAgent.Equals(other.UserAgent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CookiesAccepted != null)
                    hash = hash * 59 + this.CookiesAccepted.GetHashCode();
                if (this.IpAddress != null)
                    hash = hash * 59 + this.IpAddress.GetHashCode();
                if (this.HostName != null)
                    hash = hash * 59 + this.HostName.GetHashCode();
                if (this.FingerprintSessionId != null)
                    hash = hash * 59 + this.FingerprintSessionId.GetHashCode();
                if (this.HttpBrowserEmail != null)
                    hash = hash * 59 + this.HttpBrowserEmail.GetHashCode();
                if (this.UserAgent != null)
                    hash = hash * 59 + this.UserAgent.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IpAddress (string) maxLength
            if(this.IpAddress != null && this.IpAddress.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IpAddress, length must be less than 15.", new [] { "IpAddress" });
            }

            // HostName (string) maxLength
            if(this.HostName != null && this.HostName.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HostName, length must be less than 60.", new [] { "HostName" });
            }

            // UserAgent (string) maxLength
            if(this.UserAgent != null && this.UserAgent.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserAgent, length must be less than 40.", new [] { "UserAgent" });
            }

            yield break;
        }
    }

}
