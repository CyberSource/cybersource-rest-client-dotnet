/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2005EmbeddedTotals
    /// </summary>
    [DataContract]
    public partial class InlineResponse2005EmbeddedTotals :  IEquatable<InlineResponse2005EmbeddedTotals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005EmbeddedTotals" /> class.
        /// </summary>
        /// <param name="AcceptedRecords">AcceptedRecords.</param>
        /// <param name="RejectedRecords">RejectedRecords.</param>
        /// <param name="UpdatedRecords">UpdatedRecords.</param>
        /// <param name="CaResponses">CaResponses.</param>
        /// <param name="CaResponsesOmitted">CaResponsesOmitted.</param>
        public InlineResponse2005EmbeddedTotals(int? AcceptedRecords = default(int?), int? RejectedRecords = default(int?), int? UpdatedRecords = default(int?), int? CaResponses = default(int?), int? CaResponsesOmitted = default(int?))
        {
            this.AcceptedRecords = AcceptedRecords;
            this.RejectedRecords = RejectedRecords;
            this.UpdatedRecords = UpdatedRecords;
            this.CaResponses = CaResponses;
            this.CaResponsesOmitted = CaResponsesOmitted;
        }
        
        /// <summary>
        /// Gets or Sets AcceptedRecords
        /// </summary>
        [DataMember(Name="acceptedRecords", EmitDefaultValue=false)]
        public int? AcceptedRecords { get; set; }

        /// <summary>
        /// Gets or Sets RejectedRecords
        /// </summary>
        [DataMember(Name="rejectedRecords", EmitDefaultValue=false)]
        public int? RejectedRecords { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedRecords
        /// </summary>
        [DataMember(Name="updatedRecords", EmitDefaultValue=false)]
        public int? UpdatedRecords { get; set; }

        /// <summary>
        /// Gets or Sets CaResponses
        /// </summary>
        [DataMember(Name="caResponses", EmitDefaultValue=false)]
        public int? CaResponses { get; set; }

        /// <summary>
        /// Gets or Sets CaResponsesOmitted
        /// </summary>
        [DataMember(Name="caResponsesOmitted", EmitDefaultValue=false)]
        public int? CaResponsesOmitted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2005EmbeddedTotals {\n");
            sb.Append("  AcceptedRecords: ").Append(AcceptedRecords).Append("\n");
            sb.Append("  RejectedRecords: ").Append(RejectedRecords).Append("\n");
            sb.Append("  UpdatedRecords: ").Append(UpdatedRecords).Append("\n");
            sb.Append("  CaResponses: ").Append(CaResponses).Append("\n");
            sb.Append("  CaResponsesOmitted: ").Append(CaResponsesOmitted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2005EmbeddedTotals);
        }

        /// <summary>
        /// Returns true if InlineResponse2005EmbeddedTotals instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2005EmbeddedTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005EmbeddedTotals other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcceptedRecords == other.AcceptedRecords ||
                    this.AcceptedRecords != null &&
                    this.AcceptedRecords.Equals(other.AcceptedRecords)
                ) && 
                (
                    this.RejectedRecords == other.RejectedRecords ||
                    this.RejectedRecords != null &&
                    this.RejectedRecords.Equals(other.RejectedRecords)
                ) && 
                (
                    this.UpdatedRecords == other.UpdatedRecords ||
                    this.UpdatedRecords != null &&
                    this.UpdatedRecords.Equals(other.UpdatedRecords)
                ) && 
                (
                    this.CaResponses == other.CaResponses ||
                    this.CaResponses != null &&
                    this.CaResponses.Equals(other.CaResponses)
                ) && 
                (
                    this.CaResponsesOmitted == other.CaResponsesOmitted ||
                    this.CaResponsesOmitted != null &&
                    this.CaResponsesOmitted.Equals(other.CaResponsesOmitted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcceptedRecords != null)
                    hash = hash * 59 + this.AcceptedRecords.GetHashCode();
                if (this.RejectedRecords != null)
                    hash = hash * 59 + this.RejectedRecords.GetHashCode();
                if (this.UpdatedRecords != null)
                    hash = hash * 59 + this.UpdatedRecords.GetHashCode();
                if (this.CaResponses != null)
                    hash = hash * 59 + this.CaResponses.GetHashCode();
                if (this.CaResponsesOmitted != null)
                    hash = hash * 59 + this.CaResponsesOmitted.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
