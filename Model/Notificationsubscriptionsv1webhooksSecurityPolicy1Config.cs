/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Optional configuration object for if your API or server requires oAuth for an incoming webhook.
    /// </summary>
    [DataContract]
    public partial class Notificationsubscriptionsv1webhooksSecurityPolicy1Config :  IEquatable<Notificationsubscriptionsv1webhooksSecurityPolicy1Config>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notificationsubscriptionsv1webhooksSecurityPolicy1Config" /> class.
        /// </summary>
        /// <param name="OAuthTokenExpiry">Token expiration for the oAuth server..</param>
        /// <param name="OAuthURL">Client direct endpoint to the oAuth server..</param>
        /// <param name="OAuthTokenType">Token type for the oAuth config..</param>
        /// <param name="AdditionalConfig">AdditionalConfig.</param>
        public Notificationsubscriptionsv1webhooksSecurityPolicy1Config(string OAuthTokenExpiry = default(string), string OAuthURL = default(string), string OAuthTokenType = default(string), Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig AdditionalConfig = default(Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig))
        {
            this.OAuthTokenExpiry = OAuthTokenExpiry;
            this.OAuthURL = OAuthURL;
            this.OAuthTokenType = OAuthTokenType;
            this.AdditionalConfig = AdditionalConfig;
        }
        
        /// <summary>
        /// Token expiration for the oAuth server.
        /// </summary>
        /// <value>Token expiration for the oAuth server.</value>
        [DataMember(Name="oAuthTokenExpiry", EmitDefaultValue=false)]
        public string OAuthTokenExpiry { get; set; }

        /// <summary>
        /// Client direct endpoint to the oAuth server.
        /// </summary>
        /// <value>Client direct endpoint to the oAuth server.</value>
        [DataMember(Name="oAuthURL", EmitDefaultValue=false)]
        public string OAuthURL { get; set; }

        /// <summary>
        /// Token type for the oAuth config.
        /// </summary>
        /// <value>Token type for the oAuth config.</value>
        [DataMember(Name="oAuthTokenType", EmitDefaultValue=false)]
        public string OAuthTokenType { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalConfig
        /// </summary>
        [DataMember(Name="additionalConfig", EmitDefaultValue=false)]
        public Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig AdditionalConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notificationsubscriptionsv1webhooksSecurityPolicy1Config {\n");
            sb.Append("  OAuthTokenExpiry: ").Append(OAuthTokenExpiry).Append("\n");
            sb.Append("  OAuthURL: ").Append(OAuthURL).Append("\n");
            sb.Append("  OAuthTokenType: ").Append(OAuthTokenType).Append("\n");
            sb.Append("  AdditionalConfig: ").Append(AdditionalConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Notificationsubscriptionsv1webhooksSecurityPolicy1Config);
        }

        /// <summary>
        /// Returns true if Notificationsubscriptionsv1webhooksSecurityPolicy1Config instances are equal
        /// </summary>
        /// <param name="other">Instance of Notificationsubscriptionsv1webhooksSecurityPolicy1Config to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notificationsubscriptionsv1webhooksSecurityPolicy1Config other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OAuthTokenExpiry == other.OAuthTokenExpiry ||
                    this.OAuthTokenExpiry != null &&
                    this.OAuthTokenExpiry.Equals(other.OAuthTokenExpiry)
                ) && 
                (
                    this.OAuthURL == other.OAuthURL ||
                    this.OAuthURL != null &&
                    this.OAuthURL.Equals(other.OAuthURL)
                ) && 
                (
                    this.OAuthTokenType == other.OAuthTokenType ||
                    this.OAuthTokenType != null &&
                    this.OAuthTokenType.Equals(other.OAuthTokenType)
                ) && 
                (
                    this.AdditionalConfig == other.AdditionalConfig ||
                    this.AdditionalConfig != null &&
                    this.AdditionalConfig.Equals(other.AdditionalConfig)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OAuthTokenExpiry != null)
                    hash = hash * 59 + this.OAuthTokenExpiry.GetHashCode();
                if (this.OAuthURL != null)
                    hash = hash * 59 + this.OAuthURL.GetHashCode();
                if (this.OAuthTokenType != null)
                    hash = hash * 59 + this.OAuthTokenType.GetHashCode();
                if (this.AdditionalConfig != null)
                    hash = hash * 59 + this.AdditionalConfig.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
