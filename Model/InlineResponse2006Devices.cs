/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2006Devices
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006Devices :  IEquatable<InlineResponse2006Devices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006Devices" /> class.
        /// </summary>
        /// <param name="ReaderId">ReaderId.</param>
        /// <param name="TerminalSerialNumber">TerminalSerialNumber.</param>
        /// <param name="TerminalId">TerminalId.</param>
        /// <param name="Model">Model.</param>
        /// <param name="Make">Make.</param>
        /// <param name="HardwareRevision">HardwareRevision.</param>
        /// <param name="Status">Status of the device. Possible Values:   - &#39;ACTIVE&#39;   - &#39;INACTIVE&#39; .</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="Pin">Pin.</param>
        public InlineResponse2006Devices(string ReaderId = default(string), string TerminalSerialNumber = default(string), string TerminalId = default(string), string Model = default(string), string Make = default(string), string HardwareRevision = default(string), string Status = default(string), string CreationDate = default(string), string Pin = default(string))
        {
            this.ReaderId = ReaderId;
            this.TerminalSerialNumber = TerminalSerialNumber;
            this.TerminalId = TerminalId;
            this.Model = Model;
            this.Make = Make;
            this.HardwareRevision = HardwareRevision;
            this.Status = Status;
            this.CreationDate = CreationDate;
            this.Pin = Pin;
        }
        
        /// <summary>
        /// Gets or Sets ReaderId
        /// </summary>
        [DataMember(Name="readerId", EmitDefaultValue=false)]
        public string ReaderId { get; set; }

        /// <summary>
        /// Gets or Sets TerminalSerialNumber
        /// </summary>
        [DataMember(Name="terminalSerialNumber", EmitDefaultValue=false)]
        public string TerminalSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name="make", EmitDefaultValue=false)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets HardwareRevision
        /// </summary>
        [DataMember(Name="hardwareRevision", EmitDefaultValue=false)]
        public string HardwareRevision { get; set; }

        /// <summary>
        /// Status of the device. Possible Values:   - &#39;ACTIVE&#39;   - &#39;INACTIVE&#39; 
        /// </summary>
        /// <value>Status of the device. Possible Values:   - &#39;ACTIVE&#39;   - &#39;INACTIVE&#39; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Pin
        /// </summary>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006Devices {\n");
            if (ReaderId != null) sb.Append("  ReaderId: ").Append(ReaderId).Append("\n");
            if (TerminalSerialNumber != null) sb.Append("  TerminalSerialNumber: ").Append(TerminalSerialNumber).Append("\n");
            if (TerminalId != null) sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            if (Model != null) sb.Append("  Model: ").Append(Model).Append("\n");
            if (Make != null) sb.Append("  Make: ").Append(Make).Append("\n");
            if (HardwareRevision != null) sb.Append("  HardwareRevision: ").Append(HardwareRevision).Append("\n");
            if (Status != null) sb.Append("  Status: ").Append(Status).Append("\n");
            if (CreationDate != null) sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            if (Pin != null) sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2006Devices);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Devices instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2006Devices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Devices other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReaderId == other.ReaderId ||
                    this.ReaderId != null &&
                    this.ReaderId.Equals(other.ReaderId)
                ) && 
                (
                    this.TerminalSerialNumber == other.TerminalSerialNumber ||
                    this.TerminalSerialNumber != null &&
                    this.TerminalSerialNumber.Equals(other.TerminalSerialNumber)
                ) && 
                (
                    this.TerminalId == other.TerminalId ||
                    this.TerminalId != null &&
                    this.TerminalId.Equals(other.TerminalId)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Make == other.Make ||
                    this.Make != null &&
                    this.Make.Equals(other.Make)
                ) && 
                (
                    this.HardwareRevision == other.HardwareRevision ||
                    this.HardwareRevision != null &&
                    this.HardwareRevision.Equals(other.HardwareRevision)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.Pin == other.Pin ||
                    this.Pin != null &&
                    this.Pin.Equals(other.Pin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReaderId != null)
                    hash = hash * 59 + this.ReaderId.GetHashCode();
                if (this.TerminalSerialNumber != null)
                    hash = hash * 59 + this.TerminalSerialNumber.GetHashCode();
                if (this.TerminalId != null)
                    hash = hash * 59 + this.TerminalId.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Make != null)
                    hash = hash * 59 + this.Make.GetHashCode();
                if (this.HardwareRevision != null)
                    hash = hash * 59 + this.HardwareRevision.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.Pin != null)
                    hash = hash * 59 + this.Pin.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
