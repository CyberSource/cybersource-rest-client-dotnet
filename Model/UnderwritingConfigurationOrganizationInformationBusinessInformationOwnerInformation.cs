/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation :  IEquatable<UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation" /> class.
        /// </summary>
        /// <param name="FirstName">Owner&#39;s first name (required).</param>
        /// <param name="MiddleName">Owner&#39;s middle name.</param>
        /// <param name="LastName">Owner&#39;s last name (required).</param>
        /// <param name="BirthDate">Owner&#39;s date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016 (required).</param>
        /// <param name="IsPrimary">Primary Owner or Non-Primary Owner (required).</param>
        /// <param name="HasSignificantResponsibility">If not an owner, is the user a Control Person (required).</param>
        /// <param name="OwnerDirector">Is the owner a Director as well?.</param>
        /// <param name="NationalId">Identification value from ID document (required).</param>
        /// <param name="IdCountry">Country of the ID document. Two character country code, ISO 3166-1 alpha-2..</param>
        /// <param name="PassportNumber">Passport Number.</param>
        /// <param name="PassportCountry">Passport Country. Two character country code, ISO 3166-1 alpha-2..</param>
        /// <param name="JobTitle">Owner&#39;s Job Title.</param>
        /// <param name="OwnershipPercentage">Percentage of the company that owner owns (required).</param>
        /// <param name="Nationality">Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2. (required).</param>
        /// <param name="DueDiligenceRequired">Indicates if due diligence checks should be run for this owner (required).</param>
        /// <param name="PhoneNumberCountryCode">Phone number country. Two character country code, ISO 3166-1 alpha-2. (required).</param>
        /// <param name="PhoneNumber">Owner&#39;s phone number (required).</param>
        /// <param name="Email">Email address for Owner (required).</param>
        /// <param name="Address">Address.</param>
        public UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation(string FirstName = default(string), string MiddleName = default(string), string LastName = default(string), DateTime? BirthDate = default(DateTime?), bool? IsPrimary = default(bool?), bool? HasSignificantResponsibility = default(bool?), bool? OwnerDirector = default(bool?), string NationalId = default(string), string IdCountry = default(string), string PassportNumber = default(string), string PassportCountry = default(string), string JobTitle = default(string), decimal? OwnershipPercentage = default(decimal?), string Nationality = default(string), bool? DueDiligenceRequired = default(bool?), string PhoneNumberCountryCode = default(string), string PhoneNumber = default(string), string Email = default(string), UnderwritingConfigurationOrganizationInformationBusinessInformationAddress1 Address = default(UnderwritingConfigurationOrganizationInformationBusinessInformationAddress1))
        {
            this.FirstName = FirstName;
            this.MiddleName = MiddleName;
            this.LastName = LastName;
            this.BirthDate = BirthDate;
            this.IsPrimary = IsPrimary;
            this.HasSignificantResponsibility = HasSignificantResponsibility;
            this.OwnerDirector = OwnerDirector;
            this.NationalId = NationalId;
            this.IdCountry = IdCountry;
            this.PassportNumber = PassportNumber;
            this.PassportCountry = PassportCountry;
            this.JobTitle = JobTitle;
            this.OwnershipPercentage = OwnershipPercentage;
            this.Nationality = Nationality;
            this.DueDiligenceRequired = DueDiligenceRequired;
            this.PhoneNumberCountryCode = PhoneNumberCountryCode;
            this.PhoneNumber = PhoneNumber;
            this.Email = Email;
            this.Address = Address;
        }
        
        /// <summary>
        /// Owner&#39;s first name
        /// </summary>
        /// <value>Owner&#39;s first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Owner&#39;s middle name
        /// </summary>
        /// <value>Owner&#39;s middle name</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Owner&#39;s last name
        /// </summary>
        /// <value>Owner&#39;s last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Owner&#39;s date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016
        /// </summary>
        /// <value>Owner&#39;s date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Primary Owner or Non-Primary Owner
        /// </summary>
        /// <value>Primary Owner or Non-Primary Owner</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// If not an owner, is the user a Control Person
        /// </summary>
        /// <value>If not an owner, is the user a Control Person</value>
        [DataMember(Name="hasSignificantResponsibility", EmitDefaultValue=false)]
        public bool? HasSignificantResponsibility { get; set; }

        /// <summary>
        /// Is the owner a Director as well?
        /// </summary>
        /// <value>Is the owner a Director as well?</value>
        [DataMember(Name="ownerDirector", EmitDefaultValue=false)]
        public bool? OwnerDirector { get; set; }

        /// <summary>
        /// Identification value from ID document
        /// </summary>
        /// <value>Identification value from ID document</value>
        [DataMember(Name="nationalId", EmitDefaultValue=false)]
        public string NationalId { get; set; }

        /// <summary>
        /// Country of the ID document. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country of the ID document. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="idCountry", EmitDefaultValue=false)]
        public string IdCountry { get; set; }

        /// <summary>
        /// Passport Number
        /// </summary>
        /// <value>Passport Number</value>
        [DataMember(Name="passportNumber", EmitDefaultValue=false)]
        public string PassportNumber { get; set; }

        /// <summary>
        /// Passport Country. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Passport Country. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="passportCountry", EmitDefaultValue=false)]
        public string PassportCountry { get; set; }

        /// <summary>
        /// Owner&#39;s Job Title
        /// </summary>
        /// <value>Owner&#39;s Job Title</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Percentage of the company that owner owns
        /// </summary>
        /// <value>Percentage of the company that owner owns</value>
        [DataMember(Name="ownershipPercentage", EmitDefaultValue=false)]
        public decimal? OwnershipPercentage { get; set; }

        /// <summary>
        /// Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Indicates if due diligence checks should be run for this owner
        /// </summary>
        /// <value>Indicates if due diligence checks should be run for this owner</value>
        [DataMember(Name="dueDiligenceRequired", EmitDefaultValue=false)]
        public bool? DueDiligenceRequired { get; set; }

        /// <summary>
        /// Phone number country. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Phone number country. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="phoneNumberCountryCode", EmitDefaultValue=false)]
        public string PhoneNumberCountryCode { get; set; }

        /// <summary>
        /// Owner&#39;s phone number
        /// </summary>
        /// <value>Owner&#39;s phone number</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Email address for Owner
        /// </summary>
        /// <value>Email address for Owner</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformationAddress1 Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation {\n");
            if (FirstName != null) sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            if (MiddleName != null) sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            if (LastName != null) sb.Append("  LastName: ").Append(LastName).Append("\n");
            if (BirthDate != null) sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            if (IsPrimary != null) sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            if (HasSignificantResponsibility != null) sb.Append("  HasSignificantResponsibility: ").Append(HasSignificantResponsibility).Append("\n");
            if (OwnerDirector != null) sb.Append("  OwnerDirector: ").Append(OwnerDirector).Append("\n");
            if (NationalId != null) sb.Append("  NationalId: ").Append(NationalId).Append("\n");
            if (IdCountry != null) sb.Append("  IdCountry: ").Append(IdCountry).Append("\n");
            if (PassportNumber != null) sb.Append("  PassportNumber: ").Append(PassportNumber).Append("\n");
            if (PassportCountry != null) sb.Append("  PassportCountry: ").Append(PassportCountry).Append("\n");
            if (JobTitle != null) sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            if (OwnershipPercentage != null) sb.Append("  OwnershipPercentage: ").Append(OwnershipPercentage).Append("\n");
            if (Nationality != null) sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            if (DueDiligenceRequired != null) sb.Append("  DueDiligenceRequired: ").Append(DueDiligenceRequired).Append("\n");
            if (PhoneNumberCountryCode != null) sb.Append("  PhoneNumberCountryCode: ").Append(PhoneNumberCountryCode).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (Email != null) sb.Append("  Email: ").Append(Email).Append("\n");
            if (Address != null) sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.BirthDate == other.BirthDate ||
                    this.BirthDate != null &&
                    this.BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    this.IsPrimary == other.IsPrimary ||
                    this.IsPrimary != null &&
                    this.IsPrimary.Equals(other.IsPrimary)
                ) && 
                (
                    this.HasSignificantResponsibility == other.HasSignificantResponsibility ||
                    this.HasSignificantResponsibility != null &&
                    this.HasSignificantResponsibility.Equals(other.HasSignificantResponsibility)
                ) && 
                (
                    this.OwnerDirector == other.OwnerDirector ||
                    this.OwnerDirector != null &&
                    this.OwnerDirector.Equals(other.OwnerDirector)
                ) && 
                (
                    this.NationalId == other.NationalId ||
                    this.NationalId != null &&
                    this.NationalId.Equals(other.NationalId)
                ) && 
                (
                    this.IdCountry == other.IdCountry ||
                    this.IdCountry != null &&
                    this.IdCountry.Equals(other.IdCountry)
                ) && 
                (
                    this.PassportNumber == other.PassportNumber ||
                    this.PassportNumber != null &&
                    this.PassportNumber.Equals(other.PassportNumber)
                ) && 
                (
                    this.PassportCountry == other.PassportCountry ||
                    this.PassportCountry != null &&
                    this.PassportCountry.Equals(other.PassportCountry)
                ) && 
                (
                    this.JobTitle == other.JobTitle ||
                    this.JobTitle != null &&
                    this.JobTitle.Equals(other.JobTitle)
                ) && 
                (
                    this.OwnershipPercentage == other.OwnershipPercentage ||
                    this.OwnershipPercentage != null &&
                    this.OwnershipPercentage.Equals(other.OwnershipPercentage)
                ) && 
                (
                    this.Nationality == other.Nationality ||
                    this.Nationality != null &&
                    this.Nationality.Equals(other.Nationality)
                ) && 
                (
                    this.DueDiligenceRequired == other.DueDiligenceRequired ||
                    this.DueDiligenceRequired != null &&
                    this.DueDiligenceRequired.Equals(other.DueDiligenceRequired)
                ) && 
                (
                    this.PhoneNumberCountryCode == other.PhoneNumberCountryCode ||
                    this.PhoneNumberCountryCode != null &&
                    this.PhoneNumberCountryCode.Equals(other.PhoneNumberCountryCode)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.BirthDate != null)
                    hash = hash * 59 + this.BirthDate.GetHashCode();
                if (this.IsPrimary != null)
                    hash = hash * 59 + this.IsPrimary.GetHashCode();
                if (this.HasSignificantResponsibility != null)
                    hash = hash * 59 + this.HasSignificantResponsibility.GetHashCode();
                if (this.OwnerDirector != null)
                    hash = hash * 59 + this.OwnerDirector.GetHashCode();
                if (this.NationalId != null)
                    hash = hash * 59 + this.NationalId.GetHashCode();
                if (this.IdCountry != null)
                    hash = hash * 59 + this.IdCountry.GetHashCode();
                if (this.PassportNumber != null)
                    hash = hash * 59 + this.PassportNumber.GetHashCode();
                if (this.PassportCountry != null)
                    hash = hash * 59 + this.PassportCountry.GetHashCode();
                if (this.JobTitle != null)
                    hash = hash * 59 + this.JobTitle.GetHashCode();
                if (this.OwnershipPercentage != null)
                    hash = hash * 59 + this.OwnershipPercentage.GetHashCode();
                if (this.Nationality != null)
                    hash = hash * 59 + this.Nationality.GetHashCode();
                if (this.DueDiligenceRequired != null)
                    hash = hash * 59 + this.DueDiligenceRequired.GetHashCode();
                if (this.PhoneNumberCountryCode != null)
                    hash = hash * 59 + this.PhoneNumberCountryCode.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
