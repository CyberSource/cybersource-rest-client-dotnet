/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Issuer associated with the tokenized card. 
    /// </summary>
    [DataContract]
    public partial class Tmsv2TokenizedCardMetadataIssuer :  IEquatable<Tmsv2TokenizedCardMetadataIssuer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tmsv2TokenizedCardMetadataIssuer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Tmsv2TokenizedCardMetadataIssuer()
        {
        }
        
        /// <summary>
        /// Issuer name. 
        /// </summary>
        /// <value>Issuer name. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Short description of the card. 
        /// </summary>
        /// <value>Short description of the card. </value>
        [DataMember(Name="shortDescription", EmitDefaultValue=false)]
        public string ShortDescription { get; private set; }

        /// <summary>
        /// Long description of the card. 
        /// </summary>
        /// <value>Long description of the card. </value>
        [DataMember(Name="longDescription", EmitDefaultValue=false)]
        public string LongDescription { get; private set; }

        /// <summary>
        /// Issuer customer service email address.
        /// </summary>
        /// <value>Issuer customer service email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; private set; }

        /// <summary>
        /// Issuer customer service phone number.
        /// </summary>
        /// <value>Issuer customer service phone number.</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; private set; }

        /// <summary>
        /// Issuer customer service url.
        /// </summary>
        /// <value>Issuer customer service url.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tmsv2TokenizedCardMetadataIssuer {\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (ShortDescription != null) sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            if (LongDescription != null) sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            if (Email != null) sb.Append("  Email: ").Append(Email).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (Url != null) sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Tmsv2TokenizedCardMetadataIssuer);
        }

        /// <summary>
        /// Returns true if Tmsv2TokenizedCardMetadataIssuer instances are equal
        /// </summary>
        /// <param name="other">Instance of Tmsv2TokenizedCardMetadataIssuer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tmsv2TokenizedCardMetadataIssuer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ShortDescription == other.ShortDescription ||
                    this.ShortDescription != null &&
                    this.ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    this.LongDescription == other.LongDescription ||
                    this.LongDescription != null &&
                    this.LongDescription.Equals(other.LongDescription)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ShortDescription != null)
                    hash = hash * 59 + this.ShortDescription.GetHashCode();
                if (this.LongDescription != null)
                    hash = hash * 59 + this.LongDescription.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
