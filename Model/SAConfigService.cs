/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// SAConfigService
    /// </summary>
    [DataContract]
    public partial class SAConfigService :  IEquatable<SAConfigService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAConfigService" /> class.
        /// </summary>
        /// <param name="DecisionManagerVerboseEnabled">Toggles whether verbose Decision Manager results should be present in the Secure Acceptance response. As this response passes through the browser, it is recommended to set this to \&quot;false\&quot; outside of debugging..</param>
        /// <param name="DeclinedRetryLimit">Defines the number of retries a payer is presented with on payment declines on Hosted Checkout. Valid values are between 0 and 5..</param>
        /// <param name="DecisionManagerEnabled">Toggles whether Decision Manager is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Decicion Manager..</param>
        /// <param name="TokenizationEnabled">Toggles whether Tokenization is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Tokenization..</param>
        /// <param name="ReverseAuthOnAddressVerificationSystemFailure">Toggles whether or not an approved Authorization that fails AVS should be automatically reversed..</param>
        /// <param name="DeviceFingerprintEnabled">Toggles whether or not fraud Device Fingerprinting is enabled on the Hosted Checkout. This simplifies enablement for Decision Manager..</param>
        /// <param name="ReverseAuthOnCardVerificationNumberFailure">Toggles whether or not an approved Authorization that fails CVN check that should be automatically reversed..</param>
        public SAConfigService(bool? DecisionManagerVerboseEnabled = default(bool?), decimal? DeclinedRetryLimit = default(decimal?), bool? DecisionManagerEnabled = default(bool?), bool? TokenizationEnabled = default(bool?), bool? ReverseAuthOnAddressVerificationSystemFailure = default(bool?), bool? DeviceFingerprintEnabled = default(bool?), bool? ReverseAuthOnCardVerificationNumberFailure = default(bool?))
        {
            this.DecisionManagerVerboseEnabled = DecisionManagerVerboseEnabled;
            this.DeclinedRetryLimit = DeclinedRetryLimit;
            this.DecisionManagerEnabled = DecisionManagerEnabled;
            this.TokenizationEnabled = TokenizationEnabled;
            this.ReverseAuthOnAddressVerificationSystemFailure = ReverseAuthOnAddressVerificationSystemFailure;
            this.DeviceFingerprintEnabled = DeviceFingerprintEnabled;
            this.ReverseAuthOnCardVerificationNumberFailure = ReverseAuthOnCardVerificationNumberFailure;
        }
        
        /// <summary>
        /// Toggles whether verbose Decision Manager results should be present in the Secure Acceptance response. As this response passes through the browser, it is recommended to set this to \&quot;false\&quot; outside of debugging.
        /// </summary>
        /// <value>Toggles whether verbose Decision Manager results should be present in the Secure Acceptance response. As this response passes through the browser, it is recommended to set this to \&quot;false\&quot; outside of debugging.</value>
        [DataMember(Name="decisionManagerVerboseEnabled", EmitDefaultValue=false)]
        public bool? DecisionManagerVerboseEnabled { get; set; }

        /// <summary>
        /// Defines the number of retries a payer is presented with on payment declines on Hosted Checkout. Valid values are between 0 and 5.
        /// </summary>
        /// <value>Defines the number of retries a payer is presented with on payment declines on Hosted Checkout. Valid values are between 0 and 5.</value>
        [DataMember(Name="declinedRetryLimit", EmitDefaultValue=false)]
        public decimal? DeclinedRetryLimit { get; set; }

        /// <summary>
        /// Toggles whether Decision Manager is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Decicion Manager.
        /// </summary>
        /// <value>Toggles whether Decision Manager is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Decicion Manager.</value>
        [DataMember(Name="decisionManagerEnabled", EmitDefaultValue=false)]
        public bool? DecisionManagerEnabled { get; set; }

        /// <summary>
        /// Toggles whether Tokenization is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Tokenization.
        /// </summary>
        /// <value>Toggles whether Tokenization is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Tokenization.</value>
        [DataMember(Name="tokenizationEnabled", EmitDefaultValue=false)]
        public bool? TokenizationEnabled { get; set; }

        /// <summary>
        /// Toggles whether or not an approved Authorization that fails AVS should be automatically reversed.
        /// </summary>
        /// <value>Toggles whether or not an approved Authorization that fails AVS should be automatically reversed.</value>
        [DataMember(Name="reverseAuthOnAddressVerificationSystemFailure", EmitDefaultValue=false)]
        public bool? ReverseAuthOnAddressVerificationSystemFailure { get; set; }

        /// <summary>
        /// Toggles whether or not fraud Device Fingerprinting is enabled on the Hosted Checkout. This simplifies enablement for Decision Manager.
        /// </summary>
        /// <value>Toggles whether or not fraud Device Fingerprinting is enabled on the Hosted Checkout. This simplifies enablement for Decision Manager.</value>
        [DataMember(Name="deviceFingerprintEnabled", EmitDefaultValue=false)]
        public bool? DeviceFingerprintEnabled { get; set; }

        /// <summary>
        /// Toggles whether or not an approved Authorization that fails CVN check that should be automatically reversed.
        /// </summary>
        /// <value>Toggles whether or not an approved Authorization that fails CVN check that should be automatically reversed.</value>
        [DataMember(Name="reverseAuthOnCardVerificationNumberFailure", EmitDefaultValue=false)]
        public bool? ReverseAuthOnCardVerificationNumberFailure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SAConfigService {\n");
            sb.Append("  DecisionManagerVerboseEnabled: ").Append(DecisionManagerVerboseEnabled).Append("\n");
            sb.Append("  DeclinedRetryLimit: ").Append(DeclinedRetryLimit).Append("\n");
            sb.Append("  DecisionManagerEnabled: ").Append(DecisionManagerEnabled).Append("\n");
            sb.Append("  TokenizationEnabled: ").Append(TokenizationEnabled).Append("\n");
            sb.Append("  ReverseAuthOnAddressVerificationSystemFailure: ").Append(ReverseAuthOnAddressVerificationSystemFailure).Append("\n");
            sb.Append("  DeviceFingerprintEnabled: ").Append(DeviceFingerprintEnabled).Append("\n");
            sb.Append("  ReverseAuthOnCardVerificationNumberFailure: ").Append(ReverseAuthOnCardVerificationNumberFailure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SAConfigService);
        }

        /// <summary>
        /// Returns true if SAConfigService instances are equal
        /// </summary>
        /// <param name="other">Instance of SAConfigService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SAConfigService other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DecisionManagerVerboseEnabled == other.DecisionManagerVerboseEnabled ||
                    this.DecisionManagerVerboseEnabled != null &&
                    this.DecisionManagerVerboseEnabled.Equals(other.DecisionManagerVerboseEnabled)
                ) && 
                (
                    this.DeclinedRetryLimit == other.DeclinedRetryLimit ||
                    this.DeclinedRetryLimit != null &&
                    this.DeclinedRetryLimit.Equals(other.DeclinedRetryLimit)
                ) && 
                (
                    this.DecisionManagerEnabled == other.DecisionManagerEnabled ||
                    this.DecisionManagerEnabled != null &&
                    this.DecisionManagerEnabled.Equals(other.DecisionManagerEnabled)
                ) && 
                (
                    this.TokenizationEnabled == other.TokenizationEnabled ||
                    this.TokenizationEnabled != null &&
                    this.TokenizationEnabled.Equals(other.TokenizationEnabled)
                ) && 
                (
                    this.ReverseAuthOnAddressVerificationSystemFailure == other.ReverseAuthOnAddressVerificationSystemFailure ||
                    this.ReverseAuthOnAddressVerificationSystemFailure != null &&
                    this.ReverseAuthOnAddressVerificationSystemFailure.Equals(other.ReverseAuthOnAddressVerificationSystemFailure)
                ) && 
                (
                    this.DeviceFingerprintEnabled == other.DeviceFingerprintEnabled ||
                    this.DeviceFingerprintEnabled != null &&
                    this.DeviceFingerprintEnabled.Equals(other.DeviceFingerprintEnabled)
                ) && 
                (
                    this.ReverseAuthOnCardVerificationNumberFailure == other.ReverseAuthOnCardVerificationNumberFailure ||
                    this.ReverseAuthOnCardVerificationNumberFailure != null &&
                    this.ReverseAuthOnCardVerificationNumberFailure.Equals(other.ReverseAuthOnCardVerificationNumberFailure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DecisionManagerVerboseEnabled != null)
                    hash = hash * 59 + this.DecisionManagerVerboseEnabled.GetHashCode();
                if (this.DeclinedRetryLimit != null)
                    hash = hash * 59 + this.DeclinedRetryLimit.GetHashCode();
                if (this.DecisionManagerEnabled != null)
                    hash = hash * 59 + this.DecisionManagerEnabled.GetHashCode();
                if (this.TokenizationEnabled != null)
                    hash = hash * 59 + this.TokenizationEnabled.GetHashCode();
                if (this.ReverseAuthOnAddressVerificationSystemFailure != null)
                    hash = hash * 59 + this.ReverseAuthOnAddressVerificationSystemFailure.GetHashCode();
                if (this.DeviceFingerprintEnabled != null)
                    hash = hash * 59 + this.DeviceFingerprintEnabled.GetHashCode();
                if (this.ReverseAuthOnCardVerificationNumberFailure != null)
                    hash = hash * 59 + this.ReverseAuthOnCardVerificationNumberFailure.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
