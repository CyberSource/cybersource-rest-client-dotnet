/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Notificationsubscriptionsv1productsorganizationIdEventTypes
    /// </summary>
    [DataContract]
    public partial class Notificationsubscriptionsv1productsorganizationIdEventTypes :  IEquatable<Notificationsubscriptionsv1productsorganizationIdEventTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notificationsubscriptionsv1productsorganizationIdEventTypes" /> class.
        /// </summary>
        /// <param name="EventName">EventName.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="Frequency">Frequency.</param>
        /// <param name="TimeSensitivity">TimeSensitivity (default to false).</param>
        /// <param name="PayloadEncryption">PayloadEncryption (default to false).</param>
        public Notificationsubscriptionsv1productsorganizationIdEventTypes(string EventName = default(string), string DisplayName = default(string), int? Frequency = default(int?), bool? TimeSensitivity = false, bool? PayloadEncryption = false)
        {
            this.EventName = EventName;
            this.DisplayName = DisplayName;
            this.Frequency = Frequency;
            // use default value if no "TimeSensitivity" provided
            if (TimeSensitivity == null)
            {
                this.TimeSensitivity = false;
            }
            else
            {
                this.TimeSensitivity = TimeSensitivity;
            }
            // use default value if no "PayloadEncryption" provided
            if (PayloadEncryption == null)
            {
                this.PayloadEncryption = false;
            }
            else
            {
                this.PayloadEncryption = PayloadEncryption;
            }
        }
        
        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// Gets or Sets TimeSensitivity
        /// </summary>
        [DataMember(Name="timeSensitivity", EmitDefaultValue=false)]
        public bool? TimeSensitivity { get; set; }

        /// <summary>
        /// Gets or Sets PayloadEncryption
        /// </summary>
        [DataMember(Name="payloadEncryption", EmitDefaultValue=false)]
        public bool? PayloadEncryption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notificationsubscriptionsv1productsorganizationIdEventTypes {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  TimeSensitivity: ").Append(TimeSensitivity).Append("\n");
            sb.Append("  PayloadEncryption: ").Append(PayloadEncryption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Notificationsubscriptionsv1productsorganizationIdEventTypes);
        }

        /// <summary>
        /// Returns true if Notificationsubscriptionsv1productsorganizationIdEventTypes instances are equal
        /// </summary>
        /// <param name="other">Instance of Notificationsubscriptionsv1productsorganizationIdEventTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notificationsubscriptionsv1productsorganizationIdEventTypes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EventName == other.EventName ||
                    this.EventName != null &&
                    this.EventName.Equals(other.EventName)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Frequency == other.Frequency ||
                    this.Frequency != null &&
                    this.Frequency.Equals(other.Frequency)
                ) && 
                (
                    this.TimeSensitivity == other.TimeSensitivity ||
                    this.TimeSensitivity != null &&
                    this.TimeSensitivity.Equals(other.TimeSensitivity)
                ) && 
                (
                    this.PayloadEncryption == other.PayloadEncryption ||
                    this.PayloadEncryption != null &&
                    this.PayloadEncryption.Equals(other.PayloadEncryption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EventName != null)
                    hash = hash * 59 + this.EventName.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Frequency != null)
                    hash = hash * 59 + this.Frequency.GetHashCode();
                if (this.TimeSensitivity != null)
                    hash = hash * 59 + this.TimeSensitivity.GetHashCode();
                if (this.PayloadEncryption != null)
                    hash = hash * 59 + this.PayloadEncryption.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
