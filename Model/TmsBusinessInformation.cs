/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsBusinessInformation
    /// </summary>
    [DataContract]
    public partial class TmsBusinessInformation :  IEquatable<TmsBusinessInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsBusinessInformation" /> class.
        /// </summary>
        /// <param name="Name">Name of the network token merchant..</param>
        /// <param name="DoingBusinessAs">Name the network token merchant does business as.</param>
        /// <param name="Address">Address.</param>
        /// <param name="WebsiteUrl">Website of network token merchant..</param>
        /// <param name="BusinessIdentificationType">The Identifier associated with the business type; required unless both acquirerId and acquirerMerchantId are provided. .</param>
        /// <param name="BusinessIdentificationValue">The value associated with the business identifier type; required unless both acquirerId and acquirerMerchantId are provided. .</param>
        /// <param name="Acquirer">Acquirer.</param>
        public TmsBusinessInformation(string Name = default(string), string DoingBusinessAs = default(string), TmsBusinessInformationAddress Address = default(TmsBusinessInformationAddress), string WebsiteUrl = default(string), string BusinessIdentificationType = default(string), string BusinessIdentificationValue = default(string), TmsBusinessInformationAcquirer Acquirer = default(TmsBusinessInformationAcquirer))
        {
            this.Name = Name;
            this.DoingBusinessAs = DoingBusinessAs;
            this.Address = Address;
            this.WebsiteUrl = WebsiteUrl;
            this.BusinessIdentificationType = BusinessIdentificationType;
            this.BusinessIdentificationValue = BusinessIdentificationValue;
            this.Acquirer = Acquirer;
        }
        
        /// <summary>
        /// Name of the network token merchant.
        /// </summary>
        /// <value>Name of the network token merchant.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Name the network token merchant does business as
        /// </summary>
        /// <value>Name the network token merchant does business as</value>
        [DataMember(Name="doingBusinessAs", EmitDefaultValue=false)]
        public string DoingBusinessAs { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public TmsBusinessInformationAddress Address { get; set; }

        /// <summary>
        /// Website of network token merchant.
        /// </summary>
        /// <value>Website of network token merchant.</value>
        [DataMember(Name="websiteUrl", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// The Identifier associated with the business type; required unless both acquirerId and acquirerMerchantId are provided. 
        /// </summary>
        /// <value>The Identifier associated with the business type; required unless both acquirerId and acquirerMerchantId are provided. </value>
        [DataMember(Name="businessIdentificationType", EmitDefaultValue=false)]
        public string BusinessIdentificationType { get; set; }

        /// <summary>
        /// The value associated with the business identifier type; required unless both acquirerId and acquirerMerchantId are provided. 
        /// </summary>
        /// <value>The value associated with the business identifier type; required unless both acquirerId and acquirerMerchantId are provided. </value>
        [DataMember(Name="businessIdentificationValue", EmitDefaultValue=false)]
        public string BusinessIdentificationValue { get; set; }

        /// <summary>
        /// Gets or Sets Acquirer
        /// </summary>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public TmsBusinessInformationAcquirer Acquirer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsBusinessInformation {\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (DoingBusinessAs != null) sb.Append("  DoingBusinessAs: ").Append(DoingBusinessAs).Append("\n");
            if (Address != null) sb.Append("  Address: ").Append(Address).Append("\n");
            if (WebsiteUrl != null) sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            if (BusinessIdentificationType != null) sb.Append("  BusinessIdentificationType: ").Append(BusinessIdentificationType).Append("\n");
            if (BusinessIdentificationValue != null) sb.Append("  BusinessIdentificationValue: ").Append(BusinessIdentificationValue).Append("\n");
            if (Acquirer != null) sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsBusinessInformation);
        }

        /// <summary>
        /// Returns true if TmsBusinessInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsBusinessInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsBusinessInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DoingBusinessAs == other.DoingBusinessAs ||
                    this.DoingBusinessAs != null &&
                    this.DoingBusinessAs.Equals(other.DoingBusinessAs)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                ) && 
                (
                    this.BusinessIdentificationType == other.BusinessIdentificationType ||
                    this.BusinessIdentificationType != null &&
                    this.BusinessIdentificationType.Equals(other.BusinessIdentificationType)
                ) && 
                (
                    this.BusinessIdentificationValue == other.BusinessIdentificationValue ||
                    this.BusinessIdentificationValue != null &&
                    this.BusinessIdentificationValue.Equals(other.BusinessIdentificationValue)
                ) && 
                (
                    this.Acquirer == other.Acquirer ||
                    this.Acquirer != null &&
                    this.Acquirer.Equals(other.Acquirer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DoingBusinessAs != null)
                    hash = hash * 59 + this.DoingBusinessAs.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                if (this.BusinessIdentificationType != null)
                    hash = hash * 59 + this.BusinessIdentificationType.GetHashCode();
                if (this.BusinessIdentificationValue != null)
                    hash = hash * 59 + this.BusinessIdentificationValue.GetHashCode();
                if (this.Acquirer != null)
                    hash = hash * 59 + this.Acquirer.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
