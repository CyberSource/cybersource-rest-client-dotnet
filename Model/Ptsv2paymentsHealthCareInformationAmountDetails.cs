/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsHealthCareInformationAmountDetails
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsHealthCareInformationAmountDetails :  IEquatable<Ptsv2paymentsHealthCareInformationAmountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsHealthCareInformationAmountDetails" /> class.
        /// </summary>
        /// <param name="AmountType">Total amount that has been spent on healthcare in a transaction. Valid Values for **Visa**: - &#x60;healthcare&#x60; - Total Amount Healthcare - &#x60;healthcare-transit&#x60; - Amount Transit - &#x60;vision&#x60; - Amount Vision/Optical - &#x60;prescription&#x60; - Amount Prescription/RX - &#x60;clinic&#x60; - Amount Clinic/Other Qualified Medical - &#x60;dental&#x60; - Amount Dental   &#x60;Note:&#x60; -  Prescription, Clinic and dental amounts must be preceded with the total healthcare amount and cannot occur individually.  Vision and Transit must be sent individually and cannot be combined with total healthcare amount or any other amounts. Total Healthcare amount can be sent individually.  Valid Values for **MasterCard**: - &#x60;prescription&#x60; - Amount Prescription/RX - &#x60;eligible-total&#x60; - Total Amount Healthcare   &#x60;Note:&#x60; -  Prescription must be preceded with the total healthcare amount and cannot occur individually. Total Healthcare amount can be sent individually. .</param>
        /// <param name="Amount">Total Amount that has been spent on the corresponding amountType. This is 13 byte field including sign. If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer. .</param>
        public Ptsv2paymentsHealthCareInformationAmountDetails(string AmountType = default(string), string Amount = default(string))
        {
            this.AmountType = AmountType;
            this.Amount = Amount;
        }
        
        /// <summary>
        /// Total amount that has been spent on healthcare in a transaction. Valid Values for **Visa**: - &#x60;healthcare&#x60; - Total Amount Healthcare - &#x60;healthcare-transit&#x60; - Amount Transit - &#x60;vision&#x60; - Amount Vision/Optical - &#x60;prescription&#x60; - Amount Prescription/RX - &#x60;clinic&#x60; - Amount Clinic/Other Qualified Medical - &#x60;dental&#x60; - Amount Dental   &#x60;Note:&#x60; -  Prescription, Clinic and dental amounts must be preceded with the total healthcare amount and cannot occur individually.  Vision and Transit must be sent individually and cannot be combined with total healthcare amount or any other amounts. Total Healthcare amount can be sent individually.  Valid Values for **MasterCard**: - &#x60;prescription&#x60; - Amount Prescription/RX - &#x60;eligible-total&#x60; - Total Amount Healthcare   &#x60;Note:&#x60; -  Prescription must be preceded with the total healthcare amount and cannot occur individually. Total Healthcare amount can be sent individually. 
        /// </summary>
        /// <value>Total amount that has been spent on healthcare in a transaction. Valid Values for **Visa**: - &#x60;healthcare&#x60; - Total Amount Healthcare - &#x60;healthcare-transit&#x60; - Amount Transit - &#x60;vision&#x60; - Amount Vision/Optical - &#x60;prescription&#x60; - Amount Prescription/RX - &#x60;clinic&#x60; - Amount Clinic/Other Qualified Medical - &#x60;dental&#x60; - Amount Dental   &#x60;Note:&#x60; -  Prescription, Clinic and dental amounts must be preceded with the total healthcare amount and cannot occur individually.  Vision and Transit must be sent individually and cannot be combined with total healthcare amount or any other amounts. Total Healthcare amount can be sent individually.  Valid Values for **MasterCard**: - &#x60;prescription&#x60; - Amount Prescription/RX - &#x60;eligible-total&#x60; - Total Amount Healthcare   &#x60;Note:&#x60; -  Prescription must be preceded with the total healthcare amount and cannot occur individually. Total Healthcare amount can be sent individually. </value>
        [DataMember(Name="amountType", EmitDefaultValue=false)]
        public string AmountType { get; set; }

        /// <summary>
        /// Total Amount that has been spent on the corresponding amountType. This is 13 byte field including sign. If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer. 
        /// </summary>
        /// <value>Total Amount that has been spent on the corresponding amountType. This is 13 byte field including sign. If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer. </value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsHealthCareInformationAmountDetails {\n");
            sb.Append("  AmountType: ").Append(AmountType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsHealthCareInformationAmountDetails);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsHealthCareInformationAmountDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsHealthCareInformationAmountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsHealthCareInformationAmountDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AmountType == other.AmountType ||
                    this.AmountType != null &&
                    this.AmountType.Equals(other.AmountType)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AmountType != null)
                    hash = hash * 59 + this.AmountType.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AmountType (string) maxLength
            if(this.AmountType != null && this.AmountType.Length >= 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountType, length must be less than or equal to 35.", new [] { "AmountType" });
            }

            // Amount (string) maxLength
            if(this.Amount != null && this.Amount.Length >= 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, length must be less than or equal to 13.", new [] { "Amount" });
            }

            yield break;
        }
    }

}
