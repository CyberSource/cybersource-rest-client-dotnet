/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation :  IEquatable<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation" /> class.
        /// </summary>
        /// <param name="TicketNumber">Ticket number, which consists of the carrier code, form, and serial number, without the check digit. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary services. .</param>
        /// <param name="PassengerName">Name of the passenger. If the passenger’s name is not available, this value is the cardholder’s name. If neither the passenger’s name nor the cardholder’s name is available, this value is a description of the ancillary purchase. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary service. .</param>
        /// <param name="ConnectedTicketNumber">Number for the airline ticket to which the ancillary purchase is connected.  If this purchase has a connection or relationship to another purchase such as a baggage fee for a passenger transport ticket, this field must contain the ticket number for the other purchase.  For a stand-alone purchase, the value for this field must be the same as the value for the &#x60;travelInformation.transit.airline.ancillaryInformation.ticketNumber&#x60; field. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional request field for ancillary services. .</param>
        /// <param name="CreditReasonIndicator">Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only. Optional field for ancillary services. .</param>
        /// <param name="Service">Service.</param>
        public Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation(string TicketNumber = default(string), string PassengerName = default(string), string ConnectedTicketNumber = default(string), string CreditReasonIndicator = default(string), List<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService> Service = default(List<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService>))
        {
            this.TicketNumber = TicketNumber;
            this.PassengerName = PassengerName;
            this.ConnectedTicketNumber = ConnectedTicketNumber;
            this.CreditReasonIndicator = CreditReasonIndicator;
            this.Service = Service;
        }
        
        /// <summary>
        /// Ticket number, which consists of the carrier code, form, and serial number, without the check digit. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary services. 
        /// </summary>
        /// <value>Ticket number, which consists of the carrier code, form, and serial number, without the check digit. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary services. </value>
        [DataMember(Name="ticketNumber", EmitDefaultValue=false)]
        public string TicketNumber { get; set; }

        /// <summary>
        /// Name of the passenger. If the passenger’s name is not available, this value is the cardholder’s name. If neither the passenger’s name nor the cardholder’s name is available, this value is a description of the ancillary purchase. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary service. 
        /// </summary>
        /// <value>Name of the passenger. If the passenger’s name is not available, this value is the cardholder’s name. If neither the passenger’s name nor the cardholder’s name is available, this value is a description of the ancillary purchase. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary service. </value>
        [DataMember(Name="passengerName", EmitDefaultValue=false)]
        public string PassengerName { get; set; }

        /// <summary>
        /// Number for the airline ticket to which the ancillary purchase is connected.  If this purchase has a connection or relationship to another purchase such as a baggage fee for a passenger transport ticket, this field must contain the ticket number for the other purchase.  For a stand-alone purchase, the value for this field must be the same as the value for the &#x60;travelInformation.transit.airline.ancillaryInformation.ticketNumber&#x60; field. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional request field for ancillary services. 
        /// </summary>
        /// <value>Number for the airline ticket to which the ancillary purchase is connected.  If this purchase has a connection or relationship to another purchase such as a baggage fee for a passenger transport ticket, this field must contain the ticket number for the other purchase.  For a stand-alone purchase, the value for this field must be the same as the value for the &#x60;travelInformation.transit.airline.ancillaryInformation.ticketNumber&#x60; field. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional request field for ancillary services. </value>
        [DataMember(Name="connectedTicketNumber", EmitDefaultValue=false)]
        public string ConnectedTicketNumber { get; set; }

        /// <summary>
        /// Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only. Optional field for ancillary services. 
        /// </summary>
        /// <value>Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only. Optional field for ancillary services. </value>
        [DataMember(Name="creditReasonIndicator", EmitDefaultValue=false)]
        public string CreditReasonIndicator { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public List<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService> Service { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation {\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  PassengerName: ").Append(PassengerName).Append("\n");
            sb.Append("  ConnectedTicketNumber: ").Append(ConnectedTicketNumber).Append("\n");
            sb.Append("  CreditReasonIndicator: ").Append(CreditReasonIndicator).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TicketNumber == other.TicketNumber ||
                    this.TicketNumber != null &&
                    this.TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    this.PassengerName == other.PassengerName ||
                    this.PassengerName != null &&
                    this.PassengerName.Equals(other.PassengerName)
                ) && 
                (
                    this.ConnectedTicketNumber == other.ConnectedTicketNumber ||
                    this.ConnectedTicketNumber != null &&
                    this.ConnectedTicketNumber.Equals(other.ConnectedTicketNumber)
                ) && 
                (
                    this.CreditReasonIndicator == other.CreditReasonIndicator ||
                    this.CreditReasonIndicator != null &&
                    this.CreditReasonIndicator.Equals(other.CreditReasonIndicator)
                ) && 
                (
                    this.Service == other.Service ||
                    this.Service != null &&
                    this.Service.SequenceEqual(other.Service)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TicketNumber != null)
                    hash = hash * 59 + this.TicketNumber.GetHashCode();
                if (this.PassengerName != null)
                    hash = hash * 59 + this.PassengerName.GetHashCode();
                if (this.ConnectedTicketNumber != null)
                    hash = hash * 59 + this.ConnectedTicketNumber.GetHashCode();
                if (this.CreditReasonIndicator != null)
                    hash = hash * 59 + this.CreditReasonIndicator.GetHashCode();
                if (this.Service != null)
                    hash = hash * 59 + this.Service.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
