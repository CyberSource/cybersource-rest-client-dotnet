/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2intentsOrderInformationAmountDetails
    /// </summary>
    [DataContract]
    public partial class Ptsv2intentsOrderInformationAmountDetails :  IEquatable<Ptsv2intentsOrderInformationAmountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2intentsOrderInformationAmountDetails" /> class.
        /// </summary>
        /// <param name="TotalAmount">Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places .</param>
        /// <param name="Currency">Currency used for the order .</param>
        /// <param name="DiscountAmount">Discount amount for the transaction.  .</param>
        /// <param name="ShippingAmount">Aggregate shipping charges for the transactions. .</param>
        /// <param name="ShippingDiscountAmount">Shipping discount amount for the transaction.  .</param>
        /// <param name="TaxAmount">Total tax amount.  .</param>
        /// <param name="InsuranceAmount">Amount being charged for the insurance fee.  .</param>
        /// <param name="DutyAmount">Amount being charged as duty amount.             .</param>
        public Ptsv2intentsOrderInformationAmountDetails(string TotalAmount = default(string), string Currency = default(string), string DiscountAmount = default(string), string ShippingAmount = default(string), string ShippingDiscountAmount = default(string), string TaxAmount = default(string), string InsuranceAmount = default(string), string DutyAmount = default(string))
        {
            this.TotalAmount = TotalAmount;
            this.Currency = Currency;
            this.DiscountAmount = DiscountAmount;
            this.ShippingAmount = ShippingAmount;
            this.ShippingDiscountAmount = ShippingDiscountAmount;
            this.TaxAmount = TaxAmount;
            this.InsuranceAmount = InsuranceAmount;
            this.DutyAmount = DutyAmount;
        }
        
        /// <summary>
        /// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places 
        /// </summary>
        /// <value>Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places </value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// Currency used for the order 
        /// </summary>
        /// <value>Currency used for the order </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Discount amount for the transaction.  
        /// </summary>
        /// <value>Discount amount for the transaction.  </value>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// Aggregate shipping charges for the transactions. 
        /// </summary>
        /// <value>Aggregate shipping charges for the transactions. </value>
        [DataMember(Name="shippingAmount", EmitDefaultValue=false)]
        public string ShippingAmount { get; set; }

        /// <summary>
        /// Shipping discount amount for the transaction.  
        /// </summary>
        /// <value>Shipping discount amount for the transaction.  </value>
        [DataMember(Name="shippingDiscountAmount", EmitDefaultValue=false)]
        public string ShippingDiscountAmount { get; set; }

        /// <summary>
        /// Total tax amount.  
        /// </summary>
        /// <value>Total tax amount.  </value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Amount being charged for the insurance fee.  
        /// </summary>
        /// <value>Amount being charged for the insurance fee.  </value>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public string InsuranceAmount { get; set; }

        /// <summary>
        /// Amount being charged as duty amount.             
        /// </summary>
        /// <value>Amount being charged as duty amount.             </value>
        [DataMember(Name="dutyAmount", EmitDefaultValue=false)]
        public string DutyAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2intentsOrderInformationAmountDetails {\n");
            if (TotalAmount != null) sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            if (Currency != null) sb.Append("  Currency: ").Append(Currency).Append("\n");
            if (DiscountAmount != null) sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            if (ShippingAmount != null) sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            if (ShippingDiscountAmount != null) sb.Append("  ShippingDiscountAmount: ").Append(ShippingDiscountAmount).Append("\n");
            if (TaxAmount != null) sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            if (InsuranceAmount != null) sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            if (DutyAmount != null) sb.Append("  DutyAmount: ").Append(DutyAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2intentsOrderInformationAmountDetails);
        }

        /// <summary>
        /// Returns true if Ptsv2intentsOrderInformationAmountDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2intentsOrderInformationAmountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2intentsOrderInformationAmountDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.DiscountAmount == other.DiscountAmount ||
                    this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    this.ShippingAmount == other.ShippingAmount ||
                    this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(other.ShippingAmount)
                ) && 
                (
                    this.ShippingDiscountAmount == other.ShippingDiscountAmount ||
                    this.ShippingDiscountAmount != null &&
                    this.ShippingDiscountAmount.Equals(other.ShippingDiscountAmount)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.InsuranceAmount == other.InsuranceAmount ||
                    this.InsuranceAmount != null &&
                    this.InsuranceAmount.Equals(other.InsuranceAmount)
                ) && 
                (
                    this.DutyAmount == other.DutyAmount ||
                    this.DutyAmount != null &&
                    this.DutyAmount.Equals(other.DutyAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.DiscountAmount != null)
                    hash = hash * 59 + this.DiscountAmount.GetHashCode();
                if (this.ShippingAmount != null)
                    hash = hash * 59 + this.ShippingAmount.GetHashCode();
                if (this.ShippingDiscountAmount != null)
                    hash = hash * 59 + this.ShippingDiscountAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.InsuranceAmount != null)
                    hash = hash * 59 + this.InsuranceAmount.GetHashCode();
                if (this.DutyAmount != null)
                    hash = hash * 59 + this.DutyAmount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
