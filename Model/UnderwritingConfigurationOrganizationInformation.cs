/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationOrganizationInformation
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationOrganizationInformation :  IEquatable<UnderwritingConfigurationOrganizationInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformation" /> class.
        /// </summary>
        /// <param name="ParentOrganizationId">Parent Organization ID for the application.</param>
        /// <param name="OrganizationId">Organization ID for the application.</param>
        /// <param name="BoardingPackageId">Boarding Package ID for the application.</param>
        /// <param name="BusinessInformation">BusinessInformation.</param>
        public UnderwritingConfigurationOrganizationInformation(string ParentOrganizationId = default(string), string OrganizationId = default(string), string BoardingPackageId = default(string), UnderwritingConfigurationOrganizationInformationBusinessInformation BusinessInformation = default(UnderwritingConfigurationOrganizationInformationBusinessInformation))
        {
            this.ParentOrganizationId = ParentOrganizationId;
            this.OrganizationId = OrganizationId;
            this.BoardingPackageId = BoardingPackageId;
            this.BusinessInformation = BusinessInformation;
        }
        
        /// <summary>
        /// Parent Organization ID for the application
        /// </summary>
        /// <value>Parent Organization ID for the application</value>
        [DataMember(Name="parentOrganizationId", EmitDefaultValue=false)]
        public string ParentOrganizationId { get; set; }

        /// <summary>
        /// Organization ID for the application
        /// </summary>
        /// <value>Organization ID for the application</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Boarding Package ID for the application
        /// </summary>
        /// <value>Boarding Package ID for the application</value>
        [DataMember(Name="boardingPackageId", EmitDefaultValue=false)]
        public string BoardingPackageId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessInformation
        /// </summary>
        [DataMember(Name="businessInformation", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformation BusinessInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationOrganizationInformation {\n");
            if (ParentOrganizationId != null) sb.Append("  ParentOrganizationId: ").Append(ParentOrganizationId).Append("\n");
            if (OrganizationId != null) sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            if (BoardingPackageId != null) sb.Append("  BoardingPackageId: ").Append(BoardingPackageId).Append("\n");
            if (BusinessInformation != null) sb.Append("  BusinessInformation: ").Append(BusinessInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationOrganizationInformation);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationOrganizationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationOrganizationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationOrganizationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ParentOrganizationId == other.ParentOrganizationId ||
                    this.ParentOrganizationId != null &&
                    this.ParentOrganizationId.Equals(other.ParentOrganizationId)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.BoardingPackageId == other.BoardingPackageId ||
                    this.BoardingPackageId != null &&
                    this.BoardingPackageId.Equals(other.BoardingPackageId)
                ) && 
                (
                    this.BusinessInformation == other.BusinessInformation ||
                    this.BusinessInformation != null &&
                    this.BusinessInformation.Equals(other.BusinessInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ParentOrganizationId != null)
                    hash = hash * 59 + this.ParentOrganizationId.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.BoardingPackageId != null)
                    hash = hash * 59 + this.BoardingPackageId.GetHashCode();
                if (this.BusinessInformation != null)
                    hash = hash * 59 + this.BusinessInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
