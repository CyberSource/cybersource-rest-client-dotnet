/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard
    /// </summary>
    [DataContract]
    public partial class TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard :  IEquatable<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard>, IValidatableObject
    {
        /// <summary>
        /// Type of credit card. Possible values:   * Visa (001)   * Mastercard (002) - Eurocard—European regional brand of Mastercard   * American Express (003)   * Discover (004)   * Diners Club (005)   * Carte Blanche (006)   * JCB (007)   * Optima (008)   * Twinpay Credit (011)   * Twinpay Debit (012)   * Walmart (013)   * EnRoute (014)   * Lowes consumer (015)   * Home Depot consumer (016)   * MBNA (017)   * Dicks Sportswear (018)   * Casual Corner (019)   * Sears (020)   * JAL (021)   * Disney (023)   * Maestro (024) - UK Domestic   * Sams Club consumer (025)   * Sams Club business (026)   * Nicos (027)   * Bill me later (028)   * Bebe (029)   * Restoration Hardware (030)   * Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * Solo (032)   * Visa Electron (033)   * Dankort (034)   * Laser (035)   * Carte Bleue (036) — formerly Cartes Bancaires   * Cartes Bancaires (036)   * Carta Si (037)   * pinless debit (038)   * encoded account (039)   * UATP (040)   * Household (041)   * Maestro (042) - International   * GE Money UK (043)   * Korean cards (044)   * Style (045)   * JCrew (046)   * PayEase China processing eWallet (047)   * PayEase China processing bank transfer (048)   * Meijer Private Label (049)   * Hipercard (050) — supported only by the Comercio Latino processor.   * Aura (051) — supported only by the Comercio Latino processor.   * Redecard (052)   * ORICO (053)   * Elo (054) — supported only by the Comercio Latino processor.   * Capital One Private Label (055)   * Synchrony Private Label (056)   * Costco Private Label (057)   * mada (060)   * China Union Pay (062)   * Falabella private label (063) 
        /// </summary>
        /// <value>Type of credit card. Possible values:   * Visa (001)   * Mastercard (002) - Eurocard—European regional brand of Mastercard   * American Express (003)   * Discover (004)   * Diners Club (005)   * Carte Blanche (006)   * JCB (007)   * Optima (008)   * Twinpay Credit (011)   * Twinpay Debit (012)   * Walmart (013)   * EnRoute (014)   * Lowes consumer (015)   * Home Depot consumer (016)   * MBNA (017)   * Dicks Sportswear (018)   * Casual Corner (019)   * Sears (020)   * JAL (021)   * Disney (023)   * Maestro (024) - UK Domestic   * Sams Club consumer (025)   * Sams Club business (026)   * Nicos (027)   * Bill me later (028)   * Bebe (029)   * Restoration Hardware (030)   * Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * Solo (032)   * Visa Electron (033)   * Dankort (034)   * Laser (035)   * Carte Bleue (036) — formerly Cartes Bancaires   * Cartes Bancaires (036)   * Carta Si (037)   * pinless debit (038)   * encoded account (039)   * UATP (040)   * Household (041)   * Maestro (042) - International   * GE Money UK (043)   * Korean cards (044)   * Style (045)   * JCrew (046)   * PayEase China processing eWallet (047)   * PayEase China processing bank transfer (048)   * Meijer Private Label (049)   * Hipercard (050) — supported only by the Comercio Latino processor.   * Aura (051) — supported only by the Comercio Latino processor.   * Redecard (052)   * ORICO (053)   * Elo (054) — supported only by the Comercio Latino processor.   * Capital One Private Label (055)   * Synchrony Private Label (056)   * Costco Private Label (057)   * mada (060)   * China Union Pay (062)   * Falabella private label (063) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Visa for "visa"
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa,
            
            /// <summary>
            /// Enum Mastercard for "mastercard"
            /// </summary>
            [EnumMember(Value = "mastercard")]
            Mastercard,
            
            /// <summary>
            /// Enum Americanexpress for "american express"
            /// </summary>
            [EnumMember(Value = "american express")]
            Americanexpress,
            
            /// <summary>
            /// Enum Discover for "discover"
            /// </summary>
            [EnumMember(Value = "discover")]
            Discover,
            
            /// <summary>
            /// Enum Dinersclub for "diners club"
            /// </summary>
            [EnumMember(Value = "diners club")]
            Dinersclub,
            
            /// <summary>
            /// Enum Carteblanche for "carte blanche"
            /// </summary>
            [EnumMember(Value = "carte blanche")]
            Carteblanche,
            
            /// <summary>
            /// Enum Jcb for "jcb"
            /// </summary>
            [EnumMember(Value = "jcb")]
            Jcb,
            
            /// <summary>
            /// Enum Optima for "optima"
            /// </summary>
            [EnumMember(Value = "optima")]
            Optima,
            
            /// <summary>
            /// Enum Twinpaycredit for "twinpay credit"
            /// </summary>
            [EnumMember(Value = "twinpay credit")]
            Twinpaycredit,
            
            /// <summary>
            /// Enum Twinpaydebit for "twinpay debit"
            /// </summary>
            [EnumMember(Value = "twinpay debit")]
            Twinpaydebit,
            
            /// <summary>
            /// Enum Walmart for "walmart"
            /// </summary>
            [EnumMember(Value = "walmart")]
            Walmart,
            
            /// <summary>
            /// Enum Enroute for "enroute"
            /// </summary>
            [EnumMember(Value = "enroute")]
            Enroute,
            
            /// <summary>
            /// Enum Lowesconsumer for "lowes consumer"
            /// </summary>
            [EnumMember(Value = "lowes consumer")]
            Lowesconsumer,
            
            /// <summary>
            /// Enum Homedepotconsumer for "home depot consumer"
            /// </summary>
            [EnumMember(Value = "home depot consumer")]
            Homedepotconsumer,
            
            /// <summary>
            /// Enum Mbna for "mbna"
            /// </summary>
            [EnumMember(Value = "mbna")]
            Mbna,
            
            /// <summary>
            /// Enum Dickssportswear for "dicks sportswear"
            /// </summary>
            [EnumMember(Value = "dicks sportswear")]
            Dickssportswear,
            
            /// <summary>
            /// Enum Casualcorner for "casual corner"
            /// </summary>
            [EnumMember(Value = "casual corner")]
            Casualcorner,
            
            /// <summary>
            /// Enum Sears for "sears"
            /// </summary>
            [EnumMember(Value = "sears")]
            Sears,
            
            /// <summary>
            /// Enum Jal for "jal"
            /// </summary>
            [EnumMember(Value = "jal")]
            Jal,
            
            /// <summary>
            /// Enum Disney for "disney"
            /// </summary>
            [EnumMember(Value = "disney")]
            Disney,
            
            /// <summary>
            /// Enum Maestroukdomestic for "maestro uk domestic"
            /// </summary>
            [EnumMember(Value = "maestro uk domestic")]
            Maestroukdomestic,
            
            /// <summary>
            /// Enum Samsclubconsumer for "sams club consumer"
            /// </summary>
            [EnumMember(Value = "sams club consumer")]
            Samsclubconsumer,
            
            /// <summary>
            /// Enum Samsclubbusiness for "sams club business"
            /// </summary>
            [EnumMember(Value = "sams club business")]
            Samsclubbusiness,
            
            /// <summary>
            /// Enum Nicos for "nicos"
            /// </summary>
            [EnumMember(Value = "nicos")]
            Nicos,
            
            /// <summary>
            /// Enum Billmelater for "bill me later"
            /// </summary>
            [EnumMember(Value = "bill me later")]
            Billmelater,
            
            /// <summary>
            /// Enum Bebe for "bebe"
            /// </summary>
            [EnumMember(Value = "bebe")]
            Bebe,
            
            /// <summary>
            /// Enum Restorationhardware for "restoration hardware"
            /// </summary>
            [EnumMember(Value = "restoration hardware")]
            Restorationhardware,
            
            /// <summary>
            /// Enum Deltaonline for "delta online"
            /// </summary>
            [EnumMember(Value = "delta online")]
            Deltaonline,
            
            /// <summary>
            /// Enum Solo for "solo"
            /// </summary>
            [EnumMember(Value = "solo")]
            Solo,
            
            /// <summary>
            /// Enum Visaelectron for "visa electron"
            /// </summary>
            [EnumMember(Value = "visa electron")]
            Visaelectron,
            
            /// <summary>
            /// Enum Dankort for "dankort"
            /// </summary>
            [EnumMember(Value = "dankort")]
            Dankort,
            
            /// <summary>
            /// Enum Laser for "laser"
            /// </summary>
            [EnumMember(Value = "laser")]
            Laser,
            
            /// <summary>
            /// Enum Cartebleue for "carte bleue"
            /// </summary>
            [EnumMember(Value = "carte bleue")]
            Cartebleue,
            
            /// <summary>
            /// Enum Cartasi for "carta si"
            /// </summary>
            [EnumMember(Value = "carta si")]
            Cartasi,
            
            /// <summary>
            /// Enum Pinlessdebit for "pinless debit"
            /// </summary>
            [EnumMember(Value = "pinless debit")]
            Pinlessdebit,
            
            /// <summary>
            /// Enum Encodedaccount for "encoded account"
            /// </summary>
            [EnumMember(Value = "encoded account")]
            Encodedaccount,
            
            /// <summary>
            /// Enum Uatp for "uatp"
            /// </summary>
            [EnumMember(Value = "uatp")]
            Uatp,
            
            /// <summary>
            /// Enum Household for "household"
            /// </summary>
            [EnumMember(Value = "household")]
            Household,
            
            /// <summary>
            /// Enum Maestrointernational for "maestro international"
            /// </summary>
            [EnumMember(Value = "maestro international")]
            Maestrointernational,
            
            /// <summary>
            /// Enum Gemoneyuk for "ge money uk"
            /// </summary>
            [EnumMember(Value = "ge money uk")]
            Gemoneyuk,
            
            /// <summary>
            /// Enum Koreancards for "korean cards"
            /// </summary>
            [EnumMember(Value = "korean cards")]
            Koreancards,
            
            /// <summary>
            /// Enum Style for "style"
            /// </summary>
            [EnumMember(Value = "style")]
            Style,
            
            /// <summary>
            /// Enum Jcrew for "jcrew"
            /// </summary>
            [EnumMember(Value = "jcrew")]
            Jcrew,
            
            /// <summary>
            /// Enum Payeasechinaprocessingewallet for "payease china processing ewallet"
            /// </summary>
            [EnumMember(Value = "payease china processing ewallet")]
            Payeasechinaprocessingewallet,
            
            /// <summary>
            /// Enum Payeasechinaprocessingbanktransfer for "payease china processing bank transfer"
            /// </summary>
            [EnumMember(Value = "payease china processing bank transfer")]
            Payeasechinaprocessingbanktransfer,
            
            /// <summary>
            /// Enum Meijerprivatelabel for "meijer private label"
            /// </summary>
            [EnumMember(Value = "meijer private label")]
            Meijerprivatelabel,
            
            /// <summary>
            /// Enum Hipercard for "hipercard"
            /// </summary>
            [EnumMember(Value = "hipercard")]
            Hipercard,
            
            /// <summary>
            /// Enum Aura for "aura"
            /// </summary>
            [EnumMember(Value = "aura")]
            Aura,
            
            /// <summary>
            /// Enum Redecard for "redecard"
            /// </summary>
            [EnumMember(Value = "redecard")]
            Redecard,
            
            /// <summary>
            /// Enum Orico for "orico"
            /// </summary>
            [EnumMember(Value = "orico")]
            Orico,
            
            /// <summary>
            /// Enum Elo for "elo"
            /// </summary>
            [EnumMember(Value = "elo")]
            Elo,
            
            /// <summary>
            /// Enum Capitaloneprivatelabel for "capital one private label"
            /// </summary>
            [EnumMember(Value = "capital one private label")]
            Capitaloneprivatelabel,
            
            /// <summary>
            /// Enum Synchronyprivatelabel for "synchrony private label"
            /// </summary>
            [EnumMember(Value = "synchrony private label")]
            Synchronyprivatelabel,
            
            /// <summary>
            /// Enum Chinaunionpay for "china union pay"
            /// </summary>
            [EnumMember(Value = "china union pay")]
            Chinaunionpay,
            
            /// <summary>
            /// Enum Costcoprivatelabel for "costco private label"
            /// </summary>
            [EnumMember(Value = "costco private label")]
            Costcoprivatelabel,
            
            /// <summary>
            /// Enum Mada for "mada"
            /// </summary>
            [EnumMember(Value = "mada")]
            Mada,
            
            /// <summary>
            /// Enum Falabellaprivatelabel for "falabella private label"
            /// </summary>
            [EnumMember(Value = "falabella private label")]
            Falabellaprivatelabel
        }

        /// <summary>
        /// Type of credit card. Possible values:   * Visa (001)   * Mastercard (002) - Eurocard—European regional brand of Mastercard   * American Express (003)   * Discover (004)   * Diners Club (005)   * Carte Blanche (006)   * JCB (007)   * Optima (008)   * Twinpay Credit (011)   * Twinpay Debit (012)   * Walmart (013)   * EnRoute (014)   * Lowes consumer (015)   * Home Depot consumer (016)   * MBNA (017)   * Dicks Sportswear (018)   * Casual Corner (019)   * Sears (020)   * JAL (021)   * Disney (023)   * Maestro (024) - UK Domestic   * Sams Club consumer (025)   * Sams Club business (026)   * Nicos (027)   * Bill me later (028)   * Bebe (029)   * Restoration Hardware (030)   * Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * Solo (032)   * Visa Electron (033)   * Dankort (034)   * Laser (035)   * Carte Bleue (036) — formerly Cartes Bancaires   * Cartes Bancaires (036)   * Carta Si (037)   * pinless debit (038)   * encoded account (039)   * UATP (040)   * Household (041)   * Maestro (042) - International   * GE Money UK (043)   * Korean cards (044)   * Style (045)   * JCrew (046)   * PayEase China processing eWallet (047)   * PayEase China processing bank transfer (048)   * Meijer Private Label (049)   * Hipercard (050) — supported only by the Comercio Latino processor.   * Aura (051) — supported only by the Comercio Latino processor.   * Redecard (052)   * ORICO (053)   * Elo (054) — supported only by the Comercio Latino processor.   * Capital One Private Label (055)   * Synchrony Private Label (056)   * Costco Private Label (057)   * mada (060)   * China Union Pay (062)   * Falabella private label (063) 
        /// </summary>
        /// <value>Type of credit card. Possible values:   * Visa (001)   * Mastercard (002) - Eurocard—European regional brand of Mastercard   * American Express (003)   * Discover (004)   * Diners Club (005)   * Carte Blanche (006)   * JCB (007)   * Optima (008)   * Twinpay Credit (011)   * Twinpay Debit (012)   * Walmart (013)   * EnRoute (014)   * Lowes consumer (015)   * Home Depot consumer (016)   * MBNA (017)   * Dicks Sportswear (018)   * Casual Corner (019)   * Sears (020)   * JAL (021)   * Disney (023)   * Maestro (024) - UK Domestic   * Sams Club consumer (025)   * Sams Club business (026)   * Nicos (027)   * Bill me later (028)   * Bebe (029)   * Restoration Hardware (030)   * Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * Solo (032)   * Visa Electron (033)   * Dankort (034)   * Laser (035)   * Carte Bleue (036) — formerly Cartes Bancaires   * Cartes Bancaires (036)   * Carta Si (037)   * pinless debit (038)   * encoded account (039)   * UATP (040)   * Household (041)   * Maestro (042) - International   * GE Money UK (043)   * Korean cards (044)   * Style (045)   * JCrew (046)   * PayEase China processing eWallet (047)   * PayEase China processing bank transfer (048)   * Meijer Private Label (049)   * Hipercard (050) — supported only by the Comercio Latino processor.   * Aura (051) — supported only by the Comercio Latino processor.   * Redecard (052)   * ORICO (053)   * Elo (054) — supported only by the Comercio Latino processor.   * Capital One Private Label (055)   * Synchrony Private Label (056)   * Costco Private Label (057)   * mada (060)   * China Union Pay (062)   * Falabella private label (063) </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard" /> class.
        /// </summary>
        /// <param name="ExpirationMonth">Two-digit month in which the credit card expires. Format: &#x60;MM&#x60; Possible values: &#x60;01&#x60; through &#x60;12&#x60;  This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.  Important: It is your responsibility to determine whether a field is required for the transaction you are requesting. .</param>
        /// <param name="ExpirationYear">Four-digit year in which the credit card expires. Format: &#x60;YYYY&#x60;. Possible values: &#x60;1900&#x60; through &#x60;2099&#x60;.  **FDC Nashville Global and FDMS South** You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See Relaxed Requirements for Address Data and Expiration Date page.  Important: It is your responsibility to determine whether a field is required for the transaction you are requesting.&#39; .</param>
        /// <param name="Type">Type of credit card. Possible values:   * Visa (001)   * Mastercard (002) - Eurocard—European regional brand of Mastercard   * American Express (003)   * Discover (004)   * Diners Club (005)   * Carte Blanche (006)   * JCB (007)   * Optima (008)   * Twinpay Credit (011)   * Twinpay Debit (012)   * Walmart (013)   * EnRoute (014)   * Lowes consumer (015)   * Home Depot consumer (016)   * MBNA (017)   * Dicks Sportswear (018)   * Casual Corner (019)   * Sears (020)   * JAL (021)   * Disney (023)   * Maestro (024) - UK Domestic   * Sams Club consumer (025)   * Sams Club business (026)   * Nicos (027)   * Bill me later (028)   * Bebe (029)   * Restoration Hardware (030)   * Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * Solo (032)   * Visa Electron (033)   * Dankort (034)   * Laser (035)   * Carte Bleue (036) — formerly Cartes Bancaires   * Cartes Bancaires (036)   * Carta Si (037)   * pinless debit (038)   * encoded account (039)   * UATP (040)   * Household (041)   * Maestro (042) - International   * GE Money UK (043)   * Korean cards (044)   * Style (045)   * JCrew (046)   * PayEase China processing eWallet (047)   * PayEase China processing bank transfer (048)   * Meijer Private Label (049)   * Hipercard (050) — supported only by the Comercio Latino processor.   * Aura (051) — supported only by the Comercio Latino processor.   * Redecard (052)   * ORICO (053)   * Elo (054) — supported only by the Comercio Latino processor.   * Capital One Private Label (055)   * Synchrony Private Label (056)   * Costco Private Label (057)   * mada (060)   * China Union Pay (062)   * Falabella private label (063)  (required).</param>
        /// <param name="IssueNumber">Number of times a Maestro (UK Domestic) card has been issued to the account holder..</param>
        /// <param name="StartMonth">Month of the start of the Maestro (UK Domestic) card validity period.  Format: &#x60;MM&#x60;. Possible values: &#x60;01&#x60; through &#x60;12&#x60;. .</param>
        /// <param name="StartYear">Year of the start of the Maestro (UK Domestic) card validity period.  Format: &#x60;YYYY&#x60;. Possible values: &#x60;1900&#x60; through &#x60;2099&#x60;. .</param>
        /// <param name="UseAs">Card Use As Field. Supported value of &#x60;pinless debit&#x60; only. Only for use with Pinless Debit tokens..</param>
        public TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard(string ExpirationMonth = default(string), string ExpirationYear = default(string), TypeEnum? Type = default(TypeEnum?), string IssueNumber = default(string), string StartMonth = default(string), string StartYear = default(string), string UseAs = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.ExpirationMonth = ExpirationMonth;
            this.ExpirationYear = ExpirationYear;
            this.IssueNumber = IssueNumber;
            this.StartMonth = StartMonth;
            this.StartYear = StartYear;
            this.UseAs = UseAs;
        }
        
        /// <summary>
        /// Two-digit month in which the credit card expires. Format: &#x60;MM&#x60; Possible values: &#x60;01&#x60; through &#x60;12&#x60;  This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.  Important: It is your responsibility to determine whether a field is required for the transaction you are requesting. 
        /// </summary>
        /// <value>Two-digit month in which the credit card expires. Format: &#x60;MM&#x60; Possible values: &#x60;01&#x60; through &#x60;12&#x60;  This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.  Important: It is your responsibility to determine whether a field is required for the transaction you are requesting. </value>
        [DataMember(Name="expirationMonth", EmitDefaultValue=false)]
        public string ExpirationMonth { get; set; }

        /// <summary>
        /// Four-digit year in which the credit card expires. Format: &#x60;YYYY&#x60;. Possible values: &#x60;1900&#x60; through &#x60;2099&#x60;.  **FDC Nashville Global and FDMS South** You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See Relaxed Requirements for Address Data and Expiration Date page.  Important: It is your responsibility to determine whether a field is required for the transaction you are requesting.&#39; 
        /// </summary>
        /// <value>Four-digit year in which the credit card expires. Format: &#x60;YYYY&#x60;. Possible values: &#x60;1900&#x60; through &#x60;2099&#x60;.  **FDC Nashville Global and FDMS South** You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See Relaxed Requirements for Address Data and Expiration Date page.  Important: It is your responsibility to determine whether a field is required for the transaction you are requesting.&#39; </value>
        [DataMember(Name="expirationYear", EmitDefaultValue=false)]
        public string ExpirationYear { get; set; }


        /// <summary>
        /// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
        /// </summary>
        /// <value>Number of times a Maestro (UK Domestic) card has been issued to the account holder.</value>
        [DataMember(Name="issueNumber", EmitDefaultValue=false)]
        public string IssueNumber { get; set; }

        /// <summary>
        /// Month of the start of the Maestro (UK Domestic) card validity period.  Format: &#x60;MM&#x60;. Possible values: &#x60;01&#x60; through &#x60;12&#x60;. 
        /// </summary>
        /// <value>Month of the start of the Maestro (UK Domestic) card validity period.  Format: &#x60;MM&#x60;. Possible values: &#x60;01&#x60; through &#x60;12&#x60;. </value>
        [DataMember(Name="startMonth", EmitDefaultValue=false)]
        public string StartMonth { get; set; }

        /// <summary>
        /// Year of the start of the Maestro (UK Domestic) card validity period.  Format: &#x60;YYYY&#x60;. Possible values: &#x60;1900&#x60; through &#x60;2099&#x60;. 
        /// </summary>
        /// <value>Year of the start of the Maestro (UK Domestic) card validity period.  Format: &#x60;YYYY&#x60;. Possible values: &#x60;1900&#x60; through &#x60;2099&#x60;. </value>
        [DataMember(Name="startYear", EmitDefaultValue=false)]
        public string StartYear { get; set; }

        /// <summary>
        /// Card Use As Field. Supported value of &#x60;pinless debit&#x60; only. Only for use with Pinless Debit tokens.
        /// </summary>
        /// <value>Card Use As Field. Supported value of &#x60;pinless debit&#x60; only. Only for use with Pinless Debit tokens.</value>
        [DataMember(Name="useAs", EmitDefaultValue=false)]
        public string UseAs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard {\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IssueNumber: ").Append(IssueNumber).Append("\n");
            sb.Append("  StartMonth: ").Append(StartMonth).Append("\n");
            sb.Append("  StartYear: ").Append(StartYear).Append("\n");
            sb.Append("  UseAs: ").Append(UseAs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard);
        }

        /// <summary>
        /// Returns true if TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsV1InstrumentIdentifiersPaymentInstrumentsGet200ResponseCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExpirationMonth == other.ExpirationMonth ||
                    this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    this.ExpirationYear == other.ExpirationYear ||
                    this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(other.ExpirationYear)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.IssueNumber == other.IssueNumber ||
                    this.IssueNumber != null &&
                    this.IssueNumber.Equals(other.IssueNumber)
                ) && 
                (
                    this.StartMonth == other.StartMonth ||
                    this.StartMonth != null &&
                    this.StartMonth.Equals(other.StartMonth)
                ) && 
                (
                    this.StartYear == other.StartYear ||
                    this.StartYear != null &&
                    this.StartYear.Equals(other.StartYear)
                ) && 
                (
                    this.UseAs == other.UseAs ||
                    this.UseAs != null &&
                    this.UseAs.Equals(other.UseAs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExpirationMonth != null)
                    hash = hash * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hash = hash * 59 + this.ExpirationYear.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.IssueNumber != null)
                    hash = hash * 59 + this.IssueNumber.GetHashCode();
                if (this.StartMonth != null)
                    hash = hash * 59 + this.StartMonth.GetHashCode();
                if (this.StartYear != null)
                    hash = hash * 59 + this.StartYear.GetHashCode();
                if (this.UseAs != null)
                    hash = hash * 59 + this.UseAs.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExpirationMonth (string) maxLength
            if(this.ExpirationMonth != null && this.ExpirationMonth.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationMonth, length must be less than 2.", new [] { "ExpirationMonth" });
            }

            // ExpirationMonth (string) minLength
            if(this.ExpirationMonth != null && this.ExpirationMonth.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationMonth, length must be greater than 2.", new [] { "ExpirationMonth" });
            }

            // ExpirationYear (string) maxLength
            if(this.ExpirationYear != null && this.ExpirationYear.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationYear, length must be less than 4.", new [] { "ExpirationYear" });
            }

            // ExpirationYear (string) minLength
            if(this.ExpirationYear != null && this.ExpirationYear.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationYear, length must be greater than 4.", new [] { "ExpirationYear" });
            }

            // IssueNumber (string) maxLength
            if(this.IssueNumber != null && this.IssueNumber.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssueNumber, length must be less than 2.", new [] { "IssueNumber" });
            }

            // IssueNumber (string) minLength
            if(this.IssueNumber != null && this.IssueNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssueNumber, length must be greater than 1.", new [] { "IssueNumber" });
            }

            // StartMonth (string) maxLength
            if(this.StartMonth != null && this.StartMonth.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartMonth, length must be less than 2.", new [] { "StartMonth" });
            }

            // StartMonth (string) minLength
            if(this.StartMonth != null && this.StartMonth.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartMonth, length must be greater than 2.", new [] { "StartMonth" });
            }

            // StartYear (string) maxLength
            if(this.StartYear != null && this.StartYear.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartYear, length must be less than 4.", new [] { "StartYear" });
            }

            // StartYear (string) minLength
            if(this.StartYear != null && this.StartYear.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartYear, length must be greater than 4.", new [] { "StartYear" });
            }

            yield break;
        }
    }

}
