/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentreferencesUserInterfaceColor
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentreferencesUserInterfaceColor :  IEquatable<Ptsv2paymentreferencesUserInterfaceColor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentreferencesUserInterfaceColor" /> class.
        /// </summary>
        /// <param name="Border">Border Color .</param>
        /// <param name="BorderSelected">Selected Border Color .</param>
        /// <param name="Button">Button Color .</param>
        /// <param name="ButtonText">Button Text Color .</param>
        /// <param name="Checkbox">Checkbox Color .</param>
        /// <param name="CheckboxCheckMark">Checkbox Checkmark Color .</param>
        /// <param name="Header">Header Color .</param>
        /// <param name="Link">Link Color .</param>
        /// <param name="Text">Text Color .</param>
        public Ptsv2paymentreferencesUserInterfaceColor(string Border = default(string), string BorderSelected = default(string), string Button = default(string), string ButtonText = default(string), string Checkbox = default(string), string CheckboxCheckMark = default(string), string Header = default(string), string Link = default(string), string Text = default(string))
        {
            this.Border = Border;
            this.BorderSelected = BorderSelected;
            this.Button = Button;
            this.ButtonText = ButtonText;
            this.Checkbox = Checkbox;
            this.CheckboxCheckMark = CheckboxCheckMark;
            this.Header = Header;
            this.Link = Link;
            this.Text = Text;
        }
        
        /// <summary>
        /// Border Color 
        /// </summary>
        /// <value>Border Color </value>
        [DataMember(Name="border", EmitDefaultValue=false)]
        public string Border { get; set; }

        /// <summary>
        /// Selected Border Color 
        /// </summary>
        /// <value>Selected Border Color </value>
        [DataMember(Name="borderSelected", EmitDefaultValue=false)]
        public string BorderSelected { get; set; }

        /// <summary>
        /// Button Color 
        /// </summary>
        /// <value>Button Color </value>
        [DataMember(Name="button", EmitDefaultValue=false)]
        public string Button { get; set; }

        /// <summary>
        /// Button Text Color 
        /// </summary>
        /// <value>Button Text Color </value>
        [DataMember(Name="buttonText", EmitDefaultValue=false)]
        public string ButtonText { get; set; }

        /// <summary>
        /// Checkbox Color 
        /// </summary>
        /// <value>Checkbox Color </value>
        [DataMember(Name="checkbox", EmitDefaultValue=false)]
        public string Checkbox { get; set; }

        /// <summary>
        /// Checkbox Checkmark Color 
        /// </summary>
        /// <value>Checkbox Checkmark Color </value>
        [DataMember(Name="checkboxCheckMark", EmitDefaultValue=false)]
        public string CheckboxCheckMark { get; set; }

        /// <summary>
        /// Header Color 
        /// </summary>
        /// <value>Header Color </value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Link Color 
        /// </summary>
        /// <value>Link Color </value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Text Color 
        /// </summary>
        /// <value>Text Color </value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentreferencesUserInterfaceColor {\n");
            sb.Append("  Border: ").Append(Border).Append("\n");
            sb.Append("  BorderSelected: ").Append(BorderSelected).Append("\n");
            sb.Append("  Button: ").Append(Button).Append("\n");
            sb.Append("  ButtonText: ").Append(ButtonText).Append("\n");
            sb.Append("  Checkbox: ").Append(Checkbox).Append("\n");
            sb.Append("  CheckboxCheckMark: ").Append(CheckboxCheckMark).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentreferencesUserInterfaceColor);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentreferencesUserInterfaceColor instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentreferencesUserInterfaceColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentreferencesUserInterfaceColor other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Border == other.Border ||
                    this.Border != null &&
                    this.Border.Equals(other.Border)
                ) && 
                (
                    this.BorderSelected == other.BorderSelected ||
                    this.BorderSelected != null &&
                    this.BorderSelected.Equals(other.BorderSelected)
                ) && 
                (
                    this.Button == other.Button ||
                    this.Button != null &&
                    this.Button.Equals(other.Button)
                ) && 
                (
                    this.ButtonText == other.ButtonText ||
                    this.ButtonText != null &&
                    this.ButtonText.Equals(other.ButtonText)
                ) && 
                (
                    this.Checkbox == other.Checkbox ||
                    this.Checkbox != null &&
                    this.Checkbox.Equals(other.Checkbox)
                ) && 
                (
                    this.CheckboxCheckMark == other.CheckboxCheckMark ||
                    this.CheckboxCheckMark != null &&
                    this.CheckboxCheckMark.Equals(other.CheckboxCheckMark)
                ) && 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Border != null)
                    hash = hash * 59 + this.Border.GetHashCode();
                if (this.BorderSelected != null)
                    hash = hash * 59 + this.BorderSelected.GetHashCode();
                if (this.Button != null)
                    hash = hash * 59 + this.Button.GetHashCode();
                if (this.ButtonText != null)
                    hash = hash * 59 + this.ButtonText.GetHashCode();
                if (this.Checkbox != null)
                    hash = hash * 59 + this.Checkbox.GetHashCode();
                if (this.CheckboxCheckMark != null)
                    hash = hash * 59 + this.CheckboxCheckMark.GetHashCode();
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
