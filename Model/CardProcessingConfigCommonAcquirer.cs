/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant.
    /// </summary>
    [DataContract]
    public partial class CardProcessingConfigCommonAcquirer :  IEquatable<CardProcessingConfigCommonAcquirer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigCommonAcquirer" /> class.
        /// </summary>
        /// <param name="InstitutionId">Identifier of the acquirer. This number is usually assigned by Visa. Applicable for VPC, GPX (gpx), CMCIC (cmcic), EFTPOS, CB2A, CUP, American Express Direct (amexdirect) and Six (six) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;td&gt;1111&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="InterbankCardAssociationId">Number assigned by MasterCard to banks to identify the member in transactions. Applicable for VPC and GPX (gpx) processors..</param>
        /// <param name="DiscoverInstitutionId">Assigned by Discover to identify the acquirer. Applicable for VPC and GPX (gpx) processors..</param>
        /// <param name="UnionPayInstitutionId">Assigned by China Union Pay to identify the acquirer. Applicable for VPC processors..</param>
        /// <param name="DinersClubInstitutionId">Assigned by Diners Club to identify the acquirer. Applicable for VPC processors..</param>
        /// <param name="CountryCode">ISO 4217 format. Applicable for VPC, GPX (gpx), EFTPOS, RUPAY, Prisma (prisma) and CUP processors..</param>
        /// <param name="FileDestinationBin">The BIN to which this capturefile is sent. This field must contain a valid BIN. Applicable for VPC and GPX (gpx) processors..</param>
        public CardProcessingConfigCommonAcquirer(string InstitutionId = default(string), string InterbankCardAssociationId = default(string), string DiscoverInstitutionId = default(string), string UnionPayInstitutionId = default(string), string DinersClubInstitutionId = default(string), string CountryCode = default(string), string FileDestinationBin = default(string))
        {
            this.InstitutionId = InstitutionId;
            this.InterbankCardAssociationId = InterbankCardAssociationId;
            this.DiscoverInstitutionId = DiscoverInstitutionId;
            this.UnionPayInstitutionId = UnionPayInstitutionId;
            this.DinersClubInstitutionId = DinersClubInstitutionId;
            this.CountryCode = CountryCode;
            this.FileDestinationBin = FileDestinationBin;
        }
        
        /// <summary>
        /// Identifier of the acquirer. This number is usually assigned by Visa. Applicable for VPC, GPX (gpx), CMCIC (cmcic), EFTPOS, CB2A, CUP, American Express Direct (amexdirect) and Six (six) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;td&gt;1111&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Identifier of the acquirer. This number is usually assigned by Visa. Applicable for VPC, GPX (gpx), CMCIC (cmcic), EFTPOS, CB2A, CUP, American Express Direct (amexdirect) and Six (six) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;td&gt;1111&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="institutionId", EmitDefaultValue=false)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// Number assigned by MasterCard to banks to identify the member in transactions. Applicable for VPC and GPX (gpx) processors.
        /// </summary>
        /// <value>Number assigned by MasterCard to banks to identify the member in transactions. Applicable for VPC and GPX (gpx) processors.</value>
        [DataMember(Name="interbankCardAssociationId", EmitDefaultValue=false)]
        public string InterbankCardAssociationId { get; set; }

        /// <summary>
        /// Assigned by Discover to identify the acquirer. Applicable for VPC and GPX (gpx) processors.
        /// </summary>
        /// <value>Assigned by Discover to identify the acquirer. Applicable for VPC and GPX (gpx) processors.</value>
        [DataMember(Name="discoverInstitutionId", EmitDefaultValue=false)]
        public string DiscoverInstitutionId { get; set; }

        /// <summary>
        /// Assigned by China Union Pay to identify the acquirer. Applicable for VPC processors.
        /// </summary>
        /// <value>Assigned by China Union Pay to identify the acquirer. Applicable for VPC processors.</value>
        [DataMember(Name="unionPayInstitutionId", EmitDefaultValue=false)]
        public string UnionPayInstitutionId { get; set; }

        /// <summary>
        /// Assigned by Diners Club to identify the acquirer. Applicable for VPC processors.
        /// </summary>
        /// <value>Assigned by Diners Club to identify the acquirer. Applicable for VPC processors.</value>
        [DataMember(Name="dinersClubInstitutionId", EmitDefaultValue=false)]
        public string DinersClubInstitutionId { get; set; }

        /// <summary>
        /// ISO 4217 format. Applicable for VPC, GPX (gpx), EFTPOS, RUPAY, Prisma (prisma) and CUP processors.
        /// </summary>
        /// <value>ISO 4217 format. Applicable for VPC, GPX (gpx), EFTPOS, RUPAY, Prisma (prisma) and CUP processors.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The BIN to which this capturefile is sent. This field must contain a valid BIN. Applicable for VPC and GPX (gpx) processors.
        /// </summary>
        /// <value>The BIN to which this capturefile is sent. This field must contain a valid BIN. Applicable for VPC and GPX (gpx) processors.</value>
        [DataMember(Name="fileDestinationBin", EmitDefaultValue=false)]
        public string FileDestinationBin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProcessingConfigCommonAcquirer {\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  InterbankCardAssociationId: ").Append(InterbankCardAssociationId).Append("\n");
            sb.Append("  DiscoverInstitutionId: ").Append(DiscoverInstitutionId).Append("\n");
            sb.Append("  UnionPayInstitutionId: ").Append(UnionPayInstitutionId).Append("\n");
            sb.Append("  DinersClubInstitutionId: ").Append(DinersClubInstitutionId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  FileDestinationBin: ").Append(FileDestinationBin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardProcessingConfigCommonAcquirer);
        }

        /// <summary>
        /// Returns true if CardProcessingConfigCommonAcquirer instances are equal
        /// </summary>
        /// <param name="other">Instance of CardProcessingConfigCommonAcquirer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProcessingConfigCommonAcquirer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InstitutionId == other.InstitutionId ||
                    this.InstitutionId != null &&
                    this.InstitutionId.Equals(other.InstitutionId)
                ) && 
                (
                    this.InterbankCardAssociationId == other.InterbankCardAssociationId ||
                    this.InterbankCardAssociationId != null &&
                    this.InterbankCardAssociationId.Equals(other.InterbankCardAssociationId)
                ) && 
                (
                    this.DiscoverInstitutionId == other.DiscoverInstitutionId ||
                    this.DiscoverInstitutionId != null &&
                    this.DiscoverInstitutionId.Equals(other.DiscoverInstitutionId)
                ) && 
                (
                    this.UnionPayInstitutionId == other.UnionPayInstitutionId ||
                    this.UnionPayInstitutionId != null &&
                    this.UnionPayInstitutionId.Equals(other.UnionPayInstitutionId)
                ) && 
                (
                    this.DinersClubInstitutionId == other.DinersClubInstitutionId ||
                    this.DinersClubInstitutionId != null &&
                    this.DinersClubInstitutionId.Equals(other.DinersClubInstitutionId)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.FileDestinationBin == other.FileDestinationBin ||
                    this.FileDestinationBin != null &&
                    this.FileDestinationBin.Equals(other.FileDestinationBin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InstitutionId != null)
                    hash = hash * 59 + this.InstitutionId.GetHashCode();
                if (this.InterbankCardAssociationId != null)
                    hash = hash * 59 + this.InterbankCardAssociationId.GetHashCode();
                if (this.DiscoverInstitutionId != null)
                    hash = hash * 59 + this.DiscoverInstitutionId.GetHashCode();
                if (this.UnionPayInstitutionId != null)
                    hash = hash * 59 + this.UnionPayInstitutionId.GetHashCode();
                if (this.DinersClubInstitutionId != null)
                    hash = hash * 59 + this.DinersClubInstitutionId.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.FileDestinationBin != null)
                    hash = hash * 59 + this.FileDestinationBin.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
