/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Upv1capturecontextsCaptureMandate
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsCaptureMandate :  IEquatable<Upv1capturecontextsCaptureMandate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsCaptureMandate" /> class.
        /// </summary>
        /// <param name="BillingType">This field defines the type of Billing Address information captured through the Manual card Entry UX. FULL, PARTIAL.</param>
        /// <param name="RequestEmail">Capture email contact information in the manual card acceptance screens..</param>
        /// <param name="RequestPhone">Capture email contact information in the manual card acceptance screens..</param>
        /// <param name="RequestShipping">Capture email contact information in the manual card acceptance screens..</param>
        /// <param name="ShipToCountries">List of countries available to ship to. Use the two- character ISO Standard Country Codes..</param>
        /// <param name="ShowAcceptedNetworkIcons">Show the list of accepted payment icons in the payment button.</param>
        public Upv1capturecontextsCaptureMandate(string BillingType = default(string), bool? RequestEmail = default(bool?), bool? RequestPhone = default(bool?), bool? RequestShipping = default(bool?), List<string> ShipToCountries = default(List<string>), bool? ShowAcceptedNetworkIcons = default(bool?))
        {
            this.BillingType = BillingType;
            this.RequestEmail = RequestEmail;
            this.RequestPhone = RequestPhone;
            this.RequestShipping = RequestShipping;
            this.ShipToCountries = ShipToCountries;
            this.ShowAcceptedNetworkIcons = ShowAcceptedNetworkIcons;
        }
        
        /// <summary>
        /// This field defines the type of Billing Address information captured through the Manual card Entry UX. FULL, PARTIAL
        /// </summary>
        /// <value>This field defines the type of Billing Address information captured through the Manual card Entry UX. FULL, PARTIAL</value>
        [DataMember(Name="billingType", EmitDefaultValue=false)]
        public string BillingType { get; set; }

        /// <summary>
        /// Capture email contact information in the manual card acceptance screens.
        /// </summary>
        /// <value>Capture email contact information in the manual card acceptance screens.</value>
        [DataMember(Name="requestEmail", EmitDefaultValue=false)]
        public bool? RequestEmail { get; set; }

        /// <summary>
        /// Capture email contact information in the manual card acceptance screens.
        /// </summary>
        /// <value>Capture email contact information in the manual card acceptance screens.</value>
        [DataMember(Name="requestPhone", EmitDefaultValue=false)]
        public bool? RequestPhone { get; set; }

        /// <summary>
        /// Capture email contact information in the manual card acceptance screens.
        /// </summary>
        /// <value>Capture email contact information in the manual card acceptance screens.</value>
        [DataMember(Name="requestShipping", EmitDefaultValue=false)]
        public bool? RequestShipping { get; set; }

        /// <summary>
        /// List of countries available to ship to. Use the two- character ISO Standard Country Codes.
        /// </summary>
        /// <value>List of countries available to ship to. Use the two- character ISO Standard Country Codes.</value>
        [DataMember(Name="shipToCountries", EmitDefaultValue=false)]
        public List<string> ShipToCountries { get; set; }

        /// <summary>
        /// Show the list of accepted payment icons in the payment button
        /// </summary>
        /// <value>Show the list of accepted payment icons in the payment button</value>
        [DataMember(Name="showAcceptedNetworkIcons", EmitDefaultValue=false)]
        public bool? ShowAcceptedNetworkIcons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsCaptureMandate {\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  RequestEmail: ").Append(RequestEmail).Append("\n");
            sb.Append("  RequestPhone: ").Append(RequestPhone).Append("\n");
            sb.Append("  RequestShipping: ").Append(RequestShipping).Append("\n");
            sb.Append("  ShipToCountries: ").Append(ShipToCountries).Append("\n");
            sb.Append("  ShowAcceptedNetworkIcons: ").Append(ShowAcceptedNetworkIcons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsCaptureMandate);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsCaptureMandate instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsCaptureMandate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsCaptureMandate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BillingType == other.BillingType ||
                    this.BillingType != null &&
                    this.BillingType.Equals(other.BillingType)
                ) && 
                (
                    this.RequestEmail == other.RequestEmail ||
                    this.RequestEmail != null &&
                    this.RequestEmail.Equals(other.RequestEmail)
                ) && 
                (
                    this.RequestPhone == other.RequestPhone ||
                    this.RequestPhone != null &&
                    this.RequestPhone.Equals(other.RequestPhone)
                ) && 
                (
                    this.RequestShipping == other.RequestShipping ||
                    this.RequestShipping != null &&
                    this.RequestShipping.Equals(other.RequestShipping)
                ) && 
                (
                    this.ShipToCountries == other.ShipToCountries ||
                    this.ShipToCountries != null &&
                    this.ShipToCountries.SequenceEqual(other.ShipToCountries)
                ) && 
                (
                    this.ShowAcceptedNetworkIcons == other.ShowAcceptedNetworkIcons ||
                    this.ShowAcceptedNetworkIcons != null &&
                    this.ShowAcceptedNetworkIcons.Equals(other.ShowAcceptedNetworkIcons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BillingType != null)
                    hash = hash * 59 + this.BillingType.GetHashCode();
                if (this.RequestEmail != null)
                    hash = hash * 59 + this.RequestEmail.GetHashCode();
                if (this.RequestPhone != null)
                    hash = hash * 59 + this.RequestPhone.GetHashCode();
                if (this.RequestShipping != null)
                    hash = hash * 59 + this.RequestShipping.GetHashCode();
                if (this.ShipToCountries != null)
                    hash = hash * 59 + this.ShipToCountries.GetHashCode();
                if (this.ShowAcceptedNetworkIcons != null)
                    hash = hash * 59 + this.ShowAcceptedNetworkIcons.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
