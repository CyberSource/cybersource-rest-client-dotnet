/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsConsumerAuthenticationInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsConsumerAuthenticationInformation :  IEquatable<Ptsv2paymentsConsumerAuthenticationInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsConsumerAuthenticationInformation" /> class.
        /// </summary>
        /// <param name="Cavv">Cardholder authentication verification value (CAVV)..</param>
        /// <param name="CavvAlgorithm">Algorithm used to generate the CAVV for Visa Secure or the UCAF authentication data for Mastercard Identity Check. .</param>
        /// <param name="EciRaw">Raw electronic commerce indicator (ECI).  For details, see &#x60;eci_raw&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) .</param>
        /// <param name="ParesStatus">Payer authentication response status.  For details, see &#x60;pares_status&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) .</param>
        /// <param name="VeresEnrolled">Verification response enrollment status.  For details, see &#x60;veres_enrolled&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) .</param>
        /// <param name="Xid">Transaction identifier.  For details, see &#x60;xid&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) .</param>
        /// <param name="UcafCollectionIndicator">Universal cardholder authentication field (UCAF) collection indicator.  For details, see &#x60;ucaf_collection_indicator&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR7 - Position: 5 - Field: Mastercard Electronic Commerce Indicators—UCAF Collection Indicator .</param>
        /// <param name="UcafAuthenticationData">Universal cardholder authentication field (UCAF) data.  For details, see &#x60;ucaf_authentication_data&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) .</param>
        /// <param name="StrongAuthentication">StrongAuthentication.</param>
        /// <param name="DirectoryServerTransactionId">The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID .</param>
        /// <param name="PaSpecificationVersion">This field contains 3DS version that was used for Secured Consumer Authentication (SCA). For example 3DS secure version 1.0.2 or 2.0.0 is used for Secured Consumer Authentication. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 113 , Field: MC AVV Verification—Program Protocol It will contain one of the following values: - &#x60;1&#x60; (3D Secure Version 1.0 (3DS 1.0)) - &#x60;2&#x60; (EMV 3-D Secure (3DS 2.0)) .</param>
        /// <param name="AuthenticationType">Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. .</param>
        /// <param name="AcsTransactionId">Unique transaction identifier assigned by the ACS to identify a single transaction.  This field is supported for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. .</param>
        /// <param name="AcsWindowSize">An override field that a merchant can pass in to set the challenge window size to display to the end cardholder.  The ACS (Active Control Server) will reply with content that is formatted appropriately to this window size to allow for the best user experience.  The sizes are width x height in pixels of the window displayed in the cardholder browser window.  01 - 250x400  02 - 390x400  03 - 500x600  04 - 600x400  05 - Full page .</param>
        /// <param name="AlternateAuthenticationData">Data that documents and supports a specific authentication process. .</param>
        /// <param name="AlternateAuthenticationDate">Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM .</param>
        /// <param name="AlternateAuthenticationMethod">Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using issuer credentials - &#x60;05&#x60;: Login using third-party authenticator - &#x60;06&#x60;: Login using FIDO Authenticator .</param>
        /// <param name="AuthenticationDate">The date/time of the authentication at the 3DS servers. RISK update authorization service in auth request payload with value returned in &#x60;consumerAuthenticationInformation.alternateAuthenticationData&#x60; if merchant calls via CYBS or field can be provided by merchant in authorization request if calling an external 3DS provider.  This field is supported for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. Format: YYYYMMDDHHMMSS .</param>
        /// <param name="AuthenticationTransactionId">Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. .</param>
        /// <param name="ChallengeCancelCode">An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK .</param>
        /// <param name="ChallengeCode">Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05&#x60;: No challenge requested (transactional risk analysis is already performed) - &#x60;06&#x60;: No challenge requested (Data share only) - &#x60;07&#x60;: No challenge requested (strong consumer authentication is already performed) - &#x60;08&#x60;: No challenge requested (utilize whitelist exemption if no challenge required) - &#x60;09&#x60;: Challenge requested (whitelist prompt requested if challenge required) **Note** This field will default to &#x60;01&#x60; on merchant configuration and can be overridden by the merchant. EMV 3D Secure version 2.1.0 supports values &#x60;01-04&#x60;. Version 2.2.0 supports values &#x60;01-09&#x60;.  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html) .</param>
        /// <param name="ChallengeStatus">The &#x60;consumerAuthenticationInformation.challengeCode&#x60; indicates the authentication type/level, or challenge, that was presented to the cardholder at checkout by the merchant when calling the Carte Bancaire 3DS servers via CYBS RISK services. It conveys to the issuer the alternative authentication methods that the consumer used. .</param>
        /// <param name="CustomerCardAlias">An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. .</param>
        /// <param name="DecoupledAuthenticationIndicator">Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N .</param>
        /// <param name="DecoupledAuthenticationMaxTime">Indicates the maximum amount of time that the 3DS Requestor will wait for an ACS (Active control server) to provide the results of a Decoupled Authentication transaction (in minutes). Possible Values: Numeric values between 1 and 10080 accepted. .</param>
        /// <param name="DefaultCard">Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. .</param>
        /// <param name="DeviceChannel">Determines the channel that the transaction came through. Possible Values: SDK/Browser/3RI. 3RI - 3DS request initiated. .</param>
        /// <param name="InstallmentTotalCount">An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. .</param>
        /// <param name="MerchantFraudRate">Calculated by merchants as per PSD2** RTS** (EEA** card fraud divided by all EEA card volumes). Possible Values: 1 &#x3D; Represents fraud rate &lt;&#x3D;1  2 &#x3D; Represents fraud rate &gt;1 and &lt;&#x3D;6  3 &#x3D; Represents fraud rate &gt;6 and &lt;&#x3D;13  4 &#x3D; Represents fraud rate &gt;13 and &lt;&#x3D;25  5 &#x3D; Represents fraud rate &gt;25  EEA** &#x3D; European Economic Area RTS** &#x3D; Regulatory Technical Standards PSD2** &#x3D; Payment Services Directive .</param>
        /// <param name="MarketingOptIn">Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. .</param>
        /// <param name="MarketingSource">Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. .</param>
        /// <param name="Mcc">Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. .</param>
        /// <param name="MerchantScore">Risk Score provided by merchants. This is specific for CB transactions. .</param>
        /// <param name="MessageCategory">Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use .</param>
        /// <param name="NetworkScore">The global score calculated by the CB scoring platform and returned to merchants.  Possible values:  - &#39;00&#39; - &#39;99&#39;  When you request the payer authentication and authorization services separately, get the value for this field from the pa_network_score reply field.         This field is supported only for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. .</param>
        /// <param name="NpaCode">Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS .</param>
        /// <param name="OverridePaymentMethod">Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. .</param>
        /// <param name="OverrideCountryCode">Two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).. .</param>
        /// <param name="PriorAuthenticationData">This field carry data that the ACS can use to verify the authentication process. .</param>
        /// <param name="PriorAuthenticationMethod">Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.  01 - Frictionless authentication occurred by ACS  02 - Cardholder challenge occurred by ACS  03 - AVS verified  04 - Other issuer methods  05-79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)  80-99 - Reserved for DS use .</param>
        /// <param name="PriorAuthenticationReferenceId">This data element contains a ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder .</param>
        /// <param name="PriorAuthenticationTime">Date and time in UTC of the prior cardholder authentication. Format – YYYYMMDDHHMM .</param>
        /// <param name="ProductCode">Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. .</param>
        /// <param name="RequestorId">Cardinal&#39;s directory server assigned 3DS Requestor ID value.</param>
        /// <param name="RequestorInitiatedAuthenticationIndicator">Indicates the type of 3RI request.  Possible Values:  01 - Recurring transaction  02 - Installment transaction  03 - Add card  04 - Maintain card  05 - Account verification  06 - Split/delayed shipment  07 - Top-up  08 - Mail Order  09 - Telephone Order  10 - Whitelist status check  11 - Other payment .</param>
        /// <param name="RequestorName">Cardinal&#39;s directory server assigned 3DS Requestor Name value.</param>
        /// <param name="ReferenceId">Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. .</param>
        /// <param name="SdkMaxTimeout">This field indicates the maximum amount of time for all 3DS 2.0 messages to be communicated between all components (in minutes).  Possible Values:  Greater than or equal to 05 (05 is the minimum timeout to set)  Cardinal Default is set to 15  NOTE: This field is a required 3DS 2.0 field and Cardinal sends in a default of 15 if nothing is passed .</param>
        /// <param name="SecureCorporatePaymentIndicator">Indicates dedicated payment processes and procedures were used, potential secure corporate payment exemption applies. Possible Values : 0/1 .</param>
        /// <param name="TransactionMode">Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values:  - &#x60;M&#x60;: MOTO (Mail Order Telephone Order) - &#x60;R&#x60;: Retail - &#x60;S&#x60;: eCommerce - &#x60;P&#x60;: Mobile Device - &#x60;T&#x60;: Tablet .</param>
        /// <param name="WhiteListStatus">Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder .</param>
        /// <param name="EffectiveAuthenticationType">This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). .</param>
        /// <param name="SignedParesStatusReason">Provides additional information as to why the PAResStatus has a specific value. .</param>
        /// <param name="SignedPares">Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. .</param>
        public Ptsv2paymentsConsumerAuthenticationInformation(string Cavv = default(string), string CavvAlgorithm = default(string), string EciRaw = default(string), string ParesStatus = default(string), string VeresEnrolled = default(string), string Xid = default(string), string UcafCollectionIndicator = default(string), string UcafAuthenticationData = default(string), Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication StrongAuthentication = default(Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication), string DirectoryServerTransactionId = default(string), string PaSpecificationVersion = default(string), string AuthenticationType = default(string), string AcsTransactionId = default(string), string AcsWindowSize = default(string), string AlternateAuthenticationData = default(string), string AlternateAuthenticationDate = default(string), string AlternateAuthenticationMethod = default(string), string AuthenticationDate = default(string), string AuthenticationTransactionId = default(string), string ChallengeCancelCode = default(string), string ChallengeCode = default(string), string ChallengeStatus = default(string), string CustomerCardAlias = default(string), string DecoupledAuthenticationIndicator = default(string), string DecoupledAuthenticationMaxTime = default(string), bool? DefaultCard = default(bool?), string DeviceChannel = default(string), int? InstallmentTotalCount = default(int?), string MerchantFraudRate = default(string), bool? MarketingOptIn = default(bool?), string MarketingSource = default(string), string Mcc = default(string), int? MerchantScore = default(int?), string MessageCategory = default(string), string NetworkScore = default(string), string NpaCode = default(string), string OverridePaymentMethod = default(string), string OverrideCountryCode = default(string), string PriorAuthenticationData = default(string), string PriorAuthenticationMethod = default(string), string PriorAuthenticationReferenceId = default(string), string PriorAuthenticationTime = default(string), string ProductCode = default(string), string RequestorId = default(string), string RequestorInitiatedAuthenticationIndicator = default(string), string RequestorName = default(string), string ReferenceId = default(string), string SdkMaxTimeout = default(string), string SecureCorporatePaymentIndicator = default(string), string TransactionMode = default(string), string WhiteListStatus = default(string), string EffectiveAuthenticationType = default(string), string SignedParesStatusReason = default(string), string SignedPares = default(string))
        {
            this.Cavv = Cavv;
            this.CavvAlgorithm = CavvAlgorithm;
            this.EciRaw = EciRaw;
            this.ParesStatus = ParesStatus;
            this.VeresEnrolled = VeresEnrolled;
            this.Xid = Xid;
            this.UcafCollectionIndicator = UcafCollectionIndicator;
            this.UcafAuthenticationData = UcafAuthenticationData;
            this.StrongAuthentication = StrongAuthentication;
            this.DirectoryServerTransactionId = DirectoryServerTransactionId;
            this.PaSpecificationVersion = PaSpecificationVersion;
            this.AuthenticationType = AuthenticationType;
            this.AcsTransactionId = AcsTransactionId;
            this.AcsWindowSize = AcsWindowSize;
            this.AlternateAuthenticationData = AlternateAuthenticationData;
            this.AlternateAuthenticationDate = AlternateAuthenticationDate;
            this.AlternateAuthenticationMethod = AlternateAuthenticationMethod;
            this.AuthenticationDate = AuthenticationDate;
            this.AuthenticationTransactionId = AuthenticationTransactionId;
            this.ChallengeCancelCode = ChallengeCancelCode;
            this.ChallengeCode = ChallengeCode;
            this.ChallengeStatus = ChallengeStatus;
            this.CustomerCardAlias = CustomerCardAlias;
            this.DecoupledAuthenticationIndicator = DecoupledAuthenticationIndicator;
            this.DecoupledAuthenticationMaxTime = DecoupledAuthenticationMaxTime;
            this.DefaultCard = DefaultCard;
            this.DeviceChannel = DeviceChannel;
            this.InstallmentTotalCount = InstallmentTotalCount;
            this.MerchantFraudRate = MerchantFraudRate;
            this.MarketingOptIn = MarketingOptIn;
            this.MarketingSource = MarketingSource;
            this.Mcc = Mcc;
            this.MerchantScore = MerchantScore;
            this.MessageCategory = MessageCategory;
            this.NetworkScore = NetworkScore;
            this.NpaCode = NpaCode;
            this.OverridePaymentMethod = OverridePaymentMethod;
            this.OverrideCountryCode = OverrideCountryCode;
            this.PriorAuthenticationData = PriorAuthenticationData;
            this.PriorAuthenticationMethod = PriorAuthenticationMethod;
            this.PriorAuthenticationReferenceId = PriorAuthenticationReferenceId;
            this.PriorAuthenticationTime = PriorAuthenticationTime;
            this.ProductCode = ProductCode;
            this.RequestorId = RequestorId;
            this.RequestorInitiatedAuthenticationIndicator = RequestorInitiatedAuthenticationIndicator;
            this.RequestorName = RequestorName;
            this.ReferenceId = ReferenceId;
            this.SdkMaxTimeout = SdkMaxTimeout;
            this.SecureCorporatePaymentIndicator = SecureCorporatePaymentIndicator;
            this.TransactionMode = TransactionMode;
            this.WhiteListStatus = WhiteListStatus;
            this.EffectiveAuthenticationType = EffectiveAuthenticationType;
            this.SignedParesStatusReason = SignedParesStatusReason;
            this.SignedPares = SignedPares;
        }
        
        /// <summary>
        /// Cardholder authentication verification value (CAVV).
        /// </summary>
        /// <value>Cardholder authentication verification value (CAVV).</value>
        [DataMember(Name="cavv", EmitDefaultValue=false)]
        public string Cavv { get; set; }

        /// <summary>
        /// Algorithm used to generate the CAVV for Visa Secure or the UCAF authentication data for Mastercard Identity Check. 
        /// </summary>
        /// <value>Algorithm used to generate the CAVV for Visa Secure or the UCAF authentication data for Mastercard Identity Check. </value>
        [DataMember(Name="cavvAlgorithm", EmitDefaultValue=false)]
        public string CavvAlgorithm { get; set; }

        /// <summary>
        /// Raw electronic commerce indicator (ECI).  For details, see &#x60;eci_raw&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
        /// </summary>
        /// <value>Raw electronic commerce indicator (ECI).  For details, see &#x60;eci_raw&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) </value>
        [DataMember(Name="eciRaw", EmitDefaultValue=false)]
        public string EciRaw { get; set; }

        /// <summary>
        /// Payer authentication response status.  For details, see &#x60;pares_status&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
        /// </summary>
        /// <value>Payer authentication response status.  For details, see &#x60;pares_status&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) </value>
        [DataMember(Name="paresStatus", EmitDefaultValue=false)]
        public string ParesStatus { get; set; }

        /// <summary>
        /// Verification response enrollment status.  For details, see &#x60;veres_enrolled&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
        /// </summary>
        /// <value>Verification response enrollment status.  For details, see &#x60;veres_enrolled&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) </value>
        [DataMember(Name="veresEnrolled", EmitDefaultValue=false)]
        public string VeresEnrolled { get; set; }

        /// <summary>
        /// Transaction identifier.  For details, see &#x60;xid&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
        /// </summary>
        /// <value>Transaction identifier.  For details, see &#x60;xid&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) </value>
        [DataMember(Name="xid", EmitDefaultValue=false)]
        public string Xid { get; set; }

        /// <summary>
        /// Universal cardholder authentication field (UCAF) collection indicator.  For details, see &#x60;ucaf_collection_indicator&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR7 - Position: 5 - Field: Mastercard Electronic Commerce Indicators—UCAF Collection Indicator 
        /// </summary>
        /// <value>Universal cardholder authentication field (UCAF) collection indicator.  For details, see &#x60;ucaf_collection_indicator&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR7 - Position: 5 - Field: Mastercard Electronic Commerce Indicators—UCAF Collection Indicator </value>
        [DataMember(Name="ucafCollectionIndicator", EmitDefaultValue=false)]
        public string UcafCollectionIndicator { get; set; }

        /// <summary>
        /// Universal cardholder authentication field (UCAF) data.  For details, see &#x60;ucaf_authentication_data&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
        /// </summary>
        /// <value>Universal cardholder authentication field (UCAF) data.  For details, see &#x60;ucaf_authentication_data&#x60; request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) </value>
        [DataMember(Name="ucafAuthenticationData", EmitDefaultValue=false)]
        public string UcafAuthenticationData { get; set; }

        /// <summary>
        /// Gets or Sets StrongAuthentication
        /// </summary>
        [DataMember(Name="strongAuthentication", EmitDefaultValue=false)]
        public Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication StrongAuthentication { get; set; }

        /// <summary>
        /// The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID 
        /// </summary>
        /// <value>The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID </value>
        [DataMember(Name="directoryServerTransactionId", EmitDefaultValue=false)]
        public string DirectoryServerTransactionId { get; set; }

        /// <summary>
        /// This field contains 3DS version that was used for Secured Consumer Authentication (SCA). For example 3DS secure version 1.0.2 or 2.0.0 is used for Secured Consumer Authentication. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 113 , Field: MC AVV Verification—Program Protocol It will contain one of the following values: - &#x60;1&#x60; (3D Secure Version 1.0 (3DS 1.0)) - &#x60;2&#x60; (EMV 3-D Secure (3DS 2.0)) 
        /// </summary>
        /// <value>This field contains 3DS version that was used for Secured Consumer Authentication (SCA). For example 3DS secure version 1.0.2 or 2.0.0 is used for Secured Consumer Authentication. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 113 , Field: MC AVV Verification—Program Protocol It will contain one of the following values: - &#x60;1&#x60; (3D Secure Version 1.0 (3DS 1.0)) - &#x60;2&#x60; (EMV 3-D Secure (3DS 2.0)) </value>
        [DataMember(Name="paSpecificationVersion", EmitDefaultValue=false)]
        public string PaSpecificationVersion { get; set; }

        /// <summary>
        /// Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. 
        /// </summary>
        /// <value>Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. </value>
        [DataMember(Name="authenticationType", EmitDefaultValue=false)]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Unique transaction identifier assigned by the ACS to identify a single transaction.  This field is supported for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. 
        /// </summary>
        /// <value>Unique transaction identifier assigned by the ACS to identify a single transaction.  This field is supported for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. </value>
        [DataMember(Name="acsTransactionId", EmitDefaultValue=false)]
        public string AcsTransactionId { get; set; }

        /// <summary>
        /// An override field that a merchant can pass in to set the challenge window size to display to the end cardholder.  The ACS (Active Control Server) will reply with content that is formatted appropriately to this window size to allow for the best user experience.  The sizes are width x height in pixels of the window displayed in the cardholder browser window.  01 - 250x400  02 - 390x400  03 - 500x600  04 - 600x400  05 - Full page 
        /// </summary>
        /// <value>An override field that a merchant can pass in to set the challenge window size to display to the end cardholder.  The ACS (Active Control Server) will reply with content that is formatted appropriately to this window size to allow for the best user experience.  The sizes are width x height in pixels of the window displayed in the cardholder browser window.  01 - 250x400  02 - 390x400  03 - 500x600  04 - 600x400  05 - Full page </value>
        [DataMember(Name="acsWindowSize", EmitDefaultValue=false)]
        public string AcsWindowSize { get; set; }

        /// <summary>
        /// Data that documents and supports a specific authentication process. 
        /// </summary>
        /// <value>Data that documents and supports a specific authentication process. </value>
        [DataMember(Name="alternateAuthenticationData", EmitDefaultValue=false)]
        public string AlternateAuthenticationData { get; set; }

        /// <summary>
        /// Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM 
        /// </summary>
        /// <value>Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM </value>
        [DataMember(Name="alternateAuthenticationDate", EmitDefaultValue=false)]
        public string AlternateAuthenticationDate { get; set; }

        /// <summary>
        /// Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using issuer credentials - &#x60;05&#x60;: Login using third-party authenticator - &#x60;06&#x60;: Login using FIDO Authenticator 
        /// </summary>
        /// <value>Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using issuer credentials - &#x60;05&#x60;: Login using third-party authenticator - &#x60;06&#x60;: Login using FIDO Authenticator </value>
        [DataMember(Name="alternateAuthenticationMethod", EmitDefaultValue=false)]
        public string AlternateAuthenticationMethod { get; set; }

        /// <summary>
        /// The date/time of the authentication at the 3DS servers. RISK update authorization service in auth request payload with value returned in &#x60;consumerAuthenticationInformation.alternateAuthenticationData&#x60; if merchant calls via CYBS or field can be provided by merchant in authorization request if calling an external 3DS provider.  This field is supported for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. Format: YYYYMMDDHHMMSS 
        /// </summary>
        /// <value>The date/time of the authentication at the 3DS servers. RISK update authorization service in auth request payload with value returned in &#x60;consumerAuthenticationInformation.alternateAuthenticationData&#x60; if merchant calls via CYBS or field can be provided by merchant in authorization request if calling an external 3DS provider.  This field is supported for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. Format: YYYYMMDDHHMMSS </value>
        [DataMember(Name="authenticationDate", EmitDefaultValue=false)]
        public string AuthenticationDate { get; set; }

        /// <summary>
        /// Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. 
        /// </summary>
        /// <value>Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. </value>
        [DataMember(Name="authenticationTransactionId", EmitDefaultValue=false)]
        public string AuthenticationTransactionId { get; set; }

        /// <summary>
        /// An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK 
        /// </summary>
        /// <value>An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK </value>
        [DataMember(Name="challengeCancelCode", EmitDefaultValue=false)]
        public string ChallengeCancelCode { get; set; }

        /// <summary>
        /// Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05&#x60;: No challenge requested (transactional risk analysis is already performed) - &#x60;06&#x60;: No challenge requested (Data share only) - &#x60;07&#x60;: No challenge requested (strong consumer authentication is already performed) - &#x60;08&#x60;: No challenge requested (utilize whitelist exemption if no challenge required) - &#x60;09&#x60;: Challenge requested (whitelist prompt requested if challenge required) **Note** This field will default to &#x60;01&#x60; on merchant configuration and can be overridden by the merchant. EMV 3D Secure version 2.1.0 supports values &#x60;01-04&#x60;. Version 2.2.0 supports values &#x60;01-09&#x60;.  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html) 
        /// </summary>
        /// <value>Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05&#x60;: No challenge requested (transactional risk analysis is already performed) - &#x60;06&#x60;: No challenge requested (Data share only) - &#x60;07&#x60;: No challenge requested (strong consumer authentication is already performed) - &#x60;08&#x60;: No challenge requested (utilize whitelist exemption if no challenge required) - &#x60;09&#x60;: Challenge requested (whitelist prompt requested if challenge required) **Note** This field will default to &#x60;01&#x60; on merchant configuration and can be overridden by the merchant. EMV 3D Secure version 2.1.0 supports values &#x60;01-04&#x60;. Version 2.2.0 supports values &#x60;01-09&#x60;.  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html) </value>
        [DataMember(Name="challengeCode", EmitDefaultValue=false)]
        public string ChallengeCode { get; set; }

        /// <summary>
        /// The &#x60;consumerAuthenticationInformation.challengeCode&#x60; indicates the authentication type/level, or challenge, that was presented to the cardholder at checkout by the merchant when calling the Carte Bancaire 3DS servers via CYBS RISK services. It conveys to the issuer the alternative authentication methods that the consumer used. 
        /// </summary>
        /// <value>The &#x60;consumerAuthenticationInformation.challengeCode&#x60; indicates the authentication type/level, or challenge, that was presented to the cardholder at checkout by the merchant when calling the Carte Bancaire 3DS servers via CYBS RISK services. It conveys to the issuer the alternative authentication methods that the consumer used. </value>
        [DataMember(Name="challengeStatus", EmitDefaultValue=false)]
        public string ChallengeStatus { get; set; }

        /// <summary>
        /// An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. 
        /// </summary>
        /// <value>An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. </value>
        [DataMember(Name="customerCardAlias", EmitDefaultValue=false)]
        public string CustomerCardAlias { get; set; }

        /// <summary>
        /// Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N 
        /// </summary>
        /// <value>Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N </value>
        [DataMember(Name="decoupledAuthenticationIndicator", EmitDefaultValue=false)]
        public string DecoupledAuthenticationIndicator { get; set; }

        /// <summary>
        /// Indicates the maximum amount of time that the 3DS Requestor will wait for an ACS (Active control server) to provide the results of a Decoupled Authentication transaction (in minutes). Possible Values: Numeric values between 1 and 10080 accepted. 
        /// </summary>
        /// <value>Indicates the maximum amount of time that the 3DS Requestor will wait for an ACS (Active control server) to provide the results of a Decoupled Authentication transaction (in minutes). Possible Values: Numeric values between 1 and 10080 accepted. </value>
        [DataMember(Name="decoupledAuthenticationMaxTime", EmitDefaultValue=false)]
        public string DecoupledAuthenticationMaxTime { get; set; }

        /// <summary>
        /// Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="defaultCard", EmitDefaultValue=false)]
        public bool? DefaultCard { get; set; }

        /// <summary>
        /// Determines the channel that the transaction came through. Possible Values: SDK/Browser/3RI. 3RI - 3DS request initiated. 
        /// </summary>
        /// <value>Determines the channel that the transaction came through. Possible Values: SDK/Browser/3RI. 3RI - 3DS request initiated. </value>
        [DataMember(Name="deviceChannel", EmitDefaultValue=false)]
        public string DeviceChannel { get; set; }

        /// <summary>
        /// An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. 
        /// </summary>
        /// <value>An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. </value>
        [DataMember(Name="installmentTotalCount", EmitDefaultValue=false)]
        public int? InstallmentTotalCount { get; set; }

        /// <summary>
        /// Calculated by merchants as per PSD2** RTS** (EEA** card fraud divided by all EEA card volumes). Possible Values: 1 &#x3D; Represents fraud rate &lt;&#x3D;1  2 &#x3D; Represents fraud rate &gt;1 and &lt;&#x3D;6  3 &#x3D; Represents fraud rate &gt;6 and &lt;&#x3D;13  4 &#x3D; Represents fraud rate &gt;13 and &lt;&#x3D;25  5 &#x3D; Represents fraud rate &gt;25  EEA** &#x3D; European Economic Area RTS** &#x3D; Regulatory Technical Standards PSD2** &#x3D; Payment Services Directive 
        /// </summary>
        /// <value>Calculated by merchants as per PSD2** RTS** (EEA** card fraud divided by all EEA card volumes). Possible Values: 1 &#x3D; Represents fraud rate &lt;&#x3D;1  2 &#x3D; Represents fraud rate &gt;1 and &lt;&#x3D;6  3 &#x3D; Represents fraud rate &gt;6 and &lt;&#x3D;13  4 &#x3D; Represents fraud rate &gt;13 and &lt;&#x3D;25  5 &#x3D; Represents fraud rate &gt;25  EEA** &#x3D; European Economic Area RTS** &#x3D; Regulatory Technical Standards PSD2** &#x3D; Payment Services Directive </value>
        [DataMember(Name="merchantFraudRate", EmitDefaultValue=false)]
        public string MerchantFraudRate { get; set; }

        /// <summary>
        /// Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="marketingOptIn", EmitDefaultValue=false)]
        public bool? MarketingOptIn { get; set; }

        /// <summary>
        /// Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="marketingSource", EmitDefaultValue=false)]
        public string MarketingSource { get; set; }

        /// <summary>
        /// Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
        /// </summary>
        /// <value>Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. </value>
        [DataMember(Name="mcc", EmitDefaultValue=false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Risk Score provided by merchants. This is specific for CB transactions. 
        /// </summary>
        /// <value>Risk Score provided by merchants. This is specific for CB transactions. </value>
        [DataMember(Name="merchantScore", EmitDefaultValue=false)]
        public int? MerchantScore { get; set; }

        /// <summary>
        /// Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use 
        /// </summary>
        /// <value>Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use </value>
        [DataMember(Name="messageCategory", EmitDefaultValue=false)]
        public string MessageCategory { get; set; }

        /// <summary>
        /// The global score calculated by the CB scoring platform and returned to merchants.  Possible values:  - &#39;00&#39; - &#39;99&#39;  When you request the payer authentication and authorization services separately, get the value for this field from the pa_network_score reply field.         This field is supported only for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. 
        /// </summary>
        /// <value>The global score calculated by the CB scoring platform and returned to merchants.  Possible values:  - &#39;00&#39; - &#39;99&#39;  When you request the payer authentication and authorization services separately, get the value for this field from the pa_network_score reply field.         This field is supported only for Cartes Bancaires Fast&#39;R transactions on Credit Mutuel-CIC. </value>
        [DataMember(Name="networkScore", EmitDefaultValue=false)]
        public string NetworkScore { get; set; }

        /// <summary>
        /// Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS 
        /// </summary>
        /// <value>Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS </value>
        [DataMember(Name="npaCode", EmitDefaultValue=false)]
        public string NpaCode { get; set; }

        /// <summary>
        /// Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
        /// </summary>
        /// <value>Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. </value>
        [DataMember(Name="overridePaymentMethod", EmitDefaultValue=false)]
        public string OverridePaymentMethod { get; set; }

        /// <summary>
        /// Two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).. 
        /// </summary>
        /// <value>Two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).. </value>
        [DataMember(Name="overrideCountryCode", EmitDefaultValue=false)]
        public string OverrideCountryCode { get; set; }

        /// <summary>
        /// This field carry data that the ACS can use to verify the authentication process. 
        /// </summary>
        /// <value>This field carry data that the ACS can use to verify the authentication process. </value>
        [DataMember(Name="priorAuthenticationData", EmitDefaultValue=false)]
        public string PriorAuthenticationData { get; set; }

        /// <summary>
        /// Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.  01 - Frictionless authentication occurred by ACS  02 - Cardholder challenge occurred by ACS  03 - AVS verified  04 - Other issuer methods  05-79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)  80-99 - Reserved for DS use 
        /// </summary>
        /// <value>Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.  01 - Frictionless authentication occurred by ACS  02 - Cardholder challenge occurred by ACS  03 - AVS verified  04 - Other issuer methods  05-79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)  80-99 - Reserved for DS use </value>
        [DataMember(Name="priorAuthenticationMethod", EmitDefaultValue=false)]
        public string PriorAuthenticationMethod { get; set; }

        /// <summary>
        /// This data element contains a ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder 
        /// </summary>
        /// <value>This data element contains a ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder </value>
        [DataMember(Name="priorAuthenticationReferenceId", EmitDefaultValue=false)]
        public string PriorAuthenticationReferenceId { get; set; }

        /// <summary>
        /// Date and time in UTC of the prior cardholder authentication. Format – YYYYMMDDHHMM 
        /// </summary>
        /// <value>Date and time in UTC of the prior cardholder authentication. Format – YYYYMMDDHHMM </value>
        [DataMember(Name="priorAuthenticationTime", EmitDefaultValue=false)]
        public string PriorAuthenticationTime { get; set; }

        /// <summary>
        /// Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
        /// </summary>
        /// <value>Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. </value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Cardinal&#39;s directory server assigned 3DS Requestor ID value
        /// </summary>
        /// <value>Cardinal&#39;s directory server assigned 3DS Requestor ID value</value>
        [DataMember(Name="requestorId", EmitDefaultValue=false)]
        public string RequestorId { get; set; }

        /// <summary>
        /// Indicates the type of 3RI request.  Possible Values:  01 - Recurring transaction  02 - Installment transaction  03 - Add card  04 - Maintain card  05 - Account verification  06 - Split/delayed shipment  07 - Top-up  08 - Mail Order  09 - Telephone Order  10 - Whitelist status check  11 - Other payment 
        /// </summary>
        /// <value>Indicates the type of 3RI request.  Possible Values:  01 - Recurring transaction  02 - Installment transaction  03 - Add card  04 - Maintain card  05 - Account verification  06 - Split/delayed shipment  07 - Top-up  08 - Mail Order  09 - Telephone Order  10 - Whitelist status check  11 - Other payment </value>
        [DataMember(Name="requestorInitiatedAuthenticationIndicator", EmitDefaultValue=false)]
        public string RequestorInitiatedAuthenticationIndicator { get; set; }

        /// <summary>
        /// Cardinal&#39;s directory server assigned 3DS Requestor Name value
        /// </summary>
        /// <value>Cardinal&#39;s directory server assigned 3DS Requestor Name value</value>
        [DataMember(Name="requestorName", EmitDefaultValue=false)]
        public string RequestorName { get; set; }

        /// <summary>
        /// Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. 
        /// </summary>
        /// <value>Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. </value>
        [DataMember(Name="referenceId", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// This field indicates the maximum amount of time for all 3DS 2.0 messages to be communicated between all components (in minutes).  Possible Values:  Greater than or equal to 05 (05 is the minimum timeout to set)  Cardinal Default is set to 15  NOTE: This field is a required 3DS 2.0 field and Cardinal sends in a default of 15 if nothing is passed 
        /// </summary>
        /// <value>This field indicates the maximum amount of time for all 3DS 2.0 messages to be communicated between all components (in minutes).  Possible Values:  Greater than or equal to 05 (05 is the minimum timeout to set)  Cardinal Default is set to 15  NOTE: This field is a required 3DS 2.0 field and Cardinal sends in a default of 15 if nothing is passed </value>
        [DataMember(Name="sdkMaxTimeout", EmitDefaultValue=false)]
        public string SdkMaxTimeout { get; set; }

        /// <summary>
        /// Indicates dedicated payment processes and procedures were used, potential secure corporate payment exemption applies. Possible Values : 0/1 
        /// </summary>
        /// <value>Indicates dedicated payment processes and procedures were used, potential secure corporate payment exemption applies. Possible Values : 0/1 </value>
        [DataMember(Name="secureCorporatePaymentIndicator", EmitDefaultValue=false)]
        public string SecureCorporatePaymentIndicator { get; set; }

        /// <summary>
        /// Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values:  - &#x60;M&#x60;: MOTO (Mail Order Telephone Order) - &#x60;R&#x60;: Retail - &#x60;S&#x60;: eCommerce - &#x60;P&#x60;: Mobile Device - &#x60;T&#x60;: Tablet 
        /// </summary>
        /// <value>Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values:  - &#x60;M&#x60;: MOTO (Mail Order Telephone Order) - &#x60;R&#x60;: Retail - &#x60;S&#x60;: eCommerce - &#x60;P&#x60;: Mobile Device - &#x60;T&#x60;: Tablet </value>
        [DataMember(Name="transactionMode", EmitDefaultValue=false)]
        public string TransactionMode { get; set; }

        /// <summary>
        /// Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder 
        /// </summary>
        /// <value>Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder </value>
        [DataMember(Name="whiteListStatus", EmitDefaultValue=false)]
        public string WhiteListStatus { get; set; }

        /// <summary>
        /// This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). 
        /// </summary>
        /// <value>This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). </value>
        [DataMember(Name="effectiveAuthenticationType", EmitDefaultValue=false)]
        public string EffectiveAuthenticationType { get; set; }

        /// <summary>
        /// Provides additional information as to why the PAResStatus has a specific value. 
        /// </summary>
        /// <value>Provides additional information as to why the PAResStatus has a specific value. </value>
        [DataMember(Name="signedParesStatusReason", EmitDefaultValue=false)]
        public string SignedParesStatusReason { get; set; }

        /// <summary>
        /// Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. 
        /// </summary>
        /// <value>Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. </value>
        [DataMember(Name="signedPares", EmitDefaultValue=false)]
        public string SignedPares { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsConsumerAuthenticationInformation {\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  EciRaw: ").Append(EciRaw).Append("\n");
            sb.Append("  ParesStatus: ").Append(ParesStatus).Append("\n");
            sb.Append("  VeresEnrolled: ").Append(VeresEnrolled).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("  UcafCollectionIndicator: ").Append(UcafCollectionIndicator).Append("\n");
            sb.Append("  UcafAuthenticationData: ").Append(UcafAuthenticationData).Append("\n");
            sb.Append("  StrongAuthentication: ").Append(StrongAuthentication).Append("\n");
            sb.Append("  DirectoryServerTransactionId: ").Append(DirectoryServerTransactionId).Append("\n");
            sb.Append("  PaSpecificationVersion: ").Append(PaSpecificationVersion).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  AcsTransactionId: ").Append(AcsTransactionId).Append("\n");
            sb.Append("  AcsWindowSize: ").Append(AcsWindowSize).Append("\n");
            sb.Append("  AlternateAuthenticationData: ").Append(AlternateAuthenticationData).Append("\n");
            sb.Append("  AlternateAuthenticationDate: ").Append(AlternateAuthenticationDate).Append("\n");
            sb.Append("  AlternateAuthenticationMethod: ").Append(AlternateAuthenticationMethod).Append("\n");
            sb.Append("  AuthenticationDate: ").Append(AuthenticationDate).Append("\n");
            sb.Append("  AuthenticationTransactionId: ").Append(AuthenticationTransactionId).Append("\n");
            sb.Append("  ChallengeCancelCode: ").Append(ChallengeCancelCode).Append("\n");
            sb.Append("  ChallengeCode: ").Append(ChallengeCode).Append("\n");
            sb.Append("  ChallengeStatus: ").Append(ChallengeStatus).Append("\n");
            sb.Append("  CustomerCardAlias: ").Append(CustomerCardAlias).Append("\n");
            sb.Append("  DecoupledAuthenticationIndicator: ").Append(DecoupledAuthenticationIndicator).Append("\n");
            sb.Append("  DecoupledAuthenticationMaxTime: ").Append(DecoupledAuthenticationMaxTime).Append("\n");
            sb.Append("  DefaultCard: ").Append(DefaultCard).Append("\n");
            sb.Append("  DeviceChannel: ").Append(DeviceChannel).Append("\n");
            sb.Append("  InstallmentTotalCount: ").Append(InstallmentTotalCount).Append("\n");
            sb.Append("  MerchantFraudRate: ").Append(MerchantFraudRate).Append("\n");
            sb.Append("  MarketingOptIn: ").Append(MarketingOptIn).Append("\n");
            sb.Append("  MarketingSource: ").Append(MarketingSource).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MerchantScore: ").Append(MerchantScore).Append("\n");
            sb.Append("  MessageCategory: ").Append(MessageCategory).Append("\n");
            sb.Append("  NetworkScore: ").Append(NetworkScore).Append("\n");
            sb.Append("  NpaCode: ").Append(NpaCode).Append("\n");
            sb.Append("  OverridePaymentMethod: ").Append(OverridePaymentMethod).Append("\n");
            sb.Append("  OverrideCountryCode: ").Append(OverrideCountryCode).Append("\n");
            sb.Append("  PriorAuthenticationData: ").Append(PriorAuthenticationData).Append("\n");
            sb.Append("  PriorAuthenticationMethod: ").Append(PriorAuthenticationMethod).Append("\n");
            sb.Append("  PriorAuthenticationReferenceId: ").Append(PriorAuthenticationReferenceId).Append("\n");
            sb.Append("  PriorAuthenticationTime: ").Append(PriorAuthenticationTime).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  RequestorId: ").Append(RequestorId).Append("\n");
            sb.Append("  RequestorInitiatedAuthenticationIndicator: ").Append(RequestorInitiatedAuthenticationIndicator).Append("\n");
            sb.Append("  RequestorName: ").Append(RequestorName).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  SdkMaxTimeout: ").Append(SdkMaxTimeout).Append("\n");
            sb.Append("  SecureCorporatePaymentIndicator: ").Append(SecureCorporatePaymentIndicator).Append("\n");
            sb.Append("  TransactionMode: ").Append(TransactionMode).Append("\n");
            sb.Append("  WhiteListStatus: ").Append(WhiteListStatus).Append("\n");
            sb.Append("  EffectiveAuthenticationType: ").Append(EffectiveAuthenticationType).Append("\n");
            sb.Append("  SignedParesStatusReason: ").Append(SignedParesStatusReason).Append("\n");
            sb.Append("  SignedPares: ").Append(SignedPares).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsConsumerAuthenticationInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsConsumerAuthenticationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsConsumerAuthenticationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsConsumerAuthenticationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Cavv == other.Cavv ||
                    this.Cavv != null &&
                    this.Cavv.Equals(other.Cavv)
                ) && 
                (
                    this.CavvAlgorithm == other.CavvAlgorithm ||
                    this.CavvAlgorithm != null &&
                    this.CavvAlgorithm.Equals(other.CavvAlgorithm)
                ) && 
                (
                    this.EciRaw == other.EciRaw ||
                    this.EciRaw != null &&
                    this.EciRaw.Equals(other.EciRaw)
                ) && 
                (
                    this.ParesStatus == other.ParesStatus ||
                    this.ParesStatus != null &&
                    this.ParesStatus.Equals(other.ParesStatus)
                ) && 
                (
                    this.VeresEnrolled == other.VeresEnrolled ||
                    this.VeresEnrolled != null &&
                    this.VeresEnrolled.Equals(other.VeresEnrolled)
                ) && 
                (
                    this.Xid == other.Xid ||
                    this.Xid != null &&
                    this.Xid.Equals(other.Xid)
                ) && 
                (
                    this.UcafCollectionIndicator == other.UcafCollectionIndicator ||
                    this.UcafCollectionIndicator != null &&
                    this.UcafCollectionIndicator.Equals(other.UcafCollectionIndicator)
                ) && 
                (
                    this.UcafAuthenticationData == other.UcafAuthenticationData ||
                    this.UcafAuthenticationData != null &&
                    this.UcafAuthenticationData.Equals(other.UcafAuthenticationData)
                ) && 
                (
                    this.StrongAuthentication == other.StrongAuthentication ||
                    this.StrongAuthentication != null &&
                    this.StrongAuthentication.Equals(other.StrongAuthentication)
                ) && 
                (
                    this.DirectoryServerTransactionId == other.DirectoryServerTransactionId ||
                    this.DirectoryServerTransactionId != null &&
                    this.DirectoryServerTransactionId.Equals(other.DirectoryServerTransactionId)
                ) && 
                (
                    this.PaSpecificationVersion == other.PaSpecificationVersion ||
                    this.PaSpecificationVersion != null &&
                    this.PaSpecificationVersion.Equals(other.PaSpecificationVersion)
                ) && 
                (
                    this.AuthenticationType == other.AuthenticationType ||
                    this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    this.AcsTransactionId == other.AcsTransactionId ||
                    this.AcsTransactionId != null &&
                    this.AcsTransactionId.Equals(other.AcsTransactionId)
                ) && 
                (
                    this.AcsWindowSize == other.AcsWindowSize ||
                    this.AcsWindowSize != null &&
                    this.AcsWindowSize.Equals(other.AcsWindowSize)
                ) && 
                (
                    this.AlternateAuthenticationData == other.AlternateAuthenticationData ||
                    this.AlternateAuthenticationData != null &&
                    this.AlternateAuthenticationData.Equals(other.AlternateAuthenticationData)
                ) && 
                (
                    this.AlternateAuthenticationDate == other.AlternateAuthenticationDate ||
                    this.AlternateAuthenticationDate != null &&
                    this.AlternateAuthenticationDate.Equals(other.AlternateAuthenticationDate)
                ) && 
                (
                    this.AlternateAuthenticationMethod == other.AlternateAuthenticationMethod ||
                    this.AlternateAuthenticationMethod != null &&
                    this.AlternateAuthenticationMethod.Equals(other.AlternateAuthenticationMethod)
                ) && 
                (
                    this.AuthenticationDate == other.AuthenticationDate ||
                    this.AuthenticationDate != null &&
                    this.AuthenticationDate.Equals(other.AuthenticationDate)
                ) && 
                (
                    this.AuthenticationTransactionId == other.AuthenticationTransactionId ||
                    this.AuthenticationTransactionId != null &&
                    this.AuthenticationTransactionId.Equals(other.AuthenticationTransactionId)
                ) && 
                (
                    this.ChallengeCancelCode == other.ChallengeCancelCode ||
                    this.ChallengeCancelCode != null &&
                    this.ChallengeCancelCode.Equals(other.ChallengeCancelCode)
                ) && 
                (
                    this.ChallengeCode == other.ChallengeCode ||
                    this.ChallengeCode != null &&
                    this.ChallengeCode.Equals(other.ChallengeCode)
                ) && 
                (
                    this.ChallengeStatus == other.ChallengeStatus ||
                    this.ChallengeStatus != null &&
                    this.ChallengeStatus.Equals(other.ChallengeStatus)
                ) && 
                (
                    this.CustomerCardAlias == other.CustomerCardAlias ||
                    this.CustomerCardAlias != null &&
                    this.CustomerCardAlias.Equals(other.CustomerCardAlias)
                ) && 
                (
                    this.DecoupledAuthenticationIndicator == other.DecoupledAuthenticationIndicator ||
                    this.DecoupledAuthenticationIndicator != null &&
                    this.DecoupledAuthenticationIndicator.Equals(other.DecoupledAuthenticationIndicator)
                ) && 
                (
                    this.DecoupledAuthenticationMaxTime == other.DecoupledAuthenticationMaxTime ||
                    this.DecoupledAuthenticationMaxTime != null &&
                    this.DecoupledAuthenticationMaxTime.Equals(other.DecoupledAuthenticationMaxTime)
                ) && 
                (
                    this.DefaultCard == other.DefaultCard ||
                    this.DefaultCard != null &&
                    this.DefaultCard.Equals(other.DefaultCard)
                ) && 
                (
                    this.DeviceChannel == other.DeviceChannel ||
                    this.DeviceChannel != null &&
                    this.DeviceChannel.Equals(other.DeviceChannel)
                ) && 
                (
                    this.InstallmentTotalCount == other.InstallmentTotalCount ||
                    this.InstallmentTotalCount != null &&
                    this.InstallmentTotalCount.Equals(other.InstallmentTotalCount)
                ) && 
                (
                    this.MerchantFraudRate == other.MerchantFraudRate ||
                    this.MerchantFraudRate != null &&
                    this.MerchantFraudRate.Equals(other.MerchantFraudRate)
                ) && 
                (
                    this.MarketingOptIn == other.MarketingOptIn ||
                    this.MarketingOptIn != null &&
                    this.MarketingOptIn.Equals(other.MarketingOptIn)
                ) && 
                (
                    this.MarketingSource == other.MarketingSource ||
                    this.MarketingSource != null &&
                    this.MarketingSource.Equals(other.MarketingSource)
                ) && 
                (
                    this.Mcc == other.Mcc ||
                    this.Mcc != null &&
                    this.Mcc.Equals(other.Mcc)
                ) && 
                (
                    this.MerchantScore == other.MerchantScore ||
                    this.MerchantScore != null &&
                    this.MerchantScore.Equals(other.MerchantScore)
                ) && 
                (
                    this.MessageCategory == other.MessageCategory ||
                    this.MessageCategory != null &&
                    this.MessageCategory.Equals(other.MessageCategory)
                ) && 
                (
                    this.NetworkScore == other.NetworkScore ||
                    this.NetworkScore != null &&
                    this.NetworkScore.Equals(other.NetworkScore)
                ) && 
                (
                    this.NpaCode == other.NpaCode ||
                    this.NpaCode != null &&
                    this.NpaCode.Equals(other.NpaCode)
                ) && 
                (
                    this.OverridePaymentMethod == other.OverridePaymentMethod ||
                    this.OverridePaymentMethod != null &&
                    this.OverridePaymentMethod.Equals(other.OverridePaymentMethod)
                ) && 
                (
                    this.OverrideCountryCode == other.OverrideCountryCode ||
                    this.OverrideCountryCode != null &&
                    this.OverrideCountryCode.Equals(other.OverrideCountryCode)
                ) && 
                (
                    this.PriorAuthenticationData == other.PriorAuthenticationData ||
                    this.PriorAuthenticationData != null &&
                    this.PriorAuthenticationData.Equals(other.PriorAuthenticationData)
                ) && 
                (
                    this.PriorAuthenticationMethod == other.PriorAuthenticationMethod ||
                    this.PriorAuthenticationMethod != null &&
                    this.PriorAuthenticationMethod.Equals(other.PriorAuthenticationMethod)
                ) && 
                (
                    this.PriorAuthenticationReferenceId == other.PriorAuthenticationReferenceId ||
                    this.PriorAuthenticationReferenceId != null &&
                    this.PriorAuthenticationReferenceId.Equals(other.PriorAuthenticationReferenceId)
                ) && 
                (
                    this.PriorAuthenticationTime == other.PriorAuthenticationTime ||
                    this.PriorAuthenticationTime != null &&
                    this.PriorAuthenticationTime.Equals(other.PriorAuthenticationTime)
                ) && 
                (
                    this.ProductCode == other.ProductCode ||
                    this.ProductCode != null &&
                    this.ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    this.RequestorId == other.RequestorId ||
                    this.RequestorId != null &&
                    this.RequestorId.Equals(other.RequestorId)
                ) && 
                (
                    this.RequestorInitiatedAuthenticationIndicator == other.RequestorInitiatedAuthenticationIndicator ||
                    this.RequestorInitiatedAuthenticationIndicator != null &&
                    this.RequestorInitiatedAuthenticationIndicator.Equals(other.RequestorInitiatedAuthenticationIndicator)
                ) && 
                (
                    this.RequestorName == other.RequestorName ||
                    this.RequestorName != null &&
                    this.RequestorName.Equals(other.RequestorName)
                ) && 
                (
                    this.ReferenceId == other.ReferenceId ||
                    this.ReferenceId != null &&
                    this.ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    this.SdkMaxTimeout == other.SdkMaxTimeout ||
                    this.SdkMaxTimeout != null &&
                    this.SdkMaxTimeout.Equals(other.SdkMaxTimeout)
                ) && 
                (
                    this.SecureCorporatePaymentIndicator == other.SecureCorporatePaymentIndicator ||
                    this.SecureCorporatePaymentIndicator != null &&
                    this.SecureCorporatePaymentIndicator.Equals(other.SecureCorporatePaymentIndicator)
                ) && 
                (
                    this.TransactionMode == other.TransactionMode ||
                    this.TransactionMode != null &&
                    this.TransactionMode.Equals(other.TransactionMode)
                ) && 
                (
                    this.WhiteListStatus == other.WhiteListStatus ||
                    this.WhiteListStatus != null &&
                    this.WhiteListStatus.Equals(other.WhiteListStatus)
                ) && 
                (
                    this.EffectiveAuthenticationType == other.EffectiveAuthenticationType ||
                    this.EffectiveAuthenticationType != null &&
                    this.EffectiveAuthenticationType.Equals(other.EffectiveAuthenticationType)
                ) && 
                (
                    this.SignedParesStatusReason == other.SignedParesStatusReason ||
                    this.SignedParesStatusReason != null &&
                    this.SignedParesStatusReason.Equals(other.SignedParesStatusReason)
                ) && 
                (
                    this.SignedPares == other.SignedPares ||
                    this.SignedPares != null &&
                    this.SignedPares.Equals(other.SignedPares)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Cavv != null)
                    hash = hash * 59 + this.Cavv.GetHashCode();
                if (this.CavvAlgorithm != null)
                    hash = hash * 59 + this.CavvAlgorithm.GetHashCode();
                if (this.EciRaw != null)
                    hash = hash * 59 + this.EciRaw.GetHashCode();
                if (this.ParesStatus != null)
                    hash = hash * 59 + this.ParesStatus.GetHashCode();
                if (this.VeresEnrolled != null)
                    hash = hash * 59 + this.VeresEnrolled.GetHashCode();
                if (this.Xid != null)
                    hash = hash * 59 + this.Xid.GetHashCode();
                if (this.UcafCollectionIndicator != null)
                    hash = hash * 59 + this.UcafCollectionIndicator.GetHashCode();
                if (this.UcafAuthenticationData != null)
                    hash = hash * 59 + this.UcafAuthenticationData.GetHashCode();
                if (this.StrongAuthentication != null)
                    hash = hash * 59 + this.StrongAuthentication.GetHashCode();
                if (this.DirectoryServerTransactionId != null)
                    hash = hash * 59 + this.DirectoryServerTransactionId.GetHashCode();
                if (this.PaSpecificationVersion != null)
                    hash = hash * 59 + this.PaSpecificationVersion.GetHashCode();
                if (this.AuthenticationType != null)
                    hash = hash * 59 + this.AuthenticationType.GetHashCode();
                if (this.AcsTransactionId != null)
                    hash = hash * 59 + this.AcsTransactionId.GetHashCode();
                if (this.AcsWindowSize != null)
                    hash = hash * 59 + this.AcsWindowSize.GetHashCode();
                if (this.AlternateAuthenticationData != null)
                    hash = hash * 59 + this.AlternateAuthenticationData.GetHashCode();
                if (this.AlternateAuthenticationDate != null)
                    hash = hash * 59 + this.AlternateAuthenticationDate.GetHashCode();
                if (this.AlternateAuthenticationMethod != null)
                    hash = hash * 59 + this.AlternateAuthenticationMethod.GetHashCode();
                if (this.AuthenticationDate != null)
                    hash = hash * 59 + this.AuthenticationDate.GetHashCode();
                if (this.AuthenticationTransactionId != null)
                    hash = hash * 59 + this.AuthenticationTransactionId.GetHashCode();
                if (this.ChallengeCancelCode != null)
                    hash = hash * 59 + this.ChallengeCancelCode.GetHashCode();
                if (this.ChallengeCode != null)
                    hash = hash * 59 + this.ChallengeCode.GetHashCode();
                if (this.ChallengeStatus != null)
                    hash = hash * 59 + this.ChallengeStatus.GetHashCode();
                if (this.CustomerCardAlias != null)
                    hash = hash * 59 + this.CustomerCardAlias.GetHashCode();
                if (this.DecoupledAuthenticationIndicator != null)
                    hash = hash * 59 + this.DecoupledAuthenticationIndicator.GetHashCode();
                if (this.DecoupledAuthenticationMaxTime != null)
                    hash = hash * 59 + this.DecoupledAuthenticationMaxTime.GetHashCode();
                if (this.DefaultCard != null)
                    hash = hash * 59 + this.DefaultCard.GetHashCode();
                if (this.DeviceChannel != null)
                    hash = hash * 59 + this.DeviceChannel.GetHashCode();
                if (this.InstallmentTotalCount != null)
                    hash = hash * 59 + this.InstallmentTotalCount.GetHashCode();
                if (this.MerchantFraudRate != null)
                    hash = hash * 59 + this.MerchantFraudRate.GetHashCode();
                if (this.MarketingOptIn != null)
                    hash = hash * 59 + this.MarketingOptIn.GetHashCode();
                if (this.MarketingSource != null)
                    hash = hash * 59 + this.MarketingSource.GetHashCode();
                if (this.Mcc != null)
                    hash = hash * 59 + this.Mcc.GetHashCode();
                if (this.MerchantScore != null)
                    hash = hash * 59 + this.MerchantScore.GetHashCode();
                if (this.MessageCategory != null)
                    hash = hash * 59 + this.MessageCategory.GetHashCode();
                if (this.NetworkScore != null)
                    hash = hash * 59 + this.NetworkScore.GetHashCode();
                if (this.NpaCode != null)
                    hash = hash * 59 + this.NpaCode.GetHashCode();
                if (this.OverridePaymentMethod != null)
                    hash = hash * 59 + this.OverridePaymentMethod.GetHashCode();
                if (this.OverrideCountryCode != null)
                    hash = hash * 59 + this.OverrideCountryCode.GetHashCode();
                if (this.PriorAuthenticationData != null)
                    hash = hash * 59 + this.PriorAuthenticationData.GetHashCode();
                if (this.PriorAuthenticationMethod != null)
                    hash = hash * 59 + this.PriorAuthenticationMethod.GetHashCode();
                if (this.PriorAuthenticationReferenceId != null)
                    hash = hash * 59 + this.PriorAuthenticationReferenceId.GetHashCode();
                if (this.PriorAuthenticationTime != null)
                    hash = hash * 59 + this.PriorAuthenticationTime.GetHashCode();
                if (this.ProductCode != null)
                    hash = hash * 59 + this.ProductCode.GetHashCode();
                if (this.RequestorId != null)
                    hash = hash * 59 + this.RequestorId.GetHashCode();
                if (this.RequestorInitiatedAuthenticationIndicator != null)
                    hash = hash * 59 + this.RequestorInitiatedAuthenticationIndicator.GetHashCode();
                if (this.RequestorName != null)
                    hash = hash * 59 + this.RequestorName.GetHashCode();
                if (this.ReferenceId != null)
                    hash = hash * 59 + this.ReferenceId.GetHashCode();
                if (this.SdkMaxTimeout != null)
                    hash = hash * 59 + this.SdkMaxTimeout.GetHashCode();
                if (this.SecureCorporatePaymentIndicator != null)
                    hash = hash * 59 + this.SecureCorporatePaymentIndicator.GetHashCode();
                if (this.TransactionMode != null)
                    hash = hash * 59 + this.TransactionMode.GetHashCode();
                if (this.WhiteListStatus != null)
                    hash = hash * 59 + this.WhiteListStatus.GetHashCode();
                if (this.EffectiveAuthenticationType != null)
                    hash = hash * 59 + this.EffectiveAuthenticationType.GetHashCode();
                if (this.SignedParesStatusReason != null)
                    hash = hash * 59 + this.SignedParesStatusReason.GetHashCode();
                if (this.SignedPares != null)
                    hash = hash * 59 + this.SignedPares.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cavv (string) maxLength
            if(this.Cavv != null && this.Cavv.Length >= 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cavv, length must be less than or equal to 40.", new [] { "Cavv" });
            }

            // CavvAlgorithm (string) maxLength
            if(this.CavvAlgorithm != null && this.CavvAlgorithm.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CavvAlgorithm, length must be less than or equal to 1.", new [] { "CavvAlgorithm" });
            }

            // EciRaw (string) maxLength
            if(this.EciRaw != null && this.EciRaw.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EciRaw, length must be less than or equal to 2.", new [] { "EciRaw" });
            }

            // ParesStatus (string) maxLength
            if(this.ParesStatus != null && this.ParesStatus.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParesStatus, length must be less than or equal to 1.", new [] { "ParesStatus" });
            }

            // VeresEnrolled (string) maxLength
            if(this.VeresEnrolled != null && this.VeresEnrolled.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VeresEnrolled, length must be less than or equal to 1.", new [] { "VeresEnrolled" });
            }

            // Xid (string) maxLength
            if(this.Xid != null && this.Xid.Length >= 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Xid, length must be less than or equal to 40.", new [] { "Xid" });
            }

            // UcafCollectionIndicator (string) maxLength
            if(this.UcafCollectionIndicator != null && this.UcafCollectionIndicator.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UcafCollectionIndicator, length must be less than or equal to 1.", new [] { "UcafCollectionIndicator" });
            }

            // UcafAuthenticationData (string) maxLength
            if(this.UcafAuthenticationData != null && this.UcafAuthenticationData.Length >= 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UcafAuthenticationData, length must be less than or equal to 32.", new [] { "UcafAuthenticationData" });
            }

            // DirectoryServerTransactionId (string) maxLength
            if(this.DirectoryServerTransactionId != null && this.DirectoryServerTransactionId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirectoryServerTransactionId, length must be less than or equal to 36.", new [] { "DirectoryServerTransactionId" });
            }

            // PaSpecificationVersion (string) maxLength
            if(this.PaSpecificationVersion != null && this.PaSpecificationVersion.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaSpecificationVersion, length must be less than or equal to 1.", new [] { "PaSpecificationVersion" });
            }

            // AuthenticationType (string) maxLength
            if(this.AuthenticationType != null && this.AuthenticationType.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationType, length must be less than or equal to 2.", new [] { "AuthenticationType" });
            }

            // AcsTransactionId (string) maxLength
            if(this.AcsTransactionId != null && this.AcsTransactionId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcsTransactionId, length must be less than or equal to 36.", new [] { "AcsTransactionId" });
            }

            // AcsWindowSize (string) maxLength
            if(this.AcsWindowSize != null && this.AcsWindowSize.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcsWindowSize, length must be less than or equal to 2.", new [] { "AcsWindowSize" });
            }

            // AlternateAuthenticationData (string) maxLength
            if(this.AlternateAuthenticationData != null && this.AlternateAuthenticationData.Length >= 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AlternateAuthenticationData, length must be less than or equal to 2048.", new [] { "AlternateAuthenticationData" });
            }

            // AlternateAuthenticationDate (string) maxLength
            if(this.AlternateAuthenticationDate != null && this.AlternateAuthenticationDate.Length >= 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AlternateAuthenticationDate, length must be less than or equal to 14.", new [] { "AlternateAuthenticationDate" });
            }

            // AuthenticationDate (string) maxLength
            if(this.AuthenticationDate != null && this.AuthenticationDate.Length >= 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationDate, length must be less than or equal to 14.", new [] { "AuthenticationDate" });
            }

            // AuthenticationTransactionId (string) maxLength
            if(this.AuthenticationTransactionId != null && this.AuthenticationTransactionId.Length >= 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationTransactionId, length must be less than or equal to 20.", new [] { "AuthenticationTransactionId" });
            }

            // ChallengeCancelCode (string) maxLength
            if(this.ChallengeCancelCode != null && this.ChallengeCancelCode.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChallengeCancelCode, length must be less than or equal to 2.", new [] { "ChallengeCancelCode" });
            }

            // ChallengeStatus (string) maxLength
            if(this.ChallengeStatus != null && this.ChallengeStatus.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChallengeStatus, length must be less than or equal to 2.", new [] { "ChallengeStatus" });
            }

            // CustomerCardAlias (string) maxLength
            if(this.CustomerCardAlias != null && this.CustomerCardAlias.Length >= 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerCardAlias, length must be less than or equal to 128.", new [] { "CustomerCardAlias" });
            }

            // DecoupledAuthenticationIndicator (string) maxLength
            if(this.DecoupledAuthenticationIndicator != null && this.DecoupledAuthenticationIndicator.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecoupledAuthenticationIndicator, length must be less than or equal to 1.", new [] { "DecoupledAuthenticationIndicator" });
            }

            // DecoupledAuthenticationMaxTime (string) maxLength
            if(this.DecoupledAuthenticationMaxTime != null && this.DecoupledAuthenticationMaxTime.Length >= 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecoupledAuthenticationMaxTime, length must be less than or equal to 5.", new [] { "DecoupledAuthenticationMaxTime" });
            }

            // DeviceChannel (string) maxLength
            if(this.DeviceChannel != null && this.DeviceChannel.Length >= 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceChannel, length must be less than or equal to 10.", new [] { "DeviceChannel" });
            }

            // MerchantFraudRate (string) maxLength
            if(this.MerchantFraudRate != null && this.MerchantFraudRate.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantFraudRate, length must be less than or equal to 2.", new [] { "MerchantFraudRate" });
            }

            // MarketingSource (string) maxLength
            if(this.MarketingSource != null && this.MarketingSource.Length >= 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketingSource, length must be less than or equal to 40.", new [] { "MarketingSource" });
            }

            // Mcc (string) maxLength
            if(this.Mcc != null && this.Mcc.Length >= 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mcc, length must be less than or equal to 4.", new [] { "Mcc" });
            }

            // NetworkScore (string) maxLength
            if(this.NetworkScore != null && this.NetworkScore.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NetworkScore, length must be less than or equal to 2.", new [] { "NetworkScore" });
            }

            // NpaCode (string) maxLength
            if(this.NpaCode != null && this.NpaCode.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NpaCode, length must be less than or equal to 2.", new [] { "NpaCode" });
            }

            // OverrideCountryCode (string) maxLength
            if(this.OverrideCountryCode != null && this.OverrideCountryCode.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverrideCountryCode, length must be less than or equal to 2.", new [] { "OverrideCountryCode" });
            }

            // PriorAuthenticationData (string) maxLength
            if(this.PriorAuthenticationData != null && this.PriorAuthenticationData.Length >= 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriorAuthenticationData, length must be less than or equal to 2048.", new [] { "PriorAuthenticationData" });
            }

            // PriorAuthenticationMethod (string) maxLength
            if(this.PriorAuthenticationMethod != null && this.PriorAuthenticationMethod.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriorAuthenticationMethod, length must be less than or equal to 2.", new [] { "PriorAuthenticationMethod" });
            }

            // PriorAuthenticationReferenceId (string) maxLength
            if(this.PriorAuthenticationReferenceId != null && this.PriorAuthenticationReferenceId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriorAuthenticationReferenceId, length must be less than or equal to 36.", new [] { "PriorAuthenticationReferenceId" });
            }

            // PriorAuthenticationTime (string) maxLength
            if(this.PriorAuthenticationTime != null && this.PriorAuthenticationTime.Length >= 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriorAuthenticationTime, length must be less than or equal to 12.", new [] { "PriorAuthenticationTime" });
            }

            // ProductCode (string) maxLength
            if(this.ProductCode != null && this.ProductCode.Length >= 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be less than or equal to 3.", new [] { "ProductCode" });
            }

            // RequestorId (string) maxLength
            if(this.RequestorId != null && this.RequestorId.Length >= 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestorId, length must be less than or equal to 35.", new [] { "RequestorId" });
            }

            // RequestorInitiatedAuthenticationIndicator (string) maxLength
            if(this.RequestorInitiatedAuthenticationIndicator != null && this.RequestorInitiatedAuthenticationIndicator.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestorInitiatedAuthenticationIndicator, length must be less than or equal to 2.", new [] { "RequestorInitiatedAuthenticationIndicator" });
            }

            // RequestorName (string) maxLength
            if(this.RequestorName != null && this.RequestorName.Length >= 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestorName, length must be less than or equal to 40.", new [] { "RequestorName" });
            }

            // ReferenceId (string) maxLength
            if(this.ReferenceId != null && this.ReferenceId.Length >= 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceId, length must be less than or equal to 50.", new [] { "ReferenceId" });
            }

            // SdkMaxTimeout (string) maxLength
            if(this.SdkMaxTimeout != null && this.SdkMaxTimeout.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkMaxTimeout, length must be less than or equal to 2.", new [] { "SdkMaxTimeout" });
            }

            // SecureCorporatePaymentIndicator (string) maxLength
            if(this.SecureCorporatePaymentIndicator != null && this.SecureCorporatePaymentIndicator.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecureCorporatePaymentIndicator, length must be less than or equal to 1.", new [] { "SecureCorporatePaymentIndicator" });
            }

            // WhiteListStatus (string) maxLength
            if(this.WhiteListStatus != null && this.WhiteListStatus.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WhiteListStatus, length must be less than or equal to 1.", new [] { "WhiteListStatus" });
            }

            // EffectiveAuthenticationType (string) maxLength
            if(this.EffectiveAuthenticationType != null && this.EffectiveAuthenticationType.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveAuthenticationType, length must be less than or equal to 2.", new [] { "EffectiveAuthenticationType" });
            }

            // SignedParesStatusReason (string) maxLength
            if(this.SignedParesStatusReason != null && this.SignedParesStatusReason.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignedParesStatusReason, length must be less than or equal to 2.", new [] { "SignedParesStatusReason" });
            }

            yield break;
        }
    }

}
