/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1DecisionsPost201ResponseRiskInformationScore
    /// </summary>
    [DataContract]
    public partial class RiskV1DecisionsPost201ResponseRiskInformationScore :  IEquatable<RiskV1DecisionsPost201ResponseRiskInformationScore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1DecisionsPost201ResponseRiskInformationScore" /> class.
        /// </summary>
        /// <param name="FactorCodes">FactorCodes.</param>
        /// <param name="ModelUsed">Name of the score model used for the transaction. If you did not include a custom model in your request, this field contains the name of CyberSource’s default model. .</param>
        /// <param name="Result">Total score calculated for this order. The value cannot be negative. .</param>
        public RiskV1DecisionsPost201ResponseRiskInformationScore(List<string> FactorCodes = default(List<string>), string ModelUsed = default(string), string Result = default(string))
        {
            this.FactorCodes = FactorCodes;
            this.ModelUsed = ModelUsed;
            this.Result = Result;
        }
        
        /// <summary>
        /// Gets or Sets FactorCodes
        /// </summary>
        [DataMember(Name="factorCodes", EmitDefaultValue=false)]
        public List<string> FactorCodes { get; set; }

        /// <summary>
        /// Name of the score model used for the transaction. If you did not include a custom model in your request, this field contains the name of CyberSource’s default model. 
        /// </summary>
        /// <value>Name of the score model used for the transaction. If you did not include a custom model in your request, this field contains the name of CyberSource’s default model. </value>
        [DataMember(Name="modelUsed", EmitDefaultValue=false)]
        public string ModelUsed { get; set; }

        /// <summary>
        /// Total score calculated for this order. The value cannot be negative. 
        /// </summary>
        /// <value>Total score calculated for this order. The value cannot be negative. </value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1DecisionsPost201ResponseRiskInformationScore {\n");
            sb.Append("  FactorCodes: ").Append(FactorCodes).Append("\n");
            sb.Append("  ModelUsed: ").Append(ModelUsed).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1DecisionsPost201ResponseRiskInformationScore);
        }

        /// <summary>
        /// Returns true if RiskV1DecisionsPost201ResponseRiskInformationScore instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1DecisionsPost201ResponseRiskInformationScore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1DecisionsPost201ResponseRiskInformationScore other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FactorCodes == other.FactorCodes ||
                    this.FactorCodes != null &&
                    this.FactorCodes.SequenceEqual(other.FactorCodes)
                ) && 
                (
                    this.ModelUsed == other.ModelUsed ||
                    this.ModelUsed != null &&
                    this.ModelUsed.Equals(other.ModelUsed)
                ) && 
                (
                    this.Result == other.Result ||
                    this.Result != null &&
                    this.Result.Equals(other.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FactorCodes != null)
                    hash = hash * 59 + this.FactorCodes.GetHashCode();
                if (this.ModelUsed != null)
                    hash = hash * 59 + this.ModelUsed.GetHashCode();
                if (this.Result != null)
                    hash = hash * 59 + this.Result.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ModelUsed (string) maxLength
            if(this.ModelUsed != null && this.ModelUsed.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModelUsed, length must be less than 255.", new [] { "ModelUsed" });
            }

            // Result (string) maxLength
            if(this.Result != null && this.Result.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Result, length must be less than 255.", new [] { "Result" });
            }

            yield break;
        }
    }

}
