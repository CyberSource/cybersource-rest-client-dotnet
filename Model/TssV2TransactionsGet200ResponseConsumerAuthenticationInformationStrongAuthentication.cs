/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication
    /// </summary>
    [DataContract]
    public partial class TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication :  IEquatable<TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication" /> class.
        /// </summary>
        /// <param name="LowValueExemptionIndicator">This field will contain the low value exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  ( low value exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment) .</param>
        /// <param name="RiskAnalysisExemptionIndicator">This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (TRA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS) .</param>
        /// <param name="TrustedMerchantExemptionIndicator">Possible values: - &#x60;0&#x60;  (Trusted merchant exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder) .</param>
        /// <param name="SecureCorporatePaymentIndicator">This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (SCA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment) .</param>
        /// <param name="DelegatedAuthenticationExemptionIndicator">This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (delegated Authentication exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer)) .</param>
        public TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication(string LowValueExemptionIndicator = default(string), string RiskAnalysisExemptionIndicator = default(string), string TrustedMerchantExemptionIndicator = default(string), string SecureCorporatePaymentIndicator = default(string), string DelegatedAuthenticationExemptionIndicator = default(string))
        {
            this.LowValueExemptionIndicator = LowValueExemptionIndicator;
            this.RiskAnalysisExemptionIndicator = RiskAnalysisExemptionIndicator;
            this.TrustedMerchantExemptionIndicator = TrustedMerchantExemptionIndicator;
            this.SecureCorporatePaymentIndicator = SecureCorporatePaymentIndicator;
            this.DelegatedAuthenticationExemptionIndicator = DelegatedAuthenticationExemptionIndicator;
        }
        
        /// <summary>
        /// This field will contain the low value exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  ( low value exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment) 
        /// </summary>
        /// <value>This field will contain the low value exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  ( low value exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment) </value>
        [DataMember(Name="lowValueExemptionIndicator", EmitDefaultValue=false)]
        public string LowValueExemptionIndicator { get; set; }

        /// <summary>
        /// This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (TRA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS) 
        /// </summary>
        /// <value>This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (TRA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS) </value>
        [DataMember(Name="riskAnalysisExemptionIndicator", EmitDefaultValue=false)]
        public string RiskAnalysisExemptionIndicator { get; set; }

        /// <summary>
        /// Possible values: - &#x60;0&#x60;  (Trusted merchant exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder) 
        /// </summary>
        /// <value>Possible values: - &#x60;0&#x60;  (Trusted merchant exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder) </value>
        [DataMember(Name="trustedMerchantExemptionIndicator", EmitDefaultValue=false)]
        public string TrustedMerchantExemptionIndicator { get; set; }

        /// <summary>
        /// This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (SCA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment) 
        /// </summary>
        /// <value>This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (SCA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment) </value>
        [DataMember(Name="secureCorporatePaymentIndicator", EmitDefaultValue=false)]
        public string SecureCorporatePaymentIndicator { get; set; }

        /// <summary>
        /// This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (delegated Authentication exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer)) 
        /// </summary>
        /// <value>This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (delegated Authentication exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer)) </value>
        [DataMember(Name="delegatedAuthenticationExemptionIndicator", EmitDefaultValue=false)]
        public string DelegatedAuthenticationExemptionIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication {\n");
            sb.Append("  LowValueExemptionIndicator: ").Append(LowValueExemptionIndicator).Append("\n");
            sb.Append("  RiskAnalysisExemptionIndicator: ").Append(RiskAnalysisExemptionIndicator).Append("\n");
            sb.Append("  TrustedMerchantExemptionIndicator: ").Append(TrustedMerchantExemptionIndicator).Append("\n");
            sb.Append("  SecureCorporatePaymentIndicator: ").Append(SecureCorporatePaymentIndicator).Append("\n");
            sb.Append("  DelegatedAuthenticationExemptionIndicator: ").Append(DelegatedAuthenticationExemptionIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication);
        }

        /// <summary>
        /// Returns true if TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication instances are equal
        /// </summary>
        /// <param name="other">Instance of TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LowValueExemptionIndicator == other.LowValueExemptionIndicator ||
                    this.LowValueExemptionIndicator != null &&
                    this.LowValueExemptionIndicator.Equals(other.LowValueExemptionIndicator)
                ) && 
                (
                    this.RiskAnalysisExemptionIndicator == other.RiskAnalysisExemptionIndicator ||
                    this.RiskAnalysisExemptionIndicator != null &&
                    this.RiskAnalysisExemptionIndicator.Equals(other.RiskAnalysisExemptionIndicator)
                ) && 
                (
                    this.TrustedMerchantExemptionIndicator == other.TrustedMerchantExemptionIndicator ||
                    this.TrustedMerchantExemptionIndicator != null &&
                    this.TrustedMerchantExemptionIndicator.Equals(other.TrustedMerchantExemptionIndicator)
                ) && 
                (
                    this.SecureCorporatePaymentIndicator == other.SecureCorporatePaymentIndicator ||
                    this.SecureCorporatePaymentIndicator != null &&
                    this.SecureCorporatePaymentIndicator.Equals(other.SecureCorporatePaymentIndicator)
                ) && 
                (
                    this.DelegatedAuthenticationExemptionIndicator == other.DelegatedAuthenticationExemptionIndicator ||
                    this.DelegatedAuthenticationExemptionIndicator != null &&
                    this.DelegatedAuthenticationExemptionIndicator.Equals(other.DelegatedAuthenticationExemptionIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LowValueExemptionIndicator != null)
                    hash = hash * 59 + this.LowValueExemptionIndicator.GetHashCode();
                if (this.RiskAnalysisExemptionIndicator != null)
                    hash = hash * 59 + this.RiskAnalysisExemptionIndicator.GetHashCode();
                if (this.TrustedMerchantExemptionIndicator != null)
                    hash = hash * 59 + this.TrustedMerchantExemptionIndicator.GetHashCode();
                if (this.SecureCorporatePaymentIndicator != null)
                    hash = hash * 59 + this.SecureCorporatePaymentIndicator.GetHashCode();
                if (this.DelegatedAuthenticationExemptionIndicator != null)
                    hash = hash * 59 + this.DelegatedAuthenticationExemptionIndicator.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
