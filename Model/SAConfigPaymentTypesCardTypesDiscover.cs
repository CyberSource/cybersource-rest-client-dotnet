/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Object containing supported Card Types and settings
    /// </summary>
    [DataContract]
    public partial class SAConfigPaymentTypesCardTypesDiscover :  IEquatable<SAConfigPaymentTypesCardTypesDiscover>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAConfigPaymentTypesCardTypesDiscover" /> class.
        /// </summary>
        /// <param name="CardVerificationNumberSupported">Dictates whether or Card Verification Number is supported by the card type. Usually this is set at system level..</param>
        /// <param name="CardVerificationNumberDisplay">Toggles whether or Card Verification Number is displayed on the Hosted Checkout..</param>
        /// <param name="PayerAuthenticationSupported">Dictates whether or Payer Authentication is supported by the card type. Usually this is set at system level..</param>
        /// <param name="SupportedCurrencies">Array of the supported  ISO 4217 alphabetic currency codes..</param>
        /// <param name="Method">Method.</param>
        /// <param name="CardVerificationNumberRequired">CardVerificationNumberRequired.</param>
        /// <param name="PayerAuthenticationEnabled">PayerAuthenticationEnabled.</param>
        public SAConfigPaymentTypesCardTypesDiscover(bool? CardVerificationNumberSupported = default(bool?), bool? CardVerificationNumberDisplay = default(bool?), bool? PayerAuthenticationSupported = default(bool?), List<string> SupportedCurrencies = default(List<string>), string Method = default(string), bool? CardVerificationNumberRequired = default(bool?), bool? PayerAuthenticationEnabled = default(bool?))
        {
            this.CardVerificationNumberSupported = CardVerificationNumberSupported;
            this.CardVerificationNumberDisplay = CardVerificationNumberDisplay;
            this.PayerAuthenticationSupported = PayerAuthenticationSupported;
            this.SupportedCurrencies = SupportedCurrencies;
            this.Method = Method;
            this.CardVerificationNumberRequired = CardVerificationNumberRequired;
            this.PayerAuthenticationEnabled = PayerAuthenticationEnabled;
        }
        
        /// <summary>
        /// Dictates whether or Card Verification Number is supported by the card type. Usually this is set at system level.
        /// </summary>
        /// <value>Dictates whether or Card Verification Number is supported by the card type. Usually this is set at system level.</value>
        [DataMember(Name="cardVerificationNumberSupported", EmitDefaultValue=false)]
        public bool? CardVerificationNumberSupported { get; set; }

        /// <summary>
        /// Toggles whether or Card Verification Number is displayed on the Hosted Checkout.
        /// </summary>
        /// <value>Toggles whether or Card Verification Number is displayed on the Hosted Checkout.</value>
        [DataMember(Name="cardVerificationNumberDisplay", EmitDefaultValue=false)]
        public bool? CardVerificationNumberDisplay { get; set; }

        /// <summary>
        /// Dictates whether or Payer Authentication is supported by the card type. Usually this is set at system level.
        /// </summary>
        /// <value>Dictates whether or Payer Authentication is supported by the card type. Usually this is set at system level.</value>
        [DataMember(Name="payerAuthenticationSupported", EmitDefaultValue=false)]
        public bool? PayerAuthenticationSupported { get; set; }

        /// <summary>
        /// Array of the supported  ISO 4217 alphabetic currency codes.
        /// </summary>
        /// <value>Array of the supported  ISO 4217 alphabetic currency codes.</value>
        [DataMember(Name="supportedCurrencies", EmitDefaultValue=false)]
        public List<string> SupportedCurrencies { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets CardVerificationNumberRequired
        /// </summary>
        [DataMember(Name="cardVerificationNumberRequired", EmitDefaultValue=false)]
        public bool? CardVerificationNumberRequired { get; set; }

        /// <summary>
        /// Gets or Sets PayerAuthenticationEnabled
        /// </summary>
        [DataMember(Name="payerAuthenticationEnabled", EmitDefaultValue=false)]
        public bool? PayerAuthenticationEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SAConfigPaymentTypesCardTypesDiscover {\n");
            sb.Append("  CardVerificationNumberSupported: ").Append(CardVerificationNumberSupported).Append("\n");
            sb.Append("  CardVerificationNumberDisplay: ").Append(CardVerificationNumberDisplay).Append("\n");
            sb.Append("  PayerAuthenticationSupported: ").Append(PayerAuthenticationSupported).Append("\n");
            sb.Append("  SupportedCurrencies: ").Append(SupportedCurrencies).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CardVerificationNumberRequired: ").Append(CardVerificationNumberRequired).Append("\n");
            sb.Append("  PayerAuthenticationEnabled: ").Append(PayerAuthenticationEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SAConfigPaymentTypesCardTypesDiscover);
        }

        /// <summary>
        /// Returns true if SAConfigPaymentTypesCardTypesDiscover instances are equal
        /// </summary>
        /// <param name="other">Instance of SAConfigPaymentTypesCardTypesDiscover to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SAConfigPaymentTypesCardTypesDiscover other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardVerificationNumberSupported == other.CardVerificationNumberSupported ||
                    this.CardVerificationNumberSupported != null &&
                    this.CardVerificationNumberSupported.Equals(other.CardVerificationNumberSupported)
                ) && 
                (
                    this.CardVerificationNumberDisplay == other.CardVerificationNumberDisplay ||
                    this.CardVerificationNumberDisplay != null &&
                    this.CardVerificationNumberDisplay.Equals(other.CardVerificationNumberDisplay)
                ) && 
                (
                    this.PayerAuthenticationSupported == other.PayerAuthenticationSupported ||
                    this.PayerAuthenticationSupported != null &&
                    this.PayerAuthenticationSupported.Equals(other.PayerAuthenticationSupported)
                ) && 
                (
                    this.SupportedCurrencies == other.SupportedCurrencies ||
                    this.SupportedCurrencies != null &&
                    this.SupportedCurrencies.SequenceEqual(other.SupportedCurrencies)
                ) && 
                (
                    this.Method == other.Method ||
                    this.Method != null &&
                    this.Method.Equals(other.Method)
                ) && 
                (
                    this.CardVerificationNumberRequired == other.CardVerificationNumberRequired ||
                    this.CardVerificationNumberRequired != null &&
                    this.CardVerificationNumberRequired.Equals(other.CardVerificationNumberRequired)
                ) && 
                (
                    this.PayerAuthenticationEnabled == other.PayerAuthenticationEnabled ||
                    this.PayerAuthenticationEnabled != null &&
                    this.PayerAuthenticationEnabled.Equals(other.PayerAuthenticationEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardVerificationNumberSupported != null)
                    hash = hash * 59 + this.CardVerificationNumberSupported.GetHashCode();
                if (this.CardVerificationNumberDisplay != null)
                    hash = hash * 59 + this.CardVerificationNumberDisplay.GetHashCode();
                if (this.PayerAuthenticationSupported != null)
                    hash = hash * 59 + this.PayerAuthenticationSupported.GetHashCode();
                if (this.SupportedCurrencies != null)
                    hash = hash * 59 + this.SupportedCurrencies.GetHashCode();
                if (this.Method != null)
                    hash = hash * 59 + this.Method.GetHashCode();
                if (this.CardVerificationNumberRequired != null)
                    hash = hash * 59 + this.CardVerificationNumberRequired.GetHashCode();
                if (this.PayerAuthenticationEnabled != null)
                    hash = hash * 59 + this.PayerAuthenticationEnabled.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
