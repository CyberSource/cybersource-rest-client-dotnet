/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation :  IEquatable<UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation" /> class.
        /// </summary>
        /// <param name="FirstName">Director&#39;s first name.</param>
        /// <param name="MiddleName">Director&#39;s middle name.</param>
        /// <param name="LastName">Director&#39;s last name.</param>
        /// <param name="BirthDate">Director&#39;s date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016.</param>
        /// <param name="Email">Email address for Director.</param>
        /// <param name="PhoneNumber">Owner&#39;s phone number.</param>
        /// <param name="Nationality">Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2..</param>
        /// <param name="NationalId">Identification value from ID document.</param>
        /// <param name="IdCountry">Country of the ID document. Two character country code, ISO 3166-1 alpha-2..</param>
        /// <param name="PassportNumber">Passport Number.</param>
        /// <param name="Address">Address.</param>
        public UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation(string FirstName = default(string), string MiddleName = default(string), string LastName = default(string), DateTime? BirthDate = default(DateTime?), string Email = default(string), string PhoneNumber = default(string), string Nationality = default(string), string NationalId = default(string), string IdCountry = default(string), string PassportNumber = default(string), UnderwritingConfigurationOrganizationInformationBusinessInformationAddress2 Address = default(UnderwritingConfigurationOrganizationInformationBusinessInformationAddress2))
        {
            this.FirstName = FirstName;
            this.MiddleName = MiddleName;
            this.LastName = LastName;
            this.BirthDate = BirthDate;
            this.Email = Email;
            this.PhoneNumber = PhoneNumber;
            this.Nationality = Nationality;
            this.NationalId = NationalId;
            this.IdCountry = IdCountry;
            this.PassportNumber = PassportNumber;
            this.Address = Address;
        }
        
        /// <summary>
        /// Director&#39;s first name
        /// </summary>
        /// <value>Director&#39;s first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Director&#39;s middle name
        /// </summary>
        /// <value>Director&#39;s middle name</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Director&#39;s last name
        /// </summary>
        /// <value>Director&#39;s last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Director&#39;s date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016
        /// </summary>
        /// <value>Director&#39;s date of birth. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Email address for Director
        /// </summary>
        /// <value>Email address for Director</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Owner&#39;s phone number
        /// </summary>
        /// <value>Owner&#39;s phone number</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country of origin for the owner. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Identification value from ID document
        /// </summary>
        /// <value>Identification value from ID document</value>
        [DataMember(Name="nationalId", EmitDefaultValue=false)]
        public string NationalId { get; set; }

        /// <summary>
        /// Country of the ID document. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country of the ID document. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="idCountry", EmitDefaultValue=false)]
        public string IdCountry { get; set; }

        /// <summary>
        /// Passport Number
        /// </summary>
        /// <value>Passport Number</value>
        [DataMember(Name="passportNumber", EmitDefaultValue=false)]
        public string PassportNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public UnderwritingConfigurationOrganizationInformationBusinessInformationAddress2 Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation {\n");
            if (FirstName != null) sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            if (MiddleName != null) sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            if (LastName != null) sb.Append("  LastName: ").Append(LastName).Append("\n");
            if (BirthDate != null) sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            if (Email != null) sb.Append("  Email: ").Append(Email).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (Nationality != null) sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            if (NationalId != null) sb.Append("  NationalId: ").Append(NationalId).Append("\n");
            if (IdCountry != null) sb.Append("  IdCountry: ").Append(IdCountry).Append("\n");
            if (PassportNumber != null) sb.Append("  PassportNumber: ").Append(PassportNumber).Append("\n");
            if (Address != null) sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.BirthDate == other.BirthDate ||
                    this.BirthDate != null &&
                    this.BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Nationality == other.Nationality ||
                    this.Nationality != null &&
                    this.Nationality.Equals(other.Nationality)
                ) && 
                (
                    this.NationalId == other.NationalId ||
                    this.NationalId != null &&
                    this.NationalId.Equals(other.NationalId)
                ) && 
                (
                    this.IdCountry == other.IdCountry ||
                    this.IdCountry != null &&
                    this.IdCountry.Equals(other.IdCountry)
                ) && 
                (
                    this.PassportNumber == other.PassportNumber ||
                    this.PassportNumber != null &&
                    this.PassportNumber.Equals(other.PassportNumber)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.BirthDate != null)
                    hash = hash * 59 + this.BirthDate.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Nationality != null)
                    hash = hash * 59 + this.Nationality.GetHashCode();
                if (this.NationalId != null)
                    hash = hash * 59 + this.NationalId.GetHashCode();
                if (this.IdCountry != null)
                    hash = hash * 59 + this.IdCountry.GetHashCode();
                if (this.PassportNumber != null)
                    hash = hash * 59 + this.PassportNumber.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
