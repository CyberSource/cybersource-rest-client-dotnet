/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Egress Key Information 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2012KeyInformation :  IEquatable<InlineResponse2012KeyInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2012KeyInformation" /> class.
        /// </summary>
        /// <param name="Provider">Provider name .</param>
        /// <param name="Tenant">Tenant name .</param>
        /// <param name="OrganizationId">Organization Id .</param>
        /// <param name="ClientKeyId">Client key Id .</param>
        /// <param name="KeyId">Key Serial Number .</param>
        /// <param name="Key">Value of the key .</param>
        /// <param name="KeyType">Type of the key .</param>
        /// <param name="Status">The status of the key .</param>
        /// <param name="ExpirationDate">The expiration time in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60; Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. .</param>
        /// <param name="Message">Message in case of failed key .</param>
        /// <param name="ErrorInformation">ErrorInformation.</param>
        public InlineResponse2012KeyInformation(string Provider = default(string), string Tenant = default(string), string OrganizationId = default(string), string ClientKeyId = default(string), string KeyId = default(string), string Key = default(string), string KeyType = default(string), string Status = default(string), string ExpirationDate = default(string), string Message = default(string), InlineResponse2012KeyInformationErrorInformation ErrorInformation = default(InlineResponse2012KeyInformationErrorInformation))
        {
            this.Provider = Provider;
            this.Tenant = Tenant;
            this.OrganizationId = OrganizationId;
            this.ClientKeyId = ClientKeyId;
            this.KeyId = KeyId;
            this.Key = Key;
            this.KeyType = KeyType;
            this.Status = Status;
            this.ExpirationDate = ExpirationDate;
            this.Message = Message;
            this.ErrorInformation = ErrorInformation;
        }
        
        /// <summary>
        /// Provider name 
        /// </summary>
        /// <value>Provider name </value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Tenant name 
        /// </summary>
        /// <value>Tenant name </value>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public string Tenant { get; set; }

        /// <summary>
        /// Organization Id 
        /// </summary>
        /// <value>Organization Id </value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Client key Id 
        /// </summary>
        /// <value>Client key Id </value>
        [DataMember(Name="clientKeyId", EmitDefaultValue=false)]
        public string ClientKeyId { get; set; }

        /// <summary>
        /// Key Serial Number 
        /// </summary>
        /// <value>Key Serial Number </value>
        [DataMember(Name="keyId", EmitDefaultValue=false)]
        public string KeyId { get; set; }

        /// <summary>
        /// Value of the key 
        /// </summary>
        /// <value>Value of the key </value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Type of the key 
        /// </summary>
        /// <value>Type of the key </value>
        [DataMember(Name="keyType", EmitDefaultValue=false)]
        public string KeyType { get; set; }

        /// <summary>
        /// The status of the key 
        /// </summary>
        /// <value>The status of the key </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The expiration time in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60; Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 
        /// </summary>
        /// <value>The expiration time in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60; Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. </value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Message in case of failed key 
        /// </summary>
        /// <value>Message in case of failed key </value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ErrorInformation
        /// </summary>
        [DataMember(Name="errorInformation", EmitDefaultValue=false)]
        public InlineResponse2012KeyInformationErrorInformation ErrorInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2012KeyInformation {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ClientKeyId: ").Append(ClientKeyId).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ErrorInformation: ").Append(ErrorInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2012KeyInformation);
        }

        /// <summary>
        /// Returns true if InlineResponse2012KeyInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2012KeyInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2012KeyInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Provider == other.Provider ||
                    this.Provider != null &&
                    this.Provider.Equals(other.Provider)
                ) && 
                (
                    this.Tenant == other.Tenant ||
                    this.Tenant != null &&
                    this.Tenant.Equals(other.Tenant)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.ClientKeyId == other.ClientKeyId ||
                    this.ClientKeyId != null &&
                    this.ClientKeyId.Equals(other.ClientKeyId)
                ) && 
                (
                    this.KeyId == other.KeyId ||
                    this.KeyId != null &&
                    this.KeyId.Equals(other.KeyId)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.KeyType == other.KeyType ||
                    this.KeyType != null &&
                    this.KeyType.Equals(other.KeyType)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.ErrorInformation == other.ErrorInformation ||
                    this.ErrorInformation != null &&
                    this.ErrorInformation.Equals(other.ErrorInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Provider != null)
                    hash = hash * 59 + this.Provider.GetHashCode();
                if (this.Tenant != null)
                    hash = hash * 59 + this.Tenant.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.ClientKeyId != null)
                    hash = hash * 59 + this.ClientKeyId.GetHashCode();
                if (this.KeyId != null)
                    hash = hash * 59 + this.KeyId.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.KeyType != null)
                    hash = hash * 59 + this.KeyType.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.ErrorInformation != null)
                    hash = hash * 59 + this.ErrorInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
