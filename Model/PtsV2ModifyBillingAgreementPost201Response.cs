/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PtsV2ModifyBillingAgreementPost201Response
    /// </summary>
    [DataContract]
    public partial class PtsV2ModifyBillingAgreementPost201Response :  IEquatable<PtsV2ModifyBillingAgreementPost201Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PtsV2ModifyBillingAgreementPost201Response" /> class.
        /// </summary>
        /// <param name="Links">Links.</param>
        /// <param name="Id">An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. .</param>
        /// <param name="SubmitTimeUtc">Time of request in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; **Example** &#x60;2016-08-11T22:47:57Z&#x60; equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The &#x60;T&#x60; separates the date and the time. The &#x60;Z&#x60; indicates UTC.  Returned by Cybersource for all services. .</param>
        /// <param name="Status">The status of the billing agreement. Possible value is:   - PENDING   - REVOKED   - ACTIVE   - FAILED   - EXPIRED   - INACTIVE .</param>
        /// <param name="ProcessorInformation">ProcessorInformation.</param>
        /// <param name="InstallmentInformation">InstallmentInformation.</param>
        /// <param name="ClientReferenceInformation">ClientReferenceInformation.</param>
        /// <param name="RiskInformation">RiskInformation.</param>
        /// <param name="AgreementInformation">AgreementInformation.</param>
        /// <param name="OrderInformation">OrderInformation.</param>
        /// <param name="PaymentInformation">PaymentInformation.</param>
        public PtsV2ModifyBillingAgreementPost201Response(PtsV2ModifyBillingAgreementPost201ResponseLinks Links = default(PtsV2ModifyBillingAgreementPost201ResponseLinks), string Id = default(string), string SubmitTimeUtc = default(string), string Status = default(string), PtsV2CreateBillingAgreementPost201ResponseProcessorInformation ProcessorInformation = default(PtsV2CreateBillingAgreementPost201ResponseProcessorInformation), PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation InstallmentInformation = default(PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation), PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation ClientReferenceInformation = default(PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation), PtsV2CreateBillingAgreementPost201ResponseRiskInformation RiskInformation = default(PtsV2CreateBillingAgreementPost201ResponseRiskInformation), PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation AgreementInformation = default(PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation), PtsV2ModifyBillingAgreementPost201ResponseOrderInformation OrderInformation = default(PtsV2ModifyBillingAgreementPost201ResponseOrderInformation), PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation PaymentInformation = default(PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation))
        {
            this.Links = Links;
            this.Id = Id;
            this.SubmitTimeUtc = SubmitTimeUtc;
            this.Status = Status;
            this.ProcessorInformation = ProcessorInformation;
            this.InstallmentInformation = InstallmentInformation;
            this.ClientReferenceInformation = ClientReferenceInformation;
            this.RiskInformation = RiskInformation;
            this.AgreementInformation = AgreementInformation;
            this.OrderInformation = OrderInformation;
            this.PaymentInformation = PaymentInformation;
        }
        
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public PtsV2ModifyBillingAgreementPost201ResponseLinks Links { get; set; }

        /// <summary>
        /// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 
        /// </summary>
        /// <value>An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Time of request in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; **Example** &#x60;2016-08-11T22:47:57Z&#x60; equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The &#x60;T&#x60; separates the date and the time. The &#x60;Z&#x60; indicates UTC.  Returned by Cybersource for all services. 
        /// </summary>
        /// <value>Time of request in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; **Example** &#x60;2016-08-11T22:47:57Z&#x60; equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The &#x60;T&#x60; separates the date and the time. The &#x60;Z&#x60; indicates UTC.  Returned by Cybersource for all services. </value>
        [DataMember(Name="submitTimeUtc", EmitDefaultValue=false)]
        public string SubmitTimeUtc { get; set; }

        /// <summary>
        /// The status of the billing agreement. Possible value is:   - PENDING   - REVOKED   - ACTIVE   - FAILED   - EXPIRED   - INACTIVE 
        /// </summary>
        /// <value>The status of the billing agreement. Possible value is:   - PENDING   - REVOKED   - ACTIVE   - FAILED   - EXPIRED   - INACTIVE </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorInformation
        /// </summary>
        [DataMember(Name="processorInformation", EmitDefaultValue=false)]
        public PtsV2CreateBillingAgreementPost201ResponseProcessorInformation ProcessorInformation { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentInformation
        /// </summary>
        [DataMember(Name="installmentInformation", EmitDefaultValue=false)]
        public PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation InstallmentInformation { get; set; }

        /// <summary>
        /// Gets or Sets ClientReferenceInformation
        /// </summary>
        [DataMember(Name="clientReferenceInformation", EmitDefaultValue=false)]
        public PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation ClientReferenceInformation { get; set; }

        /// <summary>
        /// Gets or Sets RiskInformation
        /// </summary>
        [DataMember(Name="riskInformation", EmitDefaultValue=false)]
        public PtsV2CreateBillingAgreementPost201ResponseRiskInformation RiskInformation { get; set; }

        /// <summary>
        /// Gets or Sets AgreementInformation
        /// </summary>
        [DataMember(Name="agreementInformation", EmitDefaultValue=false)]
        public PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation AgreementInformation { get; set; }

        /// <summary>
        /// Gets or Sets OrderInformation
        /// </summary>
        [DataMember(Name="orderInformation", EmitDefaultValue=false)]
        public PtsV2ModifyBillingAgreementPost201ResponseOrderInformation OrderInformation { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInformation
        /// </summary>
        [DataMember(Name="paymentInformation", EmitDefaultValue=false)]
        public PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation PaymentInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PtsV2ModifyBillingAgreementPost201Response {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubmitTimeUtc: ").Append(SubmitTimeUtc).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProcessorInformation: ").Append(ProcessorInformation).Append("\n");
            sb.Append("  InstallmentInformation: ").Append(InstallmentInformation).Append("\n");
            sb.Append("  ClientReferenceInformation: ").Append(ClientReferenceInformation).Append("\n");
            sb.Append("  RiskInformation: ").Append(RiskInformation).Append("\n");
            sb.Append("  AgreementInformation: ").Append(AgreementInformation).Append("\n");
            sb.Append("  OrderInformation: ").Append(OrderInformation).Append("\n");
            sb.Append("  PaymentInformation: ").Append(PaymentInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PtsV2ModifyBillingAgreementPost201Response);
        }

        /// <summary>
        /// Returns true if PtsV2ModifyBillingAgreementPost201Response instances are equal
        /// </summary>
        /// <param name="other">Instance of PtsV2ModifyBillingAgreementPost201Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PtsV2ModifyBillingAgreementPost201Response other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.SubmitTimeUtc == other.SubmitTimeUtc ||
                    this.SubmitTimeUtc != null &&
                    this.SubmitTimeUtc.Equals(other.SubmitTimeUtc)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.ProcessorInformation == other.ProcessorInformation ||
                    this.ProcessorInformation != null &&
                    this.ProcessorInformation.Equals(other.ProcessorInformation)
                ) && 
                (
                    this.InstallmentInformation == other.InstallmentInformation ||
                    this.InstallmentInformation != null &&
                    this.InstallmentInformation.Equals(other.InstallmentInformation)
                ) && 
                (
                    this.ClientReferenceInformation == other.ClientReferenceInformation ||
                    this.ClientReferenceInformation != null &&
                    this.ClientReferenceInformation.Equals(other.ClientReferenceInformation)
                ) && 
                (
                    this.RiskInformation == other.RiskInformation ||
                    this.RiskInformation != null &&
                    this.RiskInformation.Equals(other.RiskInformation)
                ) && 
                (
                    this.AgreementInformation == other.AgreementInformation ||
                    this.AgreementInformation != null &&
                    this.AgreementInformation.Equals(other.AgreementInformation)
                ) && 
                (
                    this.OrderInformation == other.OrderInformation ||
                    this.OrderInformation != null &&
                    this.OrderInformation.Equals(other.OrderInformation)
                ) && 
                (
                    this.PaymentInformation == other.PaymentInformation ||
                    this.PaymentInformation != null &&
                    this.PaymentInformation.Equals(other.PaymentInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.SubmitTimeUtc != null)
                    hash = hash * 59 + this.SubmitTimeUtc.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.ProcessorInformation != null)
                    hash = hash * 59 + this.ProcessorInformation.GetHashCode();
                if (this.InstallmentInformation != null)
                    hash = hash * 59 + this.InstallmentInformation.GetHashCode();
                if (this.ClientReferenceInformation != null)
                    hash = hash * 59 + this.ClientReferenceInformation.GetHashCode();
                if (this.RiskInformation != null)
                    hash = hash * 59 + this.RiskInformation.GetHashCode();
                if (this.AgreementInformation != null)
                    hash = hash * 59 + this.AgreementInformation.GetHashCode();
                if (this.OrderInformation != null)
                    hash = hash * 59 + this.OrderInformation.GetHashCode();
                if (this.PaymentInformation != null)
                    hash = hash * 59 + this.PaymentInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
