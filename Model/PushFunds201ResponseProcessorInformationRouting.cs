/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PushFunds201ResponseProcessorInformationRouting
    /// </summary>
    [DataContract]
    public partial class PushFunds201ResponseProcessorInformationRouting :  IEquatable<PushFunds201ResponseProcessorInformationRouting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushFunds201ResponseProcessorInformationRouting" /> class.
        /// </summary>
        /// <param name="Network">Contains the ID of the debit network to which the transaction was routed.  Code: Network  0000 : Priority Routing or Generic File Update  0002: Visa programs, Private Label and non-Visa Authorization Gateway Services  0003: Interlink  0004: Plus  0008: Star  0009: Pulse  0010: Star  0011: Star  0012: Star (primary network ID)  0013: AFFN  0015: Star  0016: Maestro  0017: Pulse (primary network ID)  0018: NYCE (primary network ID)  0019: Pulse  0020: Accel  0023: NETS  0024: CU24  0025: Alaska Option  0027: NYCE  0028: Shazam  0029: EBT POS .</param>
        public PushFunds201ResponseProcessorInformationRouting(string Network = default(string))
        {
            this.Network = Network;
        }
        
        /// <summary>
        /// Contains the ID of the debit network to which the transaction was routed.  Code: Network  0000 : Priority Routing or Generic File Update  0002: Visa programs, Private Label and non-Visa Authorization Gateway Services  0003: Interlink  0004: Plus  0008: Star  0009: Pulse  0010: Star  0011: Star  0012: Star (primary network ID)  0013: AFFN  0015: Star  0016: Maestro  0017: Pulse (primary network ID)  0018: NYCE (primary network ID)  0019: Pulse  0020: Accel  0023: NETS  0024: CU24  0025: Alaska Option  0027: NYCE  0028: Shazam  0029: EBT POS 
        /// </summary>
        /// <value>Contains the ID of the debit network to which the transaction was routed.  Code: Network  0000 : Priority Routing or Generic File Update  0002: Visa programs, Private Label and non-Visa Authorization Gateway Services  0003: Interlink  0004: Plus  0008: Star  0009: Pulse  0010: Star  0011: Star  0012: Star (primary network ID)  0013: AFFN  0015: Star  0016: Maestro  0017: Pulse (primary network ID)  0018: NYCE (primary network ID)  0019: Pulse  0020: Accel  0023: NETS  0024: CU24  0025: Alaska Option  0027: NYCE  0028: Shazam  0029: EBT POS </value>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public string Network { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushFunds201ResponseProcessorInformationRouting {\n");
            if (Network != null) sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PushFunds201ResponseProcessorInformationRouting);
        }

        /// <summary>
        /// Returns true if PushFunds201ResponseProcessorInformationRouting instances are equal
        /// </summary>
        /// <param name="other">Instance of PushFunds201ResponseProcessorInformationRouting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushFunds201ResponseProcessorInformationRouting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Network == other.Network ||
                    this.Network != null &&
                    this.Network.Equals(other.Network)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Network != null)
                    hash = hash * 59 + this.Network.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
