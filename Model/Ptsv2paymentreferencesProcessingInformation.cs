/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentreferencesProcessingInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentreferencesProcessingInformation :  IEquatable<Ptsv2paymentreferencesProcessingInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentreferencesProcessingInformation" /> class.
        /// </summary>
        /// <param name="SessionType">Will have 2 values, &#39;U&#39; (Update) , &#39;N&#39; (New). Any other values will be rejected. Default will be &#39;N&#39; .</param>
        /// <param name="PaymentFlowMode">Whether merchant wants to pass the flow Inline or want to invoke Klarna Hosted Page .</param>
        /// <param name="ActionList">Possible values are one or more of follows:   - &#x60;AP_SESSIONS&#x60;: Use this when Alternative Payment Sessions service is requested. .</param>
        public Ptsv2paymentreferencesProcessingInformation(string SessionType = default(string), string PaymentFlowMode = default(string), List<string> ActionList = default(List<string>))
        {
            this.SessionType = SessionType;
            this.PaymentFlowMode = PaymentFlowMode;
            this.ActionList = ActionList;
        }
        
        /// <summary>
        /// Will have 2 values, &#39;U&#39; (Update) , &#39;N&#39; (New). Any other values will be rejected. Default will be &#39;N&#39; 
        /// </summary>
        /// <value>Will have 2 values, &#39;U&#39; (Update) , &#39;N&#39; (New). Any other values will be rejected. Default will be &#39;N&#39; </value>
        [DataMember(Name="sessionType", EmitDefaultValue=false)]
        public string SessionType { get; set; }

        /// <summary>
        /// Whether merchant wants to pass the flow Inline or want to invoke Klarna Hosted Page 
        /// </summary>
        /// <value>Whether merchant wants to pass the flow Inline or want to invoke Klarna Hosted Page </value>
        [DataMember(Name="paymentFlowMode", EmitDefaultValue=false)]
        public string PaymentFlowMode { get; set; }

        /// <summary>
        /// Possible values are one or more of follows:   - &#x60;AP_SESSIONS&#x60;: Use this when Alternative Payment Sessions service is requested. 
        /// </summary>
        /// <value>Possible values are one or more of follows:   - &#x60;AP_SESSIONS&#x60;: Use this when Alternative Payment Sessions service is requested. </value>
        [DataMember(Name="actionList", EmitDefaultValue=false)]
        public List<string> ActionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentreferencesProcessingInformation {\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  PaymentFlowMode: ").Append(PaymentFlowMode).Append("\n");
            sb.Append("  ActionList: ").Append(ActionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentreferencesProcessingInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentreferencesProcessingInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentreferencesProcessingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentreferencesProcessingInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SessionType == other.SessionType ||
                    this.SessionType != null &&
                    this.SessionType.Equals(other.SessionType)
                ) && 
                (
                    this.PaymentFlowMode == other.PaymentFlowMode ||
                    this.PaymentFlowMode != null &&
                    this.PaymentFlowMode.Equals(other.PaymentFlowMode)
                ) && 
                (
                    this.ActionList == other.ActionList ||
                    this.ActionList != null &&
                    this.ActionList.SequenceEqual(other.ActionList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SessionType != null)
                    hash = hash * 59 + this.SessionType.GetHashCode();
                if (this.PaymentFlowMode != null)
                    hash = hash * 59 + this.PaymentFlowMode.GetHashCode();
                if (this.ActionList != null)
                    hash = hash * 59 + this.ActionList.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
