/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PaymentsProductsUnifiedCheckoutSubscriptionInformation
    /// </summary>
    [DataContract]
    public partial class PaymentsProductsUnifiedCheckoutSubscriptionInformation :  IEquatable<PaymentsProductsUnifiedCheckoutSubscriptionInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsProductsUnifiedCheckoutSubscriptionInformation" /> class.
        /// </summary>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="EnablementStatus">Possible values: - PENDING - ENABLED_AND_USABLE - ENABLED_NOT_USABLE - DISABLED (default to &quot;ENABLED_AND_USABLE&quot;).</param>
        /// <param name="SelfServiceability">Indicates if the organization can enable this product using self service.  Possible values: - SELF_SERVICEABLE - NOT_SELF_SERVICEABLE - SELF_SERVICE_ONLY (default to &quot;NOT_SELF_SERVICEABLE&quot;).</param>
        /// <param name="Features">Features.</param>
        public PaymentsProductsUnifiedCheckoutSubscriptionInformation(bool? Enabled = default(bool?), string EnablementStatus = "ENABLED_AND_USABLE", string SelfServiceability = "NOT_SELF_SERVICEABLE", PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures Features = default(PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures))
        {
            this.Enabled = Enabled;
            // use default value if no "EnablementStatus" provided
            if (EnablementStatus == null)
            {
                this.EnablementStatus = "ENABLED_AND_USABLE";
            }
            else
            {
                this.EnablementStatus = EnablementStatus;
            }
            // use default value if no "SelfServiceability" provided
            if (SelfServiceability == null)
            {
                this.SelfServiceability = "NOT_SELF_SERVICEABLE";
            }
            else
            {
                this.SelfServiceability = SelfServiceability;
            }
            this.Features = Features;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Possible values: - PENDING - ENABLED_AND_USABLE - ENABLED_NOT_USABLE - DISABLED
        /// </summary>
        /// <value>Possible values: - PENDING - ENABLED_AND_USABLE - ENABLED_NOT_USABLE - DISABLED</value>
        [DataMember(Name="enablementStatus", EmitDefaultValue=false)]
        public string EnablementStatus { get; set; }

        /// <summary>
        /// Indicates if the organization can enable this product using self service.  Possible values: - SELF_SERVICEABLE - NOT_SELF_SERVICEABLE - SELF_SERVICE_ONLY
        /// </summary>
        /// <value>Indicates if the organization can enable this product using self service.  Possible values: - SELF_SERVICEABLE - NOT_SELF_SERVICEABLE - SELF_SERVICE_ONLY</value>
        [DataMember(Name="selfServiceability", EmitDefaultValue=false)]
        public string SelfServiceability { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsProductsUnifiedCheckoutSubscriptionInformation {\n");
            if (Enabled != null) sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            if (EnablementStatus != null) sb.Append("  EnablementStatus: ").Append(EnablementStatus).Append("\n");
            if (SelfServiceability != null) sb.Append("  SelfServiceability: ").Append(SelfServiceability).Append("\n");
            if (Features != null) sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsProductsUnifiedCheckoutSubscriptionInformation);
        }

        /// <summary>
        /// Returns true if PaymentsProductsUnifiedCheckoutSubscriptionInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsProductsUnifiedCheckoutSubscriptionInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsProductsUnifiedCheckoutSubscriptionInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.EnablementStatus == other.EnablementStatus ||
                    this.EnablementStatus != null &&
                    this.EnablementStatus.Equals(other.EnablementStatus)
                ) && 
                (
                    this.SelfServiceability == other.SelfServiceability ||
                    this.SelfServiceability != null &&
                    this.SelfServiceability.Equals(other.SelfServiceability)
                ) && 
                (
                    this.Features == other.Features ||
                    this.Features != null &&
                    this.Features.Equals(other.Features)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.EnablementStatus != null)
                    hash = hash * 59 + this.EnablementStatus.GetHashCode();
                if (this.SelfServiceability != null)
                    hash = hash * 59 + this.SelfServiceability.GetHashCode();
                if (this.Features != null)
                    hash = hash * 59 + this.Features.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
