/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsBinLookupPaymentAccountInformationCard
    /// </summary>
    [DataContract]
    public partial class TmsBinLookupPaymentAccountInformationCard :  IEquatable<TmsBinLookupPaymentAccountInformationCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsBinLookupPaymentAccountInformationCard" /> class.
        /// </summary>
        /// <param name="Type">This field contains a 3-digit numeric value that indicates the card type within Cybersource eco-system. Possible values from BIN Lookup Service (based on availability and enablement): - &#x60;000&#x60;: Unsupported Card Type - &#x60;001&#x60;: Visa - &#x60;002&#x60;: Mastercard - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;007&#x60;: JCB - &#x60;036&#x60;: Cartes Bancaire - &#x60;042&#x60;: Maestro - &#x60;054&#x60;: Elo - &#x60;058&#x60;: Carnet - &#x60;060&#x60;: MADA - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;064&#x60;: Prompt Card - &#x60;067&#x60;: Meeza - &#x60;068&#x60;: PayPak - &#x60;070&#x60;: EFTPOS - &#x60;081&#x60;: Jaywan - &#x60;082&#x60;: TPN  Glossary of possible values in the payments ecosystem: - &#x60;001&#x60;: Visa - &#x60;002&#x60;: Mastercard - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;006&#x60;: Carte Blanche - &#x60;007&#x60;: JCB - &#x60;008&#x60;: Optima - &#x60;009&#x60;: GE Private Label - &#x60;010&#x60;: Beneficial Private Label - &#x60;011&#x60;: Twinpay Credit Card - &#x60;012&#x60;: Twinpay Debit Card - &#x60;013&#x60;: Walmart - &#x60;014&#x60;: EnRoute - &#x60;015&#x60;: Lowe&#39;s Consumer - &#x60;016&#x60;: Home Depot Consumer - &#x60;017&#x60;: MBNA - &#x60;018&#x60;: Dick&#39;s Sportwear - &#x60;019&#x60;: Casual Corner - &#x60;020&#x60;: Sears - &#x60;021&#x60;: JAL - &#x60;023&#x60;: Disney Card - &#x60;024&#x60;: Switch/Solo - &#x60;025&#x60;: Sam&#39;s Club Consumer - &#x60;026&#x60;: Sam&#39;s Club Business - &#x60;027&#x60;: Nico&#39;s - &#x60;028&#x60;: Paymentech Bill Me Later - &#x60;029&#x60;: Bebe - &#x60;030&#x60;: Restoration Hardware - &#x60;031&#x60;: Delta Online - &#x60;032&#x60;: Solo - &#x60;033&#x60;: Visa Electron - &#x60;034&#x60;: Dankort - &#x60;035&#x60;: Laser - &#x60;036&#x60;: Cartes Bancaire - &#x60;037&#x60;: Carta Si - &#x60;040&#x60;: UATP - &#x60;041&#x60;: HOUSEHOLD - &#x60;042&#x60;: Maestro - &#x60;043&#x60;: GE MONEY - &#x60;044&#x60;: Korean Cards - &#x60;045&#x60;: Style Cards - &#x60;046&#x60;: J.Crew - &#x60;047&#x60;: Payeasecn eWallet - &#x60;048&#x60;: Payeasecn Bank Transfer - &#x60;049&#x60;: Meijer - &#x60;050&#x60;: Hipercard - &#x60;051&#x60;: Aura - &#x60;052&#x60;: Redecard - &#x60;053&#x60;: Orico Card - &#x60;054&#x60;: Elo - &#x60;055&#x60;: Capital One Private Label - &#x60;057&#x60;: Costco Private Label - &#x60;058&#x60;: Carnet - &#x60;059&#x60;: ValueLink - &#x60;060&#x60;: MADA - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;063&#x60;: Falabella Private Label - &#x60;064&#x60;: Prompt Card - &#x60;065&#x60;: Korean Domestic - &#x60;066&#x60;: Banricompras - &#x60;067&#x60;: Meeza - &#x60;068&#x60;: PayPak - &#x60;070&#x60;: EFTPOS - &#x60;071&#x60;: Codensa - &#x60;072&#x60;: Olimpica - &#x60;073&#x60;: Colsubsidio - &#x60;074&#x60;: Tuya - &#x60;075&#x60;: Sodexo - &#x60;076&#x60;: Naranja - &#x60;077&#x60;: Cabal - &#x60;078&#x60;: DINELCO - &#x60;079&#x60;: PANAL - &#x60;080&#x60;: EPM - &#x60;081&#x60;: Jaywan - &#x60;082&#x60;: TPN .</param>
        /// <param name="BrandName">This field contains the card brand name.   Some of the possible values (not an exhaustive list) are -    - VISA   - MASTERCARD   - AMERICAN EXPRESS   - DISCOVER   - DINERS CLUB   - CARTE BLANCHE   - JCB   - OPTIMA   - TWINPAY CREDIT CARD   - TWINPAY DEBIT CARD   - WALMART   - ENROUTE   - LOWES CONSUMER   - HOME DEPOT CONSUMER   - MBNA   - DICKS SPORTWEAR   - CASUAL CORNER   - SEARS   - JAL   - DISNEY CARD   - SWITCH/SOLO   - SAMS CLUB CONSUMER   - SAMS CLUB BUSINESS   - NICOS HOUSE CARD   - BEBE   - RESTORATION HARDWARE   - DELTA ONLINE   - SOLO   - VISA ELECTRON   - DANKORT   - LASER   - CARTE BANCAIRE   - CARTA SI   - ENCODED ACCOUNT   - UATP   - HOUSEHOLD   - MAESTRO   - GE CAPITAL   - KOREAN CARDS   - STYLE CARDS   - JCREW   - MEIJER   - HIPERCARD   - AURA   - REDECARD   - ORICO HOUSE CARD   - MADA   - ELO   - CAPITAL ONE PRIVATE LABEL   - CARNET   - RUPAY   - CHINA UNION PAY   - FALABELLA PRIVATE LABEL   - PROMPTCARD   - KOREAN DOMESTIC   - BANRICOMPRAS   - MEEZA   - PAYPAK   - JAYWAN   - TPN .</param>
        /// <param name="Currency">This field indicates the 3-letter [ISO Standard Currency Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) for the card currency. .</param>
        /// <param name="MaxLength">This field contains the max length of the card. .</param>
        /// <param name="CredentialType">This field contains the type of the payment credential. Possible values:   - PAN   - TOKEN  .</param>
        /// <param name="Brands">Array of brands.</param>
        public TmsBinLookupPaymentAccountInformationCard(string Type = default(string), string BrandName = default(string), string Currency = default(string), string MaxLength = default(string), string CredentialType = default(string), List<TmsBinLookupPaymentAccountInformationCardBrands> Brands = default(List<TmsBinLookupPaymentAccountInformationCardBrands>))
        {
            this.Type = Type;
            this.BrandName = BrandName;
            this.Currency = Currency;
            this.MaxLength = MaxLength;
            this.CredentialType = CredentialType;
            this.Brands = Brands;
        }
        
        /// <summary>
        /// This field contains a 3-digit numeric value that indicates the card type within Cybersource eco-system. Possible values from BIN Lookup Service (based on availability and enablement): - &#x60;000&#x60;: Unsupported Card Type - &#x60;001&#x60;: Visa - &#x60;002&#x60;: Mastercard - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;007&#x60;: JCB - &#x60;036&#x60;: Cartes Bancaire - &#x60;042&#x60;: Maestro - &#x60;054&#x60;: Elo - &#x60;058&#x60;: Carnet - &#x60;060&#x60;: MADA - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;064&#x60;: Prompt Card - &#x60;067&#x60;: Meeza - &#x60;068&#x60;: PayPak - &#x60;070&#x60;: EFTPOS - &#x60;081&#x60;: Jaywan - &#x60;082&#x60;: TPN  Glossary of possible values in the payments ecosystem: - &#x60;001&#x60;: Visa - &#x60;002&#x60;: Mastercard - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;006&#x60;: Carte Blanche - &#x60;007&#x60;: JCB - &#x60;008&#x60;: Optima - &#x60;009&#x60;: GE Private Label - &#x60;010&#x60;: Beneficial Private Label - &#x60;011&#x60;: Twinpay Credit Card - &#x60;012&#x60;: Twinpay Debit Card - &#x60;013&#x60;: Walmart - &#x60;014&#x60;: EnRoute - &#x60;015&#x60;: Lowe&#39;s Consumer - &#x60;016&#x60;: Home Depot Consumer - &#x60;017&#x60;: MBNA - &#x60;018&#x60;: Dick&#39;s Sportwear - &#x60;019&#x60;: Casual Corner - &#x60;020&#x60;: Sears - &#x60;021&#x60;: JAL - &#x60;023&#x60;: Disney Card - &#x60;024&#x60;: Switch/Solo - &#x60;025&#x60;: Sam&#39;s Club Consumer - &#x60;026&#x60;: Sam&#39;s Club Business - &#x60;027&#x60;: Nico&#39;s - &#x60;028&#x60;: Paymentech Bill Me Later - &#x60;029&#x60;: Bebe - &#x60;030&#x60;: Restoration Hardware - &#x60;031&#x60;: Delta Online - &#x60;032&#x60;: Solo - &#x60;033&#x60;: Visa Electron - &#x60;034&#x60;: Dankort - &#x60;035&#x60;: Laser - &#x60;036&#x60;: Cartes Bancaire - &#x60;037&#x60;: Carta Si - &#x60;040&#x60;: UATP - &#x60;041&#x60;: HOUSEHOLD - &#x60;042&#x60;: Maestro - &#x60;043&#x60;: GE MONEY - &#x60;044&#x60;: Korean Cards - &#x60;045&#x60;: Style Cards - &#x60;046&#x60;: J.Crew - &#x60;047&#x60;: Payeasecn eWallet - &#x60;048&#x60;: Payeasecn Bank Transfer - &#x60;049&#x60;: Meijer - &#x60;050&#x60;: Hipercard - &#x60;051&#x60;: Aura - &#x60;052&#x60;: Redecard - &#x60;053&#x60;: Orico Card - &#x60;054&#x60;: Elo - &#x60;055&#x60;: Capital One Private Label - &#x60;057&#x60;: Costco Private Label - &#x60;058&#x60;: Carnet - &#x60;059&#x60;: ValueLink - &#x60;060&#x60;: MADA - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;063&#x60;: Falabella Private Label - &#x60;064&#x60;: Prompt Card - &#x60;065&#x60;: Korean Domestic - &#x60;066&#x60;: Banricompras - &#x60;067&#x60;: Meeza - &#x60;068&#x60;: PayPak - &#x60;070&#x60;: EFTPOS - &#x60;071&#x60;: Codensa - &#x60;072&#x60;: Olimpica - &#x60;073&#x60;: Colsubsidio - &#x60;074&#x60;: Tuya - &#x60;075&#x60;: Sodexo - &#x60;076&#x60;: Naranja - &#x60;077&#x60;: Cabal - &#x60;078&#x60;: DINELCO - &#x60;079&#x60;: PANAL - &#x60;080&#x60;: EPM - &#x60;081&#x60;: Jaywan - &#x60;082&#x60;: TPN 
        /// </summary>
        /// <value>This field contains a 3-digit numeric value that indicates the card type within Cybersource eco-system. Possible values from BIN Lookup Service (based on availability and enablement): - &#x60;000&#x60;: Unsupported Card Type - &#x60;001&#x60;: Visa - &#x60;002&#x60;: Mastercard - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;007&#x60;: JCB - &#x60;036&#x60;: Cartes Bancaire - &#x60;042&#x60;: Maestro - &#x60;054&#x60;: Elo - &#x60;058&#x60;: Carnet - &#x60;060&#x60;: MADA - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;064&#x60;: Prompt Card - &#x60;067&#x60;: Meeza - &#x60;068&#x60;: PayPak - &#x60;070&#x60;: EFTPOS - &#x60;081&#x60;: Jaywan - &#x60;082&#x60;: TPN  Glossary of possible values in the payments ecosystem: - &#x60;001&#x60;: Visa - &#x60;002&#x60;: Mastercard - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;006&#x60;: Carte Blanche - &#x60;007&#x60;: JCB - &#x60;008&#x60;: Optima - &#x60;009&#x60;: GE Private Label - &#x60;010&#x60;: Beneficial Private Label - &#x60;011&#x60;: Twinpay Credit Card - &#x60;012&#x60;: Twinpay Debit Card - &#x60;013&#x60;: Walmart - &#x60;014&#x60;: EnRoute - &#x60;015&#x60;: Lowe&#39;s Consumer - &#x60;016&#x60;: Home Depot Consumer - &#x60;017&#x60;: MBNA - &#x60;018&#x60;: Dick&#39;s Sportwear - &#x60;019&#x60;: Casual Corner - &#x60;020&#x60;: Sears - &#x60;021&#x60;: JAL - &#x60;023&#x60;: Disney Card - &#x60;024&#x60;: Switch/Solo - &#x60;025&#x60;: Sam&#39;s Club Consumer - &#x60;026&#x60;: Sam&#39;s Club Business - &#x60;027&#x60;: Nico&#39;s - &#x60;028&#x60;: Paymentech Bill Me Later - &#x60;029&#x60;: Bebe - &#x60;030&#x60;: Restoration Hardware - &#x60;031&#x60;: Delta Online - &#x60;032&#x60;: Solo - &#x60;033&#x60;: Visa Electron - &#x60;034&#x60;: Dankort - &#x60;035&#x60;: Laser - &#x60;036&#x60;: Cartes Bancaire - &#x60;037&#x60;: Carta Si - &#x60;040&#x60;: UATP - &#x60;041&#x60;: HOUSEHOLD - &#x60;042&#x60;: Maestro - &#x60;043&#x60;: GE MONEY - &#x60;044&#x60;: Korean Cards - &#x60;045&#x60;: Style Cards - &#x60;046&#x60;: J.Crew - &#x60;047&#x60;: Payeasecn eWallet - &#x60;048&#x60;: Payeasecn Bank Transfer - &#x60;049&#x60;: Meijer - &#x60;050&#x60;: Hipercard - &#x60;051&#x60;: Aura - &#x60;052&#x60;: Redecard - &#x60;053&#x60;: Orico Card - &#x60;054&#x60;: Elo - &#x60;055&#x60;: Capital One Private Label - &#x60;057&#x60;: Costco Private Label - &#x60;058&#x60;: Carnet - &#x60;059&#x60;: ValueLink - &#x60;060&#x60;: MADA - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;063&#x60;: Falabella Private Label - &#x60;064&#x60;: Prompt Card - &#x60;065&#x60;: Korean Domestic - &#x60;066&#x60;: Banricompras - &#x60;067&#x60;: Meeza - &#x60;068&#x60;: PayPak - &#x60;070&#x60;: EFTPOS - &#x60;071&#x60;: Codensa - &#x60;072&#x60;: Olimpica - &#x60;073&#x60;: Colsubsidio - &#x60;074&#x60;: Tuya - &#x60;075&#x60;: Sodexo - &#x60;076&#x60;: Naranja - &#x60;077&#x60;: Cabal - &#x60;078&#x60;: DINELCO - &#x60;079&#x60;: PANAL - &#x60;080&#x60;: EPM - &#x60;081&#x60;: Jaywan - &#x60;082&#x60;: TPN </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// This field contains the card brand name.   Some of the possible values (not an exhaustive list) are -    - VISA   - MASTERCARD   - AMERICAN EXPRESS   - DISCOVER   - DINERS CLUB   - CARTE BLANCHE   - JCB   - OPTIMA   - TWINPAY CREDIT CARD   - TWINPAY DEBIT CARD   - WALMART   - ENROUTE   - LOWES CONSUMER   - HOME DEPOT CONSUMER   - MBNA   - DICKS SPORTWEAR   - CASUAL CORNER   - SEARS   - JAL   - DISNEY CARD   - SWITCH/SOLO   - SAMS CLUB CONSUMER   - SAMS CLUB BUSINESS   - NICOS HOUSE CARD   - BEBE   - RESTORATION HARDWARE   - DELTA ONLINE   - SOLO   - VISA ELECTRON   - DANKORT   - LASER   - CARTE BANCAIRE   - CARTA SI   - ENCODED ACCOUNT   - UATP   - HOUSEHOLD   - MAESTRO   - GE CAPITAL   - KOREAN CARDS   - STYLE CARDS   - JCREW   - MEIJER   - HIPERCARD   - AURA   - REDECARD   - ORICO HOUSE CARD   - MADA   - ELO   - CAPITAL ONE PRIVATE LABEL   - CARNET   - RUPAY   - CHINA UNION PAY   - FALABELLA PRIVATE LABEL   - PROMPTCARD   - KOREAN DOMESTIC   - BANRICOMPRAS   - MEEZA   - PAYPAK   - JAYWAN   - TPN 
        /// </summary>
        /// <value>This field contains the card brand name.   Some of the possible values (not an exhaustive list) are -    - VISA   - MASTERCARD   - AMERICAN EXPRESS   - DISCOVER   - DINERS CLUB   - CARTE BLANCHE   - JCB   - OPTIMA   - TWINPAY CREDIT CARD   - TWINPAY DEBIT CARD   - WALMART   - ENROUTE   - LOWES CONSUMER   - HOME DEPOT CONSUMER   - MBNA   - DICKS SPORTWEAR   - CASUAL CORNER   - SEARS   - JAL   - DISNEY CARD   - SWITCH/SOLO   - SAMS CLUB CONSUMER   - SAMS CLUB BUSINESS   - NICOS HOUSE CARD   - BEBE   - RESTORATION HARDWARE   - DELTA ONLINE   - SOLO   - VISA ELECTRON   - DANKORT   - LASER   - CARTE BANCAIRE   - CARTA SI   - ENCODED ACCOUNT   - UATP   - HOUSEHOLD   - MAESTRO   - GE CAPITAL   - KOREAN CARDS   - STYLE CARDS   - JCREW   - MEIJER   - HIPERCARD   - AURA   - REDECARD   - ORICO HOUSE CARD   - MADA   - ELO   - CAPITAL ONE PRIVATE LABEL   - CARNET   - RUPAY   - CHINA UNION PAY   - FALABELLA PRIVATE LABEL   - PROMPTCARD   - KOREAN DOMESTIC   - BANRICOMPRAS   - MEEZA   - PAYPAK   - JAYWAN   - TPN </value>
        [DataMember(Name="brandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// This field indicates the 3-letter [ISO Standard Currency Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) for the card currency. 
        /// </summary>
        /// <value>This field indicates the 3-letter [ISO Standard Currency Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) for the card currency. </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// This field contains the max length of the card. 
        /// </summary>
        /// <value>This field contains the max length of the card. </value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public string MaxLength { get; set; }

        /// <summary>
        /// This field contains the type of the payment credential. Possible values:   - PAN   - TOKEN  
        /// </summary>
        /// <value>This field contains the type of the payment credential. Possible values:   - PAN   - TOKEN  </value>
        [DataMember(Name="credentialType", EmitDefaultValue=false)]
        public string CredentialType { get; set; }

        /// <summary>
        /// Array of brands
        /// </summary>
        /// <value>Array of brands</value>
        [DataMember(Name="brands", EmitDefaultValue=false)]
        public List<TmsBinLookupPaymentAccountInformationCardBrands> Brands { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsBinLookupPaymentAccountInformationCard {\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (BrandName != null) sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            if (Currency != null) sb.Append("  Currency: ").Append(Currency).Append("\n");
            if (MaxLength != null) sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            if (CredentialType != null) sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            if (Brands != null) sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsBinLookupPaymentAccountInformationCard);
        }

        /// <summary>
        /// Returns true if TmsBinLookupPaymentAccountInformationCard instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsBinLookupPaymentAccountInformationCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsBinLookupPaymentAccountInformationCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.BrandName == other.BrandName ||
                    this.BrandName != null &&
                    this.BrandName.Equals(other.BrandName)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.MaxLength == other.MaxLength ||
                    this.MaxLength != null &&
                    this.MaxLength.Equals(other.MaxLength)
                ) && 
                (
                    this.CredentialType == other.CredentialType ||
                    this.CredentialType != null &&
                    this.CredentialType.Equals(other.CredentialType)
                ) && 
                (
                    this.Brands == other.Brands ||
                    this.Brands != null &&
                    this.Brands.SequenceEqual(other.Brands)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.BrandName != null)
                    hash = hash * 59 + this.BrandName.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.MaxLength != null)
                    hash = hash * 59 + this.MaxLength.GetHashCode();
                if (this.CredentialType != null)
                    hash = hash * 59 + this.CredentialType.GetHashCode();
                if (this.Brands != null)
                    hash = hash * 59 + this.Brands.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
