/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CardProcessingConfigCommon
    /// </summary>
    [DataContract]
    public partial class CardProcessingConfigCommon :  IEquatable<CardProcessingConfigCommon>, IValidatableObject
    {
        /// <summary>
        /// Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultAuthTypeCodeEnum
        {
            
            /// <summary>
            /// Enum PRE for "PRE"
            /// </summary>
            [EnumMember(Value = "PRE")]
            PRE,
            
            /// <summary>
            /// Enum FINAL for "FINAL"
            /// </summary>
            [EnumMember(Value = "FINAL")]
            FINAL,
            
            /// <summary>
            /// Enum UNDEFINED for "UNDEFINED"
            /// </summary>
            [EnumMember(Value = "UNDEFINED")]
            UNDEFINED
        }
        /// <summary>
        /// Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="defaultAuthTypeCode", EmitDefaultValue=false)]
        public DefaultAuthTypeCodeEnum? DefaultAuthTypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigCommon" /> class.
        /// </summary>
        /// <param name="Processors">e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpngsapv3 * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &amp;lt;your vpc processor&amp;gt; .</param>
        /// <param name="AmexVendorCode">Vendor code assigned by American Express. Applicable for TSYS (tsys) processor..</param>
        /// <param name="DefaultAuthTypeCode">Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="MasterCardAssignedId">MAID aka MasterCard assigned ID, MasterCard equivalent of Merchant Verification Value by Visa. Applicable for VPC, GPX (gpx) and FDI Global (fdiglobal) processors..</param>
        /// <param name="EnablePartialAuth">Allow merchants to accept partial authorization approvals. Applicable for Elavon Americas (elavonamericas), VPC, GPX (gpx), FDI Global (fdiglobal), FDC Nashville (smartfdc), GPN (gpn), TSYS (tsys), American Express Direct (amexdirect), Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="MerchantCategoryCode">Indicates type of business product or service of the merchant. Applicable for Chase Paymentech Salem (chasepaymentechsalem), FDI Global (fdiglobal), RUPAY, Elavon Americas (elavonamericas), American Express Direct (amexdirect), CMCIC (cmcic), GPX (gpx), VPC, TSYS (tsys), EFTPOS, CUP, Paymentech Tampa (paymentechtampa), CB2A, Barclays (barclays2), Prisma (prisma) and GPN (gpn) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="SicCode">The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors..</param>
        /// <param name="FoodAndConsumerServiceId">Food and Consumer Service ID. Identifies the merchant as being certified and approved to accept Food Stamps. Applicable for GPX (gpx) processor..</param>
        /// <param name="EnableSplitShipment">Enables you to split an order into multiple shipments with multiple captures. This feature is provided by CyberSource and supports three different scenarios:  * multiple authorizations * multiple captures * multiple authorizations with multiple captures  Applicable for VPC processors. .</param>
        /// <param name="EnableInterchangeOptimization">Reduces your interchange fees by using automatic authorization refresh and automatic partial authorization reversal. Applicable for VPC processors..</param>
        /// <param name="VisaDelegatedAuthenticationId">Identifier provided to merchants who opt for Visa&#39;s delegated authorization program. Applicable for VPC processors..</param>
        /// <param name="CreditCardRefundLimitPercent">Blocks over-refunds when the aggregated refund amount is higher than the percentage set for this field. Applicable for GPX (gpx), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors..</param>
        /// <param name="BusinessCenterCreditCardRefundLimitPercent">Limits refunds to the percentage set in this field. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="AllowCapturesGreaterThanAuthorizations">Enables this merchant account to capture amounts greater than the authorization amount. Applicable for GPX (gpx), VPC, Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors..</param>
        /// <param name="EnableDuplicateMerchantReferenceNumberBlocking">Helps prevent duplicate transactions. Applicable for VPC, GPX (gpx) and Chase Paymentech Salem (chasepaymentechsalem) processors..</param>
        /// <param name="DomesticMerchantId">This is a local merchant ID used by merchants in addition to the conventional merchant ID. This value is sent to the issuer. Applicable for VPC and Prisma (prisma) processors..</param>
        /// <param name="ProcessLevel3Data">Indicates whether merchant processes Level 3 transactions. Applicable for TSYS (tsys), Barclays (barclays2), Paymentech Tampa (paymentechtampa), FDI Global (fdiglobal), Elavon Americas (elavonamericas) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="SubMerchantId">The ID assigned to the sub-merchant. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="SubMerchantBusinessName">Sub-merchant&#39;s business name. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;37&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="PreferCobadgedSecondaryBrand">It denotes merchant&#39;s preference on secondary brand for routing in case of co-branded cards. Applicable for EFTPOS processors..</param>
        /// <param name="MerchantDescriptorInformation">MerchantDescriptorInformation.</param>
        /// <param name="GovernmentControlled">Indicates whether the merchant is government controlled. Applicable for VPC processors..</param>
        /// <param name="DropBillingInfo">This field is used to indicate whether the merchant wants to drop the billing information from the request. If this field is set to true, then the billing information will be dropped from the request. If this field is set to false, then the billing information will be sent in the request..</param>
        public CardProcessingConfigCommon(Dictionary<string, CardProcessingConfigCommonProcessors> Processors = default(Dictionary<string, CardProcessingConfigCommonProcessors>), string AmexVendorCode = default(string), DefaultAuthTypeCodeEnum? DefaultAuthTypeCode = default(DefaultAuthTypeCodeEnum?), string MasterCardAssignedId = default(string), bool? EnablePartialAuth = default(bool?), string MerchantCategoryCode = default(string), string SicCode = default(string), string FoodAndConsumerServiceId = default(string), bool? EnableSplitShipment = default(bool?), bool? EnableInterchangeOptimization = default(bool?), string VisaDelegatedAuthenticationId = default(string), string CreditCardRefundLimitPercent = default(string), string BusinessCenterCreditCardRefundLimitPercent = default(string), bool? AllowCapturesGreaterThanAuthorizations = default(bool?), bool? EnableDuplicateMerchantReferenceNumberBlocking = default(bool?), bool? DomesticMerchantId = default(bool?), string ProcessLevel3Data = default(string), string SubMerchantId = default(string), string SubMerchantBusinessName = default(string), bool? PreferCobadgedSecondaryBrand = default(bool?), CardProcessingConfigCommonMerchantDescriptorInformation MerchantDescriptorInformation = default(CardProcessingConfigCommonMerchantDescriptorInformation), bool? GovernmentControlled = default(bool?), bool? DropBillingInfo = default(bool?))
        {
            this.Processors = Processors;
            this.AmexVendorCode = AmexVendorCode;
            this.DefaultAuthTypeCode = DefaultAuthTypeCode;
            this.MasterCardAssignedId = MasterCardAssignedId;
            this.EnablePartialAuth = EnablePartialAuth;
            this.MerchantCategoryCode = MerchantCategoryCode;
            this.SicCode = SicCode;
            this.FoodAndConsumerServiceId = FoodAndConsumerServiceId;
            this.EnableSplitShipment = EnableSplitShipment;
            this.EnableInterchangeOptimization = EnableInterchangeOptimization;
            this.VisaDelegatedAuthenticationId = VisaDelegatedAuthenticationId;
            this.CreditCardRefundLimitPercent = CreditCardRefundLimitPercent;
            this.BusinessCenterCreditCardRefundLimitPercent = BusinessCenterCreditCardRefundLimitPercent;
            this.AllowCapturesGreaterThanAuthorizations = AllowCapturesGreaterThanAuthorizations;
            this.EnableDuplicateMerchantReferenceNumberBlocking = EnableDuplicateMerchantReferenceNumberBlocking;
            this.DomesticMerchantId = DomesticMerchantId;
            this.ProcessLevel3Data = ProcessLevel3Data;
            this.SubMerchantId = SubMerchantId;
            this.SubMerchantBusinessName = SubMerchantBusinessName;
            this.PreferCobadgedSecondaryBrand = PreferCobadgedSecondaryBrand;
            this.MerchantDescriptorInformation = MerchantDescriptorInformation;
            this.GovernmentControlled = GovernmentControlled;
            this.DropBillingInfo = DropBillingInfo;
        }
        
        /// <summary>
        /// e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpngsapv3 * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &amp;lt;your vpc processor&amp;gt; 
        /// </summary>
        /// <value>e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpngsapv3 * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &amp;lt;your vpc processor&amp;gt; </value>
        [DataMember(Name="processors", EmitDefaultValue=false)]
        public Dictionary<string, CardProcessingConfigCommonProcessors> Processors { get; set; }

        /// <summary>
        /// Vendor code assigned by American Express. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>Vendor code assigned by American Express. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="amexVendorCode", EmitDefaultValue=false)]
        public string AmexVendorCode { get; set; }


        /// <summary>
        /// MAID aka MasterCard assigned ID, MasterCard equivalent of Merchant Verification Value by Visa. Applicable for VPC, GPX (gpx) and FDI Global (fdiglobal) processors.
        /// </summary>
        /// <value>MAID aka MasterCard assigned ID, MasterCard equivalent of Merchant Verification Value by Visa. Applicable for VPC, GPX (gpx) and FDI Global (fdiglobal) processors.</value>
        [DataMember(Name="masterCardAssignedId", EmitDefaultValue=false)]
        public string MasterCardAssignedId { get; set; }

        /// <summary>
        /// Allow merchants to accept partial authorization approvals. Applicable for Elavon Americas (elavonamericas), VPC, GPX (gpx), FDI Global (fdiglobal), FDC Nashville (smartfdc), GPN (gpn), TSYS (tsys), American Express Direct (amexdirect), Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Allow merchants to accept partial authorization approvals. Applicable for Elavon Americas (elavonamericas), VPC, GPX (gpx), FDI Global (fdiglobal), FDC Nashville (smartfdc), GPN (gpn), TSYS (tsys), American Express Direct (amexdirect), Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enablePartialAuth", EmitDefaultValue=false)]
        public bool? EnablePartialAuth { get; set; }

        /// <summary>
        /// Indicates type of business product or service of the merchant. Applicable for Chase Paymentech Salem (chasepaymentechsalem), FDI Global (fdiglobal), RUPAY, Elavon Americas (elavonamericas), American Express Direct (amexdirect), CMCIC (cmcic), GPX (gpx), VPC, TSYS (tsys), EFTPOS, CUP, Paymentech Tampa (paymentechtampa), CB2A, Barclays (barclays2), Prisma (prisma) and GPN (gpn) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Indicates type of business product or service of the merchant. Applicable for Chase Paymentech Salem (chasepaymentechsalem), FDI Global (fdiglobal), RUPAY, Elavon Americas (elavonamericas), American Express Direct (amexdirect), CMCIC (cmcic), GPX (gpx), VPC, TSYS (tsys), EFTPOS, CUP, Paymentech Tampa (paymentechtampa), CB2A, Barclays (barclays2), Prisma (prisma) and GPN (gpn) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="merchantCategoryCode", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors.
        /// </summary>
        /// <value>The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors.</value>
        [DataMember(Name="sicCode", EmitDefaultValue=false)]
        public string SicCode { get; set; }

        /// <summary>
        /// Food and Consumer Service ID. Identifies the merchant as being certified and approved to accept Food Stamps. Applicable for GPX (gpx) processor.
        /// </summary>
        /// <value>Food and Consumer Service ID. Identifies the merchant as being certified and approved to accept Food Stamps. Applicable for GPX (gpx) processor.</value>
        [DataMember(Name="foodAndConsumerServiceId", EmitDefaultValue=false)]
        public string FoodAndConsumerServiceId { get; set; }

        /// <summary>
        /// Enables you to split an order into multiple shipments with multiple captures. This feature is provided by CyberSource and supports three different scenarios:  * multiple authorizations * multiple captures * multiple authorizations with multiple captures  Applicable for VPC processors. 
        /// </summary>
        /// <value>Enables you to split an order into multiple shipments with multiple captures. This feature is provided by CyberSource and supports three different scenarios:  * multiple authorizations * multiple captures * multiple authorizations with multiple captures  Applicable for VPC processors. </value>
        [DataMember(Name="enableSplitShipment", EmitDefaultValue=false)]
        public bool? EnableSplitShipment { get; set; }

        /// <summary>
        /// Reduces your interchange fees by using automatic authorization refresh and automatic partial authorization reversal. Applicable for VPC processors.
        /// </summary>
        /// <value>Reduces your interchange fees by using automatic authorization refresh and automatic partial authorization reversal. Applicable for VPC processors.</value>
        [DataMember(Name="enableInterchangeOptimization", EmitDefaultValue=false)]
        public bool? EnableInterchangeOptimization { get; set; }

        /// <summary>
        /// Identifier provided to merchants who opt for Visa&#39;s delegated authorization program. Applicable for VPC processors.
        /// </summary>
        /// <value>Identifier provided to merchants who opt for Visa&#39;s delegated authorization program. Applicable for VPC processors.</value>
        [DataMember(Name="visaDelegatedAuthenticationId", EmitDefaultValue=false)]
        public string VisaDelegatedAuthenticationId { get; set; }

        /// <summary>
        /// Blocks over-refunds when the aggregated refund amount is higher than the percentage set for this field. Applicable for GPX (gpx), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.
        /// </summary>
        /// <value>Blocks over-refunds when the aggregated refund amount is higher than the percentage set for this field. Applicable for GPX (gpx), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.</value>
        [DataMember(Name="creditCardRefundLimitPercent", EmitDefaultValue=false)]
        public string CreditCardRefundLimitPercent { get; set; }

        /// <summary>
        /// Limits refunds to the percentage set in this field. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Limits refunds to the percentage set in this field. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="businessCenterCreditCardRefundLimitPercent", EmitDefaultValue=false)]
        public string BusinessCenterCreditCardRefundLimitPercent { get; set; }

        /// <summary>
        /// Enables this merchant account to capture amounts greater than the authorization amount. Applicable for GPX (gpx), VPC, Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.
        /// </summary>
        /// <value>Enables this merchant account to capture amounts greater than the authorization amount. Applicable for GPX (gpx), VPC, Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.</value>
        [DataMember(Name="allowCapturesGreaterThanAuthorizations", EmitDefaultValue=false)]
        public bool? AllowCapturesGreaterThanAuthorizations { get; set; }

        /// <summary>
        /// Helps prevent duplicate transactions. Applicable for VPC, GPX (gpx) and Chase Paymentech Salem (chasepaymentechsalem) processors.
        /// </summary>
        /// <value>Helps prevent duplicate transactions. Applicable for VPC, GPX (gpx) and Chase Paymentech Salem (chasepaymentechsalem) processors.</value>
        [DataMember(Name="enableDuplicateMerchantReferenceNumberBlocking", EmitDefaultValue=false)]
        public bool? EnableDuplicateMerchantReferenceNumberBlocking { get; set; }

        /// <summary>
        /// This is a local merchant ID used by merchants in addition to the conventional merchant ID. This value is sent to the issuer. Applicable for VPC and Prisma (prisma) processors.
        /// </summary>
        /// <value>This is a local merchant ID used by merchants in addition to the conventional merchant ID. This value is sent to the issuer. Applicable for VPC and Prisma (prisma) processors.</value>
        [DataMember(Name="domesticMerchantId", EmitDefaultValue=false)]
        public bool? DomesticMerchantId { get; set; }

        /// <summary>
        /// Indicates whether merchant processes Level 3 transactions. Applicable for TSYS (tsys), Barclays (barclays2), Paymentech Tampa (paymentechtampa), FDI Global (fdiglobal), Elavon Americas (elavonamericas) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Indicates whether merchant processes Level 3 transactions. Applicable for TSYS (tsys), Barclays (barclays2), Paymentech Tampa (paymentechtampa), FDI Global (fdiglobal), Elavon Americas (elavonamericas) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="processLevel3Data", EmitDefaultValue=false)]
        public string ProcessLevel3Data { get; set; }

        /// <summary>
        /// The ID assigned to the sub-merchant. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>The ID assigned to the sub-merchant. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="subMerchantId", EmitDefaultValue=false)]
        public string SubMerchantId { get; set; }

        /// <summary>
        /// Sub-merchant&#39;s business name. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;37&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Sub-merchant&#39;s business name. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;37&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="subMerchantBusinessName", EmitDefaultValue=false)]
        public string SubMerchantBusinessName { get; set; }

        /// <summary>
        /// It denotes merchant&#39;s preference on secondary brand for routing in case of co-branded cards. Applicable for EFTPOS processors.
        /// </summary>
        /// <value>It denotes merchant&#39;s preference on secondary brand for routing in case of co-branded cards. Applicable for EFTPOS processors.</value>
        [DataMember(Name="preferCobadgedSecondaryBrand", EmitDefaultValue=false)]
        public bool? PreferCobadgedSecondaryBrand { get; set; }

        /// <summary>
        /// Gets or Sets MerchantDescriptorInformation
        /// </summary>
        [DataMember(Name="merchantDescriptorInformation", EmitDefaultValue=false)]
        public CardProcessingConfigCommonMerchantDescriptorInformation MerchantDescriptorInformation { get; set; }

        /// <summary>
        /// Indicates whether the merchant is government controlled. Applicable for VPC processors.
        /// </summary>
        /// <value>Indicates whether the merchant is government controlled. Applicable for VPC processors.</value>
        [DataMember(Name="governmentControlled", EmitDefaultValue=false)]
        public bool? GovernmentControlled { get; set; }

        /// <summary>
        /// This field is used to indicate whether the merchant wants to drop the billing information from the request. If this field is set to true, then the billing information will be dropped from the request. If this field is set to false, then the billing information will be sent in the request.
        /// </summary>
        /// <value>This field is used to indicate whether the merchant wants to drop the billing information from the request. If this field is set to true, then the billing information will be dropped from the request. If this field is set to false, then the billing information will be sent in the request.</value>
        [DataMember(Name="dropBillingInfo", EmitDefaultValue=false)]
        public bool? DropBillingInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProcessingConfigCommon {\n");
            sb.Append("  Processors: ").Append(Processors).Append("\n");
            sb.Append("  AmexVendorCode: ").Append(AmexVendorCode).Append("\n");
            sb.Append("  DefaultAuthTypeCode: ").Append(DefaultAuthTypeCode).Append("\n");
            sb.Append("  MasterCardAssignedId: ").Append(MasterCardAssignedId).Append("\n");
            sb.Append("  EnablePartialAuth: ").Append(EnablePartialAuth).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("  SicCode: ").Append(SicCode).Append("\n");
            sb.Append("  FoodAndConsumerServiceId: ").Append(FoodAndConsumerServiceId).Append("\n");
            sb.Append("  EnableSplitShipment: ").Append(EnableSplitShipment).Append("\n");
            sb.Append("  EnableInterchangeOptimization: ").Append(EnableInterchangeOptimization).Append("\n");
            sb.Append("  VisaDelegatedAuthenticationId: ").Append(VisaDelegatedAuthenticationId).Append("\n");
            sb.Append("  CreditCardRefundLimitPercent: ").Append(CreditCardRefundLimitPercent).Append("\n");
            sb.Append("  BusinessCenterCreditCardRefundLimitPercent: ").Append(BusinessCenterCreditCardRefundLimitPercent).Append("\n");
            sb.Append("  AllowCapturesGreaterThanAuthorizations: ").Append(AllowCapturesGreaterThanAuthorizations).Append("\n");
            sb.Append("  EnableDuplicateMerchantReferenceNumberBlocking: ").Append(EnableDuplicateMerchantReferenceNumberBlocking).Append("\n");
            sb.Append("  DomesticMerchantId: ").Append(DomesticMerchantId).Append("\n");
            sb.Append("  ProcessLevel3Data: ").Append(ProcessLevel3Data).Append("\n");
            sb.Append("  SubMerchantId: ").Append(SubMerchantId).Append("\n");
            sb.Append("  SubMerchantBusinessName: ").Append(SubMerchantBusinessName).Append("\n");
            sb.Append("  PreferCobadgedSecondaryBrand: ").Append(PreferCobadgedSecondaryBrand).Append("\n");
            sb.Append("  MerchantDescriptorInformation: ").Append(MerchantDescriptorInformation).Append("\n");
            sb.Append("  GovernmentControlled: ").Append(GovernmentControlled).Append("\n");
            sb.Append("  DropBillingInfo: ").Append(DropBillingInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardProcessingConfigCommon);
        }

        /// <summary>
        /// Returns true if CardProcessingConfigCommon instances are equal
        /// </summary>
        /// <param name="other">Instance of CardProcessingConfigCommon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProcessingConfigCommon other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Processors == other.Processors ||
                    this.Processors != null &&
                    this.Processors.SequenceEqual(other.Processors)
                ) && 
                (
                    this.AmexVendorCode == other.AmexVendorCode ||
                    this.AmexVendorCode != null &&
                    this.AmexVendorCode.Equals(other.AmexVendorCode)
                ) && 
                (
                    this.DefaultAuthTypeCode == other.DefaultAuthTypeCode ||
                    this.DefaultAuthTypeCode != null &&
                    this.DefaultAuthTypeCode.Equals(other.DefaultAuthTypeCode)
                ) && 
                (
                    this.MasterCardAssignedId == other.MasterCardAssignedId ||
                    this.MasterCardAssignedId != null &&
                    this.MasterCardAssignedId.Equals(other.MasterCardAssignedId)
                ) && 
                (
                    this.EnablePartialAuth == other.EnablePartialAuth ||
                    this.EnablePartialAuth != null &&
                    this.EnablePartialAuth.Equals(other.EnablePartialAuth)
                ) && 
                (
                    this.MerchantCategoryCode == other.MerchantCategoryCode ||
                    this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(other.MerchantCategoryCode)
                ) && 
                (
                    this.SicCode == other.SicCode ||
                    this.SicCode != null &&
                    this.SicCode.Equals(other.SicCode)
                ) && 
                (
                    this.FoodAndConsumerServiceId == other.FoodAndConsumerServiceId ||
                    this.FoodAndConsumerServiceId != null &&
                    this.FoodAndConsumerServiceId.Equals(other.FoodAndConsumerServiceId)
                ) && 
                (
                    this.EnableSplitShipment == other.EnableSplitShipment ||
                    this.EnableSplitShipment != null &&
                    this.EnableSplitShipment.Equals(other.EnableSplitShipment)
                ) && 
                (
                    this.EnableInterchangeOptimization == other.EnableInterchangeOptimization ||
                    this.EnableInterchangeOptimization != null &&
                    this.EnableInterchangeOptimization.Equals(other.EnableInterchangeOptimization)
                ) && 
                (
                    this.VisaDelegatedAuthenticationId == other.VisaDelegatedAuthenticationId ||
                    this.VisaDelegatedAuthenticationId != null &&
                    this.VisaDelegatedAuthenticationId.Equals(other.VisaDelegatedAuthenticationId)
                ) && 
                (
                    this.CreditCardRefundLimitPercent == other.CreditCardRefundLimitPercent ||
                    this.CreditCardRefundLimitPercent != null &&
                    this.CreditCardRefundLimitPercent.Equals(other.CreditCardRefundLimitPercent)
                ) && 
                (
                    this.BusinessCenterCreditCardRefundLimitPercent == other.BusinessCenterCreditCardRefundLimitPercent ||
                    this.BusinessCenterCreditCardRefundLimitPercent != null &&
                    this.BusinessCenterCreditCardRefundLimitPercent.Equals(other.BusinessCenterCreditCardRefundLimitPercent)
                ) && 
                (
                    this.AllowCapturesGreaterThanAuthorizations == other.AllowCapturesGreaterThanAuthorizations ||
                    this.AllowCapturesGreaterThanAuthorizations != null &&
                    this.AllowCapturesGreaterThanAuthorizations.Equals(other.AllowCapturesGreaterThanAuthorizations)
                ) && 
                (
                    this.EnableDuplicateMerchantReferenceNumberBlocking == other.EnableDuplicateMerchantReferenceNumberBlocking ||
                    this.EnableDuplicateMerchantReferenceNumberBlocking != null &&
                    this.EnableDuplicateMerchantReferenceNumberBlocking.Equals(other.EnableDuplicateMerchantReferenceNumberBlocking)
                ) && 
                (
                    this.DomesticMerchantId == other.DomesticMerchantId ||
                    this.DomesticMerchantId != null &&
                    this.DomesticMerchantId.Equals(other.DomesticMerchantId)
                ) && 
                (
                    this.ProcessLevel3Data == other.ProcessLevel3Data ||
                    this.ProcessLevel3Data != null &&
                    this.ProcessLevel3Data.Equals(other.ProcessLevel3Data)
                ) && 
                (
                    this.SubMerchantId == other.SubMerchantId ||
                    this.SubMerchantId != null &&
                    this.SubMerchantId.Equals(other.SubMerchantId)
                ) && 
                (
                    this.SubMerchantBusinessName == other.SubMerchantBusinessName ||
                    this.SubMerchantBusinessName != null &&
                    this.SubMerchantBusinessName.Equals(other.SubMerchantBusinessName)
                ) && 
                (
                    this.PreferCobadgedSecondaryBrand == other.PreferCobadgedSecondaryBrand ||
                    this.PreferCobadgedSecondaryBrand != null &&
                    this.PreferCobadgedSecondaryBrand.Equals(other.PreferCobadgedSecondaryBrand)
                ) && 
                (
                    this.MerchantDescriptorInformation == other.MerchantDescriptorInformation ||
                    this.MerchantDescriptorInformation != null &&
                    this.MerchantDescriptorInformation.Equals(other.MerchantDescriptorInformation)
                ) && 
                (
                    this.GovernmentControlled == other.GovernmentControlled ||
                    this.GovernmentControlled != null &&
                    this.GovernmentControlled.Equals(other.GovernmentControlled)
                ) && 
                (
                    this.DropBillingInfo == other.DropBillingInfo ||
                    this.DropBillingInfo != null &&
                    this.DropBillingInfo.Equals(other.DropBillingInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Processors != null)
                    hash = hash * 59 + this.Processors.GetHashCode();
                if (this.AmexVendorCode != null)
                    hash = hash * 59 + this.AmexVendorCode.GetHashCode();
                if (this.DefaultAuthTypeCode != null)
                    hash = hash * 59 + this.DefaultAuthTypeCode.GetHashCode();
                if (this.MasterCardAssignedId != null)
                    hash = hash * 59 + this.MasterCardAssignedId.GetHashCode();
                if (this.EnablePartialAuth != null)
                    hash = hash * 59 + this.EnablePartialAuth.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hash = hash * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.SicCode != null)
                    hash = hash * 59 + this.SicCode.GetHashCode();
                if (this.FoodAndConsumerServiceId != null)
                    hash = hash * 59 + this.FoodAndConsumerServiceId.GetHashCode();
                if (this.EnableSplitShipment != null)
                    hash = hash * 59 + this.EnableSplitShipment.GetHashCode();
                if (this.EnableInterchangeOptimization != null)
                    hash = hash * 59 + this.EnableInterchangeOptimization.GetHashCode();
                if (this.VisaDelegatedAuthenticationId != null)
                    hash = hash * 59 + this.VisaDelegatedAuthenticationId.GetHashCode();
                if (this.CreditCardRefundLimitPercent != null)
                    hash = hash * 59 + this.CreditCardRefundLimitPercent.GetHashCode();
                if (this.BusinessCenterCreditCardRefundLimitPercent != null)
                    hash = hash * 59 + this.BusinessCenterCreditCardRefundLimitPercent.GetHashCode();
                if (this.AllowCapturesGreaterThanAuthorizations != null)
                    hash = hash * 59 + this.AllowCapturesGreaterThanAuthorizations.GetHashCode();
                if (this.EnableDuplicateMerchantReferenceNumberBlocking != null)
                    hash = hash * 59 + this.EnableDuplicateMerchantReferenceNumberBlocking.GetHashCode();
                if (this.DomesticMerchantId != null)
                    hash = hash * 59 + this.DomesticMerchantId.GetHashCode();
                if (this.ProcessLevel3Data != null)
                    hash = hash * 59 + this.ProcessLevel3Data.GetHashCode();
                if (this.SubMerchantId != null)
                    hash = hash * 59 + this.SubMerchantId.GetHashCode();
                if (this.SubMerchantBusinessName != null)
                    hash = hash * 59 + this.SubMerchantBusinessName.GetHashCode();
                if (this.PreferCobadgedSecondaryBrand != null)
                    hash = hash * 59 + this.PreferCobadgedSecondaryBrand.GetHashCode();
                if (this.MerchantDescriptorInformation != null)
                    hash = hash * 59 + this.MerchantDescriptorInformation.GetHashCode();
                if (this.GovernmentControlled != null)
                    hash = hash * 59 + this.GovernmentControlled.GetHashCode();
                if (this.DropBillingInfo != null)
                    hash = hash * 59 + this.DropBillingInfo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
