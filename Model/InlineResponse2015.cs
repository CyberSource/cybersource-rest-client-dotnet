/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2015
    /// </summary>
    [DataContract]
    public partial class InlineResponse2015 :  IEquatable<InlineResponse2015>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2015" /> class.
        /// </summary>
        /// <param name="WebhookId">Webhook Id. This is generated by the server..</param>
        /// <param name="OrganizationId">Organization ID..</param>
        /// <param name="Products">Products.</param>
        /// <param name="WebhookUrl">The client&#39;s endpoint (URL) to receive webhooks..</param>
        /// <param name="HealthCheckUrl">The client&#39;s health check endpoint (URL)..</param>
        /// <param name="Status">Webhook status. (default to &quot;INACTIVE&quot;).</param>
        /// <param name="Name">Client friendly webhook name..</param>
        /// <param name="Description">Client friendly webhook description..</param>
        /// <param name="RetryPolicy">RetryPolicy.</param>
        /// <param name="SecurityPolicy">SecurityPolicy.</param>
        /// <param name="CreatedOn">Date on which webhook was created/registered..</param>
        /// <param name="NotificationScope">The webhook scope. 1. SELF The Webhook is used to deliver webhooks for only this Organization (or Merchant). 2. DESCENDANTS The Webhook is used to deliver webhooks for this Organization and its children. This field is optional.    Possible values: - SELF - DESCENDANTS (default to &quot;DESCENDANTS&quot;).</param>
        public InlineResponse2015(string WebhookId = default(string), string OrganizationId = default(string), List<Notificationsubscriptionsv2webhooksProducts> Products = default(List<Notificationsubscriptionsv2webhooksProducts>), string WebhookUrl = default(string), string HealthCheckUrl = default(string), string Status = "INACTIVE", string Name = default(string), string Description = default(string), Notificationsubscriptionsv2webhooksRetryPolicy RetryPolicy = default(Notificationsubscriptionsv2webhooksRetryPolicy), Notificationsubscriptionsv2webhooksSecurityPolicy SecurityPolicy = default(Notificationsubscriptionsv2webhooksSecurityPolicy), string CreatedOn = default(string), string NotificationScope = "DESCENDANTS")
        {
            this.WebhookId = WebhookId;
            this.OrganizationId = OrganizationId;
            this.Products = Products;
            this.WebhookUrl = WebhookUrl;
            this.HealthCheckUrl = HealthCheckUrl;
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = "INACTIVE";
            }
            else
            {
                this.Status = Status;
            }
            this.Name = Name;
            this.Description = Description;
            this.RetryPolicy = RetryPolicy;
            this.SecurityPolicy = SecurityPolicy;
            this.CreatedOn = CreatedOn;
            // use default value if no "NotificationScope" provided
            if (NotificationScope == null)
            {
                this.NotificationScope = "DESCENDANTS";
            }
            else
            {
                this.NotificationScope = NotificationScope;
            }
        }
        
        /// <summary>
        /// Webhook Id. This is generated by the server.
        /// </summary>
        /// <value>Webhook Id. This is generated by the server.</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public string WebhookId { get; set; }

        /// <summary>
        /// Organization ID.
        /// </summary>
        /// <value>Organization ID.</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<Notificationsubscriptionsv2webhooksProducts> Products { get; set; }

        /// <summary>
        /// The client&#39;s endpoint (URL) to receive webhooks.
        /// </summary>
        /// <value>The client&#39;s endpoint (URL) to receive webhooks.</value>
        [DataMember(Name="webhookUrl", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// The client&#39;s health check endpoint (URL).
        /// </summary>
        /// <value>The client&#39;s health check endpoint (URL).</value>
        [DataMember(Name="healthCheckUrl", EmitDefaultValue=false)]
        public string HealthCheckUrl { get; set; }

        /// <summary>
        /// Webhook status.
        /// </summary>
        /// <value>Webhook status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Client friendly webhook name.
        /// </summary>
        /// <value>Client friendly webhook name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Client friendly webhook description.
        /// </summary>
        /// <value>Client friendly webhook description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RetryPolicy
        /// </summary>
        [DataMember(Name="retryPolicy", EmitDefaultValue=false)]
        public Notificationsubscriptionsv2webhooksRetryPolicy RetryPolicy { get; set; }

        /// <summary>
        /// Gets or Sets SecurityPolicy
        /// </summary>
        [DataMember(Name="securityPolicy", EmitDefaultValue=false)]
        public Notificationsubscriptionsv2webhooksSecurityPolicy SecurityPolicy { get; set; }

        /// <summary>
        /// Date on which webhook was created/registered.
        /// </summary>
        /// <value>Date on which webhook was created/registered.</value>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// The webhook scope. 1. SELF The Webhook is used to deliver webhooks for only this Organization (or Merchant). 2. DESCENDANTS The Webhook is used to deliver webhooks for this Organization and its children. This field is optional.    Possible values: - SELF - DESCENDANTS
        /// </summary>
        /// <value>The webhook scope. 1. SELF The Webhook is used to deliver webhooks for only this Organization (or Merchant). 2. DESCENDANTS The Webhook is used to deliver webhooks for this Organization and its children. This field is optional.    Possible values: - SELF - DESCENDANTS</value>
        [DataMember(Name="notificationScope", EmitDefaultValue=false)]
        public string NotificationScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2015 {\n");
            if (WebhookId != null) sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            if (OrganizationId != null) sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            if (Products != null) sb.Append("  Products: ").Append(Products).Append("\n");
            if (WebhookUrl != null) sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            if (HealthCheckUrl != null) sb.Append("  HealthCheckUrl: ").Append(HealthCheckUrl).Append("\n");
            if (Status != null) sb.Append("  Status: ").Append(Status).Append("\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (Description != null) sb.Append("  Description: ").Append(Description).Append("\n");
            if (RetryPolicy != null) sb.Append("  RetryPolicy: ").Append(RetryPolicy).Append("\n");
            if (SecurityPolicy != null) sb.Append("  SecurityPolicy: ").Append(SecurityPolicy).Append("\n");
            if (CreatedOn != null) sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            if (NotificationScope != null) sb.Append("  NotificationScope: ").Append(NotificationScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2015);
        }

        /// <summary>
        /// Returns true if InlineResponse2015 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2015 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2015 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WebhookId == other.WebhookId ||
                    this.WebhookId != null &&
                    this.WebhookId.Equals(other.WebhookId)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.WebhookUrl == other.WebhookUrl ||
                    this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(other.WebhookUrl)
                ) && 
                (
                    this.HealthCheckUrl == other.HealthCheckUrl ||
                    this.HealthCheckUrl != null &&
                    this.HealthCheckUrl.Equals(other.HealthCheckUrl)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.RetryPolicy == other.RetryPolicy ||
                    this.RetryPolicy != null &&
                    this.RetryPolicy.Equals(other.RetryPolicy)
                ) && 
                (
                    this.SecurityPolicy == other.SecurityPolicy ||
                    this.SecurityPolicy != null &&
                    this.SecurityPolicy.Equals(other.SecurityPolicy)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.NotificationScope == other.NotificationScope ||
                    this.NotificationScope != null &&
                    this.NotificationScope.Equals(other.NotificationScope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WebhookId != null)
                    hash = hash * 59 + this.WebhookId.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.WebhookUrl != null)
                    hash = hash * 59 + this.WebhookUrl.GetHashCode();
                if (this.HealthCheckUrl != null)
                    hash = hash * 59 + this.HealthCheckUrl.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.RetryPolicy != null)
                    hash = hash * 59 + this.RetryPolicy.GetHashCode();
                if (this.SecurityPolicy != null)
                    hash = hash * 59 + this.SecurityPolicy.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.NotificationScope != null)
                    hash = hash * 59 + this.NotificationScope.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
