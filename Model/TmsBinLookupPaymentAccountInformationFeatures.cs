/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsBinLookupPaymentAccountInformationFeatures
    /// </summary>
    [DataContract]
    public partial class TmsBinLookupPaymentAccountInformationFeatures :  IEquatable<TmsBinLookupPaymentAccountInformationFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsBinLookupPaymentAccountInformationFeatures" /> class.
        /// </summary>
        /// <param name="AccountFundingSource">This field contains the account funding source. Possible values:   - &#x60;CREDIT&#x60;   - &#x60;DEBIT&#x60;   - &#x60;PREPAID&#x60;   - &#x60;DEFERRED DEBIT&#x60;   - &#x60;CHARGE&#x60; .</param>
        /// <param name="AccountFundingSourceSubType">This field contains the type of prepaid card. Possible values:   - &#x60;Reloadable&#x60;   - &#x60;Non-reloadable&#x60; .</param>
        /// <param name="CardProduct">This field contains the type of issuer product. Example values:   - Visa Classic   - Visa Signature   - Visa Infinite .</param>
        /// <param name="MessageType">This field contains the type of BIN based authentication. Possible values:   - &#x60;S&#x60;: Single Message   - &#x60;D&#x60;: Dual Message .</param>
        /// <param name="AcceptanceLevel">This field contains the acceptance level of the PAN. Possible values:   - &#x60;0&#x60; : Normal   - &#x60;1&#x60; : Monitor   - &#x60;2&#x60; : Refuse   - &#x60;3&#x60; : Not Allowed   - &#x60;4&#x60; : Private   - &#x60;5&#x60; : Test .</param>
        /// <param name="CardPlatform">This field contains the type of card platform. Possible values:   - &#x60;BUSINESS&#x60;   - &#x60;CONSUMER&#x60;   - &#x60;CORPORATE&#x60;   - &#x60;COMMERCIAL&#x60;   - &#x60;GOVERNMENT&#x60; .</param>
        /// <param name="ComboCard">This field indicates the type of combo card. Possible values:   - 0 (Not a combo card)   - 1 (Credit and Prepaid Combo card)   - 2 (Credit and Debit Combo card)   - 3 (Prepaid Credit and Prepaid Debit combo card) .</param>
        /// <param name="CorporatePurchase">This field indicates if the instrument can be used for corporate purchasing. This field is only applicable for American Express cards. Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; .</param>
        /// <param name="HealthCard">This field indicates if the BIN is for healthcare (HSA/FSA). Currently, this field is only supported for Visa BINs. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="SharedBIN">This field indicates if the BIN is shared by multiple issuers Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="PosDomesticOnly">This field indicates if the BIN is valid only for POS domestic usage. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="GamblingAllowed">This field indicates if gambling transactions are allowed on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="CommercialCardLevel2">This field indicates if a transaction on the instrument qualifies for level 2 interchange rates. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="CommercialCardLevel3">This field indicates if a transaction on the instrument qualifies for level 3 interchange rates. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="ExemptBIN">This field indicates if a transaction on the instrument qualifies for government exempt interchange fee. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="AccountLevelManagement">This field indicates if the BIN participates in Account Level Management (ALM). Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="OnlineGamblingBlock">This field indicates if online gambling is blocked on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="AutoSubstantiation">This field indicates if auto-substantiation is enabled on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        /// <param name="FlexCredential">This field indicates if the instrument is a flex credential. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; .</param>
        public TmsBinLookupPaymentAccountInformationFeatures(string AccountFundingSource = default(string), string AccountFundingSourceSubType = default(string), string CardProduct = default(string), string MessageType = default(string), string AcceptanceLevel = default(string), string CardPlatform = default(string), string ComboCard = default(string), bool? CorporatePurchase = default(bool?), bool? HealthCard = default(bool?), bool? SharedBIN = default(bool?), bool? PosDomesticOnly = default(bool?), bool? GamblingAllowed = default(bool?), bool? CommercialCardLevel2 = default(bool?), bool? CommercialCardLevel3 = default(bool?), bool? ExemptBIN = default(bool?), bool? AccountLevelManagement = default(bool?), bool? OnlineGamblingBlock = default(bool?), bool? AutoSubstantiation = default(bool?), bool? FlexCredential = default(bool?))
        {
            this.AccountFundingSource = AccountFundingSource;
            this.AccountFundingSourceSubType = AccountFundingSourceSubType;
            this.CardProduct = CardProduct;
            this.MessageType = MessageType;
            this.AcceptanceLevel = AcceptanceLevel;
            this.CardPlatform = CardPlatform;
            this.ComboCard = ComboCard;
            this.CorporatePurchase = CorporatePurchase;
            this.HealthCard = HealthCard;
            this.SharedBIN = SharedBIN;
            this.PosDomesticOnly = PosDomesticOnly;
            this.GamblingAllowed = GamblingAllowed;
            this.CommercialCardLevel2 = CommercialCardLevel2;
            this.CommercialCardLevel3 = CommercialCardLevel3;
            this.ExemptBIN = ExemptBIN;
            this.AccountLevelManagement = AccountLevelManagement;
            this.OnlineGamblingBlock = OnlineGamblingBlock;
            this.AutoSubstantiation = AutoSubstantiation;
            this.FlexCredential = FlexCredential;
        }
        
        /// <summary>
        /// This field contains the account funding source. Possible values:   - &#x60;CREDIT&#x60;   - &#x60;DEBIT&#x60;   - &#x60;PREPAID&#x60;   - &#x60;DEFERRED DEBIT&#x60;   - &#x60;CHARGE&#x60; 
        /// </summary>
        /// <value>This field contains the account funding source. Possible values:   - &#x60;CREDIT&#x60;   - &#x60;DEBIT&#x60;   - &#x60;PREPAID&#x60;   - &#x60;DEFERRED DEBIT&#x60;   - &#x60;CHARGE&#x60; </value>
        [DataMember(Name="accountFundingSource", EmitDefaultValue=false)]
        public string AccountFundingSource { get; set; }

        /// <summary>
        /// This field contains the type of prepaid card. Possible values:   - &#x60;Reloadable&#x60;   - &#x60;Non-reloadable&#x60; 
        /// </summary>
        /// <value>This field contains the type of prepaid card. Possible values:   - &#x60;Reloadable&#x60;   - &#x60;Non-reloadable&#x60; </value>
        [DataMember(Name="accountFundingSourceSubType", EmitDefaultValue=false)]
        public string AccountFundingSourceSubType { get; set; }

        /// <summary>
        /// This field contains the type of issuer product. Example values:   - Visa Classic   - Visa Signature   - Visa Infinite 
        /// </summary>
        /// <value>This field contains the type of issuer product. Example values:   - Visa Classic   - Visa Signature   - Visa Infinite </value>
        [DataMember(Name="cardProduct", EmitDefaultValue=false)]
        public string CardProduct { get; set; }

        /// <summary>
        /// This field contains the type of BIN based authentication. Possible values:   - &#x60;S&#x60;: Single Message   - &#x60;D&#x60;: Dual Message 
        /// </summary>
        /// <value>This field contains the type of BIN based authentication. Possible values:   - &#x60;S&#x60;: Single Message   - &#x60;D&#x60;: Dual Message </value>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public string MessageType { get; set; }

        /// <summary>
        /// This field contains the acceptance level of the PAN. Possible values:   - &#x60;0&#x60; : Normal   - &#x60;1&#x60; : Monitor   - &#x60;2&#x60; : Refuse   - &#x60;3&#x60; : Not Allowed   - &#x60;4&#x60; : Private   - &#x60;5&#x60; : Test 
        /// </summary>
        /// <value>This field contains the acceptance level of the PAN. Possible values:   - &#x60;0&#x60; : Normal   - &#x60;1&#x60; : Monitor   - &#x60;2&#x60; : Refuse   - &#x60;3&#x60; : Not Allowed   - &#x60;4&#x60; : Private   - &#x60;5&#x60; : Test </value>
        [DataMember(Name="acceptanceLevel", EmitDefaultValue=false)]
        public string AcceptanceLevel { get; set; }

        /// <summary>
        /// This field contains the type of card platform. Possible values:   - &#x60;BUSINESS&#x60;   - &#x60;CONSUMER&#x60;   - &#x60;CORPORATE&#x60;   - &#x60;COMMERCIAL&#x60;   - &#x60;GOVERNMENT&#x60; 
        /// </summary>
        /// <value>This field contains the type of card platform. Possible values:   - &#x60;BUSINESS&#x60;   - &#x60;CONSUMER&#x60;   - &#x60;CORPORATE&#x60;   - &#x60;COMMERCIAL&#x60;   - &#x60;GOVERNMENT&#x60; </value>
        [DataMember(Name="cardPlatform", EmitDefaultValue=false)]
        public string CardPlatform { get; set; }

        /// <summary>
        /// This field indicates the type of combo card. Possible values:   - 0 (Not a combo card)   - 1 (Credit and Prepaid Combo card)   - 2 (Credit and Debit Combo card)   - 3 (Prepaid Credit and Prepaid Debit combo card) 
        /// </summary>
        /// <value>This field indicates the type of combo card. Possible values:   - 0 (Not a combo card)   - 1 (Credit and Prepaid Combo card)   - 2 (Credit and Debit Combo card)   - 3 (Prepaid Credit and Prepaid Debit combo card) </value>
        [DataMember(Name="comboCard", EmitDefaultValue=false)]
        public string ComboCard { get; set; }

        /// <summary>
        /// This field indicates if the instrument can be used for corporate purchasing. This field is only applicable for American Express cards. Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if the instrument can be used for corporate purchasing. This field is only applicable for American Express cards. Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; </value>
        [DataMember(Name="corporatePurchase", EmitDefaultValue=false)]
        public bool? CorporatePurchase { get; set; }

        /// <summary>
        /// This field indicates if the BIN is for healthcare (HSA/FSA). Currently, this field is only supported for Visa BINs. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if the BIN is for healthcare (HSA/FSA). Currently, this field is only supported for Visa BINs. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="healthCard", EmitDefaultValue=false)]
        public bool? HealthCard { get; set; }

        /// <summary>
        /// This field indicates if the BIN is shared by multiple issuers Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if the BIN is shared by multiple issuers Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="sharedBIN", EmitDefaultValue=false)]
        public bool? SharedBIN { get; set; }

        /// <summary>
        /// This field indicates if the BIN is valid only for POS domestic usage. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if the BIN is valid only for POS domestic usage. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="posDomesticOnly", EmitDefaultValue=false)]
        public bool? PosDomesticOnly { get; set; }

        /// <summary>
        /// This field indicates if gambling transactions are allowed on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if gambling transactions are allowed on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="gamblingAllowed", EmitDefaultValue=false)]
        public bool? GamblingAllowed { get; set; }

        /// <summary>
        /// This field indicates if a transaction on the instrument qualifies for level 2 interchange rates. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if a transaction on the instrument qualifies for level 2 interchange rates. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="commercialCardLevel2", EmitDefaultValue=false)]
        public bool? CommercialCardLevel2 { get; set; }

        /// <summary>
        /// This field indicates if a transaction on the instrument qualifies for level 3 interchange rates. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if a transaction on the instrument qualifies for level 3 interchange rates. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="commercialCardLevel3", EmitDefaultValue=false)]
        public bool? CommercialCardLevel3 { get; set; }

        /// <summary>
        /// This field indicates if a transaction on the instrument qualifies for government exempt interchange fee. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if a transaction on the instrument qualifies for government exempt interchange fee. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="exemptBIN", EmitDefaultValue=false)]
        public bool? ExemptBIN { get; set; }

        /// <summary>
        /// This field indicates if the BIN participates in Account Level Management (ALM). Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if the BIN participates in Account Level Management (ALM). Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="accountLevelManagement", EmitDefaultValue=false)]
        public bool? AccountLevelManagement { get; set; }

        /// <summary>
        /// This field indicates if online gambling is blocked on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if online gambling is blocked on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="onlineGamblingBlock", EmitDefaultValue=false)]
        public bool? OnlineGamblingBlock { get; set; }

        /// <summary>
        /// This field indicates if auto-substantiation is enabled on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if auto-substantiation is enabled on the BIN. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="autoSubstantiation", EmitDefaultValue=false)]
        public bool? AutoSubstantiation { get; set; }

        /// <summary>
        /// This field indicates if the instrument is a flex credential. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; 
        /// </summary>
        /// <value>This field indicates if the instrument is a flex credential. Possible values:     - &#x60;true&#x60;     - &#x60;false&#x60; </value>
        [DataMember(Name="flexCredential", EmitDefaultValue=false)]
        public bool? FlexCredential { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsBinLookupPaymentAccountInformationFeatures {\n");
            if (AccountFundingSource != null) sb.Append("  AccountFundingSource: ").Append(AccountFundingSource).Append("\n");
            if (AccountFundingSourceSubType != null) sb.Append("  AccountFundingSourceSubType: ").Append(AccountFundingSourceSubType).Append("\n");
            if (CardProduct != null) sb.Append("  CardProduct: ").Append(CardProduct).Append("\n");
            if (MessageType != null) sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            if (AcceptanceLevel != null) sb.Append("  AcceptanceLevel: ").Append(AcceptanceLevel).Append("\n");
            if (CardPlatform != null) sb.Append("  CardPlatform: ").Append(CardPlatform).Append("\n");
            if (ComboCard != null) sb.Append("  ComboCard: ").Append(ComboCard).Append("\n");
            if (CorporatePurchase != null) sb.Append("  CorporatePurchase: ").Append(CorporatePurchase).Append("\n");
            if (HealthCard != null) sb.Append("  HealthCard: ").Append(HealthCard).Append("\n");
            if (SharedBIN != null) sb.Append("  SharedBIN: ").Append(SharedBIN).Append("\n");
            if (PosDomesticOnly != null) sb.Append("  PosDomesticOnly: ").Append(PosDomesticOnly).Append("\n");
            if (GamblingAllowed != null) sb.Append("  GamblingAllowed: ").Append(GamblingAllowed).Append("\n");
            if (CommercialCardLevel2 != null) sb.Append("  CommercialCardLevel2: ").Append(CommercialCardLevel2).Append("\n");
            if (CommercialCardLevel3 != null) sb.Append("  CommercialCardLevel3: ").Append(CommercialCardLevel3).Append("\n");
            if (ExemptBIN != null) sb.Append("  ExemptBIN: ").Append(ExemptBIN).Append("\n");
            if (AccountLevelManagement != null) sb.Append("  AccountLevelManagement: ").Append(AccountLevelManagement).Append("\n");
            if (OnlineGamblingBlock != null) sb.Append("  OnlineGamblingBlock: ").Append(OnlineGamblingBlock).Append("\n");
            if (AutoSubstantiation != null) sb.Append("  AutoSubstantiation: ").Append(AutoSubstantiation).Append("\n");
            if (FlexCredential != null) sb.Append("  FlexCredential: ").Append(FlexCredential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsBinLookupPaymentAccountInformationFeatures);
        }

        /// <summary>
        /// Returns true if TmsBinLookupPaymentAccountInformationFeatures instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsBinLookupPaymentAccountInformationFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsBinLookupPaymentAccountInformationFeatures other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountFundingSource == other.AccountFundingSource ||
                    this.AccountFundingSource != null &&
                    this.AccountFundingSource.Equals(other.AccountFundingSource)
                ) && 
                (
                    this.AccountFundingSourceSubType == other.AccountFundingSourceSubType ||
                    this.AccountFundingSourceSubType != null &&
                    this.AccountFundingSourceSubType.Equals(other.AccountFundingSourceSubType)
                ) && 
                (
                    this.CardProduct == other.CardProduct ||
                    this.CardProduct != null &&
                    this.CardProduct.Equals(other.CardProduct)
                ) && 
                (
                    this.MessageType == other.MessageType ||
                    this.MessageType != null &&
                    this.MessageType.Equals(other.MessageType)
                ) && 
                (
                    this.AcceptanceLevel == other.AcceptanceLevel ||
                    this.AcceptanceLevel != null &&
                    this.AcceptanceLevel.Equals(other.AcceptanceLevel)
                ) && 
                (
                    this.CardPlatform == other.CardPlatform ||
                    this.CardPlatform != null &&
                    this.CardPlatform.Equals(other.CardPlatform)
                ) && 
                (
                    this.ComboCard == other.ComboCard ||
                    this.ComboCard != null &&
                    this.ComboCard.Equals(other.ComboCard)
                ) && 
                (
                    this.CorporatePurchase == other.CorporatePurchase ||
                    this.CorporatePurchase != null &&
                    this.CorporatePurchase.Equals(other.CorporatePurchase)
                ) && 
                (
                    this.HealthCard == other.HealthCard ||
                    this.HealthCard != null &&
                    this.HealthCard.Equals(other.HealthCard)
                ) && 
                (
                    this.SharedBIN == other.SharedBIN ||
                    this.SharedBIN != null &&
                    this.SharedBIN.Equals(other.SharedBIN)
                ) && 
                (
                    this.PosDomesticOnly == other.PosDomesticOnly ||
                    this.PosDomesticOnly != null &&
                    this.PosDomesticOnly.Equals(other.PosDomesticOnly)
                ) && 
                (
                    this.GamblingAllowed == other.GamblingAllowed ||
                    this.GamblingAllowed != null &&
                    this.GamblingAllowed.Equals(other.GamblingAllowed)
                ) && 
                (
                    this.CommercialCardLevel2 == other.CommercialCardLevel2 ||
                    this.CommercialCardLevel2 != null &&
                    this.CommercialCardLevel2.Equals(other.CommercialCardLevel2)
                ) && 
                (
                    this.CommercialCardLevel3 == other.CommercialCardLevel3 ||
                    this.CommercialCardLevel3 != null &&
                    this.CommercialCardLevel3.Equals(other.CommercialCardLevel3)
                ) && 
                (
                    this.ExemptBIN == other.ExemptBIN ||
                    this.ExemptBIN != null &&
                    this.ExemptBIN.Equals(other.ExemptBIN)
                ) && 
                (
                    this.AccountLevelManagement == other.AccountLevelManagement ||
                    this.AccountLevelManagement != null &&
                    this.AccountLevelManagement.Equals(other.AccountLevelManagement)
                ) && 
                (
                    this.OnlineGamblingBlock == other.OnlineGamblingBlock ||
                    this.OnlineGamblingBlock != null &&
                    this.OnlineGamblingBlock.Equals(other.OnlineGamblingBlock)
                ) && 
                (
                    this.AutoSubstantiation == other.AutoSubstantiation ||
                    this.AutoSubstantiation != null &&
                    this.AutoSubstantiation.Equals(other.AutoSubstantiation)
                ) && 
                (
                    this.FlexCredential == other.FlexCredential ||
                    this.FlexCredential != null &&
                    this.FlexCredential.Equals(other.FlexCredential)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountFundingSource != null)
                    hash = hash * 59 + this.AccountFundingSource.GetHashCode();
                if (this.AccountFundingSourceSubType != null)
                    hash = hash * 59 + this.AccountFundingSourceSubType.GetHashCode();
                if (this.CardProduct != null)
                    hash = hash * 59 + this.CardProduct.GetHashCode();
                if (this.MessageType != null)
                    hash = hash * 59 + this.MessageType.GetHashCode();
                if (this.AcceptanceLevel != null)
                    hash = hash * 59 + this.AcceptanceLevel.GetHashCode();
                if (this.CardPlatform != null)
                    hash = hash * 59 + this.CardPlatform.GetHashCode();
                if (this.ComboCard != null)
                    hash = hash * 59 + this.ComboCard.GetHashCode();
                if (this.CorporatePurchase != null)
                    hash = hash * 59 + this.CorporatePurchase.GetHashCode();
                if (this.HealthCard != null)
                    hash = hash * 59 + this.HealthCard.GetHashCode();
                if (this.SharedBIN != null)
                    hash = hash * 59 + this.SharedBIN.GetHashCode();
                if (this.PosDomesticOnly != null)
                    hash = hash * 59 + this.PosDomesticOnly.GetHashCode();
                if (this.GamblingAllowed != null)
                    hash = hash * 59 + this.GamblingAllowed.GetHashCode();
                if (this.CommercialCardLevel2 != null)
                    hash = hash * 59 + this.CommercialCardLevel2.GetHashCode();
                if (this.CommercialCardLevel3 != null)
                    hash = hash * 59 + this.CommercialCardLevel3.GetHashCode();
                if (this.ExemptBIN != null)
                    hash = hash * 59 + this.ExemptBIN.GetHashCode();
                if (this.AccountLevelManagement != null)
                    hash = hash * 59 + this.AccountLevelManagement.GetHashCode();
                if (this.OnlineGamblingBlock != null)
                    hash = hash * 59 + this.OnlineGamblingBlock.GetHashCode();
                if (this.AutoSubstantiation != null)
                    hash = hash * 59 + this.AutoSubstantiation.GetHashCode();
                if (this.FlexCredential != null)
                    hash = hash * 59 + this.FlexCredential.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
