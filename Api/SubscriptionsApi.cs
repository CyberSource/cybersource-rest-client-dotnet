/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a Subscription
        /// </summary>
        /// <remarks>
        /// Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ActivateSubscriptionResponse</returns>
        ActivateSubscriptionResponse ActivateSubscription (string id);

        /// <summary>
        /// Activate a Subscription
        /// </summary>
        /// <remarks>
        /// Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of ActivateSubscriptionResponse</returns>
        ApiResponse<ActivateSubscriptionResponse> ActivateSubscriptionWithHttpInfo (string id);
        /// <summary>
        /// Cancel a Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>CancelSubscriptionResponse</returns>
        CancelSubscriptionResponse CancelSubscription (string id);

        /// <summary>
        /// Cancel a Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of CancelSubscriptionResponse</returns>
        ApiResponse<CancelSubscriptionResponse> CancelSubscriptionWithHttpInfo (string id);
        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// Create a Recurring Billing Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>CreateSubscriptionResponse</returns>
        CreateSubscriptionResponse CreateSubscription (CreateSubscriptionRequest createSubscriptionRequest);

        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// Create a Recurring Billing Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>ApiResponse of CreateSubscriptionResponse</returns>
        ApiResponse<CreateSubscriptionResponse> CreateSubscriptionWithHttpInfo (CreateSubscriptionRequest createSubscriptionRequest);
        /// <summary>
        /// Get a List of Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>GetAllSubscriptionsResponse</returns>
        GetAllSubscriptionsResponse GetAllSubscriptions (int? offset = null, int? limit = null, string code = null, string status = null);

        /// <summary>
        /// Get a List of Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>ApiResponse of GetAllSubscriptionsResponse</returns>
        ApiResponse<GetAllSubscriptionsResponse> GetAllSubscriptionsWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null);
        /// <summary>
        /// Get a Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>GetSubscriptionResponse</returns>
        GetSubscriptionResponse GetSubscription (string id);

        /// <summary>
        /// Get a Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of GetSubscriptionResponse</returns>
        ApiResponse<GetSubscriptionResponse> GetSubscriptionWithHttpInfo (string id);
        /// <summary>
        /// Get a Subscription Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Subscription Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSubscriptionCodeResponse</returns>
        GetSubscriptionCodeResponse GetSubscriptionCode ();

        /// <summary>
        /// Get a Subscription Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Subscription Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSubscriptionCodeResponse</returns>
        ApiResponse<GetSubscriptionCodeResponse> GetSubscriptionCodeWithHttpInfo ();
        /// <summary>
        /// Suspend a Subscription
        /// </summary>
        /// <remarks>
        /// Suspend a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>SuspendSubscriptionResponse</returns>
        SuspendSubscriptionResponse SuspendSubscription (string id);

        /// <summary>
        /// Suspend a Subscription
        /// </summary>
        /// <remarks>
        /// Suspend a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of SuspendSubscriptionResponse</returns>
        ApiResponse<SuspendSubscriptionResponse> SuspendSubscriptionWithHttpInfo (string id);
        /// <summary>
        /// Update a Subscription
        /// </summary>
        /// <remarks>
        /// Update a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>UpdateSubscriptionResponse</returns>
        UpdateSubscriptionResponse UpdateSubscription (string id, UpdateSubscription updateSubscription);

        /// <summary>
        /// Update a Subscription
        /// </summary>
        /// <remarks>
        /// Update a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>ApiResponse of UpdateSubscriptionResponse</returns>
        ApiResponse<UpdateSubscriptionResponse> UpdateSubscriptionWithHttpInfo (string id, UpdateSubscription updateSubscription);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate a Subscription
        /// </summary>
        /// <remarks>
        /// Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ActivateSubscriptionResponse</returns>
        System.Threading.Tasks.Task<ActivateSubscriptionResponse> ActivateSubscriptionAsync (string id);

        /// <summary>
        /// Activate a Subscription
        /// </summary>
        /// <remarks>
        /// Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (ActivateSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivateSubscriptionResponse>> ActivateSubscriptionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Cancel a Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of CancelSubscriptionResponse</returns>
        System.Threading.Tasks.Task<CancelSubscriptionResponse> CancelSubscriptionAsync (string id);

        /// <summary>
        /// Cancel a Subscription
        /// </summary>
        /// <remarks>
        /// Cancel a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (CancelSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelSubscriptionResponse>> CancelSubscriptionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// Create a Recurring Billing Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>Task of CreateSubscriptionResponse</returns>
        System.Threading.Tasks.Task<CreateSubscriptionResponse> CreateSubscriptionAsync (CreateSubscriptionRequest createSubscriptionRequest);

        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// Create a Recurring Billing Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>Task of ApiResponse (CreateSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubscriptionResponse>> CreateSubscriptionAsyncWithHttpInfo (CreateSubscriptionRequest createSubscriptionRequest);
        /// <summary>
        /// Get a List of Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>Task of GetAllSubscriptionsResponse</returns>
        System.Threading.Tasks.Task<GetAllSubscriptionsResponse> GetAllSubscriptionsAsync (int? offset = null, int? limit = null, string code = null, string status = null);

        /// <summary>
        /// Get a List of Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSubscriptionsResponse>> GetAllSubscriptionsAsyncWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null);
        /// <summary>
        /// Get a Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of GetSubscriptionResponse</returns>
        System.Threading.Tasks.Task<GetSubscriptionResponse> GetSubscriptionAsync (string id);

        /// <summary>
        /// Get a Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (GetSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscriptionResponse>> GetSubscriptionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a Subscription Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Subscription Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSubscriptionCodeResponse</returns>
        System.Threading.Tasks.Task<GetSubscriptionCodeResponse> GetSubscriptionCodeAsync ();

        /// <summary>
        /// Get a Subscription Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Subscription Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSubscriptionCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscriptionCodeResponse>> GetSubscriptionCodeAsyncWithHttpInfo ();
        /// <summary>
        /// Suspend a Subscription
        /// </summary>
        /// <remarks>
        /// Suspend a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of SuspendSubscriptionResponse</returns>
        System.Threading.Tasks.Task<SuspendSubscriptionResponse> SuspendSubscriptionAsync (string id);

        /// <summary>
        /// Suspend a Subscription
        /// </summary>
        /// <remarks>
        /// Suspend a Subscription
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (SuspendSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuspendSubscriptionResponse>> SuspendSubscriptionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a Subscription
        /// </summary>
        /// <remarks>
        /// Update a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>Task of UpdateSubscriptionResponse</returns>
        System.Threading.Tasks.Task<UpdateSubscriptionResponse> UpdateSubscriptionAsync (string id, UpdateSubscription updateSubscription);

        /// <summary>
        /// Update a Subscription
        /// </summary>
        /// <remarks>
        /// Update a Subscription by Subscription Id
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>Task of ApiResponse (UpdateSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSubscriptionResponse>> UpdateSubscriptionAsyncWithHttpInfo (string id, UpdateSubscription updateSubscription);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Activate a Subscription Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ActivateSubscriptionResponse</returns>
        public ActivateSubscriptionResponse ActivateSubscription (string id)
        {
            logger.Debug("CALLING API \"ActivateSubscription\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ActivateSubscriptionResponse> localVarResponse = ActivateSubscriptionWithHttpInfo(id);
            logger.Debug("CALLING API \"ActivateSubscription\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a Subscription Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of ActivateSubscriptionResponse</returns>
        public ApiResponse< ActivateSubscriptionResponse > ActivateSubscriptionWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->ActivateSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->ActivateSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}/activate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ActivateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ActivateSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateSubscriptionResponse))); // Return statement
        }

        /// <summary>
        /// Activate a Subscription Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ActivateSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<ActivateSubscriptionResponse> ActivateSubscriptionAsync (string id)
        {
            logger.Debug("CALLING API \"ActivateSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ActivateSubscriptionResponse> localVarResponse = await ActivateSubscriptionAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"ActivateSubscriptionAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Activate a Subscription Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (ActivateSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivateSubscriptionResponse>> ActivateSubscriptionAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->ActivateSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->ActivateSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}/activate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ActivateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ActivateSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateSubscriptionResponse))); // Return statement
        }
        /// <summary>
        /// Cancel a Subscription Cancel a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>CancelSubscriptionResponse</returns>
        public CancelSubscriptionResponse CancelSubscription (string id)
        {
            logger.Debug("CALLING API \"CancelSubscription\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<CancelSubscriptionResponse> localVarResponse = CancelSubscriptionWithHttpInfo(id);
            logger.Debug("CALLING API \"CancelSubscription\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a Subscription Cancel a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of CancelSubscriptionResponse</returns>
        public ApiResponse< CancelSubscriptionResponse > CancelSubscriptionWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->CancelSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CancelSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<CancelSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (CancelSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelSubscriptionResponse))); // Return statement
        }

        /// <summary>
        /// Cancel a Subscription Cancel a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of CancelSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<CancelSubscriptionResponse> CancelSubscriptionAsync (string id)
        {
            logger.Debug("CALLING API \"CancelSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<CancelSubscriptionResponse> localVarResponse = await CancelSubscriptionAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"CancelSubscriptionAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a Subscription Cancel a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (CancelSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelSubscriptionResponse>> CancelSubscriptionAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->CancelSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CancelSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<CancelSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (CancelSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelSubscriptionResponse))); // Return statement
        }
        /// <summary>
        /// Create a Subscription Create a Recurring Billing Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>CreateSubscriptionResponse</returns>
        public CreateSubscriptionResponse CreateSubscription (CreateSubscriptionRequest createSubscriptionRequest)
        {
            logger.Debug("CALLING API \"CreateSubscription\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<CreateSubscriptionResponse> localVarResponse = CreateSubscriptionWithHttpInfo(createSubscriptionRequest);
            logger.Debug("CALLING API \"CreateSubscription\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription Create a Recurring Billing Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>ApiResponse of CreateSubscriptionResponse</returns>
        public ApiResponse< CreateSubscriptionResponse > CreateSubscriptionWithHttpInfo (CreateSubscriptionRequest createSubscriptionRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");
                throw new ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createSubscriptionRequest != null && createSubscriptionRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createSubscriptionRequest = (CreateSubscriptionRequest)sdkTracker.InsertDeveloperIdTracker(createSubscriptionRequest, createSubscriptionRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubscriptionRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<CreateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (CreateSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubscriptionResponse))); // Return statement
        }

        /// <summary>
        /// Create a Subscription Create a Recurring Billing Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>Task of CreateSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubscriptionResponse> CreateSubscriptionAsync (CreateSubscriptionRequest createSubscriptionRequest)
        {
            logger.Debug("CALLING API \"CreateSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<CreateSubscriptionResponse> localVarResponse = await CreateSubscriptionAsyncWithHttpInfo(createSubscriptionRequest);
            logger.Debug("CALLING API \"CreateSubscriptionAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Subscription Create a Recurring Billing Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>Task of ApiResponse (CreateSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubscriptionResponse>> CreateSubscriptionAsyncWithHttpInfo (CreateSubscriptionRequest createSubscriptionRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");
                throw new ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createSubscriptionRequest != null && createSubscriptionRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createSubscriptionRequest = (CreateSubscriptionRequest)sdkTracker.InsertDeveloperIdTracker(createSubscriptionRequest, createSubscriptionRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createSubscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubscriptionRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<CreateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (CreateSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubscriptionResponse))); // Return statement
        }
        /// <summary>
        /// Get a List of Subscriptions Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>GetAllSubscriptionsResponse</returns>
        public GetAllSubscriptionsResponse GetAllSubscriptions (int? offset = null, int? limit = null, string code = null, string status = null)
        {
            logger.Debug("CALLING API \"GetAllSubscriptions\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetAllSubscriptionsResponse> localVarResponse = GetAllSubscriptionsWithHttpInfo(offset, limit, code, status);
            logger.Debug("CALLING API \"GetAllSubscriptions\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a List of Subscriptions Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>ApiResponse of GetAllSubscriptionsResponse</returns>
        public ApiResponse< GetAllSubscriptionsResponse > GetAllSubscriptionsWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null)
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            if (code != null)
            {
                localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            }
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubscriptions", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetAllSubscriptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetAllSubscriptionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSubscriptionsResponse))); // Return statement
        }

        /// <summary>
        /// Get a List of Subscriptions Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>Task of GetAllSubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllSubscriptionsResponse> GetAllSubscriptionsAsync (int? offset = null, int? limit = null, string code = null, string status = null)
        {
            logger.Debug("CALLING API \"GetAllSubscriptionsAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetAllSubscriptionsResponse> localVarResponse = await GetAllSubscriptionsAsyncWithHttpInfo(offset, limit, code, status);
            logger.Debug("CALLING API \"GetAllSubscriptionsAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a List of Subscriptions Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Subscription Code (optional)</param>
        /// <param name="status">Filter by Subscription Status (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllSubscriptionsResponse>> GetAllSubscriptionsAsyncWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null)
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            if (code != null)
            {
                localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            }
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubscriptions", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetAllSubscriptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetAllSubscriptionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSubscriptionsResponse))); // Return statement
        }
        /// <summary>
        /// Get a Subscription Get a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>GetSubscriptionResponse</returns>
        public GetSubscriptionResponse GetSubscription (string id)
        {
            logger.Debug("CALLING API \"GetSubscription\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetSubscriptionResponse> localVarResponse = GetSubscriptionWithHttpInfo(id);
            logger.Debug("CALLING API \"GetSubscription\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Subscription Get a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of GetSubscriptionResponse</returns>
        public ApiResponse< GetSubscriptionResponse > GetSubscriptionWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriptionResponse))); // Return statement
        }

        /// <summary>
        /// Get a Subscription Get a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of GetSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<GetSubscriptionResponse> GetSubscriptionAsync (string id)
        {
            logger.Debug("CALLING API \"GetSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetSubscriptionResponse> localVarResponse = await GetSubscriptionAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"GetSubscriptionAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Subscription Get a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (GetSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubscriptionResponse>> GetSubscriptionAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriptionResponse))); // Return statement
        }
        /// <summary>
        /// Get a Subscription Code Get a Unique Subscription Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSubscriptionCodeResponse</returns>
        public GetSubscriptionCodeResponse GetSubscriptionCode ()
        {
            logger.Debug("CALLING API \"GetSubscriptionCode\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetSubscriptionCodeResponse> localVarResponse = GetSubscriptionCodeWithHttpInfo();
            logger.Debug("CALLING API \"GetSubscriptionCode\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Subscription Code Get a Unique Subscription Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSubscriptionCodeResponse</returns>
        public ApiResponse< GetSubscriptionCodeResponse > GetSubscriptionCodeWithHttpInfo ()
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/subscriptions/code";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionCode", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetSubscriptionCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetSubscriptionCodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriptionCodeResponse))); // Return statement
        }

        /// <summary>
        /// Get a Subscription Code Get a Unique Subscription Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSubscriptionCodeResponse</returns>
        public async System.Threading.Tasks.Task<GetSubscriptionCodeResponse> GetSubscriptionCodeAsync ()
        {
            logger.Debug("CALLING API \"GetSubscriptionCodeAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetSubscriptionCodeResponse> localVarResponse = await GetSubscriptionCodeAsyncWithHttpInfo();
            logger.Debug("CALLING API \"GetSubscriptionCodeAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Subscription Code Get a Unique Subscription Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSubscriptionCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubscriptionCodeResponse>> GetSubscriptionCodeAsyncWithHttpInfo ()
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/subscriptions/code";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionCode", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetSubscriptionCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetSubscriptionCodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriptionCodeResponse))); // Return statement
        }
        /// <summary>
        /// Suspend a Subscription Suspend a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>SuspendSubscriptionResponse</returns>
        public SuspendSubscriptionResponse SuspendSubscription (string id)
        {
            logger.Debug("CALLING API \"SuspendSubscription\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<SuspendSubscriptionResponse> localVarResponse = SuspendSubscriptionWithHttpInfo(id);
            logger.Debug("CALLING API \"SuspendSubscription\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Suspend a Subscription Suspend a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>ApiResponse of SuspendSubscriptionResponse</returns>
        public ApiResponse< SuspendSubscriptionResponse > SuspendSubscriptionWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->SuspendSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SuspendSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}/suspend";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuspendSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<SuspendSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (SuspendSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuspendSubscriptionResponse))); // Return statement
        }

        /// <summary>
        /// Suspend a Subscription Suspend a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of SuspendSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SuspendSubscriptionResponse> SuspendSubscriptionAsync (string id)
        {
            logger.Debug("CALLING API \"SuspendSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<SuspendSubscriptionResponse> localVarResponse = await SuspendSubscriptionAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"SuspendSubscriptionAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Suspend a Subscription Suspend a Subscription
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <returns>Task of ApiResponse (SuspendSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuspendSubscriptionResponse>> SuspendSubscriptionAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->SuspendSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SuspendSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}/suspend";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuspendSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<SuspendSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (SuspendSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuspendSubscriptionResponse))); // Return statement
        }
        /// <summary>
        /// Update a Subscription Update a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>UpdateSubscriptionResponse</returns>
        public UpdateSubscriptionResponse UpdateSubscription (string id, UpdateSubscription updateSubscription)
        {
            logger.Debug("CALLING API \"UpdateSubscription\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<UpdateSubscriptionResponse> localVarResponse = UpdateSubscriptionWithHttpInfo(id, updateSubscription);
            logger.Debug("CALLING API \"UpdateSubscription\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Update a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>ApiResponse of UpdateSubscriptionResponse</returns>
        public ApiResponse< UpdateSubscriptionResponse > UpdateSubscriptionWithHttpInfo (string id, UpdateSubscription updateSubscription)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->UpdateSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->UpdateSubscription");
            }
            // verify the required parameter 'updateSubscription' is set
            if (updateSubscription == null)
            {
                logger.Error("ApiException : Missing required parameter 'updateSubscription' when calling SubscriptionsApi->UpdateSubscription");
                throw new ApiException(400, "Missing required parameter 'updateSubscription' when calling SubscriptionsApi->UpdateSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateSubscription != null && updateSubscription.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateSubscription = (UpdateSubscription)sdkTracker.InsertDeveloperIdTracker(updateSubscription, updateSubscription.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(updateSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSubscription; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<UpdateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (UpdateSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateSubscriptionResponse))); // Return statement
        }

        /// <summary>
        /// Update a Subscription Update a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>Task of UpdateSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<UpdateSubscriptionResponse> UpdateSubscriptionAsync (string id, UpdateSubscription updateSubscription)
        {
            logger.Debug("CALLING API \"UpdateSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<UpdateSubscriptionResponse> localVarResponse = await UpdateSubscriptionAsyncWithHttpInfo(id, updateSubscription);
            logger.Debug("CALLING API \"UpdateSubscriptionAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Subscription Update a Subscription by Subscription Id
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Id</param>
        /// <param name="updateSubscription">Update Subscription</param>
        /// <returns>Task of ApiResponse (UpdateSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateSubscriptionResponse>> UpdateSubscriptionAsyncWithHttpInfo (string id, UpdateSubscription updateSubscription)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling SubscriptionsApi->UpdateSubscription");
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->UpdateSubscription");
            }
            // verify the required parameter 'updateSubscription' is set
            if (updateSubscription == null)
            {
                logger.Error("ApiException : Missing required parameter 'updateSubscription' when calling SubscriptionsApi->UpdateSubscription");
                throw new ApiException(400, "Missing required parameter 'updateSubscription' when calling SubscriptionsApi->UpdateSubscription");
            }

            var localVarPath = $"/rbs/v1/subscriptions/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateSubscription != null && updateSubscription.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateSubscription = (UpdateSubscription)sdkTracker.InsertDeveloperIdTracker(updateSubscription, updateSubscription.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(updateSubscription); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSubscription; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<UpdateSubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (UpdateSubscriptionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateSubscriptionResponse))); // Return statement
        }
    }
}
