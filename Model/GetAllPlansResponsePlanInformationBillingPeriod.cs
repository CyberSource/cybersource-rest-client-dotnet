/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Billing Frequency 
    /// </summary>
    [DataContract]
    public partial class GetAllPlansResponsePlanInformationBillingPeriod :  IEquatable<GetAllPlansResponsePlanInformationBillingPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllPlansResponsePlanInformationBillingPeriod" /> class.
        /// </summary>
        /// <param name="Length">Example: - If length&#x3D;1 &amp; unit&#x3D;month then charge every month - If length&#x3D;7 &amp; unit&#x3D;day then charge every 7th day .</param>
        /// <param name="Unit">Calendar unit values.   possible values:   - &#x60;D&#x60; - day   - &#x60;M&#x60; - month   - &#x60;W&#x60; - week   - &#x60;Y&#x60; - year .</param>
        public GetAllPlansResponsePlanInformationBillingPeriod(string Length = default(string), string Unit = default(string))
        {
            this.Length = Length;
            this.Unit = Unit;
        }
        
        /// <summary>
        /// Example: - If length&#x3D;1 &amp; unit&#x3D;month then charge every month - If length&#x3D;7 &amp; unit&#x3D;day then charge every 7th day 
        /// </summary>
        /// <value>Example: - If length&#x3D;1 &amp; unit&#x3D;month then charge every month - If length&#x3D;7 &amp; unit&#x3D;day then charge every 7th day </value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Calendar unit values.   possible values:   - &#x60;D&#x60; - day   - &#x60;M&#x60; - month   - &#x60;W&#x60; - week   - &#x60;Y&#x60; - year 
        /// </summary>
        /// <value>Calendar unit values.   possible values:   - &#x60;D&#x60; - day   - &#x60;M&#x60; - month   - &#x60;W&#x60; - week   - &#x60;Y&#x60; - year </value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAllPlansResponsePlanInformationBillingPeriod {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetAllPlansResponsePlanInformationBillingPeriod);
        }

        /// <summary>
        /// Returns true if GetAllPlansResponsePlanInformationBillingPeriod instances are equal
        /// </summary>
        /// <param name="other">Instance of GetAllPlansResponsePlanInformationBillingPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAllPlansResponsePlanInformationBillingPeriod other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Length == other.Length ||
                    this.Length != null &&
                    this.Length.Equals(other.Length)
                ) && 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Length != null)
                    hash = hash * 59 + this.Length.GetHashCode();
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
