/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities
    /// </summary>
    [DataContract]
    public partial class Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities :  IEquatable<Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities" /> class.
        /// </summary>
        /// <param name="Id">The id from the authenticated identity.  Base64URL encoded string (RFC4648).   The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. .</param>
        /// <param name="Provider">The provider of the authenticated identity.  Possible Values:   - VISA_PAYMENT_PASSKEY .</param>
        /// <param name="Data">The data from the authenticated identity, for FIDO this could be the Attestation. Base64URL encoded string (RFC4648).  The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. .</param>
        /// <param name="RelyingPartyId">The id of the Relying Party.  Base64URL encoded string (RFC4648).   The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. .</param>
        public Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities(string Id = default(string), string Provider = default(string), string Data = default(string), string RelyingPartyId = default(string))
        {
            this.Id = Id;
            this.Provider = Provider;
            this.Data = Data;
            this.RelyingPartyId = RelyingPartyId;
        }
        
        /// <summary>
        /// The id from the authenticated identity.  Base64URL encoded string (RFC4648).   The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. 
        /// </summary>
        /// <value>The id from the authenticated identity.  Base64URL encoded string (RFC4648).   The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The provider of the authenticated identity.  Possible Values:   - VISA_PAYMENT_PASSKEY 
        /// </summary>
        /// <value>The provider of the authenticated identity.  Possible Values:   - VISA_PAYMENT_PASSKEY </value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// The data from the authenticated identity, for FIDO this could be the Attestation. Base64URL encoded string (RFC4648).  The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. 
        /// </summary>
        /// <value>The data from the authenticated identity, for FIDO this could be the Attestation. Base64URL encoded string (RFC4648).  The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. </value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// The id of the Relying Party.  Base64URL encoded string (RFC4648).   The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. 
        /// </summary>
        /// <value>The id of the Relying Party.  Base64URL encoded string (RFC4648).   The encoding is the same as Base64, but uses &#39;-&#39; characters instead of &#39;+&#39; and &#39;_&#39; characters instead of &#39;/&#39;. </value>
        [DataMember(Name="relyingPartyId", EmitDefaultValue=false)]
        public string RelyingPartyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities {\n");
            if (Id != null) sb.Append("  Id: ").Append(Id).Append("\n");
            if (Provider != null) sb.Append("  Provider: ").Append(Provider).Append("\n");
            if (Data != null) sb.Append("  Data: ").Append(Data).Append("\n");
            if (RelyingPartyId != null) sb.Append("  RelyingPartyId: ").Append(RelyingPartyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities);
        }

        /// <summary>
        /// Returns true if Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities instances are equal
        /// </summary>
        /// <param name="other">Instance of Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Provider == other.Provider ||
                    this.Provider != null &&
                    this.Provider.Equals(other.Provider)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.RelyingPartyId == other.RelyingPartyId ||
                    this.RelyingPartyId != null &&
                    this.RelyingPartyId.Equals(other.RelyingPartyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Provider != null)
                    hash = hash * 59 + this.Provider.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.RelyingPartyId != null)
                    hash = hash * 59 + this.RelyingPartyId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
