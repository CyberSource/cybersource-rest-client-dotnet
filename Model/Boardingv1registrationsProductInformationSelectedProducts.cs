/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Boardingv1registrationsProductInformationSelectedProducts
    /// </summary>
    [DataContract]
    public partial class Boardingv1registrationsProductInformationSelectedProducts :  IEquatable<Boardingv1registrationsProductInformationSelectedProducts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsProductInformationSelectedProducts" /> class.
        /// </summary>
        /// <param name="Payments">Payments.</param>
        /// <param name="Risk">Risk.</param>
        /// <param name="CommerceSolutions">CommerceSolutions.</param>
        /// <param name="ValueAddedServices">ValueAddedServices.</param>
        public Boardingv1registrationsProductInformationSelectedProducts(PaymentsProducts Payments = default(PaymentsProducts), RiskProducts Risk = default(RiskProducts), CommerceSolutionsProducts CommerceSolutions = default(CommerceSolutionsProducts), ValueAddedServicesProducts ValueAddedServices = default(ValueAddedServicesProducts))
        {
            this.Payments = Payments;
            this.Risk = Risk;
            this.CommerceSolutions = CommerceSolutions;
            this.ValueAddedServices = ValueAddedServices;
        }
        
        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name="payments", EmitDefaultValue=false)]
        public PaymentsProducts Payments { get; set; }

        /// <summary>
        /// Gets or Sets Risk
        /// </summary>
        [DataMember(Name="risk", EmitDefaultValue=false)]
        public RiskProducts Risk { get; set; }

        /// <summary>
        /// Gets or Sets CommerceSolutions
        /// </summary>
        [DataMember(Name="commerceSolutions", EmitDefaultValue=false)]
        public CommerceSolutionsProducts CommerceSolutions { get; set; }

        /// <summary>
        /// Gets or Sets ValueAddedServices
        /// </summary>
        [DataMember(Name="valueAddedServices", EmitDefaultValue=false)]
        public ValueAddedServicesProducts ValueAddedServices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Boardingv1registrationsProductInformationSelectedProducts {\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  CommerceSolutions: ").Append(CommerceSolutions).Append("\n");
            sb.Append("  ValueAddedServices: ").Append(ValueAddedServices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Boardingv1registrationsProductInformationSelectedProducts);
        }

        /// <summary>
        /// Returns true if Boardingv1registrationsProductInformationSelectedProducts instances are equal
        /// </summary>
        /// <param name="other">Instance of Boardingv1registrationsProductInformationSelectedProducts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Boardingv1registrationsProductInformationSelectedProducts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Payments == other.Payments ||
                    this.Payments != null &&
                    this.Payments.Equals(other.Payments)
                ) && 
                (
                    this.Risk == other.Risk ||
                    this.Risk != null &&
                    this.Risk.Equals(other.Risk)
                ) && 
                (
                    this.CommerceSolutions == other.CommerceSolutions ||
                    this.CommerceSolutions != null &&
                    this.CommerceSolutions.Equals(other.CommerceSolutions)
                ) && 
                (
                    this.ValueAddedServices == other.ValueAddedServices ||
                    this.ValueAddedServices != null &&
                    this.ValueAddedServices.Equals(other.ValueAddedServices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Payments != null)
                    hash = hash * 59 + this.Payments.GetHashCode();
                if (this.Risk != null)
                    hash = hash * 59 + this.Risk.GetHashCode();
                if (this.CommerceSolutions != null)
                    hash = hash * 59 + this.CommerceSolutions.GetHashCode();
                if (this.ValueAddedServices != null)
                    hash = hash * 59 + this.ValueAddedServices.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
