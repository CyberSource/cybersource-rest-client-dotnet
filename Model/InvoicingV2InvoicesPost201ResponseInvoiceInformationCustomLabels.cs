/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels
    /// </summary>
    [DataContract]
    public partial class InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels :  IEquatable<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels" /> class.
        /// </summary>
        /// <param name="Key">The invoice field key. Possible values:   - billTo   - invoiceNumber   - customerId   - companyName   - description   - shipping   - partialPayment   - discount   - tax .</param>
        /// <param name="Value">The new (overridden) field name.</param>
        /// <param name="Hidden">Hides the specified field. This field is applicable for keys:   - customerId   - companyName   - description   - shipping   - partialPayment  (default to false).</param>
        /// <param name="HiddenForInvoice">Hides the field at invoice level. This field is applicable for keys:   - discount   - tax  (default to false).</param>
        /// <param name="HiddenForItem">Hides the field at invoice item level. This field is applicable for keys:   - discount   - tax  (default to false).</param>
        public InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels(string Key = default(string), string Value = default(string), bool? Hidden = false, bool? HiddenForInvoice = false, bool? HiddenForItem = false)
        {
            this.Key = Key;
            this.Value = Value;
            // use default value if no "Hidden" provided
            if (Hidden == null)
            {
                this.Hidden = false;
            }
            else
            {
                this.Hidden = Hidden;
            }
            // use default value if no "HiddenForInvoice" provided
            if (HiddenForInvoice == null)
            {
                this.HiddenForInvoice = false;
            }
            else
            {
                this.HiddenForInvoice = HiddenForInvoice;
            }
            // use default value if no "HiddenForItem" provided
            if (HiddenForItem == null)
            {
                this.HiddenForItem = false;
            }
            else
            {
                this.HiddenForItem = HiddenForItem;
            }
        }
        
        /// <summary>
        /// The invoice field key. Possible values:   - billTo   - invoiceNumber   - customerId   - companyName   - description   - shipping   - partialPayment   - discount   - tax 
        /// </summary>
        /// <value>The invoice field key. Possible values:   - billTo   - invoiceNumber   - customerId   - companyName   - description   - shipping   - partialPayment   - discount   - tax </value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The new (overridden) field name
        /// </summary>
        /// <value>The new (overridden) field name</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Hides the specified field. This field is applicable for keys:   - customerId   - companyName   - description   - shipping   - partialPayment 
        /// </summary>
        /// <value>Hides the specified field. This field is applicable for keys:   - customerId   - companyName   - description   - shipping   - partialPayment </value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Hides the field at invoice level. This field is applicable for keys:   - discount   - tax 
        /// </summary>
        /// <value>Hides the field at invoice level. This field is applicable for keys:   - discount   - tax </value>
        [DataMember(Name="hiddenForInvoice", EmitDefaultValue=false)]
        public bool? HiddenForInvoice { get; set; }

        /// <summary>
        /// Hides the field at invoice item level. This field is applicable for keys:   - discount   - tax 
        /// </summary>
        /// <value>Hides the field at invoice item level. This field is applicable for keys:   - discount   - tax </value>
        [DataMember(Name="hiddenForItem", EmitDefaultValue=false)]
        public bool? HiddenForItem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels {\n");
            if (Key != null) sb.Append("  Key: ").Append(Key).Append("\n");
            if (Value != null) sb.Append("  Value: ").Append(Value).Append("\n");
            if (Hidden != null) sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            if (HiddenForInvoice != null) sb.Append("  HiddenForInvoice: ").Append(HiddenForInvoice).Append("\n");
            if (HiddenForItem != null) sb.Append("  HiddenForItem: ").Append(HiddenForItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels);
        }

        /// <summary>
        /// Returns true if InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Hidden == other.Hidden ||
                    this.Hidden != null &&
                    this.Hidden.Equals(other.Hidden)
                ) && 
                (
                    this.HiddenForInvoice == other.HiddenForInvoice ||
                    this.HiddenForInvoice != null &&
                    this.HiddenForInvoice.Equals(other.HiddenForInvoice)
                ) && 
                (
                    this.HiddenForItem == other.HiddenForItem ||
                    this.HiddenForItem != null &&
                    this.HiddenForItem.Equals(other.HiddenForItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Hidden != null)
                    hash = hash * 59 + this.Hidden.GetHashCode();
                if (this.HiddenForInvoice != null)
                    hash = hash * 59 + this.HiddenForInvoice.GetHashCode();
                if (this.HiddenForItem != null)
                    hash = hash * 59 + this.HiddenForItem.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
