/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1decisionsTravelInformation
    /// </summary>
    [DataContract]
    public partial class Riskv1decisionsTravelInformation :  IEquatable<Riskv1decisionsTravelInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1decisionsTravelInformation" /> class.
        /// </summary>
        /// <param name="CompleteRoute">Concatenation of individual travel legs in the format ORIG1-DEST1[:ORIG2-DEST2...:ORIGn-DESTn], for example, SFO-JFK:JFK-LHR:LHR-CDG. For airport codes, see the IATA Airline and Airport Code Search. Note In your request, send either the complete route or the individual legs (_leg#_orig and _leg#_dest). If you send all the fields, the value of _complete_route takes precedence over that of the _leg# fields. .</param>
        /// <param name="DepartureTime">Departure date and time of the first leg of the trip. Use one of the following formats:   - yyyy-MM-dd HH:mm z   - yyyy-MM-dd hh:mm a z   - yyyy-MM-dd hh:mma z   HH &#x3D; hour in 24-hour format   hh &#x3D; hour in 12-hour format   a &#x3D; am or pm (case insensitive)   z &#x3D; time zone of the departing flight, for example: If the   airline is based in city A, but the flight departs from city   B, z is the time zone of city B at the time of departure. Important For travel information, use GMT instead of UTC, or use the local time zone. Examples 2011-03-20 11:30 PM PDT 2011-03-20 11:30pm GMT 2011-03-20 11:30pm GMT-05:00 Eastern Standard Time: GMT-05:00 or EST Note When specifying an offset from GMT, the format must be exactly as specified in the example. Insert no spaces between the time zone and the offset. .</param>
        /// <param name="JourneyType">Type of travel, for example one way or round trip..</param>
        /// <param name="Legs">Legs.</param>
        public Riskv1decisionsTravelInformation(string CompleteRoute = default(string), string DepartureTime = default(string), string JourneyType = default(string), List<Riskv1decisionsTravelInformationLegs> Legs = default(List<Riskv1decisionsTravelInformationLegs>))
        {
            this.CompleteRoute = CompleteRoute;
            this.DepartureTime = DepartureTime;
            this.JourneyType = JourneyType;
            this.Legs = Legs;
        }
        
        /// <summary>
        /// Concatenation of individual travel legs in the format ORIG1-DEST1[:ORIG2-DEST2...:ORIGn-DESTn], for example, SFO-JFK:JFK-LHR:LHR-CDG. For airport codes, see the IATA Airline and Airport Code Search. Note In your request, send either the complete route or the individual legs (_leg#_orig and _leg#_dest). If you send all the fields, the value of _complete_route takes precedence over that of the _leg# fields. 
        /// </summary>
        /// <value>Concatenation of individual travel legs in the format ORIG1-DEST1[:ORIG2-DEST2...:ORIGn-DESTn], for example, SFO-JFK:JFK-LHR:LHR-CDG. For airport codes, see the IATA Airline and Airport Code Search. Note In your request, send either the complete route or the individual legs (_leg#_orig and _leg#_dest). If you send all the fields, the value of _complete_route takes precedence over that of the _leg# fields. </value>
        [DataMember(Name="completeRoute", EmitDefaultValue=false)]
        public string CompleteRoute { get; set; }

        /// <summary>
        /// Departure date and time of the first leg of the trip. Use one of the following formats:   - yyyy-MM-dd HH:mm z   - yyyy-MM-dd hh:mm a z   - yyyy-MM-dd hh:mma z   HH &#x3D; hour in 24-hour format   hh &#x3D; hour in 12-hour format   a &#x3D; am or pm (case insensitive)   z &#x3D; time zone of the departing flight, for example: If the   airline is based in city A, but the flight departs from city   B, z is the time zone of city B at the time of departure. Important For travel information, use GMT instead of UTC, or use the local time zone. Examples 2011-03-20 11:30 PM PDT 2011-03-20 11:30pm GMT 2011-03-20 11:30pm GMT-05:00 Eastern Standard Time: GMT-05:00 or EST Note When specifying an offset from GMT, the format must be exactly as specified in the example. Insert no spaces between the time zone and the offset. 
        /// </summary>
        /// <value>Departure date and time of the first leg of the trip. Use one of the following formats:   - yyyy-MM-dd HH:mm z   - yyyy-MM-dd hh:mm a z   - yyyy-MM-dd hh:mma z   HH &#x3D; hour in 24-hour format   hh &#x3D; hour in 12-hour format   a &#x3D; am or pm (case insensitive)   z &#x3D; time zone of the departing flight, for example: If the   airline is based in city A, but the flight departs from city   B, z is the time zone of city B at the time of departure. Important For travel information, use GMT instead of UTC, or use the local time zone. Examples 2011-03-20 11:30 PM PDT 2011-03-20 11:30pm GMT 2011-03-20 11:30pm GMT-05:00 Eastern Standard Time: GMT-05:00 or EST Note When specifying an offset from GMT, the format must be exactly as specified in the example. Insert no spaces between the time zone and the offset. </value>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Type of travel, for example one way or round trip.
        /// </summary>
        /// <value>Type of travel, for example one way or round trip.</value>
        [DataMember(Name="journeyType", EmitDefaultValue=false)]
        public string JourneyType { get; set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [DataMember(Name="legs", EmitDefaultValue=false)]
        public List<Riskv1decisionsTravelInformationLegs> Legs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1decisionsTravelInformation {\n");
            sb.Append("  CompleteRoute: ").Append(CompleteRoute).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  JourneyType: ").Append(JourneyType).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1decisionsTravelInformation);
        }

        /// <summary>
        /// Returns true if Riskv1decisionsTravelInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1decisionsTravelInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1decisionsTravelInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompleteRoute == other.CompleteRoute ||
                    this.CompleteRoute != null &&
                    this.CompleteRoute.Equals(other.CompleteRoute)
                ) && 
                (
                    this.DepartureTime == other.DepartureTime ||
                    this.DepartureTime != null &&
                    this.DepartureTime.Equals(other.DepartureTime)
                ) && 
                (
                    this.JourneyType == other.JourneyType ||
                    this.JourneyType != null &&
                    this.JourneyType.Equals(other.JourneyType)
                ) && 
                (
                    this.Legs == other.Legs ||
                    this.Legs != null &&
                    this.Legs.SequenceEqual(other.Legs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompleteRoute != null)
                    hash = hash * 59 + this.CompleteRoute.GetHashCode();
                if (this.DepartureTime != null)
                    hash = hash * 59 + this.DepartureTime.GetHashCode();
                if (this.JourneyType != null)
                    hash = hash * 59 + this.JourneyType.GetHashCode();
                if (this.Legs != null)
                    hash = hash * 59 + this.Legs.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CompleteRoute (string) maxLength
            if(this.CompleteRoute != null && this.CompleteRoute.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompleteRoute, length must be less than 255.", new [] { "CompleteRoute" });
            }

            // DepartureTime (string) maxLength
            if(this.DepartureTime != null && this.DepartureTime.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureTime, length must be less than 25.", new [] { "DepartureTime" });
            }

            // JourneyType (string) maxLength
            if(this.JourneyType != null && this.JourneyType.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JourneyType, length must be less than 32.", new [] { "JourneyType" });
            }

            yield break;
        }
    }

}
