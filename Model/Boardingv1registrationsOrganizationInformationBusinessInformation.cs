/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Boardingv1registrationsOrganizationInformationBusinessInformation
    /// </summary>
    [DataContract]
    public partial class Boardingv1registrationsOrganizationInformationBusinessInformation :  IEquatable<Boardingv1registrationsOrganizationInformationBusinessInformation>, IValidatableObject
    {
        /// <summary>
        /// Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; 
        /// </summary>
        /// <value>Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeZoneEnum
        {
            
            /// <summary>
            /// Enum PacificPagoPago for "Pacific/Pago_Pago"
            /// </summary>
            [EnumMember(Value = "Pacific/Pago_Pago")]
            PacificPagoPago,
            
            /// <summary>
            /// Enum PacificHonolulu for "Pacific/Honolulu"
            /// </summary>
            [EnumMember(Value = "Pacific/Honolulu")]
            PacificHonolulu,
            
            /// <summary>
            /// Enum AmericaAnchorage for "America/Anchorage"
            /// </summary>
            [EnumMember(Value = "America/Anchorage")]
            AmericaAnchorage,
            
            /// <summary>
            /// Enum AmericaVancouver for "America/Vancouver"
            /// </summary>
            [EnumMember(Value = "America/Vancouver")]
            AmericaVancouver,
            
            /// <summary>
            /// Enum AmericaLosAngeles for "America/Los_Angeles"
            /// </summary>
            [EnumMember(Value = "America/Los_Angeles")]
            AmericaLosAngeles,
            
            /// <summary>
            /// Enum AmericaPhoenix for "America/Phoenix"
            /// </summary>
            [EnumMember(Value = "America/Phoenix")]
            AmericaPhoenix,
            
            /// <summary>
            /// Enum AmericaEdmonton for "America/Edmonton"
            /// </summary>
            [EnumMember(Value = "America/Edmonton")]
            AmericaEdmonton,
            
            /// <summary>
            /// Enum AmericaDenver for "America/Denver"
            /// </summary>
            [EnumMember(Value = "America/Denver")]
            AmericaDenver,
            
            /// <summary>
            /// Enum AmericaWinnipeg for "America/Winnipeg"
            /// </summary>
            [EnumMember(Value = "America/Winnipeg")]
            AmericaWinnipeg,
            
            /// <summary>
            /// Enum AmericaMexicoCity for "America/Mexico_City"
            /// </summary>
            [EnumMember(Value = "America/Mexico_City")]
            AmericaMexicoCity,
            
            /// <summary>
            /// Enum AmericaChicago for "America/Chicago"
            /// </summary>
            [EnumMember(Value = "America/Chicago")]
            AmericaChicago,
            
            /// <summary>
            /// Enum AmericaBogota for "America/Bogota"
            /// </summary>
            [EnumMember(Value = "America/Bogota")]
            AmericaBogota,
            
            /// <summary>
            /// Enum AmericaIndianapolis for "America/Indianapolis"
            /// </summary>
            [EnumMember(Value = "America/Indianapolis")]
            AmericaIndianapolis,
            
            /// <summary>
            /// Enum AmericaNewYork for "America/New_York"
            /// </summary>
            [EnumMember(Value = "America/New_York")]
            AmericaNewYork,
            
            /// <summary>
            /// Enum AmericaLaPaz for "America/La_Paz"
            /// </summary>
            [EnumMember(Value = "America/La_Paz")]
            AmericaLaPaz,
            
            /// <summary>
            /// Enum AmericaHalifax for "America/Halifax"
            /// </summary>
            [EnumMember(Value = "America/Halifax")]
            AmericaHalifax,
            
            /// <summary>
            /// Enum AmericaStJohns for "America/St_Johns"
            /// </summary>
            [EnumMember(Value = "America/St_Johns")]
            AmericaStJohns,
            
            /// <summary>
            /// Enum AmericaBuenosAires for "America/Buenos_Aires"
            /// </summary>
            [EnumMember(Value = "America/Buenos_Aires")]
            AmericaBuenosAires,
            
            /// <summary>
            /// Enum AmericaGodthab for "America/Godthab"
            /// </summary>
            [EnumMember(Value = "America/Godthab")]
            AmericaGodthab,
            
            /// <summary>
            /// Enum AmericaSaoPaulo for "America/Sao_Paulo"
            /// </summary>
            [EnumMember(Value = "America/Sao_Paulo")]
            AmericaSaoPaulo,
            
            /// <summary>
            /// Enum AmericaNoronha for "America/Noronha"
            /// </summary>
            [EnumMember(Value = "America/Noronha")]
            AmericaNoronha,
            
            /// <summary>
            /// Enum AtlanticCapeVerde for "Atlantic/Cape_Verde"
            /// </summary>
            [EnumMember(Value = "Atlantic/Cape_Verde")]
            AtlanticCapeVerde,
            
            /// <summary>
            /// Enum GMT for "GMT"
            /// </summary>
            [EnumMember(Value = "GMT")]
            GMT,
            
            /// <summary>
            /// Enum EuropeDublin for "Europe/Dublin"
            /// </summary>
            [EnumMember(Value = "Europe/Dublin")]
            EuropeDublin,
            
            /// <summary>
            /// Enum EuropeLisbon for "Europe/Lisbon"
            /// </summary>
            [EnumMember(Value = "Europe/Lisbon")]
            EuropeLisbon,
            
            /// <summary>
            /// Enum EuropeLondon for "Europe/London"
            /// </summary>
            [EnumMember(Value = "Europe/London")]
            EuropeLondon,
            
            /// <summary>
            /// Enum AfricaTunis for "Africa/Tunis"
            /// </summary>
            [EnumMember(Value = "Africa/Tunis")]
            AfricaTunis,
            
            /// <summary>
            /// Enum EuropeVienna for "Europe/Vienna"
            /// </summary>
            [EnumMember(Value = "Europe/Vienna")]
            EuropeVienna,
            
            /// <summary>
            /// Enum EuropeBrussels for "Europe/Brussels"
            /// </summary>
            [EnumMember(Value = "Europe/Brussels")]
            EuropeBrussels,
            
            /// <summary>
            /// Enum EuropeZurich for "Europe/Zurich"
            /// </summary>
            [EnumMember(Value = "Europe/Zurich")]
            EuropeZurich,
            
            /// <summary>
            /// Enum EuropePrague for "Europe/Prague"
            /// </summary>
            [EnumMember(Value = "Europe/Prague")]
            EuropePrague,
            
            /// <summary>
            /// Enum EuropeBerlin for "Europe/Berlin"
            /// </summary>
            [EnumMember(Value = "Europe/Berlin")]
            EuropeBerlin,
            
            /// <summary>
            /// Enum EuropeCopenhagen for "Europe/Copenhagen"
            /// </summary>
            [EnumMember(Value = "Europe/Copenhagen")]
            EuropeCopenhagen,
            
            /// <summary>
            /// Enum EuropeMadrid for "Europe/Madrid"
            /// </summary>
            [EnumMember(Value = "Europe/Madrid")]
            EuropeMadrid,
            
            /// <summary>
            /// Enum EuropeBudapest for "Europe/Budapest"
            /// </summary>
            [EnumMember(Value = "Europe/Budapest")]
            EuropeBudapest,
            
            /// <summary>
            /// Enum EuropeRome for "Europe/Rome"
            /// </summary>
            [EnumMember(Value = "Europe/Rome")]
            EuropeRome,
            
            /// <summary>
            /// Enum AfricaTripoli for "Africa/Tripoli"
            /// </summary>
            [EnumMember(Value = "Africa/Tripoli")]
            AfricaTripoli,
            
            /// <summary>
            /// Enum EuropeMonaco for "Europe/Monaco"
            /// </summary>
            [EnumMember(Value = "Europe/Monaco")]
            EuropeMonaco,
            
            /// <summary>
            /// Enum EuropeMalta for "Europe/Malta"
            /// </summary>
            [EnumMember(Value = "Europe/Malta")]
            EuropeMalta,
            
            /// <summary>
            /// Enum EuropeAmsterdam for "Europe/Amsterdam"
            /// </summary>
            [EnumMember(Value = "Europe/Amsterdam")]
            EuropeAmsterdam,
            
            /// <summary>
            /// Enum EuropeOslo for "Europe/Oslo"
            /// </summary>
            [EnumMember(Value = "Europe/Oslo")]
            EuropeOslo,
            
            /// <summary>
            /// Enum EuropeWarsaw for "Europe/Warsaw"
            /// </summary>
            [EnumMember(Value = "Europe/Warsaw")]
            EuropeWarsaw,
            
            /// <summary>
            /// Enum EuropeStockholm for "Europe/Stockholm"
            /// </summary>
            [EnumMember(Value = "Europe/Stockholm")]
            EuropeStockholm,
            
            /// <summary>
            /// Enum EuropeBelgrade for "Europe/Belgrade"
            /// </summary>
            [EnumMember(Value = "Europe/Belgrade")]
            EuropeBelgrade,
            
            /// <summary>
            /// Enum EuropeParis for "Europe/Paris"
            /// </summary>
            [EnumMember(Value = "Europe/Paris")]
            EuropeParis,
            
            /// <summary>
            /// Enum AfricaJohannesburg for "Africa/Johannesburg"
            /// </summary>
            [EnumMember(Value = "Africa/Johannesburg")]
            AfricaJohannesburg,
            
            /// <summary>
            /// Enum EuropeMinsk for "Europe/Minsk"
            /// </summary>
            [EnumMember(Value = "Europe/Minsk")]
            EuropeMinsk,
            
            /// <summary>
            /// Enum AfricaCairo for "Africa/Cairo"
            /// </summary>
            [EnumMember(Value = "Africa/Cairo")]
            AfricaCairo,
            
            /// <summary>
            /// Enum EuropeHelsinki for "Europe/Helsinki"
            /// </summary>
            [EnumMember(Value = "Europe/Helsinki")]
            EuropeHelsinki,
            
            /// <summary>
            /// Enum EuropeAthens for "Europe/Athens"
            /// </summary>
            [EnumMember(Value = "Europe/Athens")]
            EuropeAthens,
            
            /// <summary>
            /// Enum AsiaJerusalem for "Asia/Jerusalem"
            /// </summary>
            [EnumMember(Value = "Asia/Jerusalem")]
            AsiaJerusalem,
            
            /// <summary>
            /// Enum EuropeRiga for "Europe/Riga"
            /// </summary>
            [EnumMember(Value = "Europe/Riga")]
            EuropeRiga,
            
            /// <summary>
            /// Enum EuropeBucharest for "Europe/Bucharest"
            /// </summary>
            [EnumMember(Value = "Europe/Bucharest")]
            EuropeBucharest,
            
            /// <summary>
            /// Enum EuropeIstanbul for "Europe/Istanbul"
            /// </summary>
            [EnumMember(Value = "Europe/Istanbul")]
            EuropeIstanbul,
            
            /// <summary>
            /// Enum AsiaRiyadh for "Asia/Riyadh"
            /// </summary>
            [EnumMember(Value = "Asia/Riyadh")]
            AsiaRiyadh,
            
            /// <summary>
            /// Enum EuropeMoscow for "Europe/Moscow"
            /// </summary>
            [EnumMember(Value = "Europe/Moscow")]
            EuropeMoscow,
            
            /// <summary>
            /// Enum AsiaDubai for "Asia/Dubai"
            /// </summary>
            [EnumMember(Value = "Asia/Dubai")]
            AsiaDubai,
            
            /// <summary>
            /// Enum AsiaBaku for "Asia/Baku"
            /// </summary>
            [EnumMember(Value = "Asia/Baku")]
            AsiaBaku,
            
            /// <summary>
            /// Enum AsiaTbilisi for "Asia/Tbilisi"
            /// </summary>
            [EnumMember(Value = "Asia/Tbilisi")]
            AsiaTbilisi,
            
            /// <summary>
            /// Enum AsiaCalcutta for "Asia/Calcutta"
            /// </summary>
            [EnumMember(Value = "Asia/Calcutta")]
            AsiaCalcutta,
            
            /// <summary>
            /// Enum AsiaKatmandu for "Asia/Katmandu"
            /// </summary>
            [EnumMember(Value = "Asia/Katmandu")]
            AsiaKatmandu,
            
            /// <summary>
            /// Enum AsiaDacca for "Asia/Dacca"
            /// </summary>
            [EnumMember(Value = "Asia/Dacca")]
            AsiaDacca,
            
            /// <summary>
            /// Enum AsiaRangoon for "Asia/Rangoon"
            /// </summary>
            [EnumMember(Value = "Asia/Rangoon")]
            AsiaRangoon,
            
            /// <summary>
            /// Enum AsiaJakarta for "Asia/Jakarta"
            /// </summary>
            [EnumMember(Value = "Asia/Jakarta")]
            AsiaJakarta,
            
            /// <summary>
            /// Enum AsiaSaigon for "Asia/Saigon"
            /// </summary>
            [EnumMember(Value = "Asia/Saigon")]
            AsiaSaigon,
            
            /// <summary>
            /// Enum AsiaBangkok for "Asia/Bangkok"
            /// </summary>
            [EnumMember(Value = "Asia/Bangkok")]
            AsiaBangkok,
            
            /// <summary>
            /// Enum AustraliaPerth for "Australia/Perth"
            /// </summary>
            [EnumMember(Value = "Australia/Perth")]
            AustraliaPerth,
            
            /// <summary>
            /// Enum AsiaHongKong for "Asia/Hong_Kong"
            /// </summary>
            [EnumMember(Value = "Asia/Hong_Kong")]
            AsiaHongKong,
            
            /// <summary>
            /// Enum AsiaMacao for "Asia/Macao"
            /// </summary>
            [EnumMember(Value = "Asia/Macao")]
            AsiaMacao,
            
            /// <summary>
            /// Enum AsiaKualaLumpur for "Asia/Kuala_Lumpur"
            /// </summary>
            [EnumMember(Value = "Asia/Kuala_Lumpur")]
            AsiaKualaLumpur,
            
            /// <summary>
            /// Enum AsiaManila for "Asia/Manila"
            /// </summary>
            [EnumMember(Value = "Asia/Manila")]
            AsiaManila,
            
            /// <summary>
            /// Enum AsiaSingapore for "Asia/Singapore"
            /// </summary>
            [EnumMember(Value = "Asia/Singapore")]
            AsiaSingapore,
            
            /// <summary>
            /// Enum AsiaTaipei for "Asia/Taipei"
            /// </summary>
            [EnumMember(Value = "Asia/Taipei")]
            AsiaTaipei,
            
            /// <summary>
            /// Enum AsiaShanghai for "Asia/Shanghai"
            /// </summary>
            [EnumMember(Value = "Asia/Shanghai")]
            AsiaShanghai,
            
            /// <summary>
            /// Enum AsiaSeoul for "Asia/Seoul"
            /// </summary>
            [EnumMember(Value = "Asia/Seoul")]
            AsiaSeoul,
            
            /// <summary>
            /// Enum AsiaTokyo for "Asia/Tokyo"
            /// </summary>
            [EnumMember(Value = "Asia/Tokyo")]
            AsiaTokyo,
            
            /// <summary>
            /// Enum AsiaYakutsk for "Asia/Yakutsk"
            /// </summary>
            [EnumMember(Value = "Asia/Yakutsk")]
            AsiaYakutsk,
            
            /// <summary>
            /// Enum AustraliaAdelaide for "Australia/Adelaide"
            /// </summary>
            [EnumMember(Value = "Australia/Adelaide")]
            AustraliaAdelaide,
            
            /// <summary>
            /// Enum AustraliaBrisbane for "Australia/Brisbane"
            /// </summary>
            [EnumMember(Value = "Australia/Brisbane")]
            AustraliaBrisbane,
            
            /// <summary>
            /// Enum AustraliaBrokenHill for "Australia/Broken_Hill"
            /// </summary>
            [EnumMember(Value = "Australia/Broken_Hill")]
            AustraliaBrokenHill,
            
            /// <summary>
            /// Enum AustraliaDarwin for "Australia/Darwin"
            /// </summary>
            [EnumMember(Value = "Australia/Darwin")]
            AustraliaDarwin,
            
            /// <summary>
            /// Enum AustraliaEucla for "Australia/Eucla"
            /// </summary>
            [EnumMember(Value = "Australia/Eucla")]
            AustraliaEucla,
            
            /// <summary>
            /// Enum AustraliaHobart for "Australia/Hobart"
            /// </summary>
            [EnumMember(Value = "Australia/Hobart")]
            AustraliaHobart,
            
            /// <summary>
            /// Enum AustraliaLindeman for "Australia/Lindeman"
            /// </summary>
            [EnumMember(Value = "Australia/Lindeman")]
            AustraliaLindeman,
            
            /// <summary>
            /// Enum AustraliaSydney for "Australia/Sydney"
            /// </summary>
            [EnumMember(Value = "Australia/Sydney")]
            AustraliaSydney,
            
            /// <summary>
            /// Enum AustraliaLordHowe for "Australia/Lord_Howe"
            /// </summary>
            [EnumMember(Value = "Australia/Lord_Howe")]
            AustraliaLordHowe,
            
            /// <summary>
            /// Enum AustraliaMelbourne for "Australia/Melbourne"
            /// </summary>
            [EnumMember(Value = "Australia/Melbourne")]
            AustraliaMelbourne,
            
            /// <summary>
            /// Enum AsiaMagadan for "Asia/Magadan"
            /// </summary>
            [EnumMember(Value = "Asia/Magadan")]
            AsiaMagadan,
            
            /// <summary>
            /// Enum PacificNorfolk for "Pacific/Norfolk"
            /// </summary>
            [EnumMember(Value = "Pacific/Norfolk")]
            PacificNorfolk,
            
            /// <summary>
            /// Enum PacificAuckland for "Pacific/Auckland"
            /// </summary>
            [EnumMember(Value = "Pacific/Auckland")]
            PacificAuckland
        }
        /// <summary>
        /// Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; 
        /// </summary>
        /// <value>Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum PARTNERSHIP for "PARTNERSHIP"
            /// </summary>
            [EnumMember(Value = "PARTNERSHIP")]
            PARTNERSHIP,
            
            /// <summary>
            /// Enum SOLEPROPRIETORSHIP for "SOLE_PROPRIETORSHIP"
            /// </summary>
            [EnumMember(Value = "SOLE_PROPRIETORSHIP")]
            SOLEPROPRIETORSHIP,
            
            /// <summary>
            /// Enum CORPORATION for "CORPORATION"
            /// </summary>
            [EnumMember(Value = "CORPORATION")]
            CORPORATION,
            
            /// <summary>
            /// Enum LLC for "LLC"
            /// </summary>
            [EnumMember(Value = "LLC")]
            LLC,
            
            /// <summary>
            /// Enum NONPROFIT for "NON_PROFIT"
            /// </summary>
            [EnumMember(Value = "NON_PROFIT")]
            NONPROFIT,
            
            /// <summary>
            /// Enum TRUST for "TRUST"
            /// </summary>
            [EnumMember(Value = "TRUST")]
            TRUST
        }
        /// <summary>
        /// Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; 
        /// </summary>
        /// <value>Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; </value>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public TimeZoneEnum? TimeZone { get; set; }
        /// <summary>
        /// Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; 
        /// </summary>
        /// <value>Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationBusinessInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Boardingv1registrationsOrganizationInformationBusinessInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationBusinessInformation" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="DoingBusinessAs">DoingBusinessAs.</param>
        /// <param name="Description">Description.</param>
        /// <param name="StartDate">&#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 .</param>
        /// <param name="Address">Address.</param>
        /// <param name="TimeZone">Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; .</param>
        /// <param name="WebsiteUrl">WebsiteUrl.</param>
        /// <param name="Type">Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; .</param>
        /// <param name="TaxId">TaxId.</param>
        /// <param name="PhoneNumber">PhoneNumber.</param>
        /// <param name="BusinessContact">BusinessContact.</param>
        /// <param name="TechnicalContact">TechnicalContact.</param>
        /// <param name="EmergencyContact">EmergencyContact.</param>
        /// <param name="MerchantCategoryCode">Industry standard Merchant Category Code (MCC).</param>
        public Boardingv1registrationsOrganizationInformationBusinessInformation(string Name = default(string), string DoingBusinessAs = default(string), string Description = default(string), DateTime? StartDate = default(DateTime?), Boardingv1registrationsOrganizationInformationBusinessInformationAddress Address = default(Boardingv1registrationsOrganizationInformationBusinessInformationAddress), TimeZoneEnum? TimeZone = default(TimeZoneEnum?), string WebsiteUrl = default(string), TypeEnum? Type = default(TypeEnum?), string TaxId = default(string), string PhoneNumber = default(string), Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact BusinessContact = default(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact), Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact TechnicalContact = default(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact), Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact EmergencyContact = default(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact), string MerchantCategoryCode = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Boardingv1registrationsOrganizationInformationBusinessInformation and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.DoingBusinessAs = DoingBusinessAs;
            this.Description = Description;
            this.StartDate = StartDate;
            this.Address = Address;
            this.TimeZone = TimeZone;
            this.WebsiteUrl = WebsiteUrl;
            this.Type = Type;
            this.TaxId = TaxId;
            this.PhoneNumber = PhoneNumber;
            this.BusinessContact = BusinessContact;
            this.TechnicalContact = TechnicalContact;
            this.EmergencyContact = EmergencyContact;
            this.MerchantCategoryCode = MerchantCategoryCode;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DoingBusinessAs
        /// </summary>
        [DataMember(Name="doingBusinessAs", EmitDefaultValue=false)]
        public string DoingBusinessAs { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// &#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 
        /// </summary>
        /// <value>&#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 </value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationAddress Address { get; set; }


        /// <summary>
        /// Gets or Sets WebsiteUrl
        /// </summary>
        [DataMember(Name="websiteUrl", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }


        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name="taxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets BusinessContact
        /// </summary>
        [DataMember(Name="businessContact", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact BusinessContact { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalContact
        /// </summary>
        [DataMember(Name="technicalContact", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact TechnicalContact { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyContact
        /// </summary>
        [DataMember(Name="emergencyContact", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact EmergencyContact { get; set; }

        /// <summary>
        /// Industry standard Merchant Category Code (MCC)
        /// </summary>
        /// <value>Industry standard Merchant Category Code (MCC)</value>
        [DataMember(Name="merchantCategoryCode", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Boardingv1registrationsOrganizationInformationBusinessInformation {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DoingBusinessAs: ").Append(DoingBusinessAs).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  BusinessContact: ").Append(BusinessContact).Append("\n");
            sb.Append("  TechnicalContact: ").Append(TechnicalContact).Append("\n");
            sb.Append("  EmergencyContact: ").Append(EmergencyContact).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Boardingv1registrationsOrganizationInformationBusinessInformation);
        }

        /// <summary>
        /// Returns true if Boardingv1registrationsOrganizationInformationBusinessInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Boardingv1registrationsOrganizationInformationBusinessInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Boardingv1registrationsOrganizationInformationBusinessInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DoingBusinessAs == other.DoingBusinessAs ||
                    this.DoingBusinessAs != null &&
                    this.DoingBusinessAs.Equals(other.DoingBusinessAs)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.TimeZone == other.TimeZone ||
                    this.TimeZone != null &&
                    this.TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TaxId == other.TaxId ||
                    this.TaxId != null &&
                    this.TaxId.Equals(other.TaxId)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.BusinessContact == other.BusinessContact ||
                    this.BusinessContact != null &&
                    this.BusinessContact.Equals(other.BusinessContact)
                ) && 
                (
                    this.TechnicalContact == other.TechnicalContact ||
                    this.TechnicalContact != null &&
                    this.TechnicalContact.Equals(other.TechnicalContact)
                ) && 
                (
                    this.EmergencyContact == other.EmergencyContact ||
                    this.EmergencyContact != null &&
                    this.EmergencyContact.Equals(other.EmergencyContact)
                ) && 
                (
                    this.MerchantCategoryCode == other.MerchantCategoryCode ||
                    this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(other.MerchantCategoryCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DoingBusinessAs != null)
                    hash = hash * 59 + this.DoingBusinessAs.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.TimeZone != null)
                    hash = hash * 59 + this.TimeZone.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TaxId != null)
                    hash = hash * 59 + this.TaxId.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.BusinessContact != null)
                    hash = hash * 59 + this.BusinessContact.GetHashCode();
                if (this.TechnicalContact != null)
                    hash = hash * 59 + this.TechnicalContact.GetHashCode();
                if (this.EmergencyContact != null)
                    hash = hash * 59 + this.EmergencyContact.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hash = hash * 59 + this.MerchantCategoryCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) pattern
            //Regex regexName = new Regex(@"^[0-9a-zA-Z _\\-\\+\\.\\*\\\"\/'&\\,\\(\\)!$;:?@\\#¡-￿]+$", RegexOptions.CultureInvariant);
            //if (false == regexName.Match(this.Name).Success)
            //{
            //    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            //}

            // DoingBusinessAs (string) pattern
            //Regex regexDoingBusinessAs = new Regex(@"^[0-9a-zA-Z _\\-\\+\\.\\*\\\"\/'&\\,\\(\\)!$;:?@\\#¡-￿]+$", RegexOptions.CultureInvariant);
            //if (false == regexDoingBusinessAs.Match(this.DoingBusinessAs).Success)
            //{
            //    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DoingBusinessAs, must match a pattern of " + regexDoingBusinessAs, new [] { "DoingBusinessAs" });
            //}

            // Description (string) pattern
            Regex regexDescription = new Regex(@"[À-ÖØ-öø-ǿÀ-ÖØ-öø-ǿ\\n\\ra-zA-Z0-9().\\-_#,;\/\\\\@$:&amp;!?%«»€₣«»€₣ ]{1,}$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // WebsiteUrl (string) pattern
            //Regex regexWebsiteUrl = new Regex(@"\\b((?:https?:\/\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?Â«Â»â€œâ€â€˜â€™]))", RegexOptions.CultureInvariant);
            //if (false == regexWebsiteUrl.Match(this.WebsiteUrl).Success)
            //{
            //    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebsiteUrl, must match a pattern of " + regexWebsiteUrl, new [] { "WebsiteUrl" });
            //}

            // TaxId (string) pattern
            Regex regexTaxId = new Regex(@"\\d{9}", RegexOptions.CultureInvariant);
            if (false == regexTaxId.Match(this.TaxId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxId, must match a pattern of " + regexTaxId, new [] { "TaxId" });
            }

            // PhoneNumber (string) pattern
            Regex regexPhoneNumber = new Regex(@"^[0-9a-zA-Z\\\\+\\\\-]+$", RegexOptions.CultureInvariant);
            if (false == regexPhoneNumber.Match(this.PhoneNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, must match a pattern of " + regexPhoneNumber, new [] { "PhoneNumber" });
            }

            // MerchantCategoryCode (string) pattern
            Regex regexMerchantCategoryCode = new Regex(@"^\\d{3,4}$", RegexOptions.CultureInvariant);
            if (false == regexMerchantCategoryCode.Match(this.MerchantCategoryCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryCode, must match a pattern of " + regexMerchantCategoryCode, new [] { "MerchantCategoryCode" });
            }

            yield break;
        }
    }

}
