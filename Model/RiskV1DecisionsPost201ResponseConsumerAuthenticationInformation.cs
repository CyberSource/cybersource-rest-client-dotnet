/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation
    /// </summary>
    [DataContract]
    public partial class RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation :  IEquatable<RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation" /> class.
        /// </summary>
        /// <param name="AccessToken">JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay. Note - Max Length of this field is 2048 characters. .</param>
        /// <param name="AcsRenderingType">Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. .</param>
        /// <param name="AcsTransactionId">Unique transaction identifier assigned by the ACS to identify a single transaction. .</param>
        /// <param name="AcsUrl">URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large. .</param>
        /// <param name="AuthenticationPath">Indicates what displays to the customer during the authentication process. This field can contain one of these values: - &#x60;ADS&#x60;: (Card not enrolled) customer prompted to activate the card during the checkout process. - &#x60;ATTEMPTS&#x60;: (Attempts processing) Processing briefly displays before the checkout process is completed. - &#x60;ENROLLED&#x60;: (Card enrolled) the card issuer’s authentication window displays. - &#x60;UNKNOWN&#x60;: Card enrollment status cannot be determined. - &#x60;NOREDIRECT&#x60;: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - &#x60;RIBA&#x60;: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - &#x60;RIBA_PASS&#x60;: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see &#x60;pa_enroll_authentication_path&#x60; field description and \&quot;Rules-Based Payer Authentication\&quot; in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) .</param>
        /// <param name="AuthorizationPayload">The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow .</param>
        /// <param name="AuthenticationType">Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled  20 - OTP hosted at merchant end. (Rupay S2S flow) **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. .</param>
        /// <param name="AuthenticationTransactionId">Payer authentication transaction identifier is used to link the check enrollment and validate authentication messages. For Rupay, this field should be passed as request only for Resend OTP use case. .</param>
        /// <param name="AuthenticationTransactionContextId">Payer authentication transaction identifier passed to link the validation and authorization calls. .</param>
        /// <param name="ValidityPeriod">Describes validity of OTP in minutes for incoming transaction.        . .</param>
        /// <param name="CardholderMessage">Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction.The Issuer can provide information to Cardholder. For example, “Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.”. The Issuing Bank can optionally support this value. .</param>
        /// <param name="Cavv">Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. .</param>
        /// <param name="CavvAlgorithm">Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard .</param>
        /// <param name="ChallengeCancelCode">An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK .</param>
        /// <param name="ChallengeRequired">Indicates whether a challenge is required in order to complete authentication. **Note** Regional mandates might determine that a challenge is required.  Possible values: - &#x60;Y&#x60;: Challenge required - &#x60;N&#x60;: Challenge not required **Note**  Used by the Hybrid integration. .</param>
        /// <param name="DecoupledAuthenticationIndicator">Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N .</param>
        /// <param name="DirectoryServerErrorCode">The directory server error code indicating a problem with this transaction. Note - Max Length of this field is typically 3 characters. .</param>
        /// <param name="DirectoryServerErrorDescription">Directory server text and additional detail about the error for this transaction. .</param>
        /// <param name="EcommerceIndicator">Commerce indicator for cards not enrolled. This field contains one of these values: - &#x60;internet&#x60;: Card not enrolled, or card type not supported by payer authentication. No liability shift. - &#x60;js_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;js_failure&#x60;: J/Secure directory service is not available. No liability shift. - &#x60;spa&#x60;: Mastercard card not enrolled in the SecureCode program. No liability shift. - &#x60;vbv_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;vbv_failure&#x60;: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift. .</param>
        /// <param name="Eci">Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) .</param>
        /// <param name="EciRaw">ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) .</param>
        /// <param name="EffectiveAuthenticationType">This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). .</param>
        /// <param name="Ivr">Ivr.</param>
        /// <param name="NetworkScore">The global score calculated by the CB scoring platform and returned to merchants. .</param>
        /// <param name="Pareq">Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64. .</param>
        /// <param name="ParesStatus">Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. .</param>
        /// <param name="ProofXml">Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the &#x60;pa_enroll_proofxml&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback. .</param>
        /// <param name="ProxyPan">Encrypted version of the card number used in the payer authentication request message. .</param>
        /// <param name="SdkTransactionId">SDK unique transaction identifier that is generated on each new transaction. .</param>
        /// <param name="SignedParesStatusReason">Provides additional information as to why the PAResStatus has a specific value. .</param>
        /// <param name="SpecificationVersion">This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0. .</param>
        /// <param name="StepUpUrl">The fully qualified URL that the merchant uses to post a form to the cardholder in order to complete the Consumer Authentication transaction for the Cardinal Cruise API integration. .</param>
        /// <param name="ThreeDSServerTransactionId">Unique transaction identifier assigned by the 3DS Server to identify a single transaction. .</param>
        /// <param name="UcafAuthenticationData">AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. .</param>
        /// <param name="UcafCollectionIndicator">For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. .</param>
        /// <param name="VeresEnrolled">Result of the enrollment check. This field can contain one of these values: - &#x60;Y&#x60;: Card enrolled or can be enrolled; you must authenticate. Liability shift. - &#x60;N&#x60;: Card not enrolled; proceed with authorization. Liability shift. - &#x60;U&#x60;: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - &#x60;B&#x60;: Indicates that authentication was bypassed.  For details, see &#x60;pa_enroll_veres_enrolled&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) .</param>
        /// <param name="WhiteListStatusSource">This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS .</param>
        /// <param name="Xid">Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) .</param>
        /// <param name="DirectoryServerTransactionId">The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID .</param>
        public RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation(string AccessToken = default(string), string AcsRenderingType = default(string), string AcsTransactionId = default(string), string AcsUrl = default(string), string AuthenticationPath = default(string), string AuthorizationPayload = default(string), string AuthenticationType = default(string), string AuthenticationTransactionId = default(string), string AuthenticationTransactionContextId = default(string), int? ValidityPeriod = default(int?), string CardholderMessage = default(string), string Cavv = default(string), string CavvAlgorithm = default(string), string ChallengeCancelCode = default(string), string ChallengeRequired = default(string), string DecoupledAuthenticationIndicator = default(string), string DirectoryServerErrorCode = default(string), string DirectoryServerErrorDescription = default(string), string EcommerceIndicator = default(string), string Eci = default(string), string EciRaw = default(string), string EffectiveAuthenticationType = default(string), PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr Ivr = default(PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr), string NetworkScore = default(string), string Pareq = default(string), string ParesStatus = default(string), string ProofXml = default(string), string ProxyPan = default(string), string SdkTransactionId = default(string), string SignedParesStatusReason = default(string), string SpecificationVersion = default(string), string StepUpUrl = default(string), string ThreeDSServerTransactionId = default(string), string UcafAuthenticationData = default(string), string UcafCollectionIndicator = default(string), string VeresEnrolled = default(string), string WhiteListStatusSource = default(string), string Xid = default(string), string DirectoryServerTransactionId = default(string))
        {
            this.AccessToken = AccessToken;
            this.AcsRenderingType = AcsRenderingType;
            this.AcsTransactionId = AcsTransactionId;
            this.AcsUrl = AcsUrl;
            this.AuthenticationPath = AuthenticationPath;
            this.AuthorizationPayload = AuthorizationPayload;
            this.AuthenticationType = AuthenticationType;
            this.AuthenticationTransactionId = AuthenticationTransactionId;
            this.AuthenticationTransactionContextId = AuthenticationTransactionContextId;
            this.ValidityPeriod = ValidityPeriod;
            this.CardholderMessage = CardholderMessage;
            this.Cavv = Cavv;
            this.CavvAlgorithm = CavvAlgorithm;
            this.ChallengeCancelCode = ChallengeCancelCode;
            this.ChallengeRequired = ChallengeRequired;
            this.DecoupledAuthenticationIndicator = DecoupledAuthenticationIndicator;
            this.DirectoryServerErrorCode = DirectoryServerErrorCode;
            this.DirectoryServerErrorDescription = DirectoryServerErrorDescription;
            this.EcommerceIndicator = EcommerceIndicator;
            this.Eci = Eci;
            this.EciRaw = EciRaw;
            this.EffectiveAuthenticationType = EffectiveAuthenticationType;
            this.Ivr = Ivr;
            this.NetworkScore = NetworkScore;
            this.Pareq = Pareq;
            this.ParesStatus = ParesStatus;
            this.ProofXml = ProofXml;
            this.ProxyPan = ProxyPan;
            this.SdkTransactionId = SdkTransactionId;
            this.SignedParesStatusReason = SignedParesStatusReason;
            this.SpecificationVersion = SpecificationVersion;
            this.StepUpUrl = StepUpUrl;
            this.ThreeDSServerTransactionId = ThreeDSServerTransactionId;
            this.UcafAuthenticationData = UcafAuthenticationData;
            this.UcafCollectionIndicator = UcafCollectionIndicator;
            this.VeresEnrolled = VeresEnrolled;
            this.WhiteListStatusSource = WhiteListStatusSource;
            this.Xid = Xid;
            this.DirectoryServerTransactionId = DirectoryServerTransactionId;
        }
        
        /// <summary>
        /// JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay. Note - Max Length of this field is 2048 characters. 
        /// </summary>
        /// <value>JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay. Note - Max Length of this field is 2048 characters. </value>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. 
        /// </summary>
        /// <value>Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. </value>
        [DataMember(Name="acsRenderingType", EmitDefaultValue=false)]
        public string AcsRenderingType { get; set; }

        /// <summary>
        /// Unique transaction identifier assigned by the ACS to identify a single transaction. 
        /// </summary>
        /// <value>Unique transaction identifier assigned by the ACS to identify a single transaction. </value>
        [DataMember(Name="acsTransactionId", EmitDefaultValue=false)]
        public string AcsTransactionId { get; set; }

        /// <summary>
        /// URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large. 
        /// </summary>
        /// <value>URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large. </value>
        [DataMember(Name="acsUrl", EmitDefaultValue=false)]
        public string AcsUrl { get; set; }

        /// <summary>
        /// Indicates what displays to the customer during the authentication process. This field can contain one of these values: - &#x60;ADS&#x60;: (Card not enrolled) customer prompted to activate the card during the checkout process. - &#x60;ATTEMPTS&#x60;: (Attempts processing) Processing briefly displays before the checkout process is completed. - &#x60;ENROLLED&#x60;: (Card enrolled) the card issuer’s authentication window displays. - &#x60;UNKNOWN&#x60;: Card enrollment status cannot be determined. - &#x60;NOREDIRECT&#x60;: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - &#x60;RIBA&#x60;: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - &#x60;RIBA_PASS&#x60;: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see &#x60;pa_enroll_authentication_path&#x60; field description and \&quot;Rules-Based Payer Authentication\&quot; in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) 
        /// </summary>
        /// <value>Indicates what displays to the customer during the authentication process. This field can contain one of these values: - &#x60;ADS&#x60;: (Card not enrolled) customer prompted to activate the card during the checkout process. - &#x60;ATTEMPTS&#x60;: (Attempts processing) Processing briefly displays before the checkout process is completed. - &#x60;ENROLLED&#x60;: (Card enrolled) the card issuer’s authentication window displays. - &#x60;UNKNOWN&#x60;: Card enrollment status cannot be determined. - &#x60;NOREDIRECT&#x60;: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - &#x60;RIBA&#x60;: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - &#x60;RIBA_PASS&#x60;: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see &#x60;pa_enroll_authentication_path&#x60; field description and \&quot;Rules-Based Payer Authentication\&quot; in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) </value>
        [DataMember(Name="authenticationPath", EmitDefaultValue=false)]
        public string AuthenticationPath { get; set; }

        /// <summary>
        /// The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow 
        /// </summary>
        /// <value>The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow </value>
        [DataMember(Name="authorizationPayload", EmitDefaultValue=false)]
        public string AuthorizationPayload { get; set; }

        /// <summary>
        /// Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled  20 - OTP hosted at merchant end. (Rupay S2S flow) **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. 
        /// </summary>
        /// <value>Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled  20 - OTP hosted at merchant end. (Rupay S2S flow) **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. </value>
        [DataMember(Name="authenticationType", EmitDefaultValue=false)]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Payer authentication transaction identifier is used to link the check enrollment and validate authentication messages. For Rupay, this field should be passed as request only for Resend OTP use case. 
        /// </summary>
        /// <value>Payer authentication transaction identifier is used to link the check enrollment and validate authentication messages. For Rupay, this field should be passed as request only for Resend OTP use case. </value>
        [DataMember(Name="authenticationTransactionId", EmitDefaultValue=false)]
        public string AuthenticationTransactionId { get; set; }

        /// <summary>
        /// Payer authentication transaction identifier passed to link the validation and authorization calls. 
        /// </summary>
        /// <value>Payer authentication transaction identifier passed to link the validation and authorization calls. </value>
        [DataMember(Name="authenticationTransactionContextId", EmitDefaultValue=false)]
        public string AuthenticationTransactionContextId { get; set; }

        /// <summary>
        /// Describes validity of OTP in minutes for incoming transaction.        . 
        /// </summary>
        /// <value>Describes validity of OTP in minutes for incoming transaction.        . </value>
        [DataMember(Name="validityPeriod", EmitDefaultValue=false)]
        public int? ValidityPeriod { get; set; }

        /// <summary>
        /// Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction.The Issuer can provide information to Cardholder. For example, “Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.”. The Issuing Bank can optionally support this value. 
        /// </summary>
        /// <value>Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction.The Issuer can provide information to Cardholder. For example, “Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.”. The Issuing Bank can optionally support this value. </value>
        [DataMember(Name="cardholderMessage", EmitDefaultValue=false)]
        public string CardholderMessage { get; set; }

        /// <summary>
        /// Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 
        /// </summary>
        /// <value>Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. </value>
        [DataMember(Name="cavv", EmitDefaultValue=false)]
        public string Cavv { get; set; }

        /// <summary>
        /// Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard 
        /// </summary>
        /// <value>Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard </value>
        [DataMember(Name="cavvAlgorithm", EmitDefaultValue=false)]
        public string CavvAlgorithm { get; set; }

        /// <summary>
        /// An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK 
        /// </summary>
        /// <value>An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK </value>
        [DataMember(Name="challengeCancelCode", EmitDefaultValue=false)]
        public string ChallengeCancelCode { get; set; }

        /// <summary>
        /// Indicates whether a challenge is required in order to complete authentication. **Note** Regional mandates might determine that a challenge is required.  Possible values: - &#x60;Y&#x60;: Challenge required - &#x60;N&#x60;: Challenge not required **Note**  Used by the Hybrid integration. 
        /// </summary>
        /// <value>Indicates whether a challenge is required in order to complete authentication. **Note** Regional mandates might determine that a challenge is required.  Possible values: - &#x60;Y&#x60;: Challenge required - &#x60;N&#x60;: Challenge not required **Note**  Used by the Hybrid integration. </value>
        [DataMember(Name="challengeRequired", EmitDefaultValue=false)]
        public string ChallengeRequired { get; set; }

        /// <summary>
        /// Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N 
        /// </summary>
        /// <value>Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N </value>
        [DataMember(Name="decoupledAuthenticationIndicator", EmitDefaultValue=false)]
        public string DecoupledAuthenticationIndicator { get; set; }

        /// <summary>
        /// The directory server error code indicating a problem with this transaction. Note - Max Length of this field is typically 3 characters. 
        /// </summary>
        /// <value>The directory server error code indicating a problem with this transaction. Note - Max Length of this field is typically 3 characters. </value>
        [DataMember(Name="directoryServerErrorCode", EmitDefaultValue=false)]
        public string DirectoryServerErrorCode { get; set; }

        /// <summary>
        /// Directory server text and additional detail about the error for this transaction. 
        /// </summary>
        /// <value>Directory server text and additional detail about the error for this transaction. </value>
        [DataMember(Name="directoryServerErrorDescription", EmitDefaultValue=false)]
        public string DirectoryServerErrorDescription { get; set; }

        /// <summary>
        /// Commerce indicator for cards not enrolled. This field contains one of these values: - &#x60;internet&#x60;: Card not enrolled, or card type not supported by payer authentication. No liability shift. - &#x60;js_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;js_failure&#x60;: J/Secure directory service is not available. No liability shift. - &#x60;spa&#x60;: Mastercard card not enrolled in the SecureCode program. No liability shift. - &#x60;vbv_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;vbv_failure&#x60;: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift. 
        /// </summary>
        /// <value>Commerce indicator for cards not enrolled. This field contains one of these values: - &#x60;internet&#x60;: Card not enrolled, or card type not supported by payer authentication. No liability shift. - &#x60;js_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;js_failure&#x60;: J/Secure directory service is not available. No liability shift. - &#x60;spa&#x60;: Mastercard card not enrolled in the SecureCode program. No liability shift. - &#x60;vbv_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;vbv_failure&#x60;: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift. </value>
        [DataMember(Name="ecommerceIndicator", EmitDefaultValue=false)]
        public string EcommerceIndicator { get; set; }

        /// <summary>
        /// Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) 
        /// </summary>
        /// <value>Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) </value>
        [DataMember(Name="eci", EmitDefaultValue=false)]
        public string Eci { get; set; }

        /// <summary>
        /// ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) 
        /// </summary>
        /// <value>ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) </value>
        [DataMember(Name="eciRaw", EmitDefaultValue=false)]
        public string EciRaw { get; set; }

        /// <summary>
        /// This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). 
        /// </summary>
        /// <value>This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). </value>
        [DataMember(Name="effectiveAuthenticationType", EmitDefaultValue=false)]
        public string EffectiveAuthenticationType { get; set; }

        /// <summary>
        /// Gets or Sets Ivr
        /// </summary>
        [DataMember(Name="ivr", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr Ivr { get; set; }

        /// <summary>
        /// The global score calculated by the CB scoring platform and returned to merchants. 
        /// </summary>
        /// <value>The global score calculated by the CB scoring platform and returned to merchants. </value>
        [DataMember(Name="networkScore", EmitDefaultValue=false)]
        public string NetworkScore { get; set; }

        /// <summary>
        /// Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64. 
        /// </summary>
        /// <value>Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64. </value>
        [DataMember(Name="pareq", EmitDefaultValue=false)]
        public string Pareq { get; set; }

        /// <summary>
        /// Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. 
        /// </summary>
        /// <value>Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. </value>
        [DataMember(Name="paresStatus", EmitDefaultValue=false)]
        public string ParesStatus { get; set; }

        /// <summary>
        /// Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the &#x60;pa_enroll_proofxml&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback. 
        /// </summary>
        /// <value>Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the &#x60;pa_enroll_proofxml&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback. </value>
        [DataMember(Name="proofXml", EmitDefaultValue=false)]
        public string ProofXml { get; set; }

        /// <summary>
        /// Encrypted version of the card number used in the payer authentication request message. 
        /// </summary>
        /// <value>Encrypted version of the card number used in the payer authentication request message. </value>
        [DataMember(Name="proxyPan", EmitDefaultValue=false)]
        public string ProxyPan { get; set; }

        /// <summary>
        /// SDK unique transaction identifier that is generated on each new transaction. 
        /// </summary>
        /// <value>SDK unique transaction identifier that is generated on each new transaction. </value>
        [DataMember(Name="sdkTransactionId", EmitDefaultValue=false)]
        public string SdkTransactionId { get; set; }

        /// <summary>
        /// Provides additional information as to why the PAResStatus has a specific value. 
        /// </summary>
        /// <value>Provides additional information as to why the PAResStatus has a specific value. </value>
        [DataMember(Name="signedParesStatusReason", EmitDefaultValue=false)]
        public string SignedParesStatusReason { get; set; }

        /// <summary>
        /// This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0. 
        /// </summary>
        /// <value>This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0. </value>
        [DataMember(Name="specificationVersion", EmitDefaultValue=false)]
        public string SpecificationVersion { get; set; }

        /// <summary>
        /// The fully qualified URL that the merchant uses to post a form to the cardholder in order to complete the Consumer Authentication transaction for the Cardinal Cruise API integration. 
        /// </summary>
        /// <value>The fully qualified URL that the merchant uses to post a form to the cardholder in order to complete the Consumer Authentication transaction for the Cardinal Cruise API integration. </value>
        [DataMember(Name="stepUpUrl", EmitDefaultValue=false)]
        public string StepUpUrl { get; set; }

        /// <summary>
        /// Unique transaction identifier assigned by the 3DS Server to identify a single transaction. 
        /// </summary>
        /// <value>Unique transaction identifier assigned by the 3DS Server to identify a single transaction. </value>
        [DataMember(Name="threeDSServerTransactionId", EmitDefaultValue=false)]
        public string ThreeDSServerTransactionId { get; set; }

        /// <summary>
        /// AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. 
        /// </summary>
        /// <value>AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. </value>
        [DataMember(Name="ucafAuthenticationData", EmitDefaultValue=false)]
        public string UcafAuthenticationData { get; set; }

        /// <summary>
        /// For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. 
        /// </summary>
        /// <value>For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. </value>
        [DataMember(Name="ucafCollectionIndicator", EmitDefaultValue=false)]
        public string UcafCollectionIndicator { get; set; }

        /// <summary>
        /// Result of the enrollment check. This field can contain one of these values: - &#x60;Y&#x60;: Card enrolled or can be enrolled; you must authenticate. Liability shift. - &#x60;N&#x60;: Card not enrolled; proceed with authorization. Liability shift. - &#x60;U&#x60;: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - &#x60;B&#x60;: Indicates that authentication was bypassed.  For details, see &#x60;pa_enroll_veres_enrolled&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) 
        /// </summary>
        /// <value>Result of the enrollment check. This field can contain one of these values: - &#x60;Y&#x60;: Card enrolled or can be enrolled; you must authenticate. Liability shift. - &#x60;N&#x60;: Card not enrolled; proceed with authorization. Liability shift. - &#x60;U&#x60;: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - &#x60;B&#x60;: Indicates that authentication was bypassed.  For details, see &#x60;pa_enroll_veres_enrolled&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) </value>
        [DataMember(Name="veresEnrolled", EmitDefaultValue=false)]
        public string VeresEnrolled { get; set; }

        /// <summary>
        /// This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS 
        /// </summary>
        /// <value>This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS </value>
        [DataMember(Name="whiteListStatusSource", EmitDefaultValue=false)]
        public string WhiteListStatusSource { get; set; }

        /// <summary>
        /// Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) 
        /// </summary>
        /// <value>Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) </value>
        [DataMember(Name="xid", EmitDefaultValue=false)]
        public string Xid { get; set; }

        /// <summary>
        /// The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID 
        /// </summary>
        /// <value>The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID </value>
        [DataMember(Name="directoryServerTransactionId", EmitDefaultValue=false)]
        public string DirectoryServerTransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  AcsRenderingType: ").Append(AcsRenderingType).Append("\n");
            sb.Append("  AcsTransactionId: ").Append(AcsTransactionId).Append("\n");
            sb.Append("  AcsUrl: ").Append(AcsUrl).Append("\n");
            sb.Append("  AuthenticationPath: ").Append(AuthenticationPath).Append("\n");
            sb.Append("  AuthorizationPayload: ").Append(AuthorizationPayload).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  AuthenticationTransactionId: ").Append(AuthenticationTransactionId).Append("\n");
            sb.Append("  AuthenticationTransactionContextId: ").Append(AuthenticationTransactionContextId).Append("\n");
            sb.Append("  ValidityPeriod: ").Append(ValidityPeriod).Append("\n");
            sb.Append("  CardholderMessage: ").Append(CardholderMessage).Append("\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  ChallengeCancelCode: ").Append(ChallengeCancelCode).Append("\n");
            sb.Append("  ChallengeRequired: ").Append(ChallengeRequired).Append("\n");
            sb.Append("  DecoupledAuthenticationIndicator: ").Append(DecoupledAuthenticationIndicator).Append("\n");
            sb.Append("  DirectoryServerErrorCode: ").Append(DirectoryServerErrorCode).Append("\n");
            sb.Append("  DirectoryServerErrorDescription: ").Append(DirectoryServerErrorDescription).Append("\n");
            sb.Append("  EcommerceIndicator: ").Append(EcommerceIndicator).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  EciRaw: ").Append(EciRaw).Append("\n");
            sb.Append("  EffectiveAuthenticationType: ").Append(EffectiveAuthenticationType).Append("\n");
            sb.Append("  Ivr: ").Append(Ivr).Append("\n");
            sb.Append("  NetworkScore: ").Append(NetworkScore).Append("\n");
            sb.Append("  Pareq: ").Append(Pareq).Append("\n");
            sb.Append("  ParesStatus: ").Append(ParesStatus).Append("\n");
            sb.Append("  ProofXml: ").Append(ProofXml).Append("\n");
            sb.Append("  ProxyPan: ").Append(ProxyPan).Append("\n");
            sb.Append("  SdkTransactionId: ").Append(SdkTransactionId).Append("\n");
            sb.Append("  SignedParesStatusReason: ").Append(SignedParesStatusReason).Append("\n");
            sb.Append("  SpecificationVersion: ").Append(SpecificationVersion).Append("\n");
            sb.Append("  StepUpUrl: ").Append(StepUpUrl).Append("\n");
            sb.Append("  ThreeDSServerTransactionId: ").Append(ThreeDSServerTransactionId).Append("\n");
            sb.Append("  UcafAuthenticationData: ").Append(UcafAuthenticationData).Append("\n");
            sb.Append("  UcafCollectionIndicator: ").Append(UcafCollectionIndicator).Append("\n");
            sb.Append("  VeresEnrolled: ").Append(VeresEnrolled).Append("\n");
            sb.Append("  WhiteListStatusSource: ").Append(WhiteListStatusSource).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("  DirectoryServerTransactionId: ").Append(DirectoryServerTransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation);
        }

        /// <summary>
        /// Returns true if RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessToken == other.AccessToken ||
                    this.AccessToken != null &&
                    this.AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    this.AcsRenderingType == other.AcsRenderingType ||
                    this.AcsRenderingType != null &&
                    this.AcsRenderingType.Equals(other.AcsRenderingType)
                ) && 
                (
                    this.AcsTransactionId == other.AcsTransactionId ||
                    this.AcsTransactionId != null &&
                    this.AcsTransactionId.Equals(other.AcsTransactionId)
                ) && 
                (
                    this.AcsUrl == other.AcsUrl ||
                    this.AcsUrl != null &&
                    this.AcsUrl.Equals(other.AcsUrl)
                ) && 
                (
                    this.AuthenticationPath == other.AuthenticationPath ||
                    this.AuthenticationPath != null &&
                    this.AuthenticationPath.Equals(other.AuthenticationPath)
                ) && 
                (
                    this.AuthorizationPayload == other.AuthorizationPayload ||
                    this.AuthorizationPayload != null &&
                    this.AuthorizationPayload.Equals(other.AuthorizationPayload)
                ) && 
                (
                    this.AuthenticationType == other.AuthenticationType ||
                    this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    this.AuthenticationTransactionId == other.AuthenticationTransactionId ||
                    this.AuthenticationTransactionId != null &&
                    this.AuthenticationTransactionId.Equals(other.AuthenticationTransactionId)
                ) && 
                (
                    this.AuthenticationTransactionContextId == other.AuthenticationTransactionContextId ||
                    this.AuthenticationTransactionContextId != null &&
                    this.AuthenticationTransactionContextId.Equals(other.AuthenticationTransactionContextId)
                ) && 
                (
                    this.ValidityPeriod == other.ValidityPeriod ||
                    this.ValidityPeriod != null &&
                    this.ValidityPeriod.Equals(other.ValidityPeriod)
                ) && 
                (
                    this.CardholderMessage == other.CardholderMessage ||
                    this.CardholderMessage != null &&
                    this.CardholderMessage.Equals(other.CardholderMessage)
                ) && 
                (
                    this.Cavv == other.Cavv ||
                    this.Cavv != null &&
                    this.Cavv.Equals(other.Cavv)
                ) && 
                (
                    this.CavvAlgorithm == other.CavvAlgorithm ||
                    this.CavvAlgorithm != null &&
                    this.CavvAlgorithm.Equals(other.CavvAlgorithm)
                ) && 
                (
                    this.ChallengeCancelCode == other.ChallengeCancelCode ||
                    this.ChallengeCancelCode != null &&
                    this.ChallengeCancelCode.Equals(other.ChallengeCancelCode)
                ) && 
                (
                    this.ChallengeRequired == other.ChallengeRequired ||
                    this.ChallengeRequired != null &&
                    this.ChallengeRequired.Equals(other.ChallengeRequired)
                ) && 
                (
                    this.DecoupledAuthenticationIndicator == other.DecoupledAuthenticationIndicator ||
                    this.DecoupledAuthenticationIndicator != null &&
                    this.DecoupledAuthenticationIndicator.Equals(other.DecoupledAuthenticationIndicator)
                ) && 
                (
                    this.DirectoryServerErrorCode == other.DirectoryServerErrorCode ||
                    this.DirectoryServerErrorCode != null &&
                    this.DirectoryServerErrorCode.Equals(other.DirectoryServerErrorCode)
                ) && 
                (
                    this.DirectoryServerErrorDescription == other.DirectoryServerErrorDescription ||
                    this.DirectoryServerErrorDescription != null &&
                    this.DirectoryServerErrorDescription.Equals(other.DirectoryServerErrorDescription)
                ) && 
                (
                    this.EcommerceIndicator == other.EcommerceIndicator ||
                    this.EcommerceIndicator != null &&
                    this.EcommerceIndicator.Equals(other.EcommerceIndicator)
                ) && 
                (
                    this.Eci == other.Eci ||
                    this.Eci != null &&
                    this.Eci.Equals(other.Eci)
                ) && 
                (
                    this.EciRaw == other.EciRaw ||
                    this.EciRaw != null &&
                    this.EciRaw.Equals(other.EciRaw)
                ) && 
                (
                    this.EffectiveAuthenticationType == other.EffectiveAuthenticationType ||
                    this.EffectiveAuthenticationType != null &&
                    this.EffectiveAuthenticationType.Equals(other.EffectiveAuthenticationType)
                ) && 
                (
                    this.Ivr == other.Ivr ||
                    this.Ivr != null &&
                    this.Ivr.Equals(other.Ivr)
                ) && 
                (
                    this.NetworkScore == other.NetworkScore ||
                    this.NetworkScore != null &&
                    this.NetworkScore.Equals(other.NetworkScore)
                ) && 
                (
                    this.Pareq == other.Pareq ||
                    this.Pareq != null &&
                    this.Pareq.Equals(other.Pareq)
                ) && 
                (
                    this.ParesStatus == other.ParesStatus ||
                    this.ParesStatus != null &&
                    this.ParesStatus.Equals(other.ParesStatus)
                ) && 
                (
                    this.ProofXml == other.ProofXml ||
                    this.ProofXml != null &&
                    this.ProofXml.Equals(other.ProofXml)
                ) && 
                (
                    this.ProxyPan == other.ProxyPan ||
                    this.ProxyPan != null &&
                    this.ProxyPan.Equals(other.ProxyPan)
                ) && 
                (
                    this.SdkTransactionId == other.SdkTransactionId ||
                    this.SdkTransactionId != null &&
                    this.SdkTransactionId.Equals(other.SdkTransactionId)
                ) && 
                (
                    this.SignedParesStatusReason == other.SignedParesStatusReason ||
                    this.SignedParesStatusReason != null &&
                    this.SignedParesStatusReason.Equals(other.SignedParesStatusReason)
                ) && 
                (
                    this.SpecificationVersion == other.SpecificationVersion ||
                    this.SpecificationVersion != null &&
                    this.SpecificationVersion.Equals(other.SpecificationVersion)
                ) && 
                (
                    this.StepUpUrl == other.StepUpUrl ||
                    this.StepUpUrl != null &&
                    this.StepUpUrl.Equals(other.StepUpUrl)
                ) && 
                (
                    this.ThreeDSServerTransactionId == other.ThreeDSServerTransactionId ||
                    this.ThreeDSServerTransactionId != null &&
                    this.ThreeDSServerTransactionId.Equals(other.ThreeDSServerTransactionId)
                ) && 
                (
                    this.UcafAuthenticationData == other.UcafAuthenticationData ||
                    this.UcafAuthenticationData != null &&
                    this.UcafAuthenticationData.Equals(other.UcafAuthenticationData)
                ) && 
                (
                    this.UcafCollectionIndicator == other.UcafCollectionIndicator ||
                    this.UcafCollectionIndicator != null &&
                    this.UcafCollectionIndicator.Equals(other.UcafCollectionIndicator)
                ) && 
                (
                    this.VeresEnrolled == other.VeresEnrolled ||
                    this.VeresEnrolled != null &&
                    this.VeresEnrolled.Equals(other.VeresEnrolled)
                ) && 
                (
                    this.WhiteListStatusSource == other.WhiteListStatusSource ||
                    this.WhiteListStatusSource != null &&
                    this.WhiteListStatusSource.Equals(other.WhiteListStatusSource)
                ) && 
                (
                    this.Xid == other.Xid ||
                    this.Xid != null &&
                    this.Xid.Equals(other.Xid)
                ) && 
                (
                    this.DirectoryServerTransactionId == other.DirectoryServerTransactionId ||
                    this.DirectoryServerTransactionId != null &&
                    this.DirectoryServerTransactionId.Equals(other.DirectoryServerTransactionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessToken != null)
                    hash = hash * 59 + this.AccessToken.GetHashCode();
                if (this.AcsRenderingType != null)
                    hash = hash * 59 + this.AcsRenderingType.GetHashCode();
                if (this.AcsTransactionId != null)
                    hash = hash * 59 + this.AcsTransactionId.GetHashCode();
                if (this.AcsUrl != null)
                    hash = hash * 59 + this.AcsUrl.GetHashCode();
                if (this.AuthenticationPath != null)
                    hash = hash * 59 + this.AuthenticationPath.GetHashCode();
                if (this.AuthorizationPayload != null)
                    hash = hash * 59 + this.AuthorizationPayload.GetHashCode();
                if (this.AuthenticationType != null)
                    hash = hash * 59 + this.AuthenticationType.GetHashCode();
                if (this.AuthenticationTransactionId != null)
                    hash = hash * 59 + this.AuthenticationTransactionId.GetHashCode();
                if (this.AuthenticationTransactionContextId != null)
                    hash = hash * 59 + this.AuthenticationTransactionContextId.GetHashCode();
                if (this.ValidityPeriod != null)
                    hash = hash * 59 + this.ValidityPeriod.GetHashCode();
                if (this.CardholderMessage != null)
                    hash = hash * 59 + this.CardholderMessage.GetHashCode();
                if (this.Cavv != null)
                    hash = hash * 59 + this.Cavv.GetHashCode();
                if (this.CavvAlgorithm != null)
                    hash = hash * 59 + this.CavvAlgorithm.GetHashCode();
                if (this.ChallengeCancelCode != null)
                    hash = hash * 59 + this.ChallengeCancelCode.GetHashCode();
                if (this.ChallengeRequired != null)
                    hash = hash * 59 + this.ChallengeRequired.GetHashCode();
                if (this.DecoupledAuthenticationIndicator != null)
                    hash = hash * 59 + this.DecoupledAuthenticationIndicator.GetHashCode();
                if (this.DirectoryServerErrorCode != null)
                    hash = hash * 59 + this.DirectoryServerErrorCode.GetHashCode();
                if (this.DirectoryServerErrorDescription != null)
                    hash = hash * 59 + this.DirectoryServerErrorDescription.GetHashCode();
                if (this.EcommerceIndicator != null)
                    hash = hash * 59 + this.EcommerceIndicator.GetHashCode();
                if (this.Eci != null)
                    hash = hash * 59 + this.Eci.GetHashCode();
                if (this.EciRaw != null)
                    hash = hash * 59 + this.EciRaw.GetHashCode();
                if (this.EffectiveAuthenticationType != null)
                    hash = hash * 59 + this.EffectiveAuthenticationType.GetHashCode();
                if (this.Ivr != null)
                    hash = hash * 59 + this.Ivr.GetHashCode();
                if (this.NetworkScore != null)
                    hash = hash * 59 + this.NetworkScore.GetHashCode();
                if (this.Pareq != null)
                    hash = hash * 59 + this.Pareq.GetHashCode();
                if (this.ParesStatus != null)
                    hash = hash * 59 + this.ParesStatus.GetHashCode();
                if (this.ProofXml != null)
                    hash = hash * 59 + this.ProofXml.GetHashCode();
                if (this.ProxyPan != null)
                    hash = hash * 59 + this.ProxyPan.GetHashCode();
                if (this.SdkTransactionId != null)
                    hash = hash * 59 + this.SdkTransactionId.GetHashCode();
                if (this.SignedParesStatusReason != null)
                    hash = hash * 59 + this.SignedParesStatusReason.GetHashCode();
                if (this.SpecificationVersion != null)
                    hash = hash * 59 + this.SpecificationVersion.GetHashCode();
                if (this.StepUpUrl != null)
                    hash = hash * 59 + this.StepUpUrl.GetHashCode();
                if (this.ThreeDSServerTransactionId != null)
                    hash = hash * 59 + this.ThreeDSServerTransactionId.GetHashCode();
                if (this.UcafAuthenticationData != null)
                    hash = hash * 59 + this.UcafAuthenticationData.GetHashCode();
                if (this.UcafCollectionIndicator != null)
                    hash = hash * 59 + this.UcafCollectionIndicator.GetHashCode();
                if (this.VeresEnrolled != null)
                    hash = hash * 59 + this.VeresEnrolled.GetHashCode();
                if (this.WhiteListStatusSource != null)
                    hash = hash * 59 + this.WhiteListStatusSource.GetHashCode();
                if (this.Xid != null)
                    hash = hash * 59 + this.Xid.GetHashCode();
                if (this.DirectoryServerTransactionId != null)
                    hash = hash * 59 + this.DirectoryServerTransactionId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
