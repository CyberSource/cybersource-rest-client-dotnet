/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails :  IEquatable<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails" /> class.
        /// </summary>
        /// <param name="CustomerType">Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both.</param>
        /// <param name="PercentageSplitByB2B">% Split.</param>
        /// <param name="PercentageSplitByB2C">% Split.</param>
        /// <param name="InteractionTypes">Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both (required).</param>
        /// <param name="PercentageSplitByF2F">% Split (required).</param>
        /// <param name="PercentageSplitByCNP">% Split (required).</param>
        /// <param name="WhenIsCustomerCharged">When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other (required).</param>
        /// <param name="WhenIsCustomerChargedDescription">WhenIsCustomerChargedDescription.</param>
        /// <param name="OfferSubscriptions">Does Merchant Offer Subscriptions? (required).</param>
        /// <param name="MonthlySubscriptionPercent">% of business is monthly subscriptions.</param>
        /// <param name="QuarterlySubscriptionPercent">% of business is quarterly subscriptions.</param>
        /// <param name="SemiannualSubscriptionPercent">% of business is semi-annual subscriptions.</param>
        /// <param name="AnnualSubscriptionPercent">% of business is annual subscriptions.</param>
        /// <param name="CurrencyType">Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF.</param>
        /// <param name="EstimatedMonthlySales">Merchant&#39;s estimated monthly sales.</param>
        /// <param name="AverageOrderAmount">Merchant&#39;s average order amount.</param>
        /// <param name="LargestExpectedOrderAmount">Merchant&#39;s largest expected order amount.</param>
        /// <param name="PrimaryAccountUsage">Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other.</param>
        /// <param name="SourceOfFunds">Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other.</param>
        /// <param name="ReceiveMoney3rdParties">Will you recieve money from 3rd parties into your account?.</param>
        /// <param name="ReceiveTransactionFrequency">Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month.</param>
        /// <param name="EstimatedMonthlySpend">What is your estimated total monthly spend?  Possible values: - &lt;$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+.</param>
        /// <param name="CountryTransactions">CountryTransactions.</param>
        /// <param name="CurrenciesIn">CurrenciesIn.</param>
        /// <param name="CurrenciesOut">CurrenciesOut.</param>
        /// <param name="ProductServicesSubscription">ProductServicesSubscription.</param>
        public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails(string CustomerType = default(string), decimal? PercentageSplitByB2B = default(decimal?), decimal? PercentageSplitByB2C = default(decimal?), string InteractionTypes = default(string), decimal? PercentageSplitByF2F = default(decimal?), decimal? PercentageSplitByCNP = default(decimal?), string WhenIsCustomerCharged = default(string), string WhenIsCustomerChargedDescription = default(string), bool? OfferSubscriptions = default(bool?), decimal? MonthlySubscriptionPercent = default(decimal?), decimal? QuarterlySubscriptionPercent = default(decimal?), decimal? SemiannualSubscriptionPercent = default(decimal?), decimal? AnnualSubscriptionPercent = default(decimal?), string CurrencyType = default(string), decimal? EstimatedMonthlySales = default(decimal?), decimal? AverageOrderAmount = default(decimal?), decimal? LargestExpectedOrderAmount = default(decimal?), string PrimaryAccountUsage = default(string), string SourceOfFunds = default(string), bool? ReceiveMoney3rdParties = default(bool?), string ReceiveTransactionFrequency = default(string), string EstimatedMonthlySpend = default(string), List<string> CountryTransactions = default(List<string>), List<string> CurrenciesIn = default(List<string>), List<string> CurrenciesOut = default(List<string>), List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription> ProductServicesSubscription = default(List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription>))
        {
            this.CustomerType = CustomerType;
            this.PercentageSplitByB2B = PercentageSplitByB2B;
            this.PercentageSplitByB2C = PercentageSplitByB2C;
            this.InteractionTypes = InteractionTypes;
            this.PercentageSplitByF2F = PercentageSplitByF2F;
            this.PercentageSplitByCNP = PercentageSplitByCNP;
            this.WhenIsCustomerCharged = WhenIsCustomerCharged;
            this.WhenIsCustomerChargedDescription = WhenIsCustomerChargedDescription;
            this.OfferSubscriptions = OfferSubscriptions;
            this.MonthlySubscriptionPercent = MonthlySubscriptionPercent;
            this.QuarterlySubscriptionPercent = QuarterlySubscriptionPercent;
            this.SemiannualSubscriptionPercent = SemiannualSubscriptionPercent;
            this.AnnualSubscriptionPercent = AnnualSubscriptionPercent;
            this.CurrencyType = CurrencyType;
            this.EstimatedMonthlySales = EstimatedMonthlySales;
            this.AverageOrderAmount = AverageOrderAmount;
            this.LargestExpectedOrderAmount = LargestExpectedOrderAmount;
            this.PrimaryAccountUsage = PrimaryAccountUsage;
            this.SourceOfFunds = SourceOfFunds;
            this.ReceiveMoney3rdParties = ReceiveMoney3rdParties;
            this.ReceiveTransactionFrequency = ReceiveTransactionFrequency;
            this.EstimatedMonthlySpend = EstimatedMonthlySpend;
            this.CountryTransactions = CountryTransactions;
            this.CurrenciesIn = CurrenciesIn;
            this.CurrenciesOut = CurrenciesOut;
            this.ProductServicesSubscription = ProductServicesSubscription;
        }
        
        /// <summary>
        /// Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both
        /// </summary>
        /// <value>Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both</value>
        [DataMember(Name="customerType", EmitDefaultValue=false)]
        public string CustomerType { get; set; }

        /// <summary>
        /// % Split
        /// </summary>
        /// <value>% Split</value>
        [DataMember(Name="percentageSplitByB2B", EmitDefaultValue=false)]
        public decimal? PercentageSplitByB2B { get; set; }

        /// <summary>
        /// % Split
        /// </summary>
        /// <value>% Split</value>
        [DataMember(Name="percentageSplitByB2C", EmitDefaultValue=false)]
        public decimal? PercentageSplitByB2C { get; set; }

        /// <summary>
        /// Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both
        /// </summary>
        /// <value>Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both</value>
        [DataMember(Name="interactionTypes", EmitDefaultValue=false)]
        public string InteractionTypes { get; set; }

        /// <summary>
        /// % Split
        /// </summary>
        /// <value>% Split</value>
        [DataMember(Name="percentageSplitByF2F", EmitDefaultValue=false)]
        public decimal? PercentageSplitByF2F { get; set; }

        /// <summary>
        /// % Split
        /// </summary>
        /// <value>% Split</value>
        [DataMember(Name="percentageSplitByCNP", EmitDefaultValue=false)]
        public decimal? PercentageSplitByCNP { get; set; }

        /// <summary>
        /// When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other
        /// </summary>
        /// <value>When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other</value>
        [DataMember(Name="whenIsCustomerCharged", EmitDefaultValue=false)]
        public string WhenIsCustomerCharged { get; set; }

        /// <summary>
        /// Gets or Sets WhenIsCustomerChargedDescription
        /// </summary>
        [DataMember(Name="whenIsCustomerChargedDescription", EmitDefaultValue=false)]
        public string WhenIsCustomerChargedDescription { get; set; }

        /// <summary>
        /// Does Merchant Offer Subscriptions?
        /// </summary>
        /// <value>Does Merchant Offer Subscriptions?</value>
        [DataMember(Name="offerSubscriptions", EmitDefaultValue=false)]
        public bool? OfferSubscriptions { get; set; }

        /// <summary>
        /// % of business is monthly subscriptions
        /// </summary>
        /// <value>% of business is monthly subscriptions</value>
        [DataMember(Name="monthlySubscriptionPercent", EmitDefaultValue=false)]
        public decimal? MonthlySubscriptionPercent { get; set; }

        /// <summary>
        /// % of business is quarterly subscriptions
        /// </summary>
        /// <value>% of business is quarterly subscriptions</value>
        [DataMember(Name="quarterlySubscriptionPercent", EmitDefaultValue=false)]
        public decimal? QuarterlySubscriptionPercent { get; set; }

        /// <summary>
        /// % of business is semi-annual subscriptions
        /// </summary>
        /// <value>% of business is semi-annual subscriptions</value>
        [DataMember(Name="semiannualSubscriptionPercent", EmitDefaultValue=false)]
        public decimal? SemiannualSubscriptionPercent { get; set; }

        /// <summary>
        /// % of business is annual subscriptions
        /// </summary>
        /// <value>% of business is annual subscriptions</value>
        [DataMember(Name="annualSubscriptionPercent", EmitDefaultValue=false)]
        public decimal? AnnualSubscriptionPercent { get; set; }

        /// <summary>
        /// Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF
        /// </summary>
        /// <value>Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF</value>
        [DataMember(Name="currencyType", EmitDefaultValue=false)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Merchant&#39;s estimated monthly sales
        /// </summary>
        /// <value>Merchant&#39;s estimated monthly sales</value>
        [DataMember(Name="estimatedMonthlySales", EmitDefaultValue=false)]
        public decimal? EstimatedMonthlySales { get; set; }

        /// <summary>
        /// Merchant&#39;s average order amount
        /// </summary>
        /// <value>Merchant&#39;s average order amount</value>
        [DataMember(Name="averageOrderAmount", EmitDefaultValue=false)]
        public decimal? AverageOrderAmount { get; set; }

        /// <summary>
        /// Merchant&#39;s largest expected order amount
        /// </summary>
        /// <value>Merchant&#39;s largest expected order amount</value>
        [DataMember(Name="largestExpectedOrderAmount", EmitDefaultValue=false)]
        public decimal? LargestExpectedOrderAmount { get; set; }

        /// <summary>
        /// Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other
        /// </summary>
        /// <value>Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other</value>
        [DataMember(Name="primaryAccountUsage", EmitDefaultValue=false)]
        public string PrimaryAccountUsage { get; set; }

        /// <summary>
        /// Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other
        /// </summary>
        /// <value>Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other</value>
        [DataMember(Name="sourceOfFunds", EmitDefaultValue=false)]
        public string SourceOfFunds { get; set; }

        /// <summary>
        /// Will you recieve money from 3rd parties into your account?
        /// </summary>
        /// <value>Will you recieve money from 3rd parties into your account?</value>
        [DataMember(Name="receiveMoney3rdParties", EmitDefaultValue=false)]
        public bool? ReceiveMoney3rdParties { get; set; }

        /// <summary>
        /// Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month
        /// </summary>
        /// <value>Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month</value>
        [DataMember(Name="receiveTransactionFrequency", EmitDefaultValue=false)]
        public string ReceiveTransactionFrequency { get; set; }

        /// <summary>
        /// What is your estimated total monthly spend?  Possible values: - &lt;$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+
        /// </summary>
        /// <value>What is your estimated total monthly spend?  Possible values: - &lt;$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+</value>
        [DataMember(Name="estimatedMonthlySpend", EmitDefaultValue=false)]
        public string EstimatedMonthlySpend { get; set; }

        /// <summary>
        /// Gets or Sets CountryTransactions
        /// </summary>
        [DataMember(Name="countryTransactions", EmitDefaultValue=false)]
        public List<string> CountryTransactions { get; set; }

        /// <summary>
        /// Gets or Sets CurrenciesIn
        /// </summary>
        [DataMember(Name="currenciesIn", EmitDefaultValue=false)]
        public List<string> CurrenciesIn { get; set; }

        /// <summary>
        /// Gets or Sets CurrenciesOut
        /// </summary>
        [DataMember(Name="currenciesOut", EmitDefaultValue=false)]
        public List<string> CurrenciesOut { get; set; }

        /// <summary>
        /// Gets or Sets ProductServicesSubscription
        /// </summary>
        [DataMember(Name="productServicesSubscription", EmitDefaultValue=false)]
        public List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription> ProductServicesSubscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails {\n");
            if (CustomerType != null) sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            if (PercentageSplitByB2B != null) sb.Append("  PercentageSplitByB2B: ").Append(PercentageSplitByB2B).Append("\n");
            if (PercentageSplitByB2C != null) sb.Append("  PercentageSplitByB2C: ").Append(PercentageSplitByB2C).Append("\n");
            if (InteractionTypes != null) sb.Append("  InteractionTypes: ").Append(InteractionTypes).Append("\n");
            if (PercentageSplitByF2F != null) sb.Append("  PercentageSplitByF2F: ").Append(PercentageSplitByF2F).Append("\n");
            if (PercentageSplitByCNP != null) sb.Append("  PercentageSplitByCNP: ").Append(PercentageSplitByCNP).Append("\n");
            if (WhenIsCustomerCharged != null) sb.Append("  WhenIsCustomerCharged: ").Append(WhenIsCustomerCharged).Append("\n");
            if (WhenIsCustomerChargedDescription != null) sb.Append("  WhenIsCustomerChargedDescription: ").Append(WhenIsCustomerChargedDescription).Append("\n");
            if (OfferSubscriptions != null) sb.Append("  OfferSubscriptions: ").Append(OfferSubscriptions).Append("\n");
            if (MonthlySubscriptionPercent != null) sb.Append("  MonthlySubscriptionPercent: ").Append(MonthlySubscriptionPercent).Append("\n");
            if (QuarterlySubscriptionPercent != null) sb.Append("  QuarterlySubscriptionPercent: ").Append(QuarterlySubscriptionPercent).Append("\n");
            if (SemiannualSubscriptionPercent != null) sb.Append("  SemiannualSubscriptionPercent: ").Append(SemiannualSubscriptionPercent).Append("\n");
            if (AnnualSubscriptionPercent != null) sb.Append("  AnnualSubscriptionPercent: ").Append(AnnualSubscriptionPercent).Append("\n");
            if (CurrencyType != null) sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            if (EstimatedMonthlySales != null) sb.Append("  EstimatedMonthlySales: ").Append(EstimatedMonthlySales).Append("\n");
            if (AverageOrderAmount != null) sb.Append("  AverageOrderAmount: ").Append(AverageOrderAmount).Append("\n");
            if (LargestExpectedOrderAmount != null) sb.Append("  LargestExpectedOrderAmount: ").Append(LargestExpectedOrderAmount).Append("\n");
            if (PrimaryAccountUsage != null) sb.Append("  PrimaryAccountUsage: ").Append(PrimaryAccountUsage).Append("\n");
            if (SourceOfFunds != null) sb.Append("  SourceOfFunds: ").Append(SourceOfFunds).Append("\n");
            if (ReceiveMoney3rdParties != null) sb.Append("  ReceiveMoney3rdParties: ").Append(ReceiveMoney3rdParties).Append("\n");
            if (ReceiveTransactionFrequency != null) sb.Append("  ReceiveTransactionFrequency: ").Append(ReceiveTransactionFrequency).Append("\n");
            if (EstimatedMonthlySpend != null) sb.Append("  EstimatedMonthlySpend: ").Append(EstimatedMonthlySpend).Append("\n");
            if (CountryTransactions != null) sb.Append("  CountryTransactions: ").Append(CountryTransactions).Append("\n");
            if (CurrenciesIn != null) sb.Append("  CurrenciesIn: ").Append(CurrenciesIn).Append("\n");
            if (CurrenciesOut != null) sb.Append("  CurrenciesOut: ").Append(CurrenciesOut).Append("\n");
            if (ProductServicesSubscription != null) sb.Append("  ProductServicesSubscription: ").Append(ProductServicesSubscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomerType == other.CustomerType ||
                    this.CustomerType != null &&
                    this.CustomerType.Equals(other.CustomerType)
                ) && 
                (
                    this.PercentageSplitByB2B == other.PercentageSplitByB2B ||
                    this.PercentageSplitByB2B != null &&
                    this.PercentageSplitByB2B.Equals(other.PercentageSplitByB2B)
                ) && 
                (
                    this.PercentageSplitByB2C == other.PercentageSplitByB2C ||
                    this.PercentageSplitByB2C != null &&
                    this.PercentageSplitByB2C.Equals(other.PercentageSplitByB2C)
                ) && 
                (
                    this.InteractionTypes == other.InteractionTypes ||
                    this.InteractionTypes != null &&
                    this.InteractionTypes.Equals(other.InteractionTypes)
                ) && 
                (
                    this.PercentageSplitByF2F == other.PercentageSplitByF2F ||
                    this.PercentageSplitByF2F != null &&
                    this.PercentageSplitByF2F.Equals(other.PercentageSplitByF2F)
                ) && 
                (
                    this.PercentageSplitByCNP == other.PercentageSplitByCNP ||
                    this.PercentageSplitByCNP != null &&
                    this.PercentageSplitByCNP.Equals(other.PercentageSplitByCNP)
                ) && 
                (
                    this.WhenIsCustomerCharged == other.WhenIsCustomerCharged ||
                    this.WhenIsCustomerCharged != null &&
                    this.WhenIsCustomerCharged.Equals(other.WhenIsCustomerCharged)
                ) && 
                (
                    this.WhenIsCustomerChargedDescription == other.WhenIsCustomerChargedDescription ||
                    this.WhenIsCustomerChargedDescription != null &&
                    this.WhenIsCustomerChargedDescription.Equals(other.WhenIsCustomerChargedDescription)
                ) && 
                (
                    this.OfferSubscriptions == other.OfferSubscriptions ||
                    this.OfferSubscriptions != null &&
                    this.OfferSubscriptions.Equals(other.OfferSubscriptions)
                ) && 
                (
                    this.MonthlySubscriptionPercent == other.MonthlySubscriptionPercent ||
                    this.MonthlySubscriptionPercent != null &&
                    this.MonthlySubscriptionPercent.Equals(other.MonthlySubscriptionPercent)
                ) && 
                (
                    this.QuarterlySubscriptionPercent == other.QuarterlySubscriptionPercent ||
                    this.QuarterlySubscriptionPercent != null &&
                    this.QuarterlySubscriptionPercent.Equals(other.QuarterlySubscriptionPercent)
                ) && 
                (
                    this.SemiannualSubscriptionPercent == other.SemiannualSubscriptionPercent ||
                    this.SemiannualSubscriptionPercent != null &&
                    this.SemiannualSubscriptionPercent.Equals(other.SemiannualSubscriptionPercent)
                ) && 
                (
                    this.AnnualSubscriptionPercent == other.AnnualSubscriptionPercent ||
                    this.AnnualSubscriptionPercent != null &&
                    this.AnnualSubscriptionPercent.Equals(other.AnnualSubscriptionPercent)
                ) && 
                (
                    this.CurrencyType == other.CurrencyType ||
                    this.CurrencyType != null &&
                    this.CurrencyType.Equals(other.CurrencyType)
                ) && 
                (
                    this.EstimatedMonthlySales == other.EstimatedMonthlySales ||
                    this.EstimatedMonthlySales != null &&
                    this.EstimatedMonthlySales.Equals(other.EstimatedMonthlySales)
                ) && 
                (
                    this.AverageOrderAmount == other.AverageOrderAmount ||
                    this.AverageOrderAmount != null &&
                    this.AverageOrderAmount.Equals(other.AverageOrderAmount)
                ) && 
                (
                    this.LargestExpectedOrderAmount == other.LargestExpectedOrderAmount ||
                    this.LargestExpectedOrderAmount != null &&
                    this.LargestExpectedOrderAmount.Equals(other.LargestExpectedOrderAmount)
                ) && 
                (
                    this.PrimaryAccountUsage == other.PrimaryAccountUsage ||
                    this.PrimaryAccountUsage != null &&
                    this.PrimaryAccountUsage.Equals(other.PrimaryAccountUsage)
                ) && 
                (
                    this.SourceOfFunds == other.SourceOfFunds ||
                    this.SourceOfFunds != null &&
                    this.SourceOfFunds.Equals(other.SourceOfFunds)
                ) && 
                (
                    this.ReceiveMoney3rdParties == other.ReceiveMoney3rdParties ||
                    this.ReceiveMoney3rdParties != null &&
                    this.ReceiveMoney3rdParties.Equals(other.ReceiveMoney3rdParties)
                ) && 
                (
                    this.ReceiveTransactionFrequency == other.ReceiveTransactionFrequency ||
                    this.ReceiveTransactionFrequency != null &&
                    this.ReceiveTransactionFrequency.Equals(other.ReceiveTransactionFrequency)
                ) && 
                (
                    this.EstimatedMonthlySpend == other.EstimatedMonthlySpend ||
                    this.EstimatedMonthlySpend != null &&
                    this.EstimatedMonthlySpend.Equals(other.EstimatedMonthlySpend)
                ) && 
                (
                    this.CountryTransactions == other.CountryTransactions ||
                    this.CountryTransactions != null &&
                    this.CountryTransactions.SequenceEqual(other.CountryTransactions)
                ) && 
                (
                    this.CurrenciesIn == other.CurrenciesIn ||
                    this.CurrenciesIn != null &&
                    this.CurrenciesIn.SequenceEqual(other.CurrenciesIn)
                ) && 
                (
                    this.CurrenciesOut == other.CurrenciesOut ||
                    this.CurrenciesOut != null &&
                    this.CurrenciesOut.SequenceEqual(other.CurrenciesOut)
                ) && 
                (
                    this.ProductServicesSubscription == other.ProductServicesSubscription ||
                    this.ProductServicesSubscription != null &&
                    this.ProductServicesSubscription.SequenceEqual(other.ProductServicesSubscription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomerType != null)
                    hash = hash * 59 + this.CustomerType.GetHashCode();
                if (this.PercentageSplitByB2B != null)
                    hash = hash * 59 + this.PercentageSplitByB2B.GetHashCode();
                if (this.PercentageSplitByB2C != null)
                    hash = hash * 59 + this.PercentageSplitByB2C.GetHashCode();
                if (this.InteractionTypes != null)
                    hash = hash * 59 + this.InteractionTypes.GetHashCode();
                if (this.PercentageSplitByF2F != null)
                    hash = hash * 59 + this.PercentageSplitByF2F.GetHashCode();
                if (this.PercentageSplitByCNP != null)
                    hash = hash * 59 + this.PercentageSplitByCNP.GetHashCode();
                if (this.WhenIsCustomerCharged != null)
                    hash = hash * 59 + this.WhenIsCustomerCharged.GetHashCode();
                if (this.WhenIsCustomerChargedDescription != null)
                    hash = hash * 59 + this.WhenIsCustomerChargedDescription.GetHashCode();
                if (this.OfferSubscriptions != null)
                    hash = hash * 59 + this.OfferSubscriptions.GetHashCode();
                if (this.MonthlySubscriptionPercent != null)
                    hash = hash * 59 + this.MonthlySubscriptionPercent.GetHashCode();
                if (this.QuarterlySubscriptionPercent != null)
                    hash = hash * 59 + this.QuarterlySubscriptionPercent.GetHashCode();
                if (this.SemiannualSubscriptionPercent != null)
                    hash = hash * 59 + this.SemiannualSubscriptionPercent.GetHashCode();
                if (this.AnnualSubscriptionPercent != null)
                    hash = hash * 59 + this.AnnualSubscriptionPercent.GetHashCode();
                if (this.CurrencyType != null)
                    hash = hash * 59 + this.CurrencyType.GetHashCode();
                if (this.EstimatedMonthlySales != null)
                    hash = hash * 59 + this.EstimatedMonthlySales.GetHashCode();
                if (this.AverageOrderAmount != null)
                    hash = hash * 59 + this.AverageOrderAmount.GetHashCode();
                if (this.LargestExpectedOrderAmount != null)
                    hash = hash * 59 + this.LargestExpectedOrderAmount.GetHashCode();
                if (this.PrimaryAccountUsage != null)
                    hash = hash * 59 + this.PrimaryAccountUsage.GetHashCode();
                if (this.SourceOfFunds != null)
                    hash = hash * 59 + this.SourceOfFunds.GetHashCode();
                if (this.ReceiveMoney3rdParties != null)
                    hash = hash * 59 + this.ReceiveMoney3rdParties.GetHashCode();
                if (this.ReceiveTransactionFrequency != null)
                    hash = hash * 59 + this.ReceiveTransactionFrequency.GetHashCode();
                if (this.EstimatedMonthlySpend != null)
                    hash = hash * 59 + this.EstimatedMonthlySpend.GetHashCode();
                if (this.CountryTransactions != null)
                    hash = hash * 59 + this.CountryTransactions.GetHashCode();
                if (this.CurrenciesIn != null)
                    hash = hash * 59 + this.CurrenciesIn.GetHashCode();
                if (this.CurrenciesOut != null)
                    hash = hash * 59 + this.CurrenciesOut.GetHashCode();
                if (this.ProductServicesSubscription != null)
                    hash = hash * 59 + this.ProductServicesSubscription.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
