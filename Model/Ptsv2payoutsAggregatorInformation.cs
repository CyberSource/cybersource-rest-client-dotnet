/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2payoutsAggregatorInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2payoutsAggregatorInformation :  IEquatable<Ptsv2payoutsAggregatorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2payoutsAggregatorInformation" /> class.
        /// </summary>
        /// <param name="AggregatorId">Value that identifies you as a payment aggregator. Get this value from the processor. .</param>
        /// <param name="Name">Your payment aggregator business name. This field is conditionally required when aggregator id is present. .</param>
        /// <param name="IndependentSalesOrganizationID">Independent sales organization ID. This field is only used for Mastercard transactions submitted through PPGS. .</param>
        /// <param name="SubMerchant">SubMerchant.</param>
        /// <param name="StreetAddress">Acquirer street name..</param>
        /// <param name="City">Acquirer city..</param>
        /// <param name="State">Acquirer state..</param>
        /// <param name="PostalCode">Acquirer postal code..</param>
        /// <param name="Country">Acquirer country..</param>
        public Ptsv2payoutsAggregatorInformation(string AggregatorId = default(string), string Name = default(string), string IndependentSalesOrganizationID = default(string), Ptsv2payoutsAggregatorInformationSubMerchant SubMerchant = default(Ptsv2payoutsAggregatorInformationSubMerchant), string StreetAddress = default(string), string City = default(string), string State = default(string), string PostalCode = default(string), string Country = default(string))
        {
            this.AggregatorId = AggregatorId;
            this.Name = Name;
            this.IndependentSalesOrganizationID = IndependentSalesOrganizationID;
            this.SubMerchant = SubMerchant;
            this.StreetAddress = StreetAddress;
            this.City = City;
            this.State = State;
            this.PostalCode = PostalCode;
            this.Country = Country;
        }
        
        /// <summary>
        /// Value that identifies you as a payment aggregator. Get this value from the processor. 
        /// </summary>
        /// <value>Value that identifies you as a payment aggregator. Get this value from the processor. </value>
        [DataMember(Name="aggregatorId", EmitDefaultValue=false)]
        public string AggregatorId { get; set; }

        /// <summary>
        /// Your payment aggregator business name. This field is conditionally required when aggregator id is present. 
        /// </summary>
        /// <value>Your payment aggregator business name. This field is conditionally required when aggregator id is present. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Independent sales organization ID. This field is only used for Mastercard transactions submitted through PPGS. 
        /// </summary>
        /// <value>Independent sales organization ID. This field is only used for Mastercard transactions submitted through PPGS. </value>
        [DataMember(Name="independentSalesOrganizationID", EmitDefaultValue=false)]
        public string IndependentSalesOrganizationID { get; set; }

        /// <summary>
        /// Gets or Sets SubMerchant
        /// </summary>
        [DataMember(Name="subMerchant", EmitDefaultValue=false)]
        public Ptsv2payoutsAggregatorInformationSubMerchant SubMerchant { get; set; }

        /// <summary>
        /// Acquirer street name.
        /// </summary>
        /// <value>Acquirer street name.</value>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Acquirer city.
        /// </summary>
        /// <value>Acquirer city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Acquirer state.
        /// </summary>
        /// <value>Acquirer state.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Acquirer postal code.
        /// </summary>
        /// <value>Acquirer postal code.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Acquirer country.
        /// </summary>
        /// <value>Acquirer country.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2payoutsAggregatorInformation {\n");
            if (AggregatorId != null) sb.Append("  AggregatorId: ").Append(AggregatorId).Append("\n");
            if (Name != null) sb.Append("  Name: ").Append(Name).Append("\n");
            if (IndependentSalesOrganizationID != null) sb.Append("  IndependentSalesOrganizationID: ").Append(IndependentSalesOrganizationID).Append("\n");
            if (SubMerchant != null) sb.Append("  SubMerchant: ").Append(SubMerchant).Append("\n");
            if (StreetAddress != null) sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            if (City != null) sb.Append("  City: ").Append(City).Append("\n");
            if (State != null) sb.Append("  State: ").Append(State).Append("\n");
            if (PostalCode != null) sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            if (Country != null) sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2payoutsAggregatorInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2payoutsAggregatorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2payoutsAggregatorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2payoutsAggregatorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AggregatorId == other.AggregatorId ||
                    this.AggregatorId != null &&
                    this.AggregatorId.Equals(other.AggregatorId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.IndependentSalesOrganizationID == other.IndependentSalesOrganizationID ||
                    this.IndependentSalesOrganizationID != null &&
                    this.IndependentSalesOrganizationID.Equals(other.IndependentSalesOrganizationID)
                ) && 
                (
                    this.SubMerchant == other.SubMerchant ||
                    this.SubMerchant != null &&
                    this.SubMerchant.Equals(other.SubMerchant)
                ) && 
                (
                    this.StreetAddress == other.StreetAddress ||
                    this.StreetAddress != null &&
                    this.StreetAddress.Equals(other.StreetAddress)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AggregatorId != null)
                    hash = hash * 59 + this.AggregatorId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.IndependentSalesOrganizationID != null)
                    hash = hash * 59 + this.IndependentSalesOrganizationID.GetHashCode();
                if (this.SubMerchant != null)
                    hash = hash * 59 + this.SubMerchant.GetHashCode();
                if (this.StreetAddress != null)
                    hash = hash * 59 + this.StreetAddress.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
