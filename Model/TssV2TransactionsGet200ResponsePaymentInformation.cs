/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TssV2TransactionsGet200ResponsePaymentInformation
    /// </summary>
    [DataContract]
    public partial class TssV2TransactionsGet200ResponsePaymentInformation :  IEquatable<TssV2TransactionsGet200ResponsePaymentInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TssV2TransactionsGet200ResponsePaymentInformation" /> class.
        /// </summary>
        /// <param name="PaymentType">PaymentType.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="Card">Card.</param>
        /// <param name="Brands">This array contains the supported brands. .</param>
        /// <param name="Features">Features.</param>
        /// <param name="Invoice">Invoice.</param>
        /// <param name="Network">Network.</param>
        /// <param name="IssuerInformation">IssuerInformation.</param>
        /// <param name="Bank">Bank.</param>
        /// <param name="AccountFeatures">AccountFeatures.</param>
        /// <param name="PaymentInstrument">PaymentInstrument.</param>
        /// <param name="InstrumentIdentifier">InstrumentIdentifier.</param>
        /// <param name="ShippingAddress">ShippingAddress.</param>
        /// <param name="FluidData">FluidData.</param>
        public TssV2TransactionsGet200ResponsePaymentInformation(TssV2TransactionsGet200ResponsePaymentInformationPaymentType PaymentType = default(TssV2TransactionsGet200ResponsePaymentInformationPaymentType), TssV2TransactionsGet200ResponsePaymentInformationCustomer Customer = default(TssV2TransactionsGet200ResponsePaymentInformationCustomer), TssV2TransactionsGet200ResponsePaymentInformationCard Card = default(TssV2TransactionsGet200ResponsePaymentInformationCard), List<TssV2TransactionsGet200ResponsePaymentInformationBrands> Brands = default(List<TssV2TransactionsGet200ResponsePaymentInformationBrands>), TssV2TransactionsGet200ResponsePaymentInformationFeatures Features = default(TssV2TransactionsGet200ResponsePaymentInformationFeatures), TssV2TransactionsGet200ResponsePaymentInformationInvoice Invoice = default(TssV2TransactionsGet200ResponsePaymentInformationInvoice), TssV2TransactionsGet200ResponsePaymentInformationNetwork Network = default(TssV2TransactionsGet200ResponsePaymentInformationNetwork), TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation IssuerInformation = default(TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation), TssV2TransactionsGet200ResponsePaymentInformationBank Bank = default(TssV2TransactionsGet200ResponsePaymentInformationBank), TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures AccountFeatures = default(TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures), PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument PaymentInstrument = default(PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument), TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier InstrumentIdentifier = default(TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier), PtsV2PaymentsPost201ResponseTokenInformationShippingAddress ShippingAddress = default(PtsV2PaymentsPost201ResponseTokenInformationShippingAddress), TssV2TransactionsGet200ResponsePaymentInformationFluidData FluidData = default(TssV2TransactionsGet200ResponsePaymentInformationFluidData))
        {
            this.PaymentType = PaymentType;
            this.Customer = Customer;
            this.Card = Card;
            this.Brands = Brands;
            this.Features = Features;
            this.Invoice = Invoice;
            this.Network = Network;
            this.IssuerInformation = IssuerInformation;
            this.Bank = Bank;
            this.AccountFeatures = AccountFeatures;
            this.PaymentInstrument = PaymentInstrument;
            this.InstrumentIdentifier = InstrumentIdentifier;
            this.ShippingAddress = ShippingAddress;
            this.FluidData = FluidData;
        }
        
        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationPaymentType PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationCustomer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationCard Card { get; set; }

        /// <summary>
        /// This array contains the supported brands. 
        /// </summary>
        /// <value>This array contains the supported brands. </value>
        [DataMember(Name="brands", EmitDefaultValue=false)]
        public List<TssV2TransactionsGet200ResponsePaymentInformationBrands> Brands { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationFeatures Features { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name="invoice", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationInvoice Invoice { get; set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationNetwork Network { get; set; }

        /// <summary>
        /// Gets or Sets IssuerInformation
        /// </summary>
        [DataMember(Name="issuerInformation", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation IssuerInformation { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name="bank", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationBank Bank { get; set; }

        /// <summary>
        /// Gets or Sets AccountFeatures
        /// </summary>
        [DataMember(Name="accountFeatures", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures AccountFeatures { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstrument
        /// </summary>
        [DataMember(Name="paymentInstrument", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument PaymentInstrument { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentIdentifier
        /// </summary>
        [DataMember(Name="instrumentIdentifier", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier InstrumentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseTokenInformationShippingAddress ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets FluidData
        /// </summary>
        [DataMember(Name="fluidData", EmitDefaultValue=false)]
        public TssV2TransactionsGet200ResponsePaymentInformationFluidData FluidData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TssV2TransactionsGet200ResponsePaymentInformation {\n");
            if (PaymentType != null) sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            if (Customer != null) sb.Append("  Customer: ").Append(Customer).Append("\n");
            if (Card != null) sb.Append("  Card: ").Append(Card).Append("\n");
            if (Brands != null) sb.Append("  Brands: ").Append(Brands).Append("\n");
            if (Features != null) sb.Append("  Features: ").Append(Features).Append("\n");
            if (Invoice != null) sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            if (Network != null) sb.Append("  Network: ").Append(Network).Append("\n");
            if (IssuerInformation != null) sb.Append("  IssuerInformation: ").Append(IssuerInformation).Append("\n");
            if (Bank != null) sb.Append("  Bank: ").Append(Bank).Append("\n");
            if (AccountFeatures != null) sb.Append("  AccountFeatures: ").Append(AccountFeatures).Append("\n");
            if (PaymentInstrument != null) sb.Append("  PaymentInstrument: ").Append(PaymentInstrument).Append("\n");
            if (InstrumentIdentifier != null) sb.Append("  InstrumentIdentifier: ").Append(InstrumentIdentifier).Append("\n");
            if (ShippingAddress != null) sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            if (FluidData != null) sb.Append("  FluidData: ").Append(FluidData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TssV2TransactionsGet200ResponsePaymentInformation);
        }

        /// <summary>
        /// Returns true if TssV2TransactionsGet200ResponsePaymentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of TssV2TransactionsGet200ResponsePaymentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TssV2TransactionsGet200ResponsePaymentInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentType == other.PaymentType ||
                    this.PaymentType != null &&
                    this.PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.Brands == other.Brands ||
                    this.Brands != null &&
                    this.Brands.SequenceEqual(other.Brands)
                ) && 
                (
                    this.Features == other.Features ||
                    this.Features != null &&
                    this.Features.Equals(other.Features)
                ) && 
                (
                    this.Invoice == other.Invoice ||
                    this.Invoice != null &&
                    this.Invoice.Equals(other.Invoice)
                ) && 
                (
                    this.Network == other.Network ||
                    this.Network != null &&
                    this.Network.Equals(other.Network)
                ) && 
                (
                    this.IssuerInformation == other.IssuerInformation ||
                    this.IssuerInformation != null &&
                    this.IssuerInformation.Equals(other.IssuerInformation)
                ) && 
                (
                    this.Bank == other.Bank ||
                    this.Bank != null &&
                    this.Bank.Equals(other.Bank)
                ) && 
                (
                    this.AccountFeatures == other.AccountFeatures ||
                    this.AccountFeatures != null &&
                    this.AccountFeatures.Equals(other.AccountFeatures)
                ) && 
                (
                    this.PaymentInstrument == other.PaymentInstrument ||
                    this.PaymentInstrument != null &&
                    this.PaymentInstrument.Equals(other.PaymentInstrument)
                ) && 
                (
                    this.InstrumentIdentifier == other.InstrumentIdentifier ||
                    this.InstrumentIdentifier != null &&
                    this.InstrumentIdentifier.Equals(other.InstrumentIdentifier)
                ) && 
                (
                    this.ShippingAddress == other.ShippingAddress ||
                    this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(other.ShippingAddress)
                ) && 
                (
                    this.FluidData == other.FluidData ||
                    this.FluidData != null &&
                    this.FluidData.Equals(other.FluidData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentType != null)
                    hash = hash * 59 + this.PaymentType.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.Brands != null)
                    hash = hash * 59 + this.Brands.GetHashCode();
                if (this.Features != null)
                    hash = hash * 59 + this.Features.GetHashCode();
                if (this.Invoice != null)
                    hash = hash * 59 + this.Invoice.GetHashCode();
                if (this.Network != null)
                    hash = hash * 59 + this.Network.GetHashCode();
                if (this.IssuerInformation != null)
                    hash = hash * 59 + this.IssuerInformation.GetHashCode();
                if (this.Bank != null)
                    hash = hash * 59 + this.Bank.GetHashCode();
                if (this.AccountFeatures != null)
                    hash = hash * 59 + this.AccountFeatures.GetHashCode();
                if (this.PaymentInstrument != null)
                    hash = hash * 59 + this.PaymentInstrument.GetHashCode();
                if (this.InstrumentIdentifier != null)
                    hash = hash * 59 + this.InstrumentIdentifier.GetHashCode();
                if (this.ShippingAddress != null)
                    hash = hash * 59 + this.ShippingAddress.GetHashCode();
                if (this.FluidData != null)
                    hash = hash * 59 + this.FluidData.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
