/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Settlement Status Section Values.
    /// </summary>
    [DataContract]
    public partial class ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses :  IEquatable<ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses" /> class.
        /// </summary>
        /// <param name="RequestId">An unique identification number assigned by CyberSource to identify the submitted request..</param>
        /// <param name="Status">Settlement Status.</param>
        /// <param name="SettlementTime">Settlement Date.</param>
        /// <param name="ReasonCode">ReasonCode.</param>
        /// <param name="ErrorText">errorText.</param>
        public ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses(string RequestId = default(string), string Status = default(string), DateTime? SettlementTime = default(DateTime?), string ReasonCode = default(string), string ErrorText = default(string))
        {
            this.RequestId = RequestId;
            this.Status = Status;
            this.SettlementTime = SettlementTime;
            this.ReasonCode = ReasonCode;
            this.ErrorText = ErrorText;
        }
        
        /// <summary>
        /// An unique identification number assigned by CyberSource to identify the submitted request.
        /// </summary>
        /// <value>An unique identification number assigned by CyberSource to identify the submitted request.</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Settlement Status
        /// </summary>
        /// <value>Settlement Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Settlement Date
        /// </summary>
        /// <value>Settlement Date</value>
        [DataMember(Name="settlementTime", EmitDefaultValue=false)]
        public DateTime? SettlementTime { get; set; }

        /// <summary>
        /// ReasonCode
        /// </summary>
        /// <value>ReasonCode</value>
        [DataMember(Name="reasonCode", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// errorText
        /// </summary>
        /// <value>errorText</value>
        [DataMember(Name="errorText", EmitDefaultValue=false)]
        public string ErrorText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SettlementTime: ").Append(SettlementTime).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ErrorText: ").Append(ErrorText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses);
        }

        /// <summary>
        /// Returns true if ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.SettlementTime == other.SettlementTime ||
                    this.SettlementTime != null &&
                    this.SettlementTime.Equals(other.SettlementTime)
                ) && 
                (
                    this.ReasonCode == other.ReasonCode ||
                    this.ReasonCode != null &&
                    this.ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    this.ErrorText == other.ErrorText ||
                    this.ErrorText != null &&
                    this.ErrorText.Equals(other.ErrorText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.SettlementTime != null)
                    hash = hash * 59 + this.SettlementTime.GetHashCode();
                if (this.ReasonCode != null)
                    hash = hash * 59 + this.ReasonCode.GetHashCode();
                if (this.ErrorText != null)
                    hash = hash * 59 + this.ErrorText.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
