/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Upv1capturecontextsDataOrderInformationLineItems
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsDataOrderInformationLineItems :  IEquatable<Upv1capturecontextsDataOrderInformationLineItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsDataOrderInformationLineItems" /> class.
        /// </summary>
        /// <param name="ProductCode">ProductCode.</param>
        /// <param name="ProductName">ProductName.</param>
        /// <param name="ProductSku">ProductSku.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="UnitPrice">UnitPrice.</param>
        /// <param name="UnitOfMeasure">UnitOfMeasure.</param>
        /// <param name="TotalAmount">TotalAmount.</param>
        /// <param name="TaxAmount">TaxAmount.</param>
        /// <param name="TaxRate">TaxRate.</param>
        /// <param name="TaxAppliedAfterDiscount">TaxAppliedAfterDiscount.</param>
        /// <param name="TaxStatusIndicator">TaxStatusIndicator.</param>
        /// <param name="TaxTypeCode">TaxTypeCode.</param>
        /// <param name="AmountIncludesTax">AmountIncludesTax.</param>
        /// <param name="TypeOfSupply">TypeOfSupply.</param>
        /// <param name="CommodityCode">CommodityCode.</param>
        /// <param name="DiscountAmount">DiscountAmount.</param>
        /// <param name="DiscountApplied">DiscountApplied.</param>
        /// <param name="DiscountRate">DiscountRate.</param>
        /// <param name="InvoiceNumber">InvoiceNumber.</param>
        /// <param name="TaxDetails">TaxDetails.</param>
        /// <param name="FulfillmentType">FulfillmentType.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="WeightIdentifier">WeightIdentifier.</param>
        /// <param name="WeightUnit">WeightUnit.</param>
        /// <param name="ReferenceDataCode">ReferenceDataCode.</param>
        /// <param name="ReferenceDataNumber">ReferenceDataNumber.</param>
        /// <param name="UnitTaxAmount">UnitTaxAmount.</param>
        /// <param name="ProductDescription">ProductDescription.</param>
        /// <param name="GiftCardCurrency">GiftCardCurrency.</param>
        /// <param name="ShippingDestinationTypes">ShippingDestinationTypes.</param>
        /// <param name="Gift">Gift.</param>
        /// <param name="Passenger">Passenger.</param>
        public Upv1capturecontextsDataOrderInformationLineItems(string ProductCode = default(string), string ProductName = default(string), string ProductSku = default(string), int? Quantity = default(int?), string UnitPrice = default(string), string UnitOfMeasure = default(string), string TotalAmount = default(string), string TaxAmount = default(string), string TaxRate = default(string), string TaxAppliedAfterDiscount = default(string), string TaxStatusIndicator = default(string), string TaxTypeCode = default(string), bool? AmountIncludesTax = default(bool?), string TypeOfSupply = default(string), string CommodityCode = default(string), string DiscountAmount = default(string), bool? DiscountApplied = default(bool?), string DiscountRate = default(string), string InvoiceNumber = default(string), Upv1capturecontextsDataOrderInformationLineItemsTaxDetails TaxDetails = default(Upv1capturecontextsDataOrderInformationLineItemsTaxDetails), string FulfillmentType = default(string), string Weight = default(string), string WeightIdentifier = default(string), string WeightUnit = default(string), string ReferenceDataCode = default(string), string ReferenceDataNumber = default(string), string UnitTaxAmount = default(string), string ProductDescription = default(string), string GiftCardCurrency = default(string), string ShippingDestinationTypes = default(string), bool? Gift = default(bool?), Upv1capturecontextsDataOrderInformationLineItemsPassenger Passenger = default(Upv1capturecontextsDataOrderInformationLineItemsPassenger))
        {
            this.ProductCode = ProductCode;
            this.ProductName = ProductName;
            this.ProductSku = ProductSku;
            this.Quantity = Quantity;
            this.UnitPrice = UnitPrice;
            this.UnitOfMeasure = UnitOfMeasure;
            this.TotalAmount = TotalAmount;
            this.TaxAmount = TaxAmount;
            this.TaxRate = TaxRate;
            this.TaxAppliedAfterDiscount = TaxAppliedAfterDiscount;
            this.TaxStatusIndicator = TaxStatusIndicator;
            this.TaxTypeCode = TaxTypeCode;
            this.AmountIncludesTax = AmountIncludesTax;
            this.TypeOfSupply = TypeOfSupply;
            this.CommodityCode = CommodityCode;
            this.DiscountAmount = DiscountAmount;
            this.DiscountApplied = DiscountApplied;
            this.DiscountRate = DiscountRate;
            this.InvoiceNumber = InvoiceNumber;
            this.TaxDetails = TaxDetails;
            this.FulfillmentType = FulfillmentType;
            this.Weight = Weight;
            this.WeightIdentifier = WeightIdentifier;
            this.WeightUnit = WeightUnit;
            this.ReferenceDataCode = ReferenceDataCode;
            this.ReferenceDataNumber = ReferenceDataNumber;
            this.UnitTaxAmount = UnitTaxAmount;
            this.ProductDescription = ProductDescription;
            this.GiftCardCurrency = GiftCardCurrency;
            this.ShippingDestinationTypes = ShippingDestinationTypes;
            this.Gift = Gift;
            this.Passenger = Passenger;
        }
        
        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ProductSku
        /// </summary>
        [DataMember(Name="productSku", EmitDefaultValue=false)]
        public string ProductSku { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public string TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets TaxAppliedAfterDiscount
        /// </summary>
        [DataMember(Name="taxAppliedAfterDiscount", EmitDefaultValue=false)]
        public string TaxAppliedAfterDiscount { get; set; }

        /// <summary>
        /// Gets or Sets TaxStatusIndicator
        /// </summary>
        [DataMember(Name="taxStatusIndicator", EmitDefaultValue=false)]
        public string TaxStatusIndicator { get; set; }

        /// <summary>
        /// Gets or Sets TaxTypeCode
        /// </summary>
        [DataMember(Name="taxTypeCode", EmitDefaultValue=false)]
        public string TaxTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets AmountIncludesTax
        /// </summary>
        [DataMember(Name="amountIncludesTax", EmitDefaultValue=false)]
        public bool? AmountIncludesTax { get; set; }

        /// <summary>
        /// Gets or Sets TypeOfSupply
        /// </summary>
        [DataMember(Name="typeOfSupply", EmitDefaultValue=false)]
        public string TypeOfSupply { get; set; }

        /// <summary>
        /// Gets or Sets CommodityCode
        /// </summary>
        [DataMember(Name="commodityCode", EmitDefaultValue=false)]
        public string CommodityCode { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountApplied
        /// </summary>
        [DataMember(Name="discountApplied", EmitDefaultValue=false)]
        public bool? DiscountApplied { get; set; }

        /// <summary>
        /// Gets or Sets DiscountRate
        /// </summary>
        [DataMember(Name="discountRate", EmitDefaultValue=false)]
        public string DiscountRate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="taxDetails", EmitDefaultValue=false)]
        public Upv1capturecontextsDataOrderInformationLineItemsTaxDetails TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentType
        /// </summary>
        [DataMember(Name="fulfillmentType", EmitDefaultValue=false)]
        public string FulfillmentType { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets WeightIdentifier
        /// </summary>
        [DataMember(Name="weightIdentifier", EmitDefaultValue=false)]
        public string WeightIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets WeightUnit
        /// </summary>
        [DataMember(Name="weightUnit", EmitDefaultValue=false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDataCode
        /// </summary>
        [DataMember(Name="referenceDataCode", EmitDefaultValue=false)]
        public string ReferenceDataCode { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDataNumber
        /// </summary>
        [DataMember(Name="referenceDataNumber", EmitDefaultValue=false)]
        public string ReferenceDataNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnitTaxAmount
        /// </summary>
        [DataMember(Name="unitTaxAmount", EmitDefaultValue=false)]
        public string UnitTaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProductDescription
        /// </summary>
        [DataMember(Name="productDescription", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardCurrency
        /// </summary>
        [DataMember(Name="giftCardCurrency", EmitDefaultValue=false)]
        public string GiftCardCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ShippingDestinationTypes
        /// </summary>
        [DataMember(Name="shippingDestinationTypes", EmitDefaultValue=false)]
        public string ShippingDestinationTypes { get; set; }

        /// <summary>
        /// Gets or Sets Gift
        /// </summary>
        [DataMember(Name="gift", EmitDefaultValue=false)]
        public bool? Gift { get; set; }

        /// <summary>
        /// Gets or Sets Passenger
        /// </summary>
        [DataMember(Name="passenger", EmitDefaultValue=false)]
        public Upv1capturecontextsDataOrderInformationLineItemsPassenger Passenger { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsDataOrderInformationLineItems {\n");
            if (ProductCode != null) sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            if (ProductName != null) sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            if (ProductSku != null) sb.Append("  ProductSku: ").Append(ProductSku).Append("\n");
            if (Quantity != null) sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            if (UnitPrice != null) sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            if (UnitOfMeasure != null) sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            if (TotalAmount != null) sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            if (TaxAmount != null) sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            if (TaxRate != null) sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            if (TaxAppliedAfterDiscount != null) sb.Append("  TaxAppliedAfterDiscount: ").Append(TaxAppliedAfterDiscount).Append("\n");
            if (TaxStatusIndicator != null) sb.Append("  TaxStatusIndicator: ").Append(TaxStatusIndicator).Append("\n");
            if (TaxTypeCode != null) sb.Append("  TaxTypeCode: ").Append(TaxTypeCode).Append("\n");
            if (AmountIncludesTax != null) sb.Append("  AmountIncludesTax: ").Append(AmountIncludesTax).Append("\n");
            if (TypeOfSupply != null) sb.Append("  TypeOfSupply: ").Append(TypeOfSupply).Append("\n");
            if (CommodityCode != null) sb.Append("  CommodityCode: ").Append(CommodityCode).Append("\n");
            if (DiscountAmount != null) sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            if (DiscountApplied != null) sb.Append("  DiscountApplied: ").Append(DiscountApplied).Append("\n");
            if (DiscountRate != null) sb.Append("  DiscountRate: ").Append(DiscountRate).Append("\n");
            if (InvoiceNumber != null) sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            if (TaxDetails != null) sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            if (FulfillmentType != null) sb.Append("  FulfillmentType: ").Append(FulfillmentType).Append("\n");
            if (Weight != null) sb.Append("  Weight: ").Append(Weight).Append("\n");
            if (WeightIdentifier != null) sb.Append("  WeightIdentifier: ").Append(WeightIdentifier).Append("\n");
            if (WeightUnit != null) sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            if (ReferenceDataCode != null) sb.Append("  ReferenceDataCode: ").Append(ReferenceDataCode).Append("\n");
            if (ReferenceDataNumber != null) sb.Append("  ReferenceDataNumber: ").Append(ReferenceDataNumber).Append("\n");
            if (UnitTaxAmount != null) sb.Append("  UnitTaxAmount: ").Append(UnitTaxAmount).Append("\n");
            if (ProductDescription != null) sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            if (GiftCardCurrency != null) sb.Append("  GiftCardCurrency: ").Append(GiftCardCurrency).Append("\n");
            if (ShippingDestinationTypes != null) sb.Append("  ShippingDestinationTypes: ").Append(ShippingDestinationTypes).Append("\n");
            if (Gift != null) sb.Append("  Gift: ").Append(Gift).Append("\n");
            if (Passenger != null) sb.Append("  Passenger: ").Append(Passenger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsDataOrderInformationLineItems);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsDataOrderInformationLineItems instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsDataOrderInformationLineItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsDataOrderInformationLineItems other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProductCode == other.ProductCode ||
                    this.ProductCode != null &&
                    this.ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) && 
                (
                    this.ProductSku == other.ProductSku ||
                    this.ProductSku != null &&
                    this.ProductSku.Equals(other.ProductSku)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.UnitPrice == other.UnitPrice ||
                    this.UnitPrice != null &&
                    this.UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    this.UnitOfMeasure == other.UnitOfMeasure ||
                    this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.TaxRate == other.TaxRate ||
                    this.TaxRate != null &&
                    this.TaxRate.Equals(other.TaxRate)
                ) && 
                (
                    this.TaxAppliedAfterDiscount == other.TaxAppliedAfterDiscount ||
                    this.TaxAppliedAfterDiscount != null &&
                    this.TaxAppliedAfterDiscount.Equals(other.TaxAppliedAfterDiscount)
                ) && 
                (
                    this.TaxStatusIndicator == other.TaxStatusIndicator ||
                    this.TaxStatusIndicator != null &&
                    this.TaxStatusIndicator.Equals(other.TaxStatusIndicator)
                ) && 
                (
                    this.TaxTypeCode == other.TaxTypeCode ||
                    this.TaxTypeCode != null &&
                    this.TaxTypeCode.Equals(other.TaxTypeCode)
                ) && 
                (
                    this.AmountIncludesTax == other.AmountIncludesTax ||
                    this.AmountIncludesTax != null &&
                    this.AmountIncludesTax.Equals(other.AmountIncludesTax)
                ) && 
                (
                    this.TypeOfSupply == other.TypeOfSupply ||
                    this.TypeOfSupply != null &&
                    this.TypeOfSupply.Equals(other.TypeOfSupply)
                ) && 
                (
                    this.CommodityCode == other.CommodityCode ||
                    this.CommodityCode != null &&
                    this.CommodityCode.Equals(other.CommodityCode)
                ) && 
                (
                    this.DiscountAmount == other.DiscountAmount ||
                    this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    this.DiscountApplied == other.DiscountApplied ||
                    this.DiscountApplied != null &&
                    this.DiscountApplied.Equals(other.DiscountApplied)
                ) && 
                (
                    this.DiscountRate == other.DiscountRate ||
                    this.DiscountRate != null &&
                    this.DiscountRate.Equals(other.DiscountRate)
                ) && 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.TaxDetails == other.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.Equals(other.TaxDetails)
                ) && 
                (
                    this.FulfillmentType == other.FulfillmentType ||
                    this.FulfillmentType != null &&
                    this.FulfillmentType.Equals(other.FulfillmentType)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) && 
                (
                    this.WeightIdentifier == other.WeightIdentifier ||
                    this.WeightIdentifier != null &&
                    this.WeightIdentifier.Equals(other.WeightIdentifier)
                ) && 
                (
                    this.WeightUnit == other.WeightUnit ||
                    this.WeightUnit != null &&
                    this.WeightUnit.Equals(other.WeightUnit)
                ) && 
                (
                    this.ReferenceDataCode == other.ReferenceDataCode ||
                    this.ReferenceDataCode != null &&
                    this.ReferenceDataCode.Equals(other.ReferenceDataCode)
                ) && 
                (
                    this.ReferenceDataNumber == other.ReferenceDataNumber ||
                    this.ReferenceDataNumber != null &&
                    this.ReferenceDataNumber.Equals(other.ReferenceDataNumber)
                ) && 
                (
                    this.UnitTaxAmount == other.UnitTaxAmount ||
                    this.UnitTaxAmount != null &&
                    this.UnitTaxAmount.Equals(other.UnitTaxAmount)
                ) && 
                (
                    this.ProductDescription == other.ProductDescription ||
                    this.ProductDescription != null &&
                    this.ProductDescription.Equals(other.ProductDescription)
                ) && 
                (
                    this.GiftCardCurrency == other.GiftCardCurrency ||
                    this.GiftCardCurrency != null &&
                    this.GiftCardCurrency.Equals(other.GiftCardCurrency)
                ) && 
                (
                    this.ShippingDestinationTypes == other.ShippingDestinationTypes ||
                    this.ShippingDestinationTypes != null &&
                    this.ShippingDestinationTypes.Equals(other.ShippingDestinationTypes)
                ) && 
                (
                    this.Gift == other.Gift ||
                    this.Gift != null &&
                    this.Gift.Equals(other.Gift)
                ) && 
                (
                    this.Passenger == other.Passenger ||
                    this.Passenger != null &&
                    this.Passenger.Equals(other.Passenger)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductCode != null)
                    hash = hash * 59 + this.ProductCode.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.ProductSku != null)
                    hash = hash * 59 + this.ProductSku.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.UnitPrice != null)
                    hash = hash * 59 + this.UnitPrice.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hash = hash * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxRate != null)
                    hash = hash * 59 + this.TaxRate.GetHashCode();
                if (this.TaxAppliedAfterDiscount != null)
                    hash = hash * 59 + this.TaxAppliedAfterDiscount.GetHashCode();
                if (this.TaxStatusIndicator != null)
                    hash = hash * 59 + this.TaxStatusIndicator.GetHashCode();
                if (this.TaxTypeCode != null)
                    hash = hash * 59 + this.TaxTypeCode.GetHashCode();
                if (this.AmountIncludesTax != null)
                    hash = hash * 59 + this.AmountIncludesTax.GetHashCode();
                if (this.TypeOfSupply != null)
                    hash = hash * 59 + this.TypeOfSupply.GetHashCode();
                if (this.CommodityCode != null)
                    hash = hash * 59 + this.CommodityCode.GetHashCode();
                if (this.DiscountAmount != null)
                    hash = hash * 59 + this.DiscountAmount.GetHashCode();
                if (this.DiscountApplied != null)
                    hash = hash * 59 + this.DiscountApplied.GetHashCode();
                if (this.DiscountRate != null)
                    hash = hash * 59 + this.DiscountRate.GetHashCode();
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.TaxDetails != null)
                    hash = hash * 59 + this.TaxDetails.GetHashCode();
                if (this.FulfillmentType != null)
                    hash = hash * 59 + this.FulfillmentType.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                if (this.WeightIdentifier != null)
                    hash = hash * 59 + this.WeightIdentifier.GetHashCode();
                if (this.WeightUnit != null)
                    hash = hash * 59 + this.WeightUnit.GetHashCode();
                if (this.ReferenceDataCode != null)
                    hash = hash * 59 + this.ReferenceDataCode.GetHashCode();
                if (this.ReferenceDataNumber != null)
                    hash = hash * 59 + this.ReferenceDataNumber.GetHashCode();
                if (this.UnitTaxAmount != null)
                    hash = hash * 59 + this.UnitTaxAmount.GetHashCode();
                if (this.ProductDescription != null)
                    hash = hash * 59 + this.ProductDescription.GetHashCode();
                if (this.GiftCardCurrency != null)
                    hash = hash * 59 + this.GiftCardCurrency.GetHashCode();
                if (this.ShippingDestinationTypes != null)
                    hash = hash * 59 + this.ShippingDestinationTypes.GetHashCode();
                if (this.Gift != null)
                    hash = hash * 59 + this.Gift.GetHashCode();
                if (this.Passenger != null)
                    hash = hash * 59 + this.Passenger.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
