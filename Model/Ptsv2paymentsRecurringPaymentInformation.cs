/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// This object contains recurring payment information.
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsRecurringPaymentInformation :  IEquatable<Ptsv2paymentsRecurringPaymentInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsRecurringPaymentInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ptsv2paymentsRecurringPaymentInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsRecurringPaymentInformation" /> class.
        /// </summary>
        /// <param name="EndDate">The date after which no further recurring authorizations should be performed. Format: &#x60;YYYY-MM-DD&#x60; **Note** This field is required for recurring transactions.  (required).</param>
        /// <param name="Frequency">Integer value indicating the minimum number of days between recurring authorizations. A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months.  Example: 6 months &#x3D; 168  Example values accepted (31 days): - 31 - 031 - 0031  **Note** This field is required for recurring transactions.  (required).</param>
        /// <param name="NumberOfPayments">Total number of payments for the duration of the recurring subscription. .</param>
        /// <param name="OriginalPurchaseDate">Date of original purchase. Required for recurring transactions. Format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60; **Note**: If this field is empty, the current date is used. .</param>
        /// <param name="SequenceNumber">This field is mandatory for Cartes Bancaires recurring transactions on Credit Mutuel-CIC.       This field records recurring sequence, e.g. 1st for initial,  2 for subsequent, 3 etc .</param>
        /// <param name="Type">This contains the type of recurring payment. Valid Values : 1 - Registration/First transaction 2 - Subsequent transaction 3 - Modification 4 - Cancellation .</param>
        /// <param name="Occurrence">This value indicates how often a recurring payment occurs. Valid Values : • 01 (Daily) • 02 (Twice weekly) • 03 (Weekly) • 04 (Ten days) • 05 (Fortnightly) • 06 (Monthly) • 07 (Every two months) • 08 (Trimester) • 09 (Quarterly) • 10 (Twice yearly) • 11 (Annually) • 12 (Unscheduled) .</param>
        /// <param name="ValidationIndicator">This tag will contain a value that indicates whether or not the recurring payment transaction has been validated. Valid values : 0- Not validated 1- Validated .</param>
        /// <param name="AmountType">Indicates recurring amount type agreed by the cardholder Valid Values : 1- Fixed amount recurring payment 2- Recurring payment with maximum amount .</param>
        /// <param name="MaximumAmount">This API field will contain the maximum amount agreed to by the cardholder. The currency of this amount will be specified in Field 49—Currency Code,Transaction. .</param>
        /// <param name="ReferenceNumber">This will contain a unique reference number for the recurring payment transaction. .</param>
        public Ptsv2paymentsRecurringPaymentInformation(string EndDate = default(string), int? Frequency = default(int?), int? NumberOfPayments = default(int?), string OriginalPurchaseDate = default(string), int? SequenceNumber = default(int?), string Type = default(string), string Occurrence = default(string), string ValidationIndicator = default(string), string AmountType = default(string), string MaximumAmount = default(string), string ReferenceNumber = default(string))
        {
            this.EndDate = EndDate;
            this.Frequency = Frequency;
            this.NumberOfPayments = NumberOfPayments;
            this.OriginalPurchaseDate = OriginalPurchaseDate;
            this.SequenceNumber = SequenceNumber;
            this.Type = Type;
            this.Occurrence = Occurrence;
            this.ValidationIndicator = ValidationIndicator;
            this.AmountType = AmountType;
            this.MaximumAmount = MaximumAmount;
            this.ReferenceNumber = ReferenceNumber;
        }
        
        /// <summary>
        /// The date after which no further recurring authorizations should be performed. Format: &#x60;YYYY-MM-DD&#x60; **Note** This field is required for recurring transactions. 
        /// </summary>
        /// <value>The date after which no further recurring authorizations should be performed. Format: &#x60;YYYY-MM-DD&#x60; **Note** This field is required for recurring transactions. </value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Integer value indicating the minimum number of days between recurring authorizations. A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months.  Example: 6 months &#x3D; 168  Example values accepted (31 days): - 31 - 031 - 0031  **Note** This field is required for recurring transactions. 
        /// </summary>
        /// <value>Integer value indicating the minimum number of days between recurring authorizations. A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months.  Example: 6 months &#x3D; 168  Example values accepted (31 days): - 31 - 031 - 0031  **Note** This field is required for recurring transactions. </value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// Total number of payments for the duration of the recurring subscription. 
        /// </summary>
        /// <value>Total number of payments for the duration of the recurring subscription. </value>
        [DataMember(Name="numberOfPayments", EmitDefaultValue=false)]
        public int? NumberOfPayments { get; set; }

        /// <summary>
        /// Date of original purchase. Required for recurring transactions. Format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60; **Note**: If this field is empty, the current date is used. 
        /// </summary>
        /// <value>Date of original purchase. Required for recurring transactions. Format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60; **Note**: If this field is empty, the current date is used. </value>
        [DataMember(Name="originalPurchaseDate", EmitDefaultValue=false)]
        public string OriginalPurchaseDate { get; set; }

        /// <summary>
        /// This field is mandatory for Cartes Bancaires recurring transactions on Credit Mutuel-CIC.       This field records recurring sequence, e.g. 1st for initial,  2 for subsequent, 3 etc 
        /// </summary>
        /// <value>This field is mandatory for Cartes Bancaires recurring transactions on Credit Mutuel-CIC.       This field records recurring sequence, e.g. 1st for initial,  2 for subsequent, 3 etc </value>
        [DataMember(Name="sequenceNumber", EmitDefaultValue=false)]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// This contains the type of recurring payment. Valid Values : 1 - Registration/First transaction 2 - Subsequent transaction 3 - Modification 4 - Cancellation 
        /// </summary>
        /// <value>This contains the type of recurring payment. Valid Values : 1 - Registration/First transaction 2 - Subsequent transaction 3 - Modification 4 - Cancellation </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// This value indicates how often a recurring payment occurs. Valid Values : • 01 (Daily) • 02 (Twice weekly) • 03 (Weekly) • 04 (Ten days) • 05 (Fortnightly) • 06 (Monthly) • 07 (Every two months) • 08 (Trimester) • 09 (Quarterly) • 10 (Twice yearly) • 11 (Annually) • 12 (Unscheduled) 
        /// </summary>
        /// <value>This value indicates how often a recurring payment occurs. Valid Values : • 01 (Daily) • 02 (Twice weekly) • 03 (Weekly) • 04 (Ten days) • 05 (Fortnightly) • 06 (Monthly) • 07 (Every two months) • 08 (Trimester) • 09 (Quarterly) • 10 (Twice yearly) • 11 (Annually) • 12 (Unscheduled) </value>
        [DataMember(Name="occurrence", EmitDefaultValue=false)]
        public string Occurrence { get; set; }

        /// <summary>
        /// This tag will contain a value that indicates whether or not the recurring payment transaction has been validated. Valid values : 0- Not validated 1- Validated 
        /// </summary>
        /// <value>This tag will contain a value that indicates whether or not the recurring payment transaction has been validated. Valid values : 0- Not validated 1- Validated </value>
        [DataMember(Name="validationIndicator", EmitDefaultValue=false)]
        public string ValidationIndicator { get; set; }

        /// <summary>
        /// Indicates recurring amount type agreed by the cardholder Valid Values : 1- Fixed amount recurring payment 2- Recurring payment with maximum amount 
        /// </summary>
        /// <value>Indicates recurring amount type agreed by the cardholder Valid Values : 1- Fixed amount recurring payment 2- Recurring payment with maximum amount </value>
        [DataMember(Name="amountType", EmitDefaultValue=false)]
        public string AmountType { get; set; }

        /// <summary>
        /// This API field will contain the maximum amount agreed to by the cardholder. The currency of this amount will be specified in Field 49—Currency Code,Transaction. 
        /// </summary>
        /// <value>This API field will contain the maximum amount agreed to by the cardholder. The currency of this amount will be specified in Field 49—Currency Code,Transaction. </value>
        [DataMember(Name="maximumAmount", EmitDefaultValue=false)]
        public string MaximumAmount { get; set; }

        /// <summary>
        /// This will contain a unique reference number for the recurring payment transaction. 
        /// </summary>
        /// <value>This will contain a unique reference number for the recurring payment transaction. </value>
        [DataMember(Name="referenceNumber", EmitDefaultValue=false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsRecurringPaymentInformation {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  NumberOfPayments: ").Append(NumberOfPayments).Append("\n");
            sb.Append("  OriginalPurchaseDate: ").Append(OriginalPurchaseDate).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Occurrence: ").Append(Occurrence).Append("\n");
            sb.Append("  ValidationIndicator: ").Append(ValidationIndicator).Append("\n");
            sb.Append("  AmountType: ").Append(AmountType).Append("\n");
            sb.Append("  MaximumAmount: ").Append(MaximumAmount).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsRecurringPaymentInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsRecurringPaymentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsRecurringPaymentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsRecurringPaymentInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Frequency == other.Frequency ||
                    this.Frequency != null &&
                    this.Frequency.Equals(other.Frequency)
                ) && 
                (
                    this.NumberOfPayments == other.NumberOfPayments ||
                    this.NumberOfPayments != null &&
                    this.NumberOfPayments.Equals(other.NumberOfPayments)
                ) && 
                (
                    this.OriginalPurchaseDate == other.OriginalPurchaseDate ||
                    this.OriginalPurchaseDate != null &&
                    this.OriginalPurchaseDate.Equals(other.OriginalPurchaseDate)
                ) && 
                (
                    this.SequenceNumber == other.SequenceNumber ||
                    this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(other.SequenceNumber)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Occurrence == other.Occurrence ||
                    this.Occurrence != null &&
                    this.Occurrence.Equals(other.Occurrence)
                ) && 
                (
                    this.ValidationIndicator == other.ValidationIndicator ||
                    this.ValidationIndicator != null &&
                    this.ValidationIndicator.Equals(other.ValidationIndicator)
                ) && 
                (
                    this.AmountType == other.AmountType ||
                    this.AmountType != null &&
                    this.AmountType.Equals(other.AmountType)
                ) && 
                (
                    this.MaximumAmount == other.MaximumAmount ||
                    this.MaximumAmount != null &&
                    this.MaximumAmount.Equals(other.MaximumAmount)
                ) && 
                (
                    this.ReferenceNumber == other.ReferenceNumber ||
                    this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(other.ReferenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Frequency != null)
                    hash = hash * 59 + this.Frequency.GetHashCode();
                if (this.NumberOfPayments != null)
                    hash = hash * 59 + this.NumberOfPayments.GetHashCode();
                if (this.OriginalPurchaseDate != null)
                    hash = hash * 59 + this.OriginalPurchaseDate.GetHashCode();
                if (this.SequenceNumber != null)
                    hash = hash * 59 + this.SequenceNumber.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Occurrence != null)
                    hash = hash * 59 + this.Occurrence.GetHashCode();
                if (this.ValidationIndicator != null)
                    hash = hash * 59 + this.ValidationIndicator.GetHashCode();
                if (this.AmountType != null)
                    hash = hash * 59 + this.AmountType.GetHashCode();
                if (this.MaximumAmount != null)
                    hash = hash * 59 + this.MaximumAmount.GetHashCode();
                if (this.ReferenceNumber != null)
                    hash = hash * 59 + this.ReferenceNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
