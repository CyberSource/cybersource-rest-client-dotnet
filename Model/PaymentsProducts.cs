/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PaymentsProducts
    /// </summary>
    [DataContract]
    public partial class PaymentsProducts :  IEquatable<PaymentsProducts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsProducts" /> class.
        /// </summary>
        /// <param name="CardProcessing">CardProcessing.</param>
        /// <param name="CardPresentConnect">CardPresentConnect.</param>
        /// <param name="CybsReadyTerminal">CybsReadyTerminal.</param>
        /// <param name="ECheck">ECheck.</param>
        /// <param name="PayerAuthentication">PayerAuthentication.</param>
        /// <param name="DigitalPayments">DigitalPayments.</param>
        /// <param name="SecureAcceptance">SecureAcceptance.</param>
        /// <param name="VirtualTerminal">VirtualTerminal.</param>
        /// <param name="CurrencyConversion">CurrencyConversion.</param>
        /// <param name="Tax">Tax.</param>
        /// <param name="CustomerInvoicing">CustomerInvoicing.</param>
        /// <param name="RecurringBilling">RecurringBilling.</param>
        /// <param name="PaymentOrchestration">PaymentOrchestration.</param>
        /// <param name="Payouts">Payouts.</param>
        /// <param name="DifferentialFee">DifferentialFee.</param>
        /// <param name="PayByLink">PayByLink.</param>
        /// <param name="UnifiedCheckout">UnifiedCheckout.</param>
        /// <param name="ReceivablesManager">ReceivablesManager.</param>
        /// <param name="ServiceFee">ServiceFee.</param>
        public PaymentsProducts(PaymentsProductsCardProcessing CardProcessing = default(PaymentsProductsCardProcessing), PaymentsProductsCardPresentConnect CardPresentConnect = default(PaymentsProductsCardPresentConnect), PaymentsProductsCybsReadyTerminal CybsReadyTerminal = default(PaymentsProductsCybsReadyTerminal), PaymentsProductsECheck ECheck = default(PaymentsProductsECheck), PaymentsProductsPayerAuthentication PayerAuthentication = default(PaymentsProductsPayerAuthentication), PaymentsProductsDigitalPayments DigitalPayments = default(PaymentsProductsDigitalPayments), PaymentsProductsSecureAcceptance SecureAcceptance = default(PaymentsProductsSecureAcceptance), PaymentsProductsVirtualTerminal VirtualTerminal = default(PaymentsProductsVirtualTerminal), PaymentsProductsCurrencyConversion CurrencyConversion = default(PaymentsProductsCurrencyConversion), PaymentsProductsTax Tax = default(PaymentsProductsTax), PaymentsProductsTax CustomerInvoicing = default(PaymentsProductsTax), PaymentsProductsTax RecurringBilling = default(PaymentsProductsTax), PaymentsProductsTax PaymentOrchestration = default(PaymentsProductsTax), PaymentsProductsPayouts Payouts = default(PaymentsProductsPayouts), PaymentsProductsDifferentialFee DifferentialFee = default(PaymentsProductsDifferentialFee), PaymentsProductsTax PayByLink = default(PaymentsProductsTax), PaymentsProductsTax UnifiedCheckout = default(PaymentsProductsTax), PaymentsProductsTax ReceivablesManager = default(PaymentsProductsTax), PaymentsProductsServiceFee ServiceFee = default(PaymentsProductsServiceFee))
        {
            this.CardProcessing = CardProcessing;
            this.CardPresentConnect = CardPresentConnect;
            this.CybsReadyTerminal = CybsReadyTerminal;
            this.ECheck = ECheck;
            this.PayerAuthentication = PayerAuthentication;
            this.DigitalPayments = DigitalPayments;
            this.SecureAcceptance = SecureAcceptance;
            this.VirtualTerminal = VirtualTerminal;
            this.CurrencyConversion = CurrencyConversion;
            this.Tax = Tax;
            this.CustomerInvoicing = CustomerInvoicing;
            this.RecurringBilling = RecurringBilling;
            this.PaymentOrchestration = PaymentOrchestration;
            this.Payouts = Payouts;
            this.DifferentialFee = DifferentialFee;
            this.PayByLink = PayByLink;
            this.UnifiedCheckout = UnifiedCheckout;
            this.ReceivablesManager = ReceivablesManager;
            this.ServiceFee = ServiceFee;
        }
        
        /// <summary>
        /// Gets or Sets CardProcessing
        /// </summary>
        [DataMember(Name="cardProcessing", EmitDefaultValue=false)]
        public PaymentsProductsCardProcessing CardProcessing { get; set; }

        /// <summary>
        /// Gets or Sets CardPresentConnect
        /// </summary>
        [DataMember(Name="cardPresentConnect", EmitDefaultValue=false)]
        public PaymentsProductsCardPresentConnect CardPresentConnect { get; set; }

        /// <summary>
        /// Gets or Sets CybsReadyTerminal
        /// </summary>
        [DataMember(Name="cybsReadyTerminal", EmitDefaultValue=false)]
        public PaymentsProductsCybsReadyTerminal CybsReadyTerminal { get; set; }

        /// <summary>
        /// Gets or Sets ECheck
        /// </summary>
        [DataMember(Name="eCheck", EmitDefaultValue=false)]
        public PaymentsProductsECheck ECheck { get; set; }

        /// <summary>
        /// Gets or Sets PayerAuthentication
        /// </summary>
        [DataMember(Name="payerAuthentication", EmitDefaultValue=false)]
        public PaymentsProductsPayerAuthentication PayerAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets DigitalPayments
        /// </summary>
        [DataMember(Name="digitalPayments", EmitDefaultValue=false)]
        public PaymentsProductsDigitalPayments DigitalPayments { get; set; }

        /// <summary>
        /// Gets or Sets SecureAcceptance
        /// </summary>
        [DataMember(Name="secureAcceptance", EmitDefaultValue=false)]
        public PaymentsProductsSecureAcceptance SecureAcceptance { get; set; }

        /// <summary>
        /// Gets or Sets VirtualTerminal
        /// </summary>
        [DataMember(Name="virtualTerminal", EmitDefaultValue=false)]
        public PaymentsProductsVirtualTerminal VirtualTerminal { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currencyConversion", EmitDefaultValue=false)]
        public PaymentsProductsCurrencyConversion CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public PaymentsProductsTax Tax { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInvoicing
        /// </summary>
        [DataMember(Name="customerInvoicing", EmitDefaultValue=false)]
        public PaymentsProductsTax CustomerInvoicing { get; set; }

        /// <summary>
        /// Gets or Sets RecurringBilling
        /// </summary>
        [DataMember(Name="recurringBilling", EmitDefaultValue=false)]
        public PaymentsProductsTax RecurringBilling { get; set; }

        /// <summary>
        /// Gets or Sets PaymentOrchestration
        /// </summary>
        [DataMember(Name="paymentOrchestration", EmitDefaultValue=false)]
        public PaymentsProductsTax PaymentOrchestration { get; set; }

        /// <summary>
        /// Gets or Sets Payouts
        /// </summary>
        [DataMember(Name="payouts", EmitDefaultValue=false)]
        public PaymentsProductsPayouts Payouts { get; set; }

        /// <summary>
        /// Gets or Sets DifferentialFee
        /// </summary>
        [DataMember(Name="differentialFee", EmitDefaultValue=false)]
        public PaymentsProductsDifferentialFee DifferentialFee { get; set; }

        /// <summary>
        /// Gets or Sets PayByLink
        /// </summary>
        [DataMember(Name="payByLink", EmitDefaultValue=false)]
        public PaymentsProductsTax PayByLink { get; set; }

        /// <summary>
        /// Gets or Sets UnifiedCheckout
        /// </summary>
        [DataMember(Name="unifiedCheckout", EmitDefaultValue=false)]
        public PaymentsProductsTax UnifiedCheckout { get; set; }

        /// <summary>
        /// Gets or Sets ReceivablesManager
        /// </summary>
        [DataMember(Name="receivablesManager", EmitDefaultValue=false)]
        public PaymentsProductsTax ReceivablesManager { get; set; }

        /// <summary>
        /// Gets or Sets ServiceFee
        /// </summary>
        [DataMember(Name="serviceFee", EmitDefaultValue=false)]
        public PaymentsProductsServiceFee ServiceFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsProducts {\n");
            sb.Append("  CardProcessing: ").Append(CardProcessing).Append("\n");
            sb.Append("  CardPresentConnect: ").Append(CardPresentConnect).Append("\n");
            sb.Append("  CybsReadyTerminal: ").Append(CybsReadyTerminal).Append("\n");
            sb.Append("  ECheck: ").Append(ECheck).Append("\n");
            sb.Append("  PayerAuthentication: ").Append(PayerAuthentication).Append("\n");
            sb.Append("  DigitalPayments: ").Append(DigitalPayments).Append("\n");
            sb.Append("  SecureAcceptance: ").Append(SecureAcceptance).Append("\n");
            sb.Append("  VirtualTerminal: ").Append(VirtualTerminal).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  CustomerInvoicing: ").Append(CustomerInvoicing).Append("\n");
            sb.Append("  RecurringBilling: ").Append(RecurringBilling).Append("\n");
            sb.Append("  PaymentOrchestration: ").Append(PaymentOrchestration).Append("\n");
            sb.Append("  Payouts: ").Append(Payouts).Append("\n");
            sb.Append("  DifferentialFee: ").Append(DifferentialFee).Append("\n");
            sb.Append("  PayByLink: ").Append(PayByLink).Append("\n");
            sb.Append("  UnifiedCheckout: ").Append(UnifiedCheckout).Append("\n");
            sb.Append("  ReceivablesManager: ").Append(ReceivablesManager).Append("\n");
            sb.Append("  ServiceFee: ").Append(ServiceFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentsProducts);
        }

        /// <summary>
        /// Returns true if PaymentsProducts instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentsProducts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsProducts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardProcessing == other.CardProcessing ||
                    this.CardProcessing != null &&
                    this.CardProcessing.Equals(other.CardProcessing)
                ) && 
                (
                    this.CardPresentConnect == other.CardPresentConnect ||
                    this.CardPresentConnect != null &&
                    this.CardPresentConnect.Equals(other.CardPresentConnect)
                ) && 
                (
                    this.CybsReadyTerminal == other.CybsReadyTerminal ||
                    this.CybsReadyTerminal != null &&
                    this.CybsReadyTerminal.Equals(other.CybsReadyTerminal)
                ) && 
                (
                    this.ECheck == other.ECheck ||
                    this.ECheck != null &&
                    this.ECheck.Equals(other.ECheck)
                ) && 
                (
                    this.PayerAuthentication == other.PayerAuthentication ||
                    this.PayerAuthentication != null &&
                    this.PayerAuthentication.Equals(other.PayerAuthentication)
                ) && 
                (
                    this.DigitalPayments == other.DigitalPayments ||
                    this.DigitalPayments != null &&
                    this.DigitalPayments.Equals(other.DigitalPayments)
                ) && 
                (
                    this.SecureAcceptance == other.SecureAcceptance ||
                    this.SecureAcceptance != null &&
                    this.SecureAcceptance.Equals(other.SecureAcceptance)
                ) && 
                (
                    this.VirtualTerminal == other.VirtualTerminal ||
                    this.VirtualTerminal != null &&
                    this.VirtualTerminal.Equals(other.VirtualTerminal)
                ) && 
                (
                    this.CurrencyConversion == other.CurrencyConversion ||
                    this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(other.CurrencyConversion)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.CustomerInvoicing == other.CustomerInvoicing ||
                    this.CustomerInvoicing != null &&
                    this.CustomerInvoicing.Equals(other.CustomerInvoicing)
                ) && 
                (
                    this.RecurringBilling == other.RecurringBilling ||
                    this.RecurringBilling != null &&
                    this.RecurringBilling.Equals(other.RecurringBilling)
                ) && 
                (
                    this.PaymentOrchestration == other.PaymentOrchestration ||
                    this.PaymentOrchestration != null &&
                    this.PaymentOrchestration.Equals(other.PaymentOrchestration)
                ) && 
                (
                    this.Payouts == other.Payouts ||
                    this.Payouts != null &&
                    this.Payouts.Equals(other.Payouts)
                ) && 
                (
                    this.DifferentialFee == other.DifferentialFee ||
                    this.DifferentialFee != null &&
                    this.DifferentialFee.Equals(other.DifferentialFee)
                ) && 
                (
                    this.PayByLink == other.PayByLink ||
                    this.PayByLink != null &&
                    this.PayByLink.Equals(other.PayByLink)
                ) && 
                (
                    this.UnifiedCheckout == other.UnifiedCheckout ||
                    this.UnifiedCheckout != null &&
                    this.UnifiedCheckout.Equals(other.UnifiedCheckout)
                ) && 
                (
                    this.ReceivablesManager == other.ReceivablesManager ||
                    this.ReceivablesManager != null &&
                    this.ReceivablesManager.Equals(other.ReceivablesManager)
                ) && 
                (
                    this.ServiceFee == other.ServiceFee ||
                    this.ServiceFee != null &&
                    this.ServiceFee.Equals(other.ServiceFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardProcessing != null)
                    hash = hash * 59 + this.CardProcessing.GetHashCode();
                if (this.CardPresentConnect != null)
                    hash = hash * 59 + this.CardPresentConnect.GetHashCode();
                if (this.CybsReadyTerminal != null)
                    hash = hash * 59 + this.CybsReadyTerminal.GetHashCode();
                if (this.ECheck != null)
                    hash = hash * 59 + this.ECheck.GetHashCode();
                if (this.PayerAuthentication != null)
                    hash = hash * 59 + this.PayerAuthentication.GetHashCode();
                if (this.DigitalPayments != null)
                    hash = hash * 59 + this.DigitalPayments.GetHashCode();
                if (this.SecureAcceptance != null)
                    hash = hash * 59 + this.SecureAcceptance.GetHashCode();
                if (this.VirtualTerminal != null)
                    hash = hash * 59 + this.VirtualTerminal.GetHashCode();
                if (this.CurrencyConversion != null)
                    hash = hash * 59 + this.CurrencyConversion.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.CustomerInvoicing != null)
                    hash = hash * 59 + this.CustomerInvoicing.GetHashCode();
                if (this.RecurringBilling != null)
                    hash = hash * 59 + this.RecurringBilling.GetHashCode();
                if (this.PaymentOrchestration != null)
                    hash = hash * 59 + this.PaymentOrchestration.GetHashCode();
                if (this.Payouts != null)
                    hash = hash * 59 + this.Payouts.GetHashCode();
                if (this.DifferentialFee != null)
                    hash = hash * 59 + this.DifferentialFee.GetHashCode();
                if (this.PayByLink != null)
                    hash = hash * 59 + this.PayByLink.GetHashCode();
                if (this.UnifiedCheckout != null)
                    hash = hash * 59 + this.UnifiedCheckout.GetHashCode();
                if (this.ReceivablesManager != null)
                    hash = hash * 59 + this.ReceivablesManager.GetHashCode();
                if (this.ServiceFee != null)
                    hash = hash * 59 + this.ServiceFee.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
