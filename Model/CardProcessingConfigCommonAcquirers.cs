/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CardProcessingConfigCommonAcquirers
    /// </summary>
    [DataContract]
    public partial class CardProcessingConfigCommonAcquirers :  IEquatable<CardProcessingConfigCommonAcquirers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigCommonAcquirers" /> class.
        /// </summary>
        /// <param name="InstitutionId">Identifier of the acquirer. This number is usually assigned by Visa..</param>
        /// <param name="InterbankCardAssociationId">Number assigned by MasterCard to banks to identify the member in transactions..</param>
        /// <param name="DiscoverInstitutionId">Assigned by Discover to identify the acquirer..</param>
        /// <param name="CountryCode">ISO 4217 format..</param>
        /// <param name="FileDestinationBin">The BIN to which this capturefile is sent. This field must contain a valid BIN..</param>
        /// <param name="MerchantVerificationValue">Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant..</param>
        /// <param name="MerchantId">Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party..</param>
        /// <param name="TerminalId">The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. .</param>
        /// <param name="AllowMultipleBills">Allows multiple captures for a single authorization transaction. .</param>
        /// <param name="EnableTransactionReferenceNumber">To enable merchant to send in transaction reference number (unique reconciliation ID)..</param>
        /// <param name="PaymentTypes">Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB .</param>
        /// <param name="Currencies">Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).</param>
        public CardProcessingConfigCommonAcquirers(string InstitutionId = default(string), string InterbankCardAssociationId = default(string), string DiscoverInstitutionId = default(string), string CountryCode = default(string), string FileDestinationBin = default(string), string MerchantVerificationValue = default(string), string MerchantId = default(string), string TerminalId = default(string), bool? AllowMultipleBills = default(bool?), bool? EnableTransactionReferenceNumber = default(bool?), Dictionary<string, CardProcessingConfigCommonPaymentTypes> PaymentTypes = default(Dictionary<string, CardProcessingConfigCommonPaymentTypes>), Dictionary<string, CardProcessingConfigCommonCurrencies> Currencies = default(Dictionary<string, CardProcessingConfigCommonCurrencies>))
        {
            this.InstitutionId = InstitutionId;
            this.InterbankCardAssociationId = InterbankCardAssociationId;
            this.DiscoverInstitutionId = DiscoverInstitutionId;
            this.CountryCode = CountryCode;
            this.FileDestinationBin = FileDestinationBin;
            this.MerchantVerificationValue = MerchantVerificationValue;
            this.MerchantId = MerchantId;
            this.TerminalId = TerminalId;
            this.AllowMultipleBills = AllowMultipleBills;
            this.EnableTransactionReferenceNumber = EnableTransactionReferenceNumber;
            this.PaymentTypes = PaymentTypes;
            this.Currencies = Currencies;
        }
        
        /// <summary>
        /// Identifier of the acquirer. This number is usually assigned by Visa.
        /// </summary>
        /// <value>Identifier of the acquirer. This number is usually assigned by Visa.</value>
        [DataMember(Name="institutionId", EmitDefaultValue=false)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// Number assigned by MasterCard to banks to identify the member in transactions.
        /// </summary>
        /// <value>Number assigned by MasterCard to banks to identify the member in transactions.</value>
        [DataMember(Name="interbankCardAssociationId", EmitDefaultValue=false)]
        public string InterbankCardAssociationId { get; set; }

        /// <summary>
        /// Assigned by Discover to identify the acquirer.
        /// </summary>
        /// <value>Assigned by Discover to identify the acquirer.</value>
        [DataMember(Name="discoverInstitutionId", EmitDefaultValue=false)]
        public string DiscoverInstitutionId { get; set; }

        /// <summary>
        /// ISO 4217 format.
        /// </summary>
        /// <value>ISO 4217 format.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The BIN to which this capturefile is sent. This field must contain a valid BIN.
        /// </summary>
        /// <value>The BIN to which this capturefile is sent. This field must contain a valid BIN.</value>
        [DataMember(Name="fileDestinationBin", EmitDefaultValue=false)]
        public string FileDestinationBin { get; set; }

        /// <summary>
        /// Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant.
        /// </summary>
        /// <value>Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant.</value>
        [DataMember(Name="merchantVerificationValue", EmitDefaultValue=false)]
        public string MerchantVerificationValue { get; set; }

        /// <summary>
        /// Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.
        /// </summary>
        /// <value>Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. 
        /// </summary>
        /// <value>The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. </value>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Allows multiple captures for a single authorization transaction. 
        /// </summary>
        /// <value>Allows multiple captures for a single authorization transaction. </value>
        [DataMember(Name="allowMultipleBills", EmitDefaultValue=false)]
        public bool? AllowMultipleBills { get; set; }

        /// <summary>
        /// To enable merchant to send in transaction reference number (unique reconciliation ID).
        /// </summary>
        /// <value>To enable merchant to send in transaction reference number (unique reconciliation ID).</value>
        [DataMember(Name="enableTransactionReferenceNumber", EmitDefaultValue=false)]
        public bool? EnableTransactionReferenceNumber { get; set; }

        /// <summary>
        /// Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB 
        /// </summary>
        /// <value>Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB </value>
        [DataMember(Name="paymentTypes", EmitDefaultValue=false)]
        public Dictionary<string, CardProcessingConfigCommonPaymentTypes> PaymentTypes { get; set; }

        /// <summary>
        /// Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
        /// </summary>
        /// <value>Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)</value>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public Dictionary<string, CardProcessingConfigCommonCurrencies> Currencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProcessingConfigCommonAcquirers {\n");
            if (InstitutionId != null) sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            if (InterbankCardAssociationId != null) sb.Append("  InterbankCardAssociationId: ").Append(InterbankCardAssociationId).Append("\n");
            if (DiscoverInstitutionId != null) sb.Append("  DiscoverInstitutionId: ").Append(DiscoverInstitutionId).Append("\n");
            if (CountryCode != null) sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            if (FileDestinationBin != null) sb.Append("  FileDestinationBin: ").Append(FileDestinationBin).Append("\n");
            if (MerchantVerificationValue != null) sb.Append("  MerchantVerificationValue: ").Append(MerchantVerificationValue).Append("\n");
            if (MerchantId != null) sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            if (TerminalId != null) sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            if (AllowMultipleBills != null) sb.Append("  AllowMultipleBills: ").Append(AllowMultipleBills).Append("\n");
            if (EnableTransactionReferenceNumber != null) sb.Append("  EnableTransactionReferenceNumber: ").Append(EnableTransactionReferenceNumber).Append("\n");
            if (PaymentTypes != null) sb.Append("  PaymentTypes: ").Append(PaymentTypes).Append("\n");
            if (Currencies != null) sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardProcessingConfigCommonAcquirers);
        }

        /// <summary>
        /// Returns true if CardProcessingConfigCommonAcquirers instances are equal
        /// </summary>
        /// <param name="other">Instance of CardProcessingConfigCommonAcquirers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProcessingConfigCommonAcquirers other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InstitutionId == other.InstitutionId ||
                    this.InstitutionId != null &&
                    this.InstitutionId.Equals(other.InstitutionId)
                ) && 
                (
                    this.InterbankCardAssociationId == other.InterbankCardAssociationId ||
                    this.InterbankCardAssociationId != null &&
                    this.InterbankCardAssociationId.Equals(other.InterbankCardAssociationId)
                ) && 
                (
                    this.DiscoverInstitutionId == other.DiscoverInstitutionId ||
                    this.DiscoverInstitutionId != null &&
                    this.DiscoverInstitutionId.Equals(other.DiscoverInstitutionId)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.FileDestinationBin == other.FileDestinationBin ||
                    this.FileDestinationBin != null &&
                    this.FileDestinationBin.Equals(other.FileDestinationBin)
                ) && 
                (
                    this.MerchantVerificationValue == other.MerchantVerificationValue ||
                    this.MerchantVerificationValue != null &&
                    this.MerchantVerificationValue.Equals(other.MerchantVerificationValue)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.TerminalId == other.TerminalId ||
                    this.TerminalId != null &&
                    this.TerminalId.Equals(other.TerminalId)
                ) && 
                (
                    this.AllowMultipleBills == other.AllowMultipleBills ||
                    this.AllowMultipleBills != null &&
                    this.AllowMultipleBills.Equals(other.AllowMultipleBills)
                ) && 
                (
                    this.EnableTransactionReferenceNumber == other.EnableTransactionReferenceNumber ||
                    this.EnableTransactionReferenceNumber != null &&
                    this.EnableTransactionReferenceNumber.Equals(other.EnableTransactionReferenceNumber)
                ) && 
                (
                    this.PaymentTypes == other.PaymentTypes ||
                    this.PaymentTypes != null &&
                    this.PaymentTypes.SequenceEqual(other.PaymentTypes)
                ) && 
                (
                    this.Currencies == other.Currencies ||
                    this.Currencies != null &&
                    this.Currencies.SequenceEqual(other.Currencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InstitutionId != null)
                    hash = hash * 59 + this.InstitutionId.GetHashCode();
                if (this.InterbankCardAssociationId != null)
                    hash = hash * 59 + this.InterbankCardAssociationId.GetHashCode();
                if (this.DiscoverInstitutionId != null)
                    hash = hash * 59 + this.DiscoverInstitutionId.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.FileDestinationBin != null)
                    hash = hash * 59 + this.FileDestinationBin.GetHashCode();
                if (this.MerchantVerificationValue != null)
                    hash = hash * 59 + this.MerchantVerificationValue.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.TerminalId != null)
                    hash = hash * 59 + this.TerminalId.GetHashCode();
                if (this.AllowMultipleBills != null)
                    hash = hash * 59 + this.AllowMultipleBills.GetHashCode();
                if (this.EnableTransactionReferenceNumber != null)
                    hash = hash * 59 + this.EnableTransactionReferenceNumber.GetHashCode();
                if (this.PaymentTypes != null)
                    hash = hash * 59 + this.PaymentTypes.GetHashCode();
                if (this.Currencies != null)
                    hash = hash * 59 + this.Currencies.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
