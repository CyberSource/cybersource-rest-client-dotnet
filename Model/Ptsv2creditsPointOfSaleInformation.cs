/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2creditsPointOfSaleInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2creditsPointOfSaleInformation :  IEquatable<Ptsv2creditsPointOfSaleInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2creditsPointOfSaleInformation" /> class.
        /// </summary>
        /// <param name="Emv">Emv.</param>
        /// <param name="PartnerSdkVersion">Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. .</param>
        /// <param name="StoreAndForwardIndicator">When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  Possible values: - Y: Transaction was stored and then forwarded. - N (default): Transaction was not stored and then forwarded.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. .</param>
        /// <param name="CardholderVerificationMethod">CardholderVerificationMethod.</param>
        /// <param name="TerminalInputCapability">TerminalInputCapability.</param>
        /// <param name="TerminalSerialNumber">Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. .</param>
        /// <param name="TerminalCardCaptureCapability">Indicates whether the terminal can capture the card.  Possible values: - 1: Terminal can capture card. - 0: Terminal cannot capture card.  This field is supported only on American Express Direct. .</param>
        /// <param name="TerminalOutputCapability">Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported only on American Express Direct. .</param>
        /// <param name="TerminalPinCapability">Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported only on American Express Direct and SIX. .</param>
        /// <param name="DeviceId">Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. .</param>
        public Ptsv2creditsPointOfSaleInformation(Ptsv2creditsPointOfSaleInformationEmv Emv = default(Ptsv2creditsPointOfSaleInformationEmv), string PartnerSdkVersion = default(string), string StoreAndForwardIndicator = default(string), List<string> CardholderVerificationMethod = default(List<string>), List<string> TerminalInputCapability = default(List<string>), string TerminalSerialNumber = default(string), string TerminalCardCaptureCapability = default(string), string TerminalOutputCapability = default(string), int? TerminalPinCapability = default(int?), string DeviceId = default(string))
        {
            this.Emv = Emv;
            this.PartnerSdkVersion = PartnerSdkVersion;
            this.StoreAndForwardIndicator = StoreAndForwardIndicator;
            this.CardholderVerificationMethod = CardholderVerificationMethod;
            this.TerminalInputCapability = TerminalInputCapability;
            this.TerminalSerialNumber = TerminalSerialNumber;
            this.TerminalCardCaptureCapability = TerminalCardCaptureCapability;
            this.TerminalOutputCapability = TerminalOutputCapability;
            this.TerminalPinCapability = TerminalPinCapability;
            this.DeviceId = DeviceId;
        }
        
        /// <summary>
        /// Gets or Sets Emv
        /// </summary>
        [DataMember(Name="emv", EmitDefaultValue=false)]
        public Ptsv2creditsPointOfSaleInformationEmv Emv { get; set; }

        /// <summary>
        /// Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
        /// </summary>
        /// <value>Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. </value>
        [DataMember(Name="partnerSdkVersion", EmitDefaultValue=false)]
        public string PartnerSdkVersion { get; set; }

        /// <summary>
        /// When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  Possible values: - Y: Transaction was stored and then forwarded. - N (default): Transaction was not stored and then forwarded.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
        /// </summary>
        /// <value>When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  Possible values: - Y: Transaction was stored and then forwarded. - N (default): Transaction was not stored and then forwarded.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. </value>
        [DataMember(Name="storeAndForwardIndicator", EmitDefaultValue=false)]
        public string StoreAndForwardIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CardholderVerificationMethod
        /// </summary>
        [DataMember(Name="cardholderVerificationMethod", EmitDefaultValue=false)]
        public List<string> CardholderVerificationMethod { get; set; }

        /// <summary>
        /// Gets or Sets TerminalInputCapability
        /// </summary>
        [DataMember(Name="terminalInputCapability", EmitDefaultValue=false)]
        public List<string> TerminalInputCapability { get; set; }

        /// <summary>
        /// Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
        /// </summary>
        /// <value>Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. </value>
        [DataMember(Name="terminalSerialNumber", EmitDefaultValue=false)]
        public string TerminalSerialNumber { get; set; }

        /// <summary>
        /// Indicates whether the terminal can capture the card.  Possible values: - 1: Terminal can capture card. - 0: Terminal cannot capture card.  This field is supported only on American Express Direct. 
        /// </summary>
        /// <value>Indicates whether the terminal can capture the card.  Possible values: - 1: Terminal can capture card. - 0: Terminal cannot capture card.  This field is supported only on American Express Direct. </value>
        [DataMember(Name="terminalCardCaptureCapability", EmitDefaultValue=false)]
        public string TerminalCardCaptureCapability { get; set; }

        /// <summary>
        /// Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported only on American Express Direct. 
        /// </summary>
        /// <value>Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported only on American Express Direct. </value>
        [DataMember(Name="terminalOutputCapability", EmitDefaultValue=false)]
        public string TerminalOutputCapability { get; set; }

        /// <summary>
        /// Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported only on American Express Direct and SIX. 
        /// </summary>
        /// <value>Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported only on American Express Direct and SIX. </value>
        [DataMember(Name="terminalPinCapability", EmitDefaultValue=false)]
        public int? TerminalPinCapability { get; set; }

        /// <summary>
        /// Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
        /// </summary>
        /// <value>Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. </value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2creditsPointOfSaleInformation {\n");
            sb.Append("  Emv: ").Append(Emv).Append("\n");
            sb.Append("  PartnerSdkVersion: ").Append(PartnerSdkVersion).Append("\n");
            sb.Append("  StoreAndForwardIndicator: ").Append(StoreAndForwardIndicator).Append("\n");
            sb.Append("  CardholderVerificationMethod: ").Append(CardholderVerificationMethod).Append("\n");
            sb.Append("  TerminalInputCapability: ").Append(TerminalInputCapability).Append("\n");
            sb.Append("  TerminalSerialNumber: ").Append(TerminalSerialNumber).Append("\n");
            sb.Append("  TerminalCardCaptureCapability: ").Append(TerminalCardCaptureCapability).Append("\n");
            sb.Append("  TerminalOutputCapability: ").Append(TerminalOutputCapability).Append("\n");
            sb.Append("  TerminalPinCapability: ").Append(TerminalPinCapability).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2creditsPointOfSaleInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2creditsPointOfSaleInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2creditsPointOfSaleInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2creditsPointOfSaleInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Emv == other.Emv ||
                    this.Emv != null &&
                    this.Emv.Equals(other.Emv)
                ) && 
                (
                    this.PartnerSdkVersion == other.PartnerSdkVersion ||
                    this.PartnerSdkVersion != null &&
                    this.PartnerSdkVersion.Equals(other.PartnerSdkVersion)
                ) && 
                (
                    this.StoreAndForwardIndicator == other.StoreAndForwardIndicator ||
                    this.StoreAndForwardIndicator != null &&
                    this.StoreAndForwardIndicator.Equals(other.StoreAndForwardIndicator)
                ) && 
                (
                    this.CardholderVerificationMethod == other.CardholderVerificationMethod ||
                    this.CardholderVerificationMethod != null &&
                    this.CardholderVerificationMethod.SequenceEqual(other.CardholderVerificationMethod)
                ) && 
                (
                    this.TerminalInputCapability == other.TerminalInputCapability ||
                    this.TerminalInputCapability != null &&
                    this.TerminalInputCapability.SequenceEqual(other.TerminalInputCapability)
                ) && 
                (
                    this.TerminalSerialNumber == other.TerminalSerialNumber ||
                    this.TerminalSerialNumber != null &&
                    this.TerminalSerialNumber.Equals(other.TerminalSerialNumber)
                ) && 
                (
                    this.TerminalCardCaptureCapability == other.TerminalCardCaptureCapability ||
                    this.TerminalCardCaptureCapability != null &&
                    this.TerminalCardCaptureCapability.Equals(other.TerminalCardCaptureCapability)
                ) && 
                (
                    this.TerminalOutputCapability == other.TerminalOutputCapability ||
                    this.TerminalOutputCapability != null &&
                    this.TerminalOutputCapability.Equals(other.TerminalOutputCapability)
                ) && 
                (
                    this.TerminalPinCapability == other.TerminalPinCapability ||
                    this.TerminalPinCapability != null &&
                    this.TerminalPinCapability.Equals(other.TerminalPinCapability)
                ) && 
                (
                    this.DeviceId == other.DeviceId ||
                    this.DeviceId != null &&
                    this.DeviceId.Equals(other.DeviceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Emv != null)
                    hash = hash * 59 + this.Emv.GetHashCode();
                if (this.PartnerSdkVersion != null)
                    hash = hash * 59 + this.PartnerSdkVersion.GetHashCode();
                if (this.StoreAndForwardIndicator != null)
                    hash = hash * 59 + this.StoreAndForwardIndicator.GetHashCode();
                if (this.CardholderVerificationMethod != null)
                    hash = hash * 59 + this.CardholderVerificationMethod.GetHashCode();
                if (this.TerminalInputCapability != null)
                    hash = hash * 59 + this.TerminalInputCapability.GetHashCode();
                if (this.TerminalSerialNumber != null)
                    hash = hash * 59 + this.TerminalSerialNumber.GetHashCode();
                if (this.TerminalCardCaptureCapability != null)
                    hash = hash * 59 + this.TerminalCardCaptureCapability.GetHashCode();
                if (this.TerminalOutputCapability != null)
                    hash = hash * 59 + this.TerminalOutputCapability.GetHashCode();
                if (this.TerminalPinCapability != null)
                    hash = hash * 59 + this.TerminalPinCapability.GetHashCode();
                if (this.DeviceId != null)
                    hash = hash * 59 + this.DeviceId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PartnerSdkVersion (string) maxLength
            if(this.PartnerSdkVersion != null && this.PartnerSdkVersion.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerSdkVersion, length must be less than 32.", new [] { "PartnerSdkVersion" });
            }

            // StoreAndForwardIndicator (string) maxLength
            if(this.StoreAndForwardIndicator != null && this.StoreAndForwardIndicator.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoreAndForwardIndicator, length must be less than 1.", new [] { "StoreAndForwardIndicator" });
            }

            // TerminalSerialNumber (string) maxLength
            if(this.TerminalSerialNumber != null && this.TerminalSerialNumber.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TerminalSerialNumber, length must be less than 32.", new [] { "TerminalSerialNumber" });
            }

            // TerminalCardCaptureCapability (string) maxLength
            if(this.TerminalCardCaptureCapability != null && this.TerminalCardCaptureCapability.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TerminalCardCaptureCapability, length must be less than 1.", new [] { "TerminalCardCaptureCapability" });
            }

            // TerminalOutputCapability (string) maxLength
            if(this.TerminalOutputCapability != null && this.TerminalOutputCapability.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TerminalOutputCapability, length must be less than 1.", new [] { "TerminalOutputCapability" });
            }

            // DeviceId (string) maxLength
            if(this.DeviceId != null && this.DeviceId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, length must be less than 32.", new [] { "DeviceId" });
            }

            yield break;
        }
    }

}
