/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2intentsPaymentInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv2intentsPaymentInformation :  IEquatable<Ptsv2intentsPaymentInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2intentsPaymentInformation" /> class.
        /// </summary>
        /// <param name="PaymentType">PaymentType.</param>
        /// <param name="TokenizedPaymentMethod">TokenizedPaymentMethod.</param>
        /// <param name="IndustryType">Indicates the industry type. Possible Values: - \&quot;Events\&quot; - \&quot;Ticketing\&quot; - \&quot;Fuel\&quot; - \&quot;GAMING\&quot; - \&quot;DIGITAL GOODS\&quot; - \&quot;TELCO\&quot; - \&quot;Token Service Providers\&quot; - \&quot;Gambling\&quot; - \&quot;CFDs\&quot; - \&quot;car rental\&quot; - \&quot;hotel\&quot; - \&quot;transportation\&quot; - \&quot;travel package\&quot; - \&quot;Cruise Line\&quot; - \&quot;P2P\&quot; - \&quot;Retail\&quot; - \&quot;Food\&quot; - \&quot;Groceries\&quot; - \&quot;Ride Sharing\&quot; - \&quot;Taxi\&quot; - \&quot;Remittance\&quot; - \&quot;Crypto\&quot; - \&quot;Marketplaces\&quot; .</param>
        /// <param name="EWallet">EWallet.</param>
        public Ptsv2intentsPaymentInformation(Ptsv2intentsPaymentInformationPaymentType PaymentType = default(Ptsv2intentsPaymentInformationPaymentType), Ptsv2intentsPaymentInformationTokenizedPaymentMethod TokenizedPaymentMethod = default(Ptsv2intentsPaymentInformationTokenizedPaymentMethod), string IndustryType = default(string), Ptsv2intentsPaymentInformationEWallet EWallet = default(Ptsv2intentsPaymentInformationEWallet))
        {
            this.PaymentType = PaymentType;
            this.TokenizedPaymentMethod = TokenizedPaymentMethod;
            this.IndustryType = IndustryType;
            this.EWallet = EWallet;
        }
        
        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public Ptsv2intentsPaymentInformationPaymentType PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets TokenizedPaymentMethod
        /// </summary>
        [DataMember(Name="tokenizedPaymentMethod", EmitDefaultValue=false)]
        public Ptsv2intentsPaymentInformationTokenizedPaymentMethod TokenizedPaymentMethod { get; set; }

        /// <summary>
        /// Indicates the industry type. Possible Values: - \&quot;Events\&quot; - \&quot;Ticketing\&quot; - \&quot;Fuel\&quot; - \&quot;GAMING\&quot; - \&quot;DIGITAL GOODS\&quot; - \&quot;TELCO\&quot; - \&quot;Token Service Providers\&quot; - \&quot;Gambling\&quot; - \&quot;CFDs\&quot; - \&quot;car rental\&quot; - \&quot;hotel\&quot; - \&quot;transportation\&quot; - \&quot;travel package\&quot; - \&quot;Cruise Line\&quot; - \&quot;P2P\&quot; - \&quot;Retail\&quot; - \&quot;Food\&quot; - \&quot;Groceries\&quot; - \&quot;Ride Sharing\&quot; - \&quot;Taxi\&quot; - \&quot;Remittance\&quot; - \&quot;Crypto\&quot; - \&quot;Marketplaces\&quot; 
        /// </summary>
        /// <value>Indicates the industry type. Possible Values: - \&quot;Events\&quot; - \&quot;Ticketing\&quot; - \&quot;Fuel\&quot; - \&quot;GAMING\&quot; - \&quot;DIGITAL GOODS\&quot; - \&quot;TELCO\&quot; - \&quot;Token Service Providers\&quot; - \&quot;Gambling\&quot; - \&quot;CFDs\&quot; - \&quot;car rental\&quot; - \&quot;hotel\&quot; - \&quot;transportation\&quot; - \&quot;travel package\&quot; - \&quot;Cruise Line\&quot; - \&quot;P2P\&quot; - \&quot;Retail\&quot; - \&quot;Food\&quot; - \&quot;Groceries\&quot; - \&quot;Ride Sharing\&quot; - \&quot;Taxi\&quot; - \&quot;Remittance\&quot; - \&quot;Crypto\&quot; - \&quot;Marketplaces\&quot; </value>
        [DataMember(Name="industryType", EmitDefaultValue=false)]
        public string IndustryType { get; set; }

        /// <summary>
        /// Gets or Sets EWallet
        /// </summary>
        [DataMember(Name="eWallet", EmitDefaultValue=false)]
        public Ptsv2intentsPaymentInformationEWallet EWallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2intentsPaymentInformation {\n");
            if (PaymentType != null) sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            if (TokenizedPaymentMethod != null) sb.Append("  TokenizedPaymentMethod: ").Append(TokenizedPaymentMethod).Append("\n");
            if (IndustryType != null) sb.Append("  IndustryType: ").Append(IndustryType).Append("\n");
            if (EWallet != null) sb.Append("  EWallet: ").Append(EWallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2intentsPaymentInformation);
        }

        /// <summary>
        /// Returns true if Ptsv2intentsPaymentInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2intentsPaymentInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2intentsPaymentInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentType == other.PaymentType ||
                    this.PaymentType != null &&
                    this.PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    this.TokenizedPaymentMethod == other.TokenizedPaymentMethod ||
                    this.TokenizedPaymentMethod != null &&
                    this.TokenizedPaymentMethod.Equals(other.TokenizedPaymentMethod)
                ) && 
                (
                    this.IndustryType == other.IndustryType ||
                    this.IndustryType != null &&
                    this.IndustryType.Equals(other.IndustryType)
                ) && 
                (
                    this.EWallet == other.EWallet ||
                    this.EWallet != null &&
                    this.EWallet.Equals(other.EWallet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentType != null)
                    hash = hash * 59 + this.PaymentType.GetHashCode();
                if (this.TokenizedPaymentMethod != null)
                    hash = hash * 59 + this.TokenizedPaymentMethod.GetHashCode();
                if (this.IndustryType != null)
                    hash = hash * 59 + this.IndustryType.GetHashCode();
                if (this.EWallet != null)
                    hash = hash * 59 + this.EWallet.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
