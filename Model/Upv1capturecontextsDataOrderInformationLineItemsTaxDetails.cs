/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Upv1capturecontextsDataOrderInformationLineItemsTaxDetails
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsDataOrderInformationLineItemsTaxDetails :  IEquatable<Upv1capturecontextsDataOrderInformationLineItemsTaxDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsDataOrderInformationLineItemsTaxDetails" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="Rate">Rate.</param>
        /// <param name="Code">Code.</param>
        /// <param name="TaxId">TaxId.</param>
        /// <param name="Applied">Applied.</param>
        /// <param name="ExemptionCode">ExemptionCode.</param>
        public Upv1capturecontextsDataOrderInformationLineItemsTaxDetails(string Type = default(string), string Amount = default(string), string Rate = default(string), string Code = default(string), string TaxId = default(string), bool? Applied = default(bool?), string ExemptionCode = default(string))
        {
            this.Type = Type;
            this.Amount = Amount;
            this.Rate = Rate;
            this.Code = Code;
            this.TaxId = TaxId;
            this.Applied = Applied;
            this.ExemptionCode = ExemptionCode;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name="taxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// Gets or Sets Applied
        /// </summary>
        [DataMember(Name="applied", EmitDefaultValue=false)]
        public bool? Applied { get; set; }

        /// <summary>
        /// Gets or Sets ExemptionCode
        /// </summary>
        [DataMember(Name="exemptionCode", EmitDefaultValue=false)]
        public string ExemptionCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsDataOrderInformationLineItemsTaxDetails {\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (Amount != null) sb.Append("  Amount: ").Append(Amount).Append("\n");
            if (Rate != null) sb.Append("  Rate: ").Append(Rate).Append("\n");
            if (Code != null) sb.Append("  Code: ").Append(Code).Append("\n");
            if (TaxId != null) sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            if (Applied != null) sb.Append("  Applied: ").Append(Applied).Append("\n");
            if (ExemptionCode != null) sb.Append("  ExemptionCode: ").Append(ExemptionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsDataOrderInformationLineItemsTaxDetails);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsDataOrderInformationLineItemsTaxDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsDataOrderInformationLineItemsTaxDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsDataOrderInformationLineItemsTaxDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.TaxId == other.TaxId ||
                    this.TaxId != null &&
                    this.TaxId.Equals(other.TaxId)
                ) && 
                (
                    this.Applied == other.Applied ||
                    this.Applied != null &&
                    this.Applied.Equals(other.Applied)
                ) && 
                (
                    this.ExemptionCode == other.ExemptionCode ||
                    this.ExemptionCode != null &&
                    this.ExemptionCode.Equals(other.ExemptionCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.TaxId != null)
                    hash = hash * 59 + this.TaxId.GetHashCode();
                if (this.Applied != null)
                    hash = hash * 59 + this.Applied.GetHashCode();
                if (this.ExemptionCode != null)
                    hash = hash * 59 + this.ExemptionCode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
