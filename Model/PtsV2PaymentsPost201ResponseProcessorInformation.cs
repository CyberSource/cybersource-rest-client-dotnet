/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PtsV2PaymentsPost201ResponseProcessorInformation
    /// </summary>
    [DataContract]
    public partial class PtsV2PaymentsPost201ResponseProcessorInformation :  IEquatable<PtsV2PaymentsPost201ResponseProcessorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PtsV2PaymentsPost201ResponseProcessorInformation" /> class.
        /// </summary>
        /// <param name="AuthIndicator">Flag that specifies the purpose of the authorization.  Possible values:  - &#x60;0&#x60;: Preauthorization  - &#x60;1&#x60;: Final authorization .</param>
        /// <param name="ApprovalCode">Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. .</param>
        /// <param name="CardReferenceData">The Scheme reference data is a variable length data element up to a maximum of 56 characters. It may be sent by the acquirer in the  authorisation response message, and by the terminal (unchanged) in subsequent authorisation request messages associated with the same  transaction. This field is used by Streamline and HSBC UK only, at present. .</param>
        /// <param name="TransactionId">Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \&quot;Network Transaction Identifiers\&quot; in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID &#x3D; 66012345 - Shift number &#x3D; 001 - Batch number &#x3D; 069 - Transaction number &#x3D; 003 .</param>
        /// <param name="NetworkTransactionId">The description for this field is not available..</param>
        /// <param name="ProviderTransactionId">The description for this field is not available..</param>
        /// <param name="ResponseCode">For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is &#x60;08&#x60;, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: &#x60;aa,bb&#x60; with the two values separated by a comma and where: - &#x60;aa&#x60; is the two-digit error message from Atos. - &#x60;bb&#x60; is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example &#x60;2:R06&#x60;  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the &#x60;processorInformation.responseCategoryCode&#x60; field. String (3) .</param>
        /// <param name="ResponseCodeSource">Used by Visa only and contains the response source/reason code that identifies the source of the response decision. .</param>
        /// <param name="ResponseDetails">This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. .</param>
        /// <param name="ResponseCategoryCode">Processor-defined response category code. The associated detail error code is in the &#x60;processorInformation.responseCode&#x60; or &#x60;issuerInformation.responseCode&#x60; field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3 .</param>
        /// <param name="ForwardedAcquirerCode">Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. .</param>
        /// <param name="Avs">Avs.</param>
        /// <param name="CardVerification">CardVerification.</param>
        /// <param name="MerchantAdvice">MerchantAdvice.</param>
        /// <param name="ElectronicVerificationResults">ElectronicVerificationResults.</param>
        /// <param name="AchVerification">AchVerification.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="ConsumerAuthenticationResponse">ConsumerAuthenticationResponse.</param>
        /// <param name="SystemTraceAuditNumber">This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt. .</param>
        /// <param name="PaymentAccountReferenceNumber">Visa-generated reference number that identifies a card-present transaction for which you provided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. This reply field is returned only for CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. .</param>
        /// <param name="TransactionIntegrityCode">Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - &#x60;A1&#x60;: EMV or token in a secure, trusted environment  - &#x60;B1&#x60;: EMV or chip equivalent  - &#x60;C1&#x60;: Magnetic stripe  - &#x60;E1&#x60;: Key entered  - &#x60;U0&#x60;: Unclassified  For card-not-present transactions, possible values:   - &#x60;A2&#x60;: Digital transactions  - &#x60;B2&#x60;: Authenticated checkout  - &#x60;C2&#x60;: Transaction validation  - &#x60;D2&#x60;: Enhanced data  - &#x60;E2&#x60;: Generic messaging  - &#x60;U0&#x60;: Unclassified  For information about these values, contact Mastercard or your acquirer.  #### CyberSource through VisaNet  The value for this field corresponds to the following data in the TC 33 capture file,&lt;sup&gt;1&lt;/sup&gt;: - Record: CP01 TCR6 - Position: 136-137 - Field: Mastercard Transaction Integrity Classification  &lt;sup&gt;1&lt;/sup&gt; The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. .</param>
        /// <param name="AmexVerbalAuthReferenceNumber">Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. .</param>
        /// <param name="MasterCardServiceCode">Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet. .</param>
        /// <param name="MasterCardServiceReplyCode">Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;C&#x60;: Service completed successfully.  - &#x60;F&#x60;: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - &#x60;I&#x60;: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - &#x60;T&#x60;: Invalid combination of token requestor ID and token.  - &#x60;U&#x60;: Expired token.  - &#x60;W&#x60;: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**. .</param>
        /// <param name="MasterCardAuthenticationType">Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;1&#x60;: Transaction qualifies for Mastercard authentication type 1.  - &#x60;2&#x60;: Transaction qualifies for Mastercard authentication type 2.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 132 - Field: Mastercard Member Defined service. **Note** This field is returned only for CyberSource through VisaNet. .</param>
        /// <param name="Name">Name of the Processor. .</param>
        /// <param name="Routing">Routing.</param>
        /// <param name="MerchantNumber">Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX .</param>
        public PtsV2PaymentsPost201ResponseProcessorInformation(string AuthIndicator = default(string), string ApprovalCode = default(string), string CardReferenceData = default(string), string TransactionId = default(string), string NetworkTransactionId = default(string), string ProviderTransactionId = default(string), string ResponseCode = default(string), string ResponseCodeSource = default(string), string ResponseDetails = default(string), string ResponseCategoryCode = default(string), string ForwardedAcquirerCode = default(string), PtsV2PaymentsPost201ResponseProcessorInformationAvs Avs = default(PtsV2PaymentsPost201ResponseProcessorInformationAvs), PtsV2PaymentsPost201ResponseProcessorInformationCardVerification CardVerification = default(PtsV2PaymentsPost201ResponseProcessorInformationCardVerification), PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice MerchantAdvice = default(PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice), PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults ElectronicVerificationResults = default(PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults), PtsV2PaymentsPost201ResponseProcessorInformationAchVerification AchVerification = default(PtsV2PaymentsPost201ResponseProcessorInformationAchVerification), PtsV2PaymentsPost201ResponseProcessorInformationCustomer Customer = default(PtsV2PaymentsPost201ResponseProcessorInformationCustomer), PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse ConsumerAuthenticationResponse = default(PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse), string SystemTraceAuditNumber = default(string), string PaymentAccountReferenceNumber = default(string), string TransactionIntegrityCode = default(string), string AmexVerbalAuthReferenceNumber = default(string), string MasterCardServiceCode = default(string), string MasterCardServiceReplyCode = default(string), string MasterCardAuthenticationType = default(string), string Name = default(string), PtsV2PaymentsPost201ResponseProcessorInformationRouting Routing = default(PtsV2PaymentsPost201ResponseProcessorInformationRouting), string MerchantNumber = default(string))
        {
            this.AuthIndicator = AuthIndicator;
            this.ApprovalCode = ApprovalCode;
            this.CardReferenceData = CardReferenceData;
            this.TransactionId = TransactionId;
            this.NetworkTransactionId = NetworkTransactionId;
            this.ProviderTransactionId = ProviderTransactionId;
            this.ResponseCode = ResponseCode;
            this.ResponseCodeSource = ResponseCodeSource;
            this.ResponseDetails = ResponseDetails;
            this.ResponseCategoryCode = ResponseCategoryCode;
            this.ForwardedAcquirerCode = ForwardedAcquirerCode;
            this.Avs = Avs;
            this.CardVerification = CardVerification;
            this.MerchantAdvice = MerchantAdvice;
            this.ElectronicVerificationResults = ElectronicVerificationResults;
            this.AchVerification = AchVerification;
            this.Customer = Customer;
            this.ConsumerAuthenticationResponse = ConsumerAuthenticationResponse;
            this.SystemTraceAuditNumber = SystemTraceAuditNumber;
            this.PaymentAccountReferenceNumber = PaymentAccountReferenceNumber;
            this.TransactionIntegrityCode = TransactionIntegrityCode;
            this.AmexVerbalAuthReferenceNumber = AmexVerbalAuthReferenceNumber;
            this.MasterCardServiceCode = MasterCardServiceCode;
            this.MasterCardServiceReplyCode = MasterCardServiceReplyCode;
            this.MasterCardAuthenticationType = MasterCardAuthenticationType;
            this.Name = Name;
            this.Routing = Routing;
            this.MerchantNumber = MerchantNumber;
        }
        
        /// <summary>
        /// Flag that specifies the purpose of the authorization.  Possible values:  - &#x60;0&#x60;: Preauthorization  - &#x60;1&#x60;: Final authorization 
        /// </summary>
        /// <value>Flag that specifies the purpose of the authorization.  Possible values:  - &#x60;0&#x60;: Preauthorization  - &#x60;1&#x60;: Final authorization </value>
        [DataMember(Name="authIndicator", EmitDefaultValue=false)]
        public string AuthIndicator { get; set; }

        /// <summary>
        /// Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. 
        /// </summary>
        /// <value>Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. </value>
        [DataMember(Name="approvalCode", EmitDefaultValue=false)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// The Scheme reference data is a variable length data element up to a maximum of 56 characters. It may be sent by the acquirer in the  authorisation response message, and by the terminal (unchanged) in subsequent authorisation request messages associated with the same  transaction. This field is used by Streamline and HSBC UK only, at present. 
        /// </summary>
        /// <value>The Scheme reference data is a variable length data element up to a maximum of 56 characters. It may be sent by the acquirer in the  authorisation response message, and by the terminal (unchanged) in subsequent authorisation request messages associated with the same  transaction. This field is used by Streamline and HSBC UK only, at present. </value>
        [DataMember(Name="cardReferenceData", EmitDefaultValue=false)]
        public string CardReferenceData { get; set; }

        /// <summary>
        /// Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \&quot;Network Transaction Identifiers\&quot; in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID &#x3D; 66012345 - Shift number &#x3D; 001 - Batch number &#x3D; 069 - Transaction number &#x3D; 003 
        /// </summary>
        /// <value>Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \&quot;Network Transaction Identifiers\&quot; in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID &#x3D; 66012345 - Shift number &#x3D; 001 - Batch number &#x3D; 069 - Transaction number &#x3D; 003 </value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="networkTransactionId", EmitDefaultValue=false)]
        public string NetworkTransactionId { get; set; }

        /// <summary>
        /// The description for this field is not available.
        /// </summary>
        /// <value>The description for this field is not available.</value>
        [DataMember(Name="providerTransactionId", EmitDefaultValue=false)]
        public string ProviderTransactionId { get; set; }

        /// <summary>
        /// For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is &#x60;08&#x60;, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: &#x60;aa,bb&#x60; with the two values separated by a comma and where: - &#x60;aa&#x60; is the two-digit error message from Atos. - &#x60;bb&#x60; is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example &#x60;2:R06&#x60;  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the &#x60;processorInformation.responseCategoryCode&#x60; field. String (3) 
        /// </summary>
        /// <value>For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is &#x60;08&#x60;, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: &#x60;aa,bb&#x60; with the two values separated by a comma and where: - &#x60;aa&#x60; is the two-digit error message from Atos. - &#x60;bb&#x60; is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example &#x60;2:R06&#x60;  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the &#x60;processorInformation.responseCategoryCode&#x60; field. String (3) </value>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// Used by Visa only and contains the response source/reason code that identifies the source of the response decision. 
        /// </summary>
        /// <value>Used by Visa only and contains the response source/reason code that identifies the source of the response decision. </value>
        [DataMember(Name="responseCodeSource", EmitDefaultValue=false)]
        public string ResponseCodeSource { get; set; }

        /// <summary>
        /// This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. 
        /// </summary>
        /// <value>This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. </value>
        [DataMember(Name="responseDetails", EmitDefaultValue=false)]
        public string ResponseDetails { get; set; }

        /// <summary>
        /// Processor-defined response category code. The associated detail error code is in the &#x60;processorInformation.responseCode&#x60; or &#x60;issuerInformation.responseCode&#x60; field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3 
        /// </summary>
        /// <value>Processor-defined response category code. The associated detail error code is in the &#x60;processorInformation.responseCode&#x60; or &#x60;issuerInformation.responseCode&#x60; field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3 </value>
        [DataMember(Name="responseCategoryCode", EmitDefaultValue=false)]
        public string ResponseCategoryCode { get; set; }

        /// <summary>
        /// Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 
        /// </summary>
        /// <value>Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. </value>
        [DataMember(Name="forwardedAcquirerCode", EmitDefaultValue=false)]
        public string ForwardedAcquirerCode { get; set; }

        /// <summary>
        /// Gets or Sets Avs
        /// </summary>
        [DataMember(Name="avs", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationAvs Avs { get; set; }

        /// <summary>
        /// Gets or Sets CardVerification
        /// </summary>
        [DataMember(Name="cardVerification", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationCardVerification CardVerification { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAdvice
        /// </summary>
        [DataMember(Name="merchantAdvice", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice MerchantAdvice { get; set; }

        /// <summary>
        /// Gets or Sets ElectronicVerificationResults
        /// </summary>
        [DataMember(Name="electronicVerificationResults", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults ElectronicVerificationResults { get; set; }

        /// <summary>
        /// Gets or Sets AchVerification
        /// </summary>
        [DataMember(Name="achVerification", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationAchVerification AchVerification { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationCustomer Customer { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerAuthenticationResponse
        /// </summary>
        [DataMember(Name="consumerAuthenticationResponse", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse ConsumerAuthenticationResponse { get; set; }

        /// <summary>
        /// This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt. 
        /// </summary>
        /// <value>This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt. </value>
        [DataMember(Name="systemTraceAuditNumber", EmitDefaultValue=false)]
        public string SystemTraceAuditNumber { get; set; }

        /// <summary>
        /// Visa-generated reference number that identifies a card-present transaction for which you provided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. This reply field is returned only for CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
        /// </summary>
        /// <value>Visa-generated reference number that identifies a card-present transaction for which you provided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. This reply field is returned only for CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. </value>
        [DataMember(Name="paymentAccountReferenceNumber", EmitDefaultValue=false)]
        public string PaymentAccountReferenceNumber { get; set; }

        /// <summary>
        /// Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - &#x60;A1&#x60;: EMV or token in a secure, trusted environment  - &#x60;B1&#x60;: EMV or chip equivalent  - &#x60;C1&#x60;: Magnetic stripe  - &#x60;E1&#x60;: Key entered  - &#x60;U0&#x60;: Unclassified  For card-not-present transactions, possible values:   - &#x60;A2&#x60;: Digital transactions  - &#x60;B2&#x60;: Authenticated checkout  - &#x60;C2&#x60;: Transaction validation  - &#x60;D2&#x60;: Enhanced data  - &#x60;E2&#x60;: Generic messaging  - &#x60;U0&#x60;: Unclassified  For information about these values, contact Mastercard or your acquirer.  #### CyberSource through VisaNet  The value for this field corresponds to the following data in the TC 33 capture file,&lt;sup&gt;1&lt;/sup&gt;: - Record: CP01 TCR6 - Position: 136-137 - Field: Mastercard Transaction Integrity Classification  &lt;sup&gt;1&lt;/sup&gt; The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
        /// </summary>
        /// <value>Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - &#x60;A1&#x60;: EMV or token in a secure, trusted environment  - &#x60;B1&#x60;: EMV or chip equivalent  - &#x60;C1&#x60;: Magnetic stripe  - &#x60;E1&#x60;: Key entered  - &#x60;U0&#x60;: Unclassified  For card-not-present transactions, possible values:   - &#x60;A2&#x60;: Digital transactions  - &#x60;B2&#x60;: Authenticated checkout  - &#x60;C2&#x60;: Transaction validation  - &#x60;D2&#x60;: Enhanced data  - &#x60;E2&#x60;: Generic messaging  - &#x60;U0&#x60;: Unclassified  For information about these values, contact Mastercard or your acquirer.  #### CyberSource through VisaNet  The value for this field corresponds to the following data in the TC 33 capture file,&lt;sup&gt;1&lt;/sup&gt;: - Record: CP01 TCR6 - Position: 136-137 - Field: Mastercard Transaction Integrity Classification  &lt;sup&gt;1&lt;/sup&gt; The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. </value>
        [DataMember(Name="transactionIntegrityCode", EmitDefaultValue=false)]
        public string TransactionIntegrityCode { get; set; }

        /// <summary>
        /// Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. 
        /// </summary>
        /// <value>Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. </value>
        [DataMember(Name="amexVerbalAuthReferenceNumber", EmitDefaultValue=false)]
        public string AmexVerbalAuthReferenceNumber { get; set; }

        /// <summary>
        /// Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet. 
        /// </summary>
        /// <value>Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet. </value>
        [DataMember(Name="masterCardServiceCode", EmitDefaultValue=false)]
        public string MasterCardServiceCode { get; set; }

        /// <summary>
        /// Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;C&#x60;: Service completed successfully.  - &#x60;F&#x60;: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - &#x60;I&#x60;: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - &#x60;T&#x60;: Invalid combination of token requestor ID and token.  - &#x60;U&#x60;: Expired token.  - &#x60;W&#x60;: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**. 
        /// </summary>
        /// <value>Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;C&#x60;: Service completed successfully.  - &#x60;F&#x60;: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - &#x60;I&#x60;: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - &#x60;T&#x60;: Invalid combination of token requestor ID and token.  - &#x60;U&#x60;: Expired token.  - &#x60;W&#x60;: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**. </value>
        [DataMember(Name="masterCardServiceReplyCode", EmitDefaultValue=false)]
        public string MasterCardServiceReplyCode { get; set; }

        /// <summary>
        /// Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;1&#x60;: Transaction qualifies for Mastercard authentication type 1.  - &#x60;2&#x60;: Transaction qualifies for Mastercard authentication type 2.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 132 - Field: Mastercard Member Defined service. **Note** This field is returned only for CyberSource through VisaNet. 
        /// </summary>
        /// <value>Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;1&#x60;: Transaction qualifies for Mastercard authentication type 1.  - &#x60;2&#x60;: Transaction qualifies for Mastercard authentication type 2.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 132 - Field: Mastercard Member Defined service. **Note** This field is returned only for CyberSource through VisaNet. </value>
        [DataMember(Name="masterCardAuthenticationType", EmitDefaultValue=false)]
        public string MasterCardAuthenticationType { get; set; }

        /// <summary>
        /// Name of the Processor. 
        /// </summary>
        /// <value>Name of the Processor. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Routing
        /// </summary>
        [DataMember(Name="routing", EmitDefaultValue=false)]
        public PtsV2PaymentsPost201ResponseProcessorInformationRouting Routing { get; set; }

        /// <summary>
        /// Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX 
        /// </summary>
        /// <value>Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX </value>
        [DataMember(Name="merchantNumber", EmitDefaultValue=false)]
        public string MerchantNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PtsV2PaymentsPost201ResponseProcessorInformation {\n");
            sb.Append("  AuthIndicator: ").Append(AuthIndicator).Append("\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  CardReferenceData: ").Append(CardReferenceData).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  NetworkTransactionId: ").Append(NetworkTransactionId).Append("\n");
            sb.Append("  ProviderTransactionId: ").Append(ProviderTransactionId).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseCodeSource: ").Append(ResponseCodeSource).Append("\n");
            sb.Append("  ResponseDetails: ").Append(ResponseDetails).Append("\n");
            sb.Append("  ResponseCategoryCode: ").Append(ResponseCategoryCode).Append("\n");
            sb.Append("  ForwardedAcquirerCode: ").Append(ForwardedAcquirerCode).Append("\n");
            sb.Append("  Avs: ").Append(Avs).Append("\n");
            sb.Append("  CardVerification: ").Append(CardVerification).Append("\n");
            sb.Append("  MerchantAdvice: ").Append(MerchantAdvice).Append("\n");
            sb.Append("  ElectronicVerificationResults: ").Append(ElectronicVerificationResults).Append("\n");
            sb.Append("  AchVerification: ").Append(AchVerification).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  ConsumerAuthenticationResponse: ").Append(ConsumerAuthenticationResponse).Append("\n");
            sb.Append("  SystemTraceAuditNumber: ").Append(SystemTraceAuditNumber).Append("\n");
            sb.Append("  PaymentAccountReferenceNumber: ").Append(PaymentAccountReferenceNumber).Append("\n");
            sb.Append("  TransactionIntegrityCode: ").Append(TransactionIntegrityCode).Append("\n");
            sb.Append("  AmexVerbalAuthReferenceNumber: ").Append(AmexVerbalAuthReferenceNumber).Append("\n");
            sb.Append("  MasterCardServiceCode: ").Append(MasterCardServiceCode).Append("\n");
            sb.Append("  MasterCardServiceReplyCode: ").Append(MasterCardServiceReplyCode).Append("\n");
            sb.Append("  MasterCardAuthenticationType: ").Append(MasterCardAuthenticationType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Routing: ").Append(Routing).Append("\n");
            sb.Append("  MerchantNumber: ").Append(MerchantNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PtsV2PaymentsPost201ResponseProcessorInformation);
        }

        /// <summary>
        /// Returns true if PtsV2PaymentsPost201ResponseProcessorInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PtsV2PaymentsPost201ResponseProcessorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PtsV2PaymentsPost201ResponseProcessorInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AuthIndicator == other.AuthIndicator ||
                    this.AuthIndicator != null &&
                    this.AuthIndicator.Equals(other.AuthIndicator)
                ) && 
                (
                    this.ApprovalCode == other.ApprovalCode ||
                    this.ApprovalCode != null &&
                    this.ApprovalCode.Equals(other.ApprovalCode)
                ) && 
                (
                    this.CardReferenceData == other.CardReferenceData ||
                    this.CardReferenceData != null &&
                    this.CardReferenceData.Equals(other.CardReferenceData)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.NetworkTransactionId == other.NetworkTransactionId ||
                    this.NetworkTransactionId != null &&
                    this.NetworkTransactionId.Equals(other.NetworkTransactionId)
                ) && 
                (
                    this.ProviderTransactionId == other.ProviderTransactionId ||
                    this.ProviderTransactionId != null &&
                    this.ProviderTransactionId.Equals(other.ProviderTransactionId)
                ) && 
                (
                    this.ResponseCode == other.ResponseCode ||
                    this.ResponseCode != null &&
                    this.ResponseCode.Equals(other.ResponseCode)
                ) && 
                (
                    this.ResponseCodeSource == other.ResponseCodeSource ||
                    this.ResponseCodeSource != null &&
                    this.ResponseCodeSource.Equals(other.ResponseCodeSource)
                ) && 
                (
                    this.ResponseDetails == other.ResponseDetails ||
                    this.ResponseDetails != null &&
                    this.ResponseDetails.Equals(other.ResponseDetails)
                ) && 
                (
                    this.ResponseCategoryCode == other.ResponseCategoryCode ||
                    this.ResponseCategoryCode != null &&
                    this.ResponseCategoryCode.Equals(other.ResponseCategoryCode)
                ) && 
                (
                    this.ForwardedAcquirerCode == other.ForwardedAcquirerCode ||
                    this.ForwardedAcquirerCode != null &&
                    this.ForwardedAcquirerCode.Equals(other.ForwardedAcquirerCode)
                ) && 
                (
                    this.Avs == other.Avs ||
                    this.Avs != null &&
                    this.Avs.Equals(other.Avs)
                ) && 
                (
                    this.CardVerification == other.CardVerification ||
                    this.CardVerification != null &&
                    this.CardVerification.Equals(other.CardVerification)
                ) && 
                (
                    this.MerchantAdvice == other.MerchantAdvice ||
                    this.MerchantAdvice != null &&
                    this.MerchantAdvice.Equals(other.MerchantAdvice)
                ) && 
                (
                    this.ElectronicVerificationResults == other.ElectronicVerificationResults ||
                    this.ElectronicVerificationResults != null &&
                    this.ElectronicVerificationResults.Equals(other.ElectronicVerificationResults)
                ) && 
                (
                    this.AchVerification == other.AchVerification ||
                    this.AchVerification != null &&
                    this.AchVerification.Equals(other.AchVerification)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.ConsumerAuthenticationResponse == other.ConsumerAuthenticationResponse ||
                    this.ConsumerAuthenticationResponse != null &&
                    this.ConsumerAuthenticationResponse.Equals(other.ConsumerAuthenticationResponse)
                ) && 
                (
                    this.SystemTraceAuditNumber == other.SystemTraceAuditNumber ||
                    this.SystemTraceAuditNumber != null &&
                    this.SystemTraceAuditNumber.Equals(other.SystemTraceAuditNumber)
                ) && 
                (
                    this.PaymentAccountReferenceNumber == other.PaymentAccountReferenceNumber ||
                    this.PaymentAccountReferenceNumber != null &&
                    this.PaymentAccountReferenceNumber.Equals(other.PaymentAccountReferenceNumber)
                ) && 
                (
                    this.TransactionIntegrityCode == other.TransactionIntegrityCode ||
                    this.TransactionIntegrityCode != null &&
                    this.TransactionIntegrityCode.Equals(other.TransactionIntegrityCode)
                ) && 
                (
                    this.AmexVerbalAuthReferenceNumber == other.AmexVerbalAuthReferenceNumber ||
                    this.AmexVerbalAuthReferenceNumber != null &&
                    this.AmexVerbalAuthReferenceNumber.Equals(other.AmexVerbalAuthReferenceNumber)
                ) && 
                (
                    this.MasterCardServiceCode == other.MasterCardServiceCode ||
                    this.MasterCardServiceCode != null &&
                    this.MasterCardServiceCode.Equals(other.MasterCardServiceCode)
                ) && 
                (
                    this.MasterCardServiceReplyCode == other.MasterCardServiceReplyCode ||
                    this.MasterCardServiceReplyCode != null &&
                    this.MasterCardServiceReplyCode.Equals(other.MasterCardServiceReplyCode)
                ) && 
                (
                    this.MasterCardAuthenticationType == other.MasterCardAuthenticationType ||
                    this.MasterCardAuthenticationType != null &&
                    this.MasterCardAuthenticationType.Equals(other.MasterCardAuthenticationType)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Routing == other.Routing ||
                    this.Routing != null &&
                    this.Routing.Equals(other.Routing)
                ) && 
                (
                    this.MerchantNumber == other.MerchantNumber ||
                    this.MerchantNumber != null &&
                    this.MerchantNumber.Equals(other.MerchantNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AuthIndicator != null)
                    hash = hash * 59 + this.AuthIndicator.GetHashCode();
                if (this.ApprovalCode != null)
                    hash = hash * 59 + this.ApprovalCode.GetHashCode();
                if (this.CardReferenceData != null)
                    hash = hash * 59 + this.CardReferenceData.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.NetworkTransactionId != null)
                    hash = hash * 59 + this.NetworkTransactionId.GetHashCode();
                if (this.ProviderTransactionId != null)
                    hash = hash * 59 + this.ProviderTransactionId.GetHashCode();
                if (this.ResponseCode != null)
                    hash = hash * 59 + this.ResponseCode.GetHashCode();
                if (this.ResponseCodeSource != null)
                    hash = hash * 59 + this.ResponseCodeSource.GetHashCode();
                if (this.ResponseDetails != null)
                    hash = hash * 59 + this.ResponseDetails.GetHashCode();
                if (this.ResponseCategoryCode != null)
                    hash = hash * 59 + this.ResponseCategoryCode.GetHashCode();
                if (this.ForwardedAcquirerCode != null)
                    hash = hash * 59 + this.ForwardedAcquirerCode.GetHashCode();
                if (this.Avs != null)
                    hash = hash * 59 + this.Avs.GetHashCode();
                if (this.CardVerification != null)
                    hash = hash * 59 + this.CardVerification.GetHashCode();
                if (this.MerchantAdvice != null)
                    hash = hash * 59 + this.MerchantAdvice.GetHashCode();
                if (this.ElectronicVerificationResults != null)
                    hash = hash * 59 + this.ElectronicVerificationResults.GetHashCode();
                if (this.AchVerification != null)
                    hash = hash * 59 + this.AchVerification.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.ConsumerAuthenticationResponse != null)
                    hash = hash * 59 + this.ConsumerAuthenticationResponse.GetHashCode();
                if (this.SystemTraceAuditNumber != null)
                    hash = hash * 59 + this.SystemTraceAuditNumber.GetHashCode();
                if (this.PaymentAccountReferenceNumber != null)
                    hash = hash * 59 + this.PaymentAccountReferenceNumber.GetHashCode();
                if (this.TransactionIntegrityCode != null)
                    hash = hash * 59 + this.TransactionIntegrityCode.GetHashCode();
                if (this.AmexVerbalAuthReferenceNumber != null)
                    hash = hash * 59 + this.AmexVerbalAuthReferenceNumber.GetHashCode();
                if (this.MasterCardServiceCode != null)
                    hash = hash * 59 + this.MasterCardServiceCode.GetHashCode();
                if (this.MasterCardServiceReplyCode != null)
                    hash = hash * 59 + this.MasterCardServiceReplyCode.GetHashCode();
                if (this.MasterCardAuthenticationType != null)
                    hash = hash * 59 + this.MasterCardAuthenticationType.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Routing != null)
                    hash = hash * 59 + this.Routing.GetHashCode();
                if (this.MerchantNumber != null)
                    hash = hash * 59 + this.MerchantNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthIndicator (string) maxLength
            if(this.AuthIndicator != null && this.AuthIndicator.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthIndicator, length must be less than or equal to 1.", new [] { "AuthIndicator" });
            }

            // CardReferenceData (string) maxLength
            if(this.CardReferenceData != null && this.CardReferenceData.Length >= 56)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardReferenceData, length must be less than or equal to 56.", new [] { "CardReferenceData" });
            }

            // TransactionId (string) maxLength
            if(this.TransactionId != null && this.TransactionId.Length >= 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than or equal to 50.", new [] { "TransactionId" });
            }

            // ResponseCode (string) maxLength
            if(this.ResponseCode != null && this.ResponseCode.Length >= 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseCode, length must be less than or equal to 10.", new [] { "ResponseCode" });
            }

            // ResponseCodeSource (string) maxLength
            if(this.ResponseCodeSource != null && this.ResponseCodeSource.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseCodeSource, length must be less than or equal to 1.", new [] { "ResponseCodeSource" });
            }

            // ResponseDetails (string) maxLength
            if(this.ResponseDetails != null && this.ResponseDetails.Length >= 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseDetails, length must be less than or equal to 255.", new [] { "ResponseDetails" });
            }

            // ResponseCategoryCode (string) maxLength
            if(this.ResponseCategoryCode != null && this.ResponseCategoryCode.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseCategoryCode, length must be less than or equal to 36.", new [] { "ResponseCategoryCode" });
            }

            // ForwardedAcquirerCode (string) maxLength
            if(this.ForwardedAcquirerCode != null && this.ForwardedAcquirerCode.Length >= 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForwardedAcquirerCode, length must be less than or equal to 32.", new [] { "ForwardedAcquirerCode" });
            }

            // SystemTraceAuditNumber (string) maxLength
            if(this.SystemTraceAuditNumber != null && this.SystemTraceAuditNumber.Length >= 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SystemTraceAuditNumber, length must be less than or equal to 6.", new [] { "SystemTraceAuditNumber" });
            }

            // PaymentAccountReferenceNumber (string) maxLength
            if(this.PaymentAccountReferenceNumber != null && this.PaymentAccountReferenceNumber.Length >= 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentAccountReferenceNumber, length must be less than or equal to 32.", new [] { "PaymentAccountReferenceNumber" });
            }

            // TransactionIntegrityCode (string) maxLength
            if(this.TransactionIntegrityCode != null && this.TransactionIntegrityCode.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionIntegrityCode, length must be less than or equal to 2.", new [] { "TransactionIntegrityCode" });
            }

            // AmexVerbalAuthReferenceNumber (string) maxLength
            if(this.AmexVerbalAuthReferenceNumber != null && this.AmexVerbalAuthReferenceNumber.Length >= 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmexVerbalAuthReferenceNumber, length must be less than or equal to 6.", new [] { "AmexVerbalAuthReferenceNumber" });
            }

            // MasterCardServiceCode (string) maxLength
            if(this.MasterCardServiceCode != null && this.MasterCardServiceCode.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MasterCardServiceCode, length must be less than or equal to 2.", new [] { "MasterCardServiceCode" });
            }

            // MasterCardServiceReplyCode (string) maxLength
            if(this.MasterCardServiceReplyCode != null && this.MasterCardServiceReplyCode.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MasterCardServiceReplyCode, length must be less than or equal to 1.", new [] { "MasterCardServiceReplyCode" });
            }

            // MasterCardAuthenticationType (string) maxLength
            if(this.MasterCardAuthenticationType != null && this.MasterCardAuthenticationType.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MasterCardAuthenticationType, length must be less than or equal to 1.", new [] { "MasterCardAuthenticationType" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length >= 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than or equal to 30.", new [] { "Name" });
            }

            // MerchantNumber (string) maxLength
            if(this.MerchantNumber != null && this.MerchantNumber.Length >= 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantNumber, length must be less than or equal to 15.", new [] { "MerchantNumber" });
            }

            yield break;
        }
    }

}
