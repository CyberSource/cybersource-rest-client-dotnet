/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PtsV2PaymentsPost201ResponseRiskInformationRules
    /// </summary>
    [DataContract]
    public partial class PtsV2PaymentsPost201ResponseRiskInformationRules :  IEquatable<PtsV2PaymentsPost201ResponseRiskInformationRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PtsV2PaymentsPost201ResponseRiskInformationRules" /> class.
        /// </summary>
        /// <param name="Name">Description of the rule as it appears in the Profile Editor..</param>
        /// <param name="Decision">Summarizes the result for the rule according to the setting that you chose in the Profile Editor. This field can contain one of the following values: - &#x60;IGNORE&#x60; - &#x60;REVIEW&#x60; - &#x60;REJECT&#x60; - &#x60;ACCEPT&#x60; .</param>
        public PtsV2PaymentsPost201ResponseRiskInformationRules(string Name = default(string), string Decision = default(string))
        {
            this.Name = Name;
            this.Decision = Decision;
        }
        
        /// <summary>
        /// Description of the rule as it appears in the Profile Editor.
        /// </summary>
        /// <value>Description of the rule as it appears in the Profile Editor.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Summarizes the result for the rule according to the setting that you chose in the Profile Editor. This field can contain one of the following values: - &#x60;IGNORE&#x60; - &#x60;REVIEW&#x60; - &#x60;REJECT&#x60; - &#x60;ACCEPT&#x60; 
        /// </summary>
        /// <value>Summarizes the result for the rule according to the setting that you chose in the Profile Editor. This field can contain one of the following values: - &#x60;IGNORE&#x60; - &#x60;REVIEW&#x60; - &#x60;REJECT&#x60; - &#x60;ACCEPT&#x60; </value>
        [DataMember(Name="decision", EmitDefaultValue=false)]
        public string Decision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PtsV2PaymentsPost201ResponseRiskInformationRules {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PtsV2PaymentsPost201ResponseRiskInformationRules);
        }

        /// <summary>
        /// Returns true if PtsV2PaymentsPost201ResponseRiskInformationRules instances are equal
        /// </summary>
        /// <param name="other">Instance of PtsV2PaymentsPost201ResponseRiskInformationRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PtsV2PaymentsPost201ResponseRiskInformationRules other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Decision == other.Decision ||
                    this.Decision != null &&
                    this.Decision.Equals(other.Decision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Decision != null)
                    hash = hash * 59 + this.Decision.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
