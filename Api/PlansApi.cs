/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a Plan
        /// </summary>
        /// <remarks>
        /// Activate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ActivateDeactivatePlanResponse</returns>
        ActivateDeactivatePlanResponse ActivatePlan (string id);

        /// <summary>
        /// Activate a Plan
        /// </summary>
        /// <remarks>
        /// Activate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of ActivateDeactivatePlanResponse</returns>
        ApiResponse<ActivateDeactivatePlanResponse> ActivatePlanWithHttpInfo (string id);
        /// <summary>
        /// Create a Plan
        /// </summary>
        /// <remarks>
        /// The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>CreatePlanResponse</returns>
        CreatePlanResponse CreatePlan (CreatePlanRequest createPlanRequest);

        /// <summary>
        /// Create a Plan
        /// </summary>
        /// <remarks>
        /// The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>ApiResponse of CreatePlanResponse</returns>
        ApiResponse<CreatePlanResponse> CreatePlanWithHttpInfo (CreatePlanRequest createPlanRequest);
        /// <summary>
        /// Deactivate a Plan
        /// </summary>
        /// <remarks>
        /// Deactivate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ActivateDeactivatePlanResponse</returns>
        ActivateDeactivatePlanResponse DeactivatePlan (string id);

        /// <summary>
        /// Deactivate a Plan
        /// </summary>
        /// <remarks>
        /// Deactivate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of ActivateDeactivatePlanResponse</returns>
        ApiResponse<ActivateDeactivatePlanResponse> DeactivatePlanWithHttpInfo (string id);
        /// <summary>
        /// Delete a Plan
        /// </summary>
        /// <remarks>
        /// Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>DeletePlanResponse</returns>
        DeletePlanResponse DeletePlan (string id);

        /// <summary>
        /// Delete a Plan
        /// </summary>
        /// <remarks>
        /// Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of DeletePlanResponse</returns>
        ApiResponse<DeletePlanResponse> DeletePlanWithHttpInfo (string id);
        /// <summary>
        /// Get a Plan
        /// </summary>
        /// <remarks>
        /// Retrieve a Plan details by Plan Id.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>GetPlanResponse</returns>
        GetPlanResponse GetPlan (string id);

        /// <summary>
        /// Get a Plan
        /// </summary>
        /// <remarks>
        /// Retrieve a Plan details by Plan Id.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of GetPlanResponse</returns>
        ApiResponse<GetPlanResponse> GetPlanWithHttpInfo (string id);
        /// <summary>
        /// Get a Plan Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Plan Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPlanCodeResponse</returns>
        GetPlanCodeResponse GetPlanCode ();

        /// <summary>
        /// Get a Plan Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Plan Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPlanCodeResponse</returns>
        ApiResponse<GetPlanCodeResponse> GetPlanCodeWithHttpInfo ();
        /// <summary>
        /// Get a List of Plans
        /// </summary>
        /// <remarks>
        /// Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>GetAllPlansResponse</returns>
        GetAllPlansResponse GetPlans (int? offset = null, int? limit = null, string code = null, string status = null, string name = null);

        /// <summary>
        /// Get a List of Plans
        /// </summary>
        /// <remarks>
        /// Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>ApiResponse of GetAllPlansResponse</returns>
        ApiResponse<GetAllPlansResponse> GetPlansWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null, string name = null);
        /// <summary>
        /// Update a Plan
        /// </summary>
        /// <remarks>
        /// Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>UpdatePlanResponse</returns>
        UpdatePlanResponse UpdatePlan (string id, UpdatePlanRequest updatePlanRequest);

        /// <summary>
        /// Update a Plan
        /// </summary>
        /// <remarks>
        /// Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>ApiResponse of UpdatePlanResponse</returns>
        ApiResponse<UpdatePlanResponse> UpdatePlanWithHttpInfo (string id, UpdatePlanRequest updatePlanRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate a Plan
        /// </summary>
        /// <remarks>
        /// Activate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ActivateDeactivatePlanResponse</returns>
        System.Threading.Tasks.Task<ActivateDeactivatePlanResponse> ActivatePlanAsync (string id);

        /// <summary>
        /// Activate a Plan
        /// </summary>
        /// <remarks>
        /// Activate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (ActivateDeactivatePlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivateDeactivatePlanResponse>> ActivatePlanAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a Plan
        /// </summary>
        /// <remarks>
        /// The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>Task of CreatePlanResponse</returns>
        System.Threading.Tasks.Task<CreatePlanResponse> CreatePlanAsync (CreatePlanRequest createPlanRequest);

        /// <summary>
        /// Create a Plan
        /// </summary>
        /// <remarks>
        /// The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>Task of ApiResponse (CreatePlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePlanResponse>> CreatePlanAsyncWithHttpInfo (CreatePlanRequest createPlanRequest);
        /// <summary>
        /// Deactivate a Plan
        /// </summary>
        /// <remarks>
        /// Deactivate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ActivateDeactivatePlanResponse</returns>
        System.Threading.Tasks.Task<ActivateDeactivatePlanResponse> DeactivatePlanAsync (string id);

        /// <summary>
        /// Deactivate a Plan
        /// </summary>
        /// <remarks>
        /// Deactivate a Plan
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (ActivateDeactivatePlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivateDeactivatePlanResponse>> DeactivatePlanAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a Plan
        /// </summary>
        /// <remarks>
        /// Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of DeletePlanResponse</returns>
        System.Threading.Tasks.Task<DeletePlanResponse> DeletePlanAsync (string id);

        /// <summary>
        /// Delete a Plan
        /// </summary>
        /// <remarks>
        /// Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (DeletePlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletePlanResponse>> DeletePlanAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a Plan
        /// </summary>
        /// <remarks>
        /// Retrieve a Plan details by Plan Id.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of GetPlanResponse</returns>
        System.Threading.Tasks.Task<GetPlanResponse> GetPlanAsync (string id);

        /// <summary>
        /// Get a Plan
        /// </summary>
        /// <remarks>
        /// Retrieve a Plan details by Plan Id.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (GetPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPlanResponse>> GetPlanAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a Plan Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Plan Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPlanCodeResponse</returns>
        System.Threading.Tasks.Task<GetPlanCodeResponse> GetPlanCodeAsync ();

        /// <summary>
        /// Get a Plan Code
        /// </summary>
        /// <remarks>
        /// Get a Unique Plan Code
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPlanCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPlanCodeResponse>> GetPlanCodeAsyncWithHttpInfo ();
        /// <summary>
        /// Get a List of Plans
        /// </summary>
        /// <remarks>
        /// Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>Task of GetAllPlansResponse</returns>
        System.Threading.Tasks.Task<GetAllPlansResponse> GetPlansAsync (int? offset = null, int? limit = null, string code = null, string status = null, string name = null);

        /// <summary>
        /// Get a List of Plans
        /// </summary>
        /// <remarks>
        /// Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>Task of ApiResponse (GetAllPlansResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllPlansResponse>> GetPlansAsyncWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null, string name = null);
        /// <summary>
        /// Update a Plan
        /// </summary>
        /// <remarks>
        /// Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>Task of UpdatePlanResponse</returns>
        System.Threading.Tasks.Task<UpdatePlanResponse> UpdatePlanAsync (string id, UpdatePlanRequest updatePlanRequest);

        /// <summary>
        /// Update a Plan
        /// </summary>
        /// <remarks>
        /// Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>Task of ApiResponse (UpdatePlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePlanResponse>> UpdatePlanAsyncWithHttpInfo (string id, UpdatePlanRequest updatePlanRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlansApi : IPlansApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlansApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Activate a Plan Activate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ActivateDeactivatePlanResponse</returns>
        public ActivateDeactivatePlanResponse ActivatePlan (string id)
        {
            logger.Debug("CALLING API \"ActivatePlan\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ActivateDeactivatePlanResponse> localVarResponse = ActivatePlanWithHttpInfo(id);
            logger.Debug("CALLING API \"ActivatePlan\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a Plan Activate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of ActivateDeactivatePlanResponse</returns>
        public ApiResponse< ActivateDeactivatePlanResponse > ActivatePlanWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->ActivatePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->ActivatePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}/activate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ActivateDeactivatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ActivateDeactivatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateDeactivatePlanResponse))); // Return statement
        }

        /// <summary>
        /// Activate a Plan Activate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ActivateDeactivatePlanResponse</returns>
        public async System.Threading.Tasks.Task<ActivateDeactivatePlanResponse> ActivatePlanAsync (string id)
        {
            logger.Debug("CALLING API \"ActivatePlanAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ActivateDeactivatePlanResponse> localVarResponse = await ActivatePlanAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"ActivatePlanAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Activate a Plan Activate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (ActivateDeactivatePlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivateDeactivatePlanResponse>> ActivatePlanAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->ActivatePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->ActivatePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}/activate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ActivateDeactivatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ActivateDeactivatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateDeactivatePlanResponse))); // Return statement
        }
        /// <summary>
        /// Create a Plan The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>CreatePlanResponse</returns>
        public CreatePlanResponse CreatePlan (CreatePlanRequest createPlanRequest)
        {
            logger.Debug("CALLING API \"CreatePlan\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<CreatePlanResponse> localVarResponse = CreatePlanWithHttpInfo(createPlanRequest);
            logger.Debug("CALLING API \"CreatePlan\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Plan The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>ApiResponse of CreatePlanResponse</returns>
        public ApiResponse< CreatePlanResponse > CreatePlanWithHttpInfo (CreatePlanRequest createPlanRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createPlanRequest' is set
            if (createPlanRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createPlanRequest' when calling PlansApi->CreatePlan");
                throw new ApiException(400, "Missing required parameter 'createPlanRequest' when calling PlansApi->CreatePlan");
            }

            var localVarPath = $"/rbs/v1/plans";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createPlanRequest != null && createPlanRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createPlanRequest = (CreatePlanRequest)sdkTracker.InsertDeveloperIdTracker(createPlanRequest, createPlanRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createPlanRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPlanRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<CreatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (CreatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePlanResponse))); // Return statement
        }

        /// <summary>
        /// Create a Plan The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>Task of CreatePlanResponse</returns>
        public async System.Threading.Tasks.Task<CreatePlanResponse> CreatePlanAsync (CreatePlanRequest createPlanRequest)
        {
            logger.Debug("CALLING API \"CreatePlanAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<CreatePlanResponse> localVarResponse = await CreatePlanAsyncWithHttpInfo(createPlanRequest);
            logger.Debug("CALLING API \"CreatePlanAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Plan The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlanRequest"></param>
        /// <returns>Task of ApiResponse (CreatePlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatePlanResponse>> CreatePlanAsyncWithHttpInfo (CreatePlanRequest createPlanRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createPlanRequest' is set
            if (createPlanRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createPlanRequest' when calling PlansApi->CreatePlan");
                throw new ApiException(400, "Missing required parameter 'createPlanRequest' when calling PlansApi->CreatePlan");
            }

            var localVarPath = $"/rbs/v1/plans";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createPlanRequest != null && createPlanRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createPlanRequest = (CreatePlanRequest)sdkTracker.InsertDeveloperIdTracker(createPlanRequest, createPlanRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createPlanRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPlanRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<CreatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (CreatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePlanResponse))); // Return statement
        }
        /// <summary>
        /// Deactivate a Plan Deactivate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ActivateDeactivatePlanResponse</returns>
        public ActivateDeactivatePlanResponse DeactivatePlan (string id)
        {
            logger.Debug("CALLING API \"DeactivatePlan\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ActivateDeactivatePlanResponse> localVarResponse = DeactivatePlanWithHttpInfo(id);
            logger.Debug("CALLING API \"DeactivatePlan\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate a Plan Deactivate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of ActivateDeactivatePlanResponse</returns>
        public ApiResponse< ActivateDeactivatePlanResponse > DeactivatePlanWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->DeactivatePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->DeactivatePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}/deactivate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ActivateDeactivatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ActivateDeactivatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateDeactivatePlanResponse))); // Return statement
        }

        /// <summary>
        /// Deactivate a Plan Deactivate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ActivateDeactivatePlanResponse</returns>
        public async System.Threading.Tasks.Task<ActivateDeactivatePlanResponse> DeactivatePlanAsync (string id)
        {
            logger.Debug("CALLING API \"DeactivatePlanAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<ActivateDeactivatePlanResponse> localVarResponse = await DeactivatePlanAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"DeactivatePlanAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivate a Plan Deactivate a Plan
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (ActivateDeactivatePlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivateDeactivatePlanResponse>> DeactivatePlanAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->DeactivatePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->DeactivatePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}/deactivate";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<ActivateDeactivatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (ActivateDeactivatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateDeactivatePlanResponse))); // Return statement
        }
        /// <summary>
        /// Delete a Plan Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>DeletePlanResponse</returns>
        public DeletePlanResponse DeletePlan (string id)
        {
            logger.Debug("CALLING API \"DeletePlan\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<DeletePlanResponse> localVarResponse = DeletePlanWithHttpInfo(id);
            logger.Debug("CALLING API \"DeletePlan\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Plan Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of DeletePlanResponse</returns>
        public ApiResponse< DeletePlanResponse > DeletePlanWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->DeletePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->DeletePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<DeletePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (DeletePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletePlanResponse))); // Return statement
        }

        /// <summary>
        /// Delete a Plan Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of DeletePlanResponse</returns>
        public async System.Threading.Tasks.Task<DeletePlanResponse> DeletePlanAsync (string id)
        {
            logger.Debug("CALLING API \"DeletePlanAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<DeletePlanResponse> localVarResponse = await DeletePlanAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"DeletePlanAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Plan Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (DeletePlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletePlanResponse>> DeletePlanAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->DeletePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->DeletePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<DeletePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (DeletePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletePlanResponse))); // Return statement
        }
        /// <summary>
        /// Get a Plan Retrieve a Plan details by Plan Id.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>GetPlanResponse</returns>
        public GetPlanResponse GetPlan (string id)
        {
            logger.Debug("CALLING API \"GetPlan\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetPlanResponse> localVarResponse = GetPlanWithHttpInfo(id);
            logger.Debug("CALLING API \"GetPlan\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Plan Retrieve a Plan details by Plan Id.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>ApiResponse of GetPlanResponse</returns>
        public ApiResponse< GetPlanResponse > GetPlanWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->GetPlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetPlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPlanResponse))); // Return statement
        }

        /// <summary>
        /// Get a Plan Retrieve a Plan details by Plan Id.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of GetPlanResponse</returns>
        public async System.Threading.Tasks.Task<GetPlanResponse> GetPlanAsync (string id)
        {
            logger.Debug("CALLING API \"GetPlanAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetPlanResponse> localVarResponse = await GetPlanAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"GetPlanAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Plan Retrieve a Plan details by Plan Id.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <returns>Task of ApiResponse (GetPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPlanResponse>> GetPlanAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->GetPlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->GetPlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetPlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPlanResponse))); // Return statement
        }
        /// <summary>
        /// Get a Plan Code Get a Unique Plan Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPlanCodeResponse</returns>
        public GetPlanCodeResponse GetPlanCode ()
        {
            logger.Debug("CALLING API \"GetPlanCode\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetPlanCodeResponse> localVarResponse = GetPlanCodeWithHttpInfo();
            logger.Debug("CALLING API \"GetPlanCode\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Plan Code Get a Unique Plan Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPlanCodeResponse</returns>
        public ApiResponse< GetPlanCodeResponse > GetPlanCodeWithHttpInfo ()
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/plans/code";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanCode", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetPlanCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetPlanCodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPlanCodeResponse))); // Return statement
        }

        /// <summary>
        /// Get a Plan Code Get a Unique Plan Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPlanCodeResponse</returns>
        public async System.Threading.Tasks.Task<GetPlanCodeResponse> GetPlanCodeAsync ()
        {
            logger.Debug("CALLING API \"GetPlanCodeAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetPlanCodeResponse> localVarResponse = await GetPlanCodeAsyncWithHttpInfo();
            logger.Debug("CALLING API \"GetPlanCodeAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Plan Code Get a Unique Plan Code
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPlanCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPlanCodeResponse>> GetPlanCodeAsyncWithHttpInfo ()
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/plans/code";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanCode", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetPlanCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetPlanCodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPlanCodeResponse))); // Return statement
        }
        /// <summary>
        /// Get a List of Plans Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>GetAllPlansResponse</returns>
        public GetAllPlansResponse GetPlans (int? offset = null, int? limit = null, string code = null, string status = null, string name = null)
        {
            logger.Debug("CALLING API \"GetPlans\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetAllPlansResponse> localVarResponse = GetPlansWithHttpInfo(offset, limit, code, status, name);
            logger.Debug("CALLING API \"GetPlans\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a List of Plans Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>ApiResponse of GetAllPlansResponse</returns>
        public ApiResponse< GetAllPlansResponse > GetPlansWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null, string name = null)
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/plans";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            if (code != null)
            {
                localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            }
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            if (name != null)
            {
                localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlans", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetAllPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetAllPlansResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllPlansResponse))); // Return statement
        }

        /// <summary>
        /// Get a List of Plans Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>Task of GetAllPlansResponse</returns>
        public async System.Threading.Tasks.Task<GetAllPlansResponse> GetPlansAsync (int? offset = null, int? limit = null, string code = null, string status = null, string name = null)
        {
            logger.Debug("CALLING API \"GetPlansAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<GetAllPlansResponse> localVarResponse = await GetPlansAsyncWithHttpInfo(offset, limit, code, status, name);
            logger.Debug("CALLING API \"GetPlansAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a List of Plans Retrieve Plans by Plan Code &amp; Plan Status. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number. (optional)</param>
        /// <param name="limit">Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;  (optional)</param>
        /// <param name="code">Filter by Plan Code (optional)</param>
        /// <param name="status">Filter by Plan Status (optional)</param>
        /// <param name="name">Filter by Plan Name. (First sub string or full string) **[Not Recommended]**  (optional)</param>
        /// <returns>Task of ApiResponse (GetAllPlansResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllPlansResponse>> GetPlansAsyncWithHttpInfo (int? offset = null, int? limit = null, string code = null, string status = null, string name = null)
        {
            LogUtility logUtility = new LogUtility();


            var localVarPath = $"/rbs/v1/plans";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            if (code != null)
            {
                localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            }
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            if (name != null)
            {
                localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlans", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<GetAllPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (GetAllPlansResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllPlansResponse))); // Return statement
        }
        /// <summary>
        /// Update a Plan Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>UpdatePlanResponse</returns>
        public UpdatePlanResponse UpdatePlan (string id, UpdatePlanRequest updatePlanRequest)
        {
            logger.Debug("CALLING API \"UpdatePlan\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<UpdatePlanResponse> localVarResponse = UpdatePlanWithHttpInfo(id, updatePlanRequest);
            logger.Debug("CALLING API \"UpdatePlan\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Plan Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>ApiResponse of UpdatePlanResponse</returns>
        public ApiResponse< UpdatePlanResponse > UpdatePlanWithHttpInfo (string id, UpdatePlanRequest updatePlanRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->UpdatePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->UpdatePlan");
            }
            // verify the required parameter 'updatePlanRequest' is set
            if (updatePlanRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'updatePlanRequest' when calling PlansApi->UpdatePlan");
                throw new ApiException(400, "Missing required parameter 'updatePlanRequest' when calling PlansApi->UpdatePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updatePlanRequest != null && updatePlanRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updatePlanRequest = (UpdatePlanRequest)sdkTracker.InsertDeveloperIdTracker(updatePlanRequest, updatePlanRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(updatePlanRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<UpdatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (UpdatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePlanResponse))); // Return statement
        }

        /// <summary>
        /// Update a Plan Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>Task of UpdatePlanResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePlanResponse> UpdatePlanAsync (string id, UpdatePlanRequest updatePlanRequest)
        {
            logger.Debug("CALLING API \"UpdatePlanAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<UpdatePlanResponse> localVarResponse = await UpdatePlanAsyncWithHttpInfo(id, updatePlanRequest);
            logger.Debug("CALLING API \"UpdatePlanAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Plan Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Plan Id</param>
        /// <param name="updatePlanRequest"></param>
        /// <returns>Task of ApiResponse (UpdatePlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePlanResponse>> UpdatePlanAsyncWithHttpInfo (string id, UpdatePlanRequest updatePlanRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PlansApi->UpdatePlan");
                throw new ApiException(400, "Missing required parameter 'id' when calling PlansApi->UpdatePlan");
            }
            // verify the required parameter 'updatePlanRequest' is set
            if (updatePlanRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'updatePlanRequest' when calling PlansApi->UpdatePlan");
                throw new ApiException(400, "Missing required parameter 'updatePlanRequest' when calling PlansApi->UpdatePlan");
            }

            var localVarPath = $"/rbs/v1/plans/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updatePlanRequest != null && updatePlanRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updatePlanRequest = (UpdatePlanRequest)sdkTracker.InsertDeveloperIdTracker(updatePlanRequest, updatePlanRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(updatePlanRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlanRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlan", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<UpdatePlanResponse>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (UpdatePlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePlanResponse))); // Return statement
        }
    }
}
