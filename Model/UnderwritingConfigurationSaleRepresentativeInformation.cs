/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UnderwritingConfigurationSaleRepresentativeInformation
    /// </summary>
    [DataContract]
    public partial class UnderwritingConfigurationSaleRepresentativeInformation :  IEquatable<UnderwritingConfigurationSaleRepresentativeInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationSaleRepresentativeInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnderwritingConfigurationSaleRepresentativeInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwritingConfigurationSaleRepresentativeInformation" /> class.
        /// </summary>
        /// <param name="SalesRepId">Sales rep Identifier (required).</param>
        /// <param name="SalesRepFirstName">Sales rep First Name (required).</param>
        /// <param name="SalesRepLastName">Sales Rep Last Name (required).</param>
        /// <param name="SalesRepEmail">Sales Rep eMail (required).</param>
        /// <param name="SalesRepNumericPhoneNumberCountryCode">Sales Rep Phone Number Country. Two character country code, ISO 3166-1 alpha-2. (required).</param>
        /// <param name="SalesRepPhoneNumber">Sales Rep Phone (required).</param>
        public UnderwritingConfigurationSaleRepresentativeInformation(string SalesRepId = default(string), string SalesRepFirstName = default(string), string SalesRepLastName = default(string), string SalesRepEmail = default(string), string SalesRepNumericPhoneNumberCountryCode = default(string), string SalesRepPhoneNumber = default(string))
        {
            this.SalesRepId = SalesRepId;
            this.SalesRepFirstName = SalesRepFirstName;
            this.SalesRepLastName = SalesRepLastName;
            this.SalesRepEmail = SalesRepEmail;
            this.SalesRepNumericPhoneNumberCountryCode = SalesRepNumericPhoneNumberCountryCode;
            this.SalesRepPhoneNumber = SalesRepPhoneNumber;
        }
        
        /// <summary>
        /// Sales rep Identifier
        /// </summary>
        /// <value>Sales rep Identifier</value>
        [DataMember(Name="salesRepId", EmitDefaultValue=false)]
        public string SalesRepId { get; set; }

        /// <summary>
        /// Sales rep First Name
        /// </summary>
        /// <value>Sales rep First Name</value>
        [DataMember(Name="salesRepFirstName", EmitDefaultValue=false)]
        public string SalesRepFirstName { get; set; }

        /// <summary>
        /// Sales Rep Last Name
        /// </summary>
        /// <value>Sales Rep Last Name</value>
        [DataMember(Name="salesRepLastName", EmitDefaultValue=false)]
        public string SalesRepLastName { get; set; }

        /// <summary>
        /// Sales Rep eMail
        /// </summary>
        /// <value>Sales Rep eMail</value>
        [DataMember(Name="salesRepEmail", EmitDefaultValue=false)]
        public string SalesRepEmail { get; set; }

        /// <summary>
        /// Sales Rep Phone Number Country. Two character country code, ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Sales Rep Phone Number Country. Two character country code, ISO 3166-1 alpha-2.</value>
        [DataMember(Name="salesRepNumericPhoneNumberCountryCode", EmitDefaultValue=false)]
        public string SalesRepNumericPhoneNumberCountryCode { get; set; }

        /// <summary>
        /// Sales Rep Phone
        /// </summary>
        /// <value>Sales Rep Phone</value>
        [DataMember(Name="salesRepPhoneNumber", EmitDefaultValue=false)]
        public string SalesRepPhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnderwritingConfigurationSaleRepresentativeInformation {\n");
            if (SalesRepId != null) sb.Append("  SalesRepId: ").Append(SalesRepId).Append("\n");
            if (SalesRepFirstName != null) sb.Append("  SalesRepFirstName: ").Append(SalesRepFirstName).Append("\n");
            if (SalesRepLastName != null) sb.Append("  SalesRepLastName: ").Append(SalesRepLastName).Append("\n");
            if (SalesRepEmail != null) sb.Append("  SalesRepEmail: ").Append(SalesRepEmail).Append("\n");
            if (SalesRepNumericPhoneNumberCountryCode != null) sb.Append("  SalesRepNumericPhoneNumberCountryCode: ").Append(SalesRepNumericPhoneNumberCountryCode).Append("\n");
            if (SalesRepPhoneNumber != null) sb.Append("  SalesRepPhoneNumber: ").Append(SalesRepPhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnderwritingConfigurationSaleRepresentativeInformation);
        }

        /// <summary>
        /// Returns true if UnderwritingConfigurationSaleRepresentativeInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UnderwritingConfigurationSaleRepresentativeInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderwritingConfigurationSaleRepresentativeInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SalesRepId == other.SalesRepId ||
                    this.SalesRepId != null &&
                    this.SalesRepId.Equals(other.SalesRepId)
                ) && 
                (
                    this.SalesRepFirstName == other.SalesRepFirstName ||
                    this.SalesRepFirstName != null &&
                    this.SalesRepFirstName.Equals(other.SalesRepFirstName)
                ) && 
                (
                    this.SalesRepLastName == other.SalesRepLastName ||
                    this.SalesRepLastName != null &&
                    this.SalesRepLastName.Equals(other.SalesRepLastName)
                ) && 
                (
                    this.SalesRepEmail == other.SalesRepEmail ||
                    this.SalesRepEmail != null &&
                    this.SalesRepEmail.Equals(other.SalesRepEmail)
                ) && 
                (
                    this.SalesRepNumericPhoneNumberCountryCode == other.SalesRepNumericPhoneNumberCountryCode ||
                    this.SalesRepNumericPhoneNumberCountryCode != null &&
                    this.SalesRepNumericPhoneNumberCountryCode.Equals(other.SalesRepNumericPhoneNumberCountryCode)
                ) && 
                (
                    this.SalesRepPhoneNumber == other.SalesRepPhoneNumber ||
                    this.SalesRepPhoneNumber != null &&
                    this.SalesRepPhoneNumber.Equals(other.SalesRepPhoneNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SalesRepId != null)
                    hash = hash * 59 + this.SalesRepId.GetHashCode();
                if (this.SalesRepFirstName != null)
                    hash = hash * 59 + this.SalesRepFirstName.GetHashCode();
                if (this.SalesRepLastName != null)
                    hash = hash * 59 + this.SalesRepLastName.GetHashCode();
                if (this.SalesRepEmail != null)
                    hash = hash * 59 + this.SalesRepEmail.GetHashCode();
                if (this.SalesRepNumericPhoneNumberCountryCode != null)
                    hash = hash * 59 + this.SalesRepNumericPhoneNumberCountryCode.GetHashCode();
                if (this.SalesRepPhoneNumber != null)
                    hash = hash * 59 + this.SalesRepPhoneNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
