/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsTravelInformationLodging
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsTravelInformationLodging :  IEquatable<Ptsv2paymentsTravelInformationLodging>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsTravelInformationLodging" /> class.
        /// </summary>
        /// <param name="CheckInDate">Date on which the guest checked in. In the case of a no-show or a reservation, the scheduled arrival date. Format: &#x60;MMDDYY&#x60;. For best interchange rates, make sure it is a valid date. .</param>
        /// <param name="CheckOutDate">Date on which the guest checked out. Format: &#x60;MMDDYY&#x60;. For best interchange rates, make sure it is a valid date. .</param>
        /// <param name="Room">The object containing the number of nights and the daily rate that applies for that no of nights. .</param>
        /// <param name="SmokingPreference">Smoking preference of the guest. Possible values: - &#x60;Y&#x60;: smoking room - &#x60;N&#x60;: non-smoking room .</param>
        /// <param name="NumberOfRooms">Number of rooms booked by the cardholder. .</param>
        /// <param name="NumberOfGuests">Number of guests staying in the room. .</param>
        /// <param name="RoomBedType">Type of room, such as queen, king, or two doubles. .</param>
        /// <param name="RoomTaxType">Type of tax, such as tourist or hotel. .</param>
        /// <param name="RoomRateType">Type of rate, such as corporate or senior citizen. .</param>
        /// <param name="GuestName">Name of the guest under which the room is reserved. .</param>
        /// <param name="CustomerServicePhoneNumber">Your toll-free customer service phone number. .</param>
        /// <param name="CorporateClientCode">Code assigned to a business. You can use this code to identify corporate rates and discounts for guests. .</param>
        /// <param name="AdditionalDiscountAmount">Amount of an additional coupon or discount. .</param>
        /// <param name="RoomLocation">Location of room, such as lake view or ocean view. .</param>
        /// <param name="SpecialProgramCode">Code that identifies special circumstances. Possible values: - &#x60;1&#x60;: lodging (default) - &#x60;2&#x60;: no show reservation - &#x60;3&#x60;: advanced deposit .</param>
        /// <param name="TotalTaxAmount">Total tax amount. .</param>
        /// <param name="PrepaidCost">Prepaid amount, such as a deposit. .</param>
        /// <param name="FoodAndBeverageCost">Cost for all food and beverages. .</param>
        /// <param name="RoomTaxAmount">Total tax for the room. .</param>
        /// <param name="AdjustmentAmount">Adjusted amount charged in addition to the reservation amount after the stay is complete. .</param>
        /// <param name="PhoneCost">Cost of telephone services. .</param>
        /// <param name="RestaurantCost">Cost of restaurant purchases .</param>
        /// <param name="RoomServiceCost">Cost of room service. .</param>
        /// <param name="MiniBarCost">Cost of mini-bar purchases. .</param>
        /// <param name="LaundryCost">Cost of laundry services. .</param>
        /// <param name="MiscellaneousCost">Miscellaneous costs. .</param>
        /// <param name="GiftShopCost">Cost of gift shop purchases. .</param>
        /// <param name="MovieCost">Cost of movies. .</param>
        /// <param name="HealthClubCost">Cost of health club services. .</param>
        /// <param name="ValetParkingCost">Cost of valet parking services. .</param>
        /// <param name="CashDisbursementCost">Cost of the cash that was disbursed plus any associated service fees .</param>
        /// <param name="NonRoomCost">Cost of non-room purchases, such as meals and gifts. .</param>
        /// <param name="BusinessCenterCost">Cost of business center services. .</param>
        /// <param name="LoungeBarCost">Cost of lounge and bar purchases. .</param>
        /// <param name="TransportationCost">Cost of transportation services. .</param>
        /// <param name="GratuityAmount">Gratuity. .</param>
        /// <param name="ConferenceRoomCost">Cost of conference room services. .</param>
        /// <param name="AudioVisualCost">Cost of audio visual services. .</param>
        /// <param name="BanquestCost">Cost of banquet services. .</param>
        /// <param name="NonRoomTaxAmount">Tax on non-room purchases. .</param>
        /// <param name="EarlyCheckOutCost">Service fee for early departure. .</param>
        /// <param name="InternetAccessCost">Cost of Internet access. .</param>
        public Ptsv2paymentsTravelInformationLodging(string CheckInDate = default(string), string CheckOutDate = default(string), List<Ptsv2paymentsTravelInformationLodgingRoom> Room = default(List<Ptsv2paymentsTravelInformationLodgingRoom>), string SmokingPreference = default(string), int? NumberOfRooms = default(int?), int? NumberOfGuests = default(int?), string RoomBedType = default(string), string RoomTaxType = default(string), string RoomRateType = default(string), string GuestName = default(string), string CustomerServicePhoneNumber = default(string), string CorporateClientCode = default(string), string AdditionalDiscountAmount = default(string), string RoomLocation = default(string), string SpecialProgramCode = default(string), string TotalTaxAmount = default(string), string PrepaidCost = default(string), string FoodAndBeverageCost = default(string), string RoomTaxAmount = default(string), string AdjustmentAmount = default(string), string PhoneCost = default(string), string RestaurantCost = default(string), string RoomServiceCost = default(string), string MiniBarCost = default(string), string LaundryCost = default(string), string MiscellaneousCost = default(string), string GiftShopCost = default(string), string MovieCost = default(string), string HealthClubCost = default(string), string ValetParkingCost = default(string), string CashDisbursementCost = default(string), string NonRoomCost = default(string), string BusinessCenterCost = default(string), string LoungeBarCost = default(string), string TransportationCost = default(string), string GratuityAmount = default(string), string ConferenceRoomCost = default(string), string AudioVisualCost = default(string), string BanquestCost = default(string), string NonRoomTaxAmount = default(string), string EarlyCheckOutCost = default(string), string InternetAccessCost = default(string))
        {
            this.CheckInDate = CheckInDate;
            this.CheckOutDate = CheckOutDate;
            this.Room = Room;
            this.SmokingPreference = SmokingPreference;
            this.NumberOfRooms = NumberOfRooms;
            this.NumberOfGuests = NumberOfGuests;
            this.RoomBedType = RoomBedType;
            this.RoomTaxType = RoomTaxType;
            this.RoomRateType = RoomRateType;
            this.GuestName = GuestName;
            this.CustomerServicePhoneNumber = CustomerServicePhoneNumber;
            this.CorporateClientCode = CorporateClientCode;
            this.AdditionalDiscountAmount = AdditionalDiscountAmount;
            this.RoomLocation = RoomLocation;
            this.SpecialProgramCode = SpecialProgramCode;
            this.TotalTaxAmount = TotalTaxAmount;
            this.PrepaidCost = PrepaidCost;
            this.FoodAndBeverageCost = FoodAndBeverageCost;
            this.RoomTaxAmount = RoomTaxAmount;
            this.AdjustmentAmount = AdjustmentAmount;
            this.PhoneCost = PhoneCost;
            this.RestaurantCost = RestaurantCost;
            this.RoomServiceCost = RoomServiceCost;
            this.MiniBarCost = MiniBarCost;
            this.LaundryCost = LaundryCost;
            this.MiscellaneousCost = MiscellaneousCost;
            this.GiftShopCost = GiftShopCost;
            this.MovieCost = MovieCost;
            this.HealthClubCost = HealthClubCost;
            this.ValetParkingCost = ValetParkingCost;
            this.CashDisbursementCost = CashDisbursementCost;
            this.NonRoomCost = NonRoomCost;
            this.BusinessCenterCost = BusinessCenterCost;
            this.LoungeBarCost = LoungeBarCost;
            this.TransportationCost = TransportationCost;
            this.GratuityAmount = GratuityAmount;
            this.ConferenceRoomCost = ConferenceRoomCost;
            this.AudioVisualCost = AudioVisualCost;
            this.BanquestCost = BanquestCost;
            this.NonRoomTaxAmount = NonRoomTaxAmount;
            this.EarlyCheckOutCost = EarlyCheckOutCost;
            this.InternetAccessCost = InternetAccessCost;
        }
        
        /// <summary>
        /// Date on which the guest checked in. In the case of a no-show or a reservation, the scheduled arrival date. Format: &#x60;MMDDYY&#x60;. For best interchange rates, make sure it is a valid date. 
        /// </summary>
        /// <value>Date on which the guest checked in. In the case of a no-show or a reservation, the scheduled arrival date. Format: &#x60;MMDDYY&#x60;. For best interchange rates, make sure it is a valid date. </value>
        [DataMember(Name="checkInDate", EmitDefaultValue=false)]
        public string CheckInDate { get; set; }

        /// <summary>
        /// Date on which the guest checked out. Format: &#x60;MMDDYY&#x60;. For best interchange rates, make sure it is a valid date. 
        /// </summary>
        /// <value>Date on which the guest checked out. Format: &#x60;MMDDYY&#x60;. For best interchange rates, make sure it is a valid date. </value>
        [DataMember(Name="checkOutDate", EmitDefaultValue=false)]
        public string CheckOutDate { get; set; }

        /// <summary>
        /// The object containing the number of nights and the daily rate that applies for that no of nights. 
        /// </summary>
        /// <value>The object containing the number of nights and the daily rate that applies for that no of nights. </value>
        [DataMember(Name="room", EmitDefaultValue=false)]
        public List<Ptsv2paymentsTravelInformationLodgingRoom> Room { get; set; }

        /// <summary>
        /// Smoking preference of the guest. Possible values: - &#x60;Y&#x60;: smoking room - &#x60;N&#x60;: non-smoking room 
        /// </summary>
        /// <value>Smoking preference of the guest. Possible values: - &#x60;Y&#x60;: smoking room - &#x60;N&#x60;: non-smoking room </value>
        [DataMember(Name="smokingPreference", EmitDefaultValue=false)]
        public string SmokingPreference { get; set; }

        /// <summary>
        /// Number of rooms booked by the cardholder. 
        /// </summary>
        /// <value>Number of rooms booked by the cardholder. </value>
        [DataMember(Name="numberOfRooms", EmitDefaultValue=false)]
        public int? NumberOfRooms { get; set; }

        /// <summary>
        /// Number of guests staying in the room. 
        /// </summary>
        /// <value>Number of guests staying in the room. </value>
        [DataMember(Name="numberOfGuests", EmitDefaultValue=false)]
        public int? NumberOfGuests { get; set; }

        /// <summary>
        /// Type of room, such as queen, king, or two doubles. 
        /// </summary>
        /// <value>Type of room, such as queen, king, or two doubles. </value>
        [DataMember(Name="roomBedType", EmitDefaultValue=false)]
        public string RoomBedType { get; set; }

        /// <summary>
        /// Type of tax, such as tourist or hotel. 
        /// </summary>
        /// <value>Type of tax, such as tourist or hotel. </value>
        [DataMember(Name="roomTaxType", EmitDefaultValue=false)]
        public string RoomTaxType { get; set; }

        /// <summary>
        /// Type of rate, such as corporate or senior citizen. 
        /// </summary>
        /// <value>Type of rate, such as corporate or senior citizen. </value>
        [DataMember(Name="roomRateType", EmitDefaultValue=false)]
        public string RoomRateType { get; set; }

        /// <summary>
        /// Name of the guest under which the room is reserved. 
        /// </summary>
        /// <value>Name of the guest under which the room is reserved. </value>
        [DataMember(Name="guestName", EmitDefaultValue=false)]
        public string GuestName { get; set; }

        /// <summary>
        /// Your toll-free customer service phone number. 
        /// </summary>
        /// <value>Your toll-free customer service phone number. </value>
        [DataMember(Name="customerServicePhoneNumber", EmitDefaultValue=false)]
        public string CustomerServicePhoneNumber { get; set; }

        /// <summary>
        /// Code assigned to a business. You can use this code to identify corporate rates and discounts for guests. 
        /// </summary>
        /// <value>Code assigned to a business. You can use this code to identify corporate rates and discounts for guests. </value>
        [DataMember(Name="corporateClientCode", EmitDefaultValue=false)]
        public string CorporateClientCode { get; set; }

        /// <summary>
        /// Amount of an additional coupon or discount. 
        /// </summary>
        /// <value>Amount of an additional coupon or discount. </value>
        [DataMember(Name="additionalDiscountAmount", EmitDefaultValue=false)]
        public string AdditionalDiscountAmount { get; set; }

        /// <summary>
        /// Location of room, such as lake view or ocean view. 
        /// </summary>
        /// <value>Location of room, such as lake view or ocean view. </value>
        [DataMember(Name="roomLocation", EmitDefaultValue=false)]
        public string RoomLocation { get; set; }

        /// <summary>
        /// Code that identifies special circumstances. Possible values: - &#x60;1&#x60;: lodging (default) - &#x60;2&#x60;: no show reservation - &#x60;3&#x60;: advanced deposit 
        /// </summary>
        /// <value>Code that identifies special circumstances. Possible values: - &#x60;1&#x60;: lodging (default) - &#x60;2&#x60;: no show reservation - &#x60;3&#x60;: advanced deposit </value>
        [DataMember(Name="specialProgramCode", EmitDefaultValue=false)]
        public string SpecialProgramCode { get; set; }

        /// <summary>
        /// Total tax amount. 
        /// </summary>
        /// <value>Total tax amount. </value>
        [DataMember(Name="totalTaxAmount", EmitDefaultValue=false)]
        public string TotalTaxAmount { get; set; }

        /// <summary>
        /// Prepaid amount, such as a deposit. 
        /// </summary>
        /// <value>Prepaid amount, such as a deposit. </value>
        [DataMember(Name="prepaidCost", EmitDefaultValue=false)]
        public string PrepaidCost { get; set; }

        /// <summary>
        /// Cost for all food and beverages. 
        /// </summary>
        /// <value>Cost for all food and beverages. </value>
        [DataMember(Name="foodAndBeverageCost", EmitDefaultValue=false)]
        public string FoodAndBeverageCost { get; set; }

        /// <summary>
        /// Total tax for the room. 
        /// </summary>
        /// <value>Total tax for the room. </value>
        [DataMember(Name="roomTaxAmount", EmitDefaultValue=false)]
        public string RoomTaxAmount { get; set; }

        /// <summary>
        /// Adjusted amount charged in addition to the reservation amount after the stay is complete. 
        /// </summary>
        /// <value>Adjusted amount charged in addition to the reservation amount after the stay is complete. </value>
        [DataMember(Name="adjustmentAmount", EmitDefaultValue=false)]
        public string AdjustmentAmount { get; set; }

        /// <summary>
        /// Cost of telephone services. 
        /// </summary>
        /// <value>Cost of telephone services. </value>
        [DataMember(Name="phoneCost", EmitDefaultValue=false)]
        public string PhoneCost { get; set; }

        /// <summary>
        /// Cost of restaurant purchases 
        /// </summary>
        /// <value>Cost of restaurant purchases </value>
        [DataMember(Name="restaurantCost", EmitDefaultValue=false)]
        public string RestaurantCost { get; set; }

        /// <summary>
        /// Cost of room service. 
        /// </summary>
        /// <value>Cost of room service. </value>
        [DataMember(Name="roomServiceCost", EmitDefaultValue=false)]
        public string RoomServiceCost { get; set; }

        /// <summary>
        /// Cost of mini-bar purchases. 
        /// </summary>
        /// <value>Cost of mini-bar purchases. </value>
        [DataMember(Name="miniBarCost", EmitDefaultValue=false)]
        public string MiniBarCost { get; set; }

        /// <summary>
        /// Cost of laundry services. 
        /// </summary>
        /// <value>Cost of laundry services. </value>
        [DataMember(Name="laundryCost", EmitDefaultValue=false)]
        public string LaundryCost { get; set; }

        /// <summary>
        /// Miscellaneous costs. 
        /// </summary>
        /// <value>Miscellaneous costs. </value>
        [DataMember(Name="miscellaneousCost", EmitDefaultValue=false)]
        public string MiscellaneousCost { get; set; }

        /// <summary>
        /// Cost of gift shop purchases. 
        /// </summary>
        /// <value>Cost of gift shop purchases. </value>
        [DataMember(Name="giftShopCost", EmitDefaultValue=false)]
        public string GiftShopCost { get; set; }

        /// <summary>
        /// Cost of movies. 
        /// </summary>
        /// <value>Cost of movies. </value>
        [DataMember(Name="movieCost", EmitDefaultValue=false)]
        public string MovieCost { get; set; }

        /// <summary>
        /// Cost of health club services. 
        /// </summary>
        /// <value>Cost of health club services. </value>
        [DataMember(Name="healthClubCost", EmitDefaultValue=false)]
        public string HealthClubCost { get; set; }

        /// <summary>
        /// Cost of valet parking services. 
        /// </summary>
        /// <value>Cost of valet parking services. </value>
        [DataMember(Name="valetParkingCost", EmitDefaultValue=false)]
        public string ValetParkingCost { get; set; }

        /// <summary>
        /// Cost of the cash that was disbursed plus any associated service fees 
        /// </summary>
        /// <value>Cost of the cash that was disbursed plus any associated service fees </value>
        [DataMember(Name="cashDisbursementCost", EmitDefaultValue=false)]
        public string CashDisbursementCost { get; set; }

        /// <summary>
        /// Cost of non-room purchases, such as meals and gifts. 
        /// </summary>
        /// <value>Cost of non-room purchases, such as meals and gifts. </value>
        [DataMember(Name="nonRoomCost", EmitDefaultValue=false)]
        public string NonRoomCost { get; set; }

        /// <summary>
        /// Cost of business center services. 
        /// </summary>
        /// <value>Cost of business center services. </value>
        [DataMember(Name="businessCenterCost", EmitDefaultValue=false)]
        public string BusinessCenterCost { get; set; }

        /// <summary>
        /// Cost of lounge and bar purchases. 
        /// </summary>
        /// <value>Cost of lounge and bar purchases. </value>
        [DataMember(Name="loungeBarCost", EmitDefaultValue=false)]
        public string LoungeBarCost { get; set; }

        /// <summary>
        /// Cost of transportation services. 
        /// </summary>
        /// <value>Cost of transportation services. </value>
        [DataMember(Name="transportationCost", EmitDefaultValue=false)]
        public string TransportationCost { get; set; }

        /// <summary>
        /// Gratuity. 
        /// </summary>
        /// <value>Gratuity. </value>
        [DataMember(Name="gratuityAmount", EmitDefaultValue=false)]
        public string GratuityAmount { get; set; }

        /// <summary>
        /// Cost of conference room services. 
        /// </summary>
        /// <value>Cost of conference room services. </value>
        [DataMember(Name="conferenceRoomCost", EmitDefaultValue=false)]
        public string ConferenceRoomCost { get; set; }

        /// <summary>
        /// Cost of audio visual services. 
        /// </summary>
        /// <value>Cost of audio visual services. </value>
        [DataMember(Name="audioVisualCost", EmitDefaultValue=false)]
        public string AudioVisualCost { get; set; }

        /// <summary>
        /// Cost of banquet services. 
        /// </summary>
        /// <value>Cost of banquet services. </value>
        [DataMember(Name="banquestCost", EmitDefaultValue=false)]
        public string BanquestCost { get; set; }

        /// <summary>
        /// Tax on non-room purchases. 
        /// </summary>
        /// <value>Tax on non-room purchases. </value>
        [DataMember(Name="nonRoomTaxAmount", EmitDefaultValue=false)]
        public string NonRoomTaxAmount { get; set; }

        /// <summary>
        /// Service fee for early departure. 
        /// </summary>
        /// <value>Service fee for early departure. </value>
        [DataMember(Name="earlyCheckOutCost", EmitDefaultValue=false)]
        public string EarlyCheckOutCost { get; set; }

        /// <summary>
        /// Cost of Internet access. 
        /// </summary>
        /// <value>Cost of Internet access. </value>
        [DataMember(Name="internetAccessCost", EmitDefaultValue=false)]
        public string InternetAccessCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsTravelInformationLodging {\n");
            sb.Append("  CheckInDate: ").Append(CheckInDate).Append("\n");
            sb.Append("  CheckOutDate: ").Append(CheckOutDate).Append("\n");
            sb.Append("  Room: ").Append(Room).Append("\n");
            sb.Append("  SmokingPreference: ").Append(SmokingPreference).Append("\n");
            sb.Append("  NumberOfRooms: ").Append(NumberOfRooms).Append("\n");
            sb.Append("  NumberOfGuests: ").Append(NumberOfGuests).Append("\n");
            sb.Append("  RoomBedType: ").Append(RoomBedType).Append("\n");
            sb.Append("  RoomTaxType: ").Append(RoomTaxType).Append("\n");
            sb.Append("  RoomRateType: ").Append(RoomRateType).Append("\n");
            sb.Append("  GuestName: ").Append(GuestName).Append("\n");
            sb.Append("  CustomerServicePhoneNumber: ").Append(CustomerServicePhoneNumber).Append("\n");
            sb.Append("  CorporateClientCode: ").Append(CorporateClientCode).Append("\n");
            sb.Append("  AdditionalDiscountAmount: ").Append(AdditionalDiscountAmount).Append("\n");
            sb.Append("  RoomLocation: ").Append(RoomLocation).Append("\n");
            sb.Append("  SpecialProgramCode: ").Append(SpecialProgramCode).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  PrepaidCost: ").Append(PrepaidCost).Append("\n");
            sb.Append("  FoodAndBeverageCost: ").Append(FoodAndBeverageCost).Append("\n");
            sb.Append("  RoomTaxAmount: ").Append(RoomTaxAmount).Append("\n");
            sb.Append("  AdjustmentAmount: ").Append(AdjustmentAmount).Append("\n");
            sb.Append("  PhoneCost: ").Append(PhoneCost).Append("\n");
            sb.Append("  RestaurantCost: ").Append(RestaurantCost).Append("\n");
            sb.Append("  RoomServiceCost: ").Append(RoomServiceCost).Append("\n");
            sb.Append("  MiniBarCost: ").Append(MiniBarCost).Append("\n");
            sb.Append("  LaundryCost: ").Append(LaundryCost).Append("\n");
            sb.Append("  MiscellaneousCost: ").Append(MiscellaneousCost).Append("\n");
            sb.Append("  GiftShopCost: ").Append(GiftShopCost).Append("\n");
            sb.Append("  MovieCost: ").Append(MovieCost).Append("\n");
            sb.Append("  HealthClubCost: ").Append(HealthClubCost).Append("\n");
            sb.Append("  ValetParkingCost: ").Append(ValetParkingCost).Append("\n");
            sb.Append("  CashDisbursementCost: ").Append(CashDisbursementCost).Append("\n");
            sb.Append("  NonRoomCost: ").Append(NonRoomCost).Append("\n");
            sb.Append("  BusinessCenterCost: ").Append(BusinessCenterCost).Append("\n");
            sb.Append("  LoungeBarCost: ").Append(LoungeBarCost).Append("\n");
            sb.Append("  TransportationCost: ").Append(TransportationCost).Append("\n");
            sb.Append("  GratuityAmount: ").Append(GratuityAmount).Append("\n");
            sb.Append("  ConferenceRoomCost: ").Append(ConferenceRoomCost).Append("\n");
            sb.Append("  AudioVisualCost: ").Append(AudioVisualCost).Append("\n");
            sb.Append("  BanquestCost: ").Append(BanquestCost).Append("\n");
            sb.Append("  NonRoomTaxAmount: ").Append(NonRoomTaxAmount).Append("\n");
            sb.Append("  EarlyCheckOutCost: ").Append(EarlyCheckOutCost).Append("\n");
            sb.Append("  InternetAccessCost: ").Append(InternetAccessCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsTravelInformationLodging);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsTravelInformationLodging instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsTravelInformationLodging to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsTravelInformationLodging other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CheckInDate == other.CheckInDate ||
                    this.CheckInDate != null &&
                    this.CheckInDate.Equals(other.CheckInDate)
                ) && 
                (
                    this.CheckOutDate == other.CheckOutDate ||
                    this.CheckOutDate != null &&
                    this.CheckOutDate.Equals(other.CheckOutDate)
                ) && 
                (
                    this.Room == other.Room ||
                    this.Room != null &&
                    this.Room.SequenceEqual(other.Room)
                ) && 
                (
                    this.SmokingPreference == other.SmokingPreference ||
                    this.SmokingPreference != null &&
                    this.SmokingPreference.Equals(other.SmokingPreference)
                ) && 
                (
                    this.NumberOfRooms == other.NumberOfRooms ||
                    this.NumberOfRooms != null &&
                    this.NumberOfRooms.Equals(other.NumberOfRooms)
                ) && 
                (
                    this.NumberOfGuests == other.NumberOfGuests ||
                    this.NumberOfGuests != null &&
                    this.NumberOfGuests.Equals(other.NumberOfGuests)
                ) && 
                (
                    this.RoomBedType == other.RoomBedType ||
                    this.RoomBedType != null &&
                    this.RoomBedType.Equals(other.RoomBedType)
                ) && 
                (
                    this.RoomTaxType == other.RoomTaxType ||
                    this.RoomTaxType != null &&
                    this.RoomTaxType.Equals(other.RoomTaxType)
                ) && 
                (
                    this.RoomRateType == other.RoomRateType ||
                    this.RoomRateType != null &&
                    this.RoomRateType.Equals(other.RoomRateType)
                ) && 
                (
                    this.GuestName == other.GuestName ||
                    this.GuestName != null &&
                    this.GuestName.Equals(other.GuestName)
                ) && 
                (
                    this.CustomerServicePhoneNumber == other.CustomerServicePhoneNumber ||
                    this.CustomerServicePhoneNumber != null &&
                    this.CustomerServicePhoneNumber.Equals(other.CustomerServicePhoneNumber)
                ) && 
                (
                    this.CorporateClientCode == other.CorporateClientCode ||
                    this.CorporateClientCode != null &&
                    this.CorporateClientCode.Equals(other.CorporateClientCode)
                ) && 
                (
                    this.AdditionalDiscountAmount == other.AdditionalDiscountAmount ||
                    this.AdditionalDiscountAmount != null &&
                    this.AdditionalDiscountAmount.Equals(other.AdditionalDiscountAmount)
                ) && 
                (
                    this.RoomLocation == other.RoomLocation ||
                    this.RoomLocation != null &&
                    this.RoomLocation.Equals(other.RoomLocation)
                ) && 
                (
                    this.SpecialProgramCode == other.SpecialProgramCode ||
                    this.SpecialProgramCode != null &&
                    this.SpecialProgramCode.Equals(other.SpecialProgramCode)
                ) && 
                (
                    this.TotalTaxAmount == other.TotalTaxAmount ||
                    this.TotalTaxAmount != null &&
                    this.TotalTaxAmount.Equals(other.TotalTaxAmount)
                ) && 
                (
                    this.PrepaidCost == other.PrepaidCost ||
                    this.PrepaidCost != null &&
                    this.PrepaidCost.Equals(other.PrepaidCost)
                ) && 
                (
                    this.FoodAndBeverageCost == other.FoodAndBeverageCost ||
                    this.FoodAndBeverageCost != null &&
                    this.FoodAndBeverageCost.Equals(other.FoodAndBeverageCost)
                ) && 
                (
                    this.RoomTaxAmount == other.RoomTaxAmount ||
                    this.RoomTaxAmount != null &&
                    this.RoomTaxAmount.Equals(other.RoomTaxAmount)
                ) && 
                (
                    this.AdjustmentAmount == other.AdjustmentAmount ||
                    this.AdjustmentAmount != null &&
                    this.AdjustmentAmount.Equals(other.AdjustmentAmount)
                ) && 
                (
                    this.PhoneCost == other.PhoneCost ||
                    this.PhoneCost != null &&
                    this.PhoneCost.Equals(other.PhoneCost)
                ) && 
                (
                    this.RestaurantCost == other.RestaurantCost ||
                    this.RestaurantCost != null &&
                    this.RestaurantCost.Equals(other.RestaurantCost)
                ) && 
                (
                    this.RoomServiceCost == other.RoomServiceCost ||
                    this.RoomServiceCost != null &&
                    this.RoomServiceCost.Equals(other.RoomServiceCost)
                ) && 
                (
                    this.MiniBarCost == other.MiniBarCost ||
                    this.MiniBarCost != null &&
                    this.MiniBarCost.Equals(other.MiniBarCost)
                ) && 
                (
                    this.LaundryCost == other.LaundryCost ||
                    this.LaundryCost != null &&
                    this.LaundryCost.Equals(other.LaundryCost)
                ) && 
                (
                    this.MiscellaneousCost == other.MiscellaneousCost ||
                    this.MiscellaneousCost != null &&
                    this.MiscellaneousCost.Equals(other.MiscellaneousCost)
                ) && 
                (
                    this.GiftShopCost == other.GiftShopCost ||
                    this.GiftShopCost != null &&
                    this.GiftShopCost.Equals(other.GiftShopCost)
                ) && 
                (
                    this.MovieCost == other.MovieCost ||
                    this.MovieCost != null &&
                    this.MovieCost.Equals(other.MovieCost)
                ) && 
                (
                    this.HealthClubCost == other.HealthClubCost ||
                    this.HealthClubCost != null &&
                    this.HealthClubCost.Equals(other.HealthClubCost)
                ) && 
                (
                    this.ValetParkingCost == other.ValetParkingCost ||
                    this.ValetParkingCost != null &&
                    this.ValetParkingCost.Equals(other.ValetParkingCost)
                ) && 
                (
                    this.CashDisbursementCost == other.CashDisbursementCost ||
                    this.CashDisbursementCost != null &&
                    this.CashDisbursementCost.Equals(other.CashDisbursementCost)
                ) && 
                (
                    this.NonRoomCost == other.NonRoomCost ||
                    this.NonRoomCost != null &&
                    this.NonRoomCost.Equals(other.NonRoomCost)
                ) && 
                (
                    this.BusinessCenterCost == other.BusinessCenterCost ||
                    this.BusinessCenterCost != null &&
                    this.BusinessCenterCost.Equals(other.BusinessCenterCost)
                ) && 
                (
                    this.LoungeBarCost == other.LoungeBarCost ||
                    this.LoungeBarCost != null &&
                    this.LoungeBarCost.Equals(other.LoungeBarCost)
                ) && 
                (
                    this.TransportationCost == other.TransportationCost ||
                    this.TransportationCost != null &&
                    this.TransportationCost.Equals(other.TransportationCost)
                ) && 
                (
                    this.GratuityAmount == other.GratuityAmount ||
                    this.GratuityAmount != null &&
                    this.GratuityAmount.Equals(other.GratuityAmount)
                ) && 
                (
                    this.ConferenceRoomCost == other.ConferenceRoomCost ||
                    this.ConferenceRoomCost != null &&
                    this.ConferenceRoomCost.Equals(other.ConferenceRoomCost)
                ) && 
                (
                    this.AudioVisualCost == other.AudioVisualCost ||
                    this.AudioVisualCost != null &&
                    this.AudioVisualCost.Equals(other.AudioVisualCost)
                ) && 
                (
                    this.BanquestCost == other.BanquestCost ||
                    this.BanquestCost != null &&
                    this.BanquestCost.Equals(other.BanquestCost)
                ) && 
                (
                    this.NonRoomTaxAmount == other.NonRoomTaxAmount ||
                    this.NonRoomTaxAmount != null &&
                    this.NonRoomTaxAmount.Equals(other.NonRoomTaxAmount)
                ) && 
                (
                    this.EarlyCheckOutCost == other.EarlyCheckOutCost ||
                    this.EarlyCheckOutCost != null &&
                    this.EarlyCheckOutCost.Equals(other.EarlyCheckOutCost)
                ) && 
                (
                    this.InternetAccessCost == other.InternetAccessCost ||
                    this.InternetAccessCost != null &&
                    this.InternetAccessCost.Equals(other.InternetAccessCost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CheckInDate != null)
                    hash = hash * 59 + this.CheckInDate.GetHashCode();
                if (this.CheckOutDate != null)
                    hash = hash * 59 + this.CheckOutDate.GetHashCode();
                if (this.Room != null)
                    hash = hash * 59 + this.Room.GetHashCode();
                if (this.SmokingPreference != null)
                    hash = hash * 59 + this.SmokingPreference.GetHashCode();
                if (this.NumberOfRooms != null)
                    hash = hash * 59 + this.NumberOfRooms.GetHashCode();
                if (this.NumberOfGuests != null)
                    hash = hash * 59 + this.NumberOfGuests.GetHashCode();
                if (this.RoomBedType != null)
                    hash = hash * 59 + this.RoomBedType.GetHashCode();
                if (this.RoomTaxType != null)
                    hash = hash * 59 + this.RoomTaxType.GetHashCode();
                if (this.RoomRateType != null)
                    hash = hash * 59 + this.RoomRateType.GetHashCode();
                if (this.GuestName != null)
                    hash = hash * 59 + this.GuestName.GetHashCode();
                if (this.CustomerServicePhoneNumber != null)
                    hash = hash * 59 + this.CustomerServicePhoneNumber.GetHashCode();
                if (this.CorporateClientCode != null)
                    hash = hash * 59 + this.CorporateClientCode.GetHashCode();
                if (this.AdditionalDiscountAmount != null)
                    hash = hash * 59 + this.AdditionalDiscountAmount.GetHashCode();
                if (this.RoomLocation != null)
                    hash = hash * 59 + this.RoomLocation.GetHashCode();
                if (this.SpecialProgramCode != null)
                    hash = hash * 59 + this.SpecialProgramCode.GetHashCode();
                if (this.TotalTaxAmount != null)
                    hash = hash * 59 + this.TotalTaxAmount.GetHashCode();
                if (this.PrepaidCost != null)
                    hash = hash * 59 + this.PrepaidCost.GetHashCode();
                if (this.FoodAndBeverageCost != null)
                    hash = hash * 59 + this.FoodAndBeverageCost.GetHashCode();
                if (this.RoomTaxAmount != null)
                    hash = hash * 59 + this.RoomTaxAmount.GetHashCode();
                if (this.AdjustmentAmount != null)
                    hash = hash * 59 + this.AdjustmentAmount.GetHashCode();
                if (this.PhoneCost != null)
                    hash = hash * 59 + this.PhoneCost.GetHashCode();
                if (this.RestaurantCost != null)
                    hash = hash * 59 + this.RestaurantCost.GetHashCode();
                if (this.RoomServiceCost != null)
                    hash = hash * 59 + this.RoomServiceCost.GetHashCode();
                if (this.MiniBarCost != null)
                    hash = hash * 59 + this.MiniBarCost.GetHashCode();
                if (this.LaundryCost != null)
                    hash = hash * 59 + this.LaundryCost.GetHashCode();
                if (this.MiscellaneousCost != null)
                    hash = hash * 59 + this.MiscellaneousCost.GetHashCode();
                if (this.GiftShopCost != null)
                    hash = hash * 59 + this.GiftShopCost.GetHashCode();
                if (this.MovieCost != null)
                    hash = hash * 59 + this.MovieCost.GetHashCode();
                if (this.HealthClubCost != null)
                    hash = hash * 59 + this.HealthClubCost.GetHashCode();
                if (this.ValetParkingCost != null)
                    hash = hash * 59 + this.ValetParkingCost.GetHashCode();
                if (this.CashDisbursementCost != null)
                    hash = hash * 59 + this.CashDisbursementCost.GetHashCode();
                if (this.NonRoomCost != null)
                    hash = hash * 59 + this.NonRoomCost.GetHashCode();
                if (this.BusinessCenterCost != null)
                    hash = hash * 59 + this.BusinessCenterCost.GetHashCode();
                if (this.LoungeBarCost != null)
                    hash = hash * 59 + this.LoungeBarCost.GetHashCode();
                if (this.TransportationCost != null)
                    hash = hash * 59 + this.TransportationCost.GetHashCode();
                if (this.GratuityAmount != null)
                    hash = hash * 59 + this.GratuityAmount.GetHashCode();
                if (this.ConferenceRoomCost != null)
                    hash = hash * 59 + this.ConferenceRoomCost.GetHashCode();
                if (this.AudioVisualCost != null)
                    hash = hash * 59 + this.AudioVisualCost.GetHashCode();
                if (this.BanquestCost != null)
                    hash = hash * 59 + this.BanquestCost.GetHashCode();
                if (this.NonRoomTaxAmount != null)
                    hash = hash * 59 + this.NonRoomTaxAmount.GetHashCode();
                if (this.EarlyCheckOutCost != null)
                    hash = hash * 59 + this.EarlyCheckOutCost.GetHashCode();
                if (this.InternetAccessCost != null)
                    hash = hash * 59 + this.InternetAccessCost.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfRooms (int?) maximum
            if(this.NumberOfRooms >= (int?)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfRooms, must be a value less than or equal to 99.", new [] { "NumberOfRooms" });
            }

            // NumberOfRooms (int?) minimum
            if(this.NumberOfRooms <= (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfRooms, must be a value greater than or equal to 1.", new [] { "NumberOfRooms" });
            }

            // NumberOfGuests (int?) maximum
            if(this.NumberOfGuests >= (int?)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfGuests, must be a value less than or equal to 99.", new [] { "NumberOfGuests" });
            }

            // NumberOfGuests (int?) minimum
            if(this.NumberOfGuests <= (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfGuests, must be a value greater than or equal to 1.", new [] { "NumberOfGuests" });
            }

            yield break;
        }
    }

}
