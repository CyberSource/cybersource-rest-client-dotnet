/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns></returns>
        void DeleteWebhookSubscription (string webhookId);

        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetWebhookSubscriptionById (string webhookId);

        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetWebhookSubscriptionByIdWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        List<InlineResponse2003> GetWebhookSubscriptionsByOrg (string organizationId, string productId, string eventType);

        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        ApiResponse<List<InlineResponse2003>> GetWebhookSubscriptionsByOrgWithHttpInfo (string organizationId, string productId, string eventType);
        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>InlineResponse2015</returns>
        InlineResponse2015 SaveAsymEgressKey (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);

        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        ApiResponse<InlineResponse2015> SaveAsymEgressKeyWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);
        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update the webhook subscription using PATCH.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns></returns>
        void UpdateWebhookSubscription (string webhookId, UpdateWebhookRequest updateWebhookRequest = null);

        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update the webhook subscription using PATCH.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWebhookSubscriptionWithHttpInfo (string webhookId, UpdateWebhookRequest updateWebhookRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync (string webhookId);

        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionAsyncWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetWebhookSubscriptionByIdAsync (string webhookId);

        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetWebhookSubscriptionByIdAsyncWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2003>> GetWebhookSubscriptionsByOrgAsync (string organizationId, string productId, string eventType);

        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> GetWebhookSubscriptionsByOrgAsyncWithHttpInfo (string organizationId, string productId, string eventType);
        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of InlineResponse2015</returns>
        System.Threading.Tasks.Task<InlineResponse2015> SaveAsymEgressKeyAsync (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);

        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2015>> SaveAsymEgressKeyAsyncWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);
        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update the webhook subscription using PATCH.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWebhookSubscriptionAsync (string webhookId, UpdateWebhookRequest updateWebhookRequest = null);

        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update the webhook subscription using PATCH.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookSubscriptionAsyncWithHttpInfo (string webhookId, UpdateWebhookRequest updateWebhookRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManageWebhooksApi : IManageWebhooksApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageWebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageWebhooksApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageWebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManageWebhooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns></returns>
        /// <remarks>DISCLAIMER : Cybersource may allow Customer to access, use, and/or test a Cybersource product or service that may still be in development or has not been market-tested ("Beta Product") solely for the purpose of evaluating the functionality or marketability of the Beta Product (a "Beta Evaluation"). Notwithstanding any language to the contrary, the following terms shall apply with respect to Customer's participation in any Beta Evaluation (and the Beta Product(s)) accessed thereunder): The Parties will enter into a separate form agreement detailing the scope of the Beta Evaluation, requirements, pricing, the length of the beta evaluation period ("Beta Product Form"). Beta Products are not, and may not become, Transaction Services and have not yet been publicly released and are offered for the sole purpose of internal testing and non-commercial evaluation. Customer's use of the Beta Product shall be solely for the purpose of conducting the Beta Evaluation. Customer accepts all risks arising out of the access and use of the Beta Products. Cybersource may, in its sole discretion, at any time, terminate or discontinue the Beta Evaluation. Customer acknowledges and agrees that any Beta Product may still be in development and that Beta Product is provided "AS IS" and may not perform at the level of a commercially available service, may not operate as expected and may be modified prior to release. CYBERSOURCE SHALL NOT BE RESPONSIBLE OR LIABLE UNDER ANY CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE RELATING TO A BETA PRODUCT OR THE BETA EVALUATION (A) FOR LOSS OR INACCURACY OF DATA OR COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, (B) ANY CLAIM, LOSSES, DAMAGES, OR CAUSE OF ACTION ARISING IN CONNECTION WITH THE BETA PRODUCT; OR (C) FOR ANY INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, LOSS OF REVENUES AND LOSS OF PROFITS.</remarks>
        public void DeleteWebhookSubscription (string webhookId)
        {
            logger.Debug("CALLING API \"DeleteWebhookSubscription\" STARTED");
            this.SetStatusCode(null);
            DeleteWebhookSubscriptionWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync (string webhookId)
        {
            logger.Debug("CALLING API \"DeleteWebhookSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            await DeleteWebhookSubscriptionAsyncWithHttpInfo(webhookId);

        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionAsyncWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>InlineResponse2004</returns>
        /// <remarks>DISCLAIMER : Cybersource may allow Customer to access, use, and/or test a Cybersource product or service that may still be in development or has not been market-tested ("Beta Product") solely for the purpose of evaluating the functionality or marketability of the Beta Product (a "Beta Evaluation"). Notwithstanding any language to the contrary, the following terms shall apply with respect to Customer's participation in any Beta Evaluation (and the Beta Product(s)) accessed thereunder): The Parties will enter into a separate form agreement detailing the scope of the Beta Evaluation, requirements, pricing, the length of the beta evaluation period ("Beta Product Form"). Beta Products are not, and may not become, Transaction Services and have not yet been publicly released and are offered for the sole purpose of internal testing and non-commercial evaluation. Customer's use of the Beta Product shall be solely for the purpose of conducting the Beta Evaluation. Customer accepts all risks arising out of the access and use of the Beta Products. Cybersource may, in its sole discretion, at any time, terminate or discontinue the Beta Evaluation. Customer acknowledges and agrees that any Beta Product may still be in development and that Beta Product is provided "AS IS" and may not perform at the level of a commercially available service, may not operate as expected and may be modified prior to release. CYBERSOURCE SHALL NOT BE RESPONSIBLE OR LIABLE UNDER ANY CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE RELATING TO A BETA PRODUCT OR THE BETA EVALUATION (A) FOR LOSS OR INACCURACY OF DATA OR COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, (B) ANY CLAIM, LOSSES, DAMAGES, OR CAUSE OF ACTION ARISING IN CONNECTION WITH THE BETA PRODUCT; OR (C) FOR ANY INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, LOSS OF REVENUES AND LOSS OF PROFITS.</remarks>
        public InlineResponse2004 GetWebhookSubscriptionById (string webhookId)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionById\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2004> localVarResponse = GetWebhookSubscriptionByIdWithHttpInfo(webhookId);
            logger.Debug("CALLING API \"GetWebhookSubscriptionById\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > GetWebhookSubscriptionByIdWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionById", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004))); // Return statement
        }

        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetWebhookSubscriptionByIdAsync (string webhookId)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionByIdAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2004> localVarResponse = await GetWebhookSubscriptionByIdAsyncWithHttpInfo(webhookId);
            logger.Debug("CALLING API \"GetWebhookSubscriptionByIdAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetWebhookSubscriptionByIdAsyncWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionById", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004))); // Return statement
        }
        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        /// <remarks>DISCLAIMER : Cybersource may allow Customer to access, use, and/or test a Cybersource product or service that may still be in development or has not been market-tested ("Beta Product") solely for the purpose of evaluating the functionality or marketability of the Beta Product (a "Beta Evaluation"). Notwithstanding any language to the contrary, the following terms shall apply with respect to Customer's participation in any Beta Evaluation (and the Beta Product(s)) accessed thereunder): The Parties will enter into a separate form agreement detailing the scope of the Beta Evaluation, requirements, pricing, the length of the beta evaluation period ("Beta Product Form"). Beta Products are not, and may not become, Transaction Services and have not yet been publicly released and are offered for the sole purpose of internal testing and non-commercial evaluation. Customer's use of the Beta Product shall be solely for the purpose of conducting the Beta Evaluation. Customer accepts all risks arising out of the access and use of the Beta Products. Cybersource may, in its sole discretion, at any time, terminate or discontinue the Beta Evaluation. Customer acknowledges and agrees that any Beta Product may still be in development and that Beta Product is provided "AS IS" and may not perform at the level of a commercially available service, may not operate as expected and may be modified prior to release. CYBERSOURCE SHALL NOT BE RESPONSIBLE OR LIABLE UNDER ANY CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE RELATING TO A BETA PRODUCT OR THE BETA EVALUATION (A) FOR LOSS OR INACCURACY OF DATA OR COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, (B) ANY CLAIM, LOSSES, DAMAGES, OR CAUSE OF ACTION ARISING IN CONNECTION WITH THE BETA PRODUCT; OR (C) FOR ANY INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, LOSS OF REVENUES AND LOSS OF PROFITS.</remarks>
        public List<InlineResponse2003> GetWebhookSubscriptionsByOrg (string organizationId, string productId, string eventType)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrg\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<List<InlineResponse2003>> localVarResponse = GetWebhookSubscriptionsByOrgWithHttpInfo(organizationId, productId, eventType);
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrg\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        public ApiResponse< List<InlineResponse2003> > GetWebhookSubscriptionsByOrgWithHttpInfo (string organizationId, string productId, string eventType)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                logger.Error("ApiException : Missing required parameter 'productId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'productId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }
            // verify the required parameter 'eventType' is set
            if (eventType == null)
            {
                logger.Error("ApiException : Missing required parameter 'eventType' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'eventType' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (organizationId != null)
            {
                localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            }
            if (productId != null)
            {
                localVarQueryParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // query parameter
            }
            if (eventType != null)
            {
                localVarQueryParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionsByOrg", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (List<InlineResponse2003>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>))); // Return statement
        }

        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2003>> GetWebhookSubscriptionsByOrgAsync (string organizationId, string productId, string eventType)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrgAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<List<InlineResponse2003>> localVarResponse = await GetWebhookSubscriptionsByOrgAsyncWithHttpInfo(organizationId, productId, eventType);
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrgAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier.</param>
        /// <param name="eventType">The Event Type.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> GetWebhookSubscriptionsByOrgAsyncWithHttpInfo (string organizationId, string productId, string eventType)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                logger.Error("ApiException : Missing required parameter 'productId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'productId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }
            // verify the required parameter 'eventType' is set
            if (eventType == null)
            {
                logger.Error("ApiException : Missing required parameter 'eventType' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'eventType' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (organizationId != null)
            {
                localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            }
            if (productId != null)
            {
                localVarQueryParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // query parameter
            }
            if (eventType != null)
            {
                localVarQueryParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionsByOrg", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (List<InlineResponse2003>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>))); // Return statement
        }
        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>InlineResponse2015</returns>
        /// <remarks>DISCLAIMER : Cybersource may allow Customer to access, use, and/or test a Cybersource product or service that may still be in development or has not been market-tested ("Beta Product") solely for the purpose of evaluating the functionality or marketability of the Beta Product (a "Beta Evaluation"). Notwithstanding any language to the contrary, the following terms shall apply with respect to Customer's participation in any Beta Evaluation (and the Beta Product(s)) accessed thereunder): The Parties will enter into a separate form agreement detailing the scope of the Beta Evaluation, requirements, pricing, the length of the beta evaluation period ("Beta Product Form"). Beta Products are not, and may not become, Transaction Services and have not yet been publicly released and are offered for the sole purpose of internal testing and non-commercial evaluation. Customer's use of the Beta Product shall be solely for the purpose of conducting the Beta Evaluation. Customer accepts all risks arising out of the access and use of the Beta Products. Cybersource may, in its sole discretion, at any time, terminate or discontinue the Beta Evaluation. Customer acknowledges and agrees that any Beta Product may still be in development and that Beta Product is provided "AS IS" and may not perform at the level of a commercially available service, may not operate as expected and may be modified prior to release. CYBERSOURCE SHALL NOT BE RESPONSIBLE OR LIABLE UNDER ANY CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE RELATING TO A BETA PRODUCT OR THE BETA EVALUATION (A) FOR LOSS OR INACCURACY OF DATA OR COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, (B) ANY CLAIM, LOSSES, DAMAGES, OR CAUSE OF ACTION ARISING IN CONNECTION WITH THE BETA PRODUCT; OR (C) FOR ANY INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, LOSS OF REVENUES AND LOSS OF PROFITS.</remarks>
        public InlineResponse2015 SaveAsymEgressKey (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            logger.Debug("CALLING API \"SaveAsymEgressKey\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2015> localVarResponse = SaveAsymEgressKeyWithHttpInfo(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId);
            logger.Debug("CALLING API \"SaveAsymEgressKey\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        public ApiResponse< InlineResponse2015 > SaveAsymEgressKeyWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'vCSenderOrganizationId' is set
            if (vCSenderOrganizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'vCPermissions' is set
            if (vCPermissions == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'saveAsymEgressKey' is set
            if (saveAsymEgressKey == null)
            {
                logger.Error("ApiException : Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }

            var localVarPath = $"/kms/egress/v2/keys-asym";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (vCCorrelationId != null)
            {
                localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            }
            if (vCSenderOrganizationId != null)
            {
                localVarHeaderParams.Add("v-c-sender-organization-id", Configuration.ApiClient.ParameterToString(vCSenderOrganizationId)); // header parameter
            }
            if (vCPermissions != null)
            {
                localVarHeaderParams.Add("v-c-permissions", Configuration.ApiClient.ParameterToString(vCPermissions)); // header parameter
            }
            if (saveAsymEgressKey != null && saveAsymEgressKey.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                saveAsymEgressKey = (SaveAsymEgressKey)sdkTracker.InsertDeveloperIdTracker(saveAsymEgressKey, saveAsymEgressKey.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsymEgressKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsymEgressKey; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsymEgressKey", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2015>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2015))); // Return statement
        }

        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of InlineResponse2015</returns>
        public async System.Threading.Tasks.Task<InlineResponse2015> SaveAsymEgressKeyAsync (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            logger.Debug("CALLING API \"SaveAsymEgressKeyAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2015> localVarResponse = await SaveAsymEgressKeyAsyncWithHttpInfo(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId);
            logger.Debug("CALLING API \"SaveAsymEgressKeyAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2015>> SaveAsymEgressKeyAsyncWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'vCSenderOrganizationId' is set
            if (vCSenderOrganizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'vCPermissions' is set
            if (vCPermissions == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'saveAsymEgressKey' is set
            if (saveAsymEgressKey == null)
            {
                logger.Error("ApiException : Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }

            var localVarPath = $"/kms/egress/v2/keys-asym";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (vCCorrelationId != null)
            {
                localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            }
            if (vCSenderOrganizationId != null)
            {
                localVarHeaderParams.Add("v-c-sender-organization-id", Configuration.ApiClient.ParameterToString(vCSenderOrganizationId)); // header parameter
            }
            if (vCPermissions != null)
            {
                localVarHeaderParams.Add("v-c-permissions", Configuration.ApiClient.ParameterToString(vCPermissions)); // header parameter
            }
            if (saveAsymEgressKey != null && saveAsymEgressKey.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                saveAsymEgressKey = (SaveAsymEgressKey)sdkTracker.InsertDeveloperIdTracker(saveAsymEgressKey, saveAsymEgressKey.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsymEgressKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsymEgressKey; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsymEgressKey", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2015>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2015))); // Return statement
        }
        /// <summary>
        /// Update a Webhook Subscription Update the webhook subscription using PATCH.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns></returns>
        /// <remarks>DISCLAIMER : Cybersource may allow Customer to access, use, and/or test a Cybersource product or service that may still be in development or has not been market-tested ("Beta Product") solely for the purpose of evaluating the functionality or marketability of the Beta Product (a "Beta Evaluation"). Notwithstanding any language to the contrary, the following terms shall apply with respect to Customer's participation in any Beta Evaluation (and the Beta Product(s)) accessed thereunder): The Parties will enter into a separate form agreement detailing the scope of the Beta Evaluation, requirements, pricing, the length of the beta evaluation period ("Beta Product Form"). Beta Products are not, and may not become, Transaction Services and have not yet been publicly released and are offered for the sole purpose of internal testing and non-commercial evaluation. Customer's use of the Beta Product shall be solely for the purpose of conducting the Beta Evaluation. Customer accepts all risks arising out of the access and use of the Beta Products. Cybersource may, in its sole discretion, at any time, terminate or discontinue the Beta Evaluation. Customer acknowledges and agrees that any Beta Product may still be in development and that Beta Product is provided "AS IS" and may not perform at the level of a commercially available service, may not operate as expected and may be modified prior to release. CYBERSOURCE SHALL NOT BE RESPONSIBLE OR LIABLE UNDER ANY CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE RELATING TO A BETA PRODUCT OR THE BETA EVALUATION (A) FOR LOSS OR INACCURACY OF DATA OR COST OF PROCUREMENT OF SUBSTITUTE GOODS, SERVICES OR TECHNOLOGY, (B) ANY CLAIM, LOSSES, DAMAGES, OR CAUSE OF ACTION ARISING IN CONNECTION WITH THE BETA PRODUCT; OR (C) FOR ANY INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, LOSS OF REVENUES AND LOSS OF PROFITS.</remarks>
        public void UpdateWebhookSubscription (string webhookId, UpdateWebhookRequest updateWebhookRequest = null)
        {
            logger.Debug("CALLING API \"UpdateWebhookSubscription\" STARTED");
            this.SetStatusCode(null);
            UpdateWebhookSubscriptionWithHttpInfo(webhookId, updateWebhookRequest);
        }

        /// <summary>
        /// Update a Webhook Subscription Update the webhook subscription using PATCH.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWebhookSubscriptionWithHttpInfo (string webhookId, UpdateWebhookRequest updateWebhookRequest = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->UpdateWebhookSubscription");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->UpdateWebhookSubscription");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateWebhookRequest != null && updateWebhookRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateWebhookRequest = (UpdateWebhookRequest)sdkTracker.InsertDeveloperIdTracker(updateWebhookRequest, updateWebhookRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(updateWebhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// Update a Webhook Subscription Update the webhook subscription using PATCH.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWebhookSubscriptionAsync (string webhookId, UpdateWebhookRequest updateWebhookRequest = null)
        {
            logger.Debug("CALLING API \"UpdateWebhookSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            await UpdateWebhookSubscriptionAsyncWithHttpInfo(webhookId, updateWebhookRequest);

        }

        /// <summary>
        /// Update a Webhook Subscription Update the webhook subscription using PATCH.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhookRequest">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookSubscriptionAsyncWithHttpInfo (string webhookId, UpdateWebhookRequest updateWebhookRequest = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->UpdateWebhookSubscription");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->UpdateWebhookSubscription");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateWebhookRequest != null && updateWebhookRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateWebhookRequest = (UpdateWebhookRequest)sdkTracker.InsertDeveloperIdTracker(updateWebhookRequest, updateWebhookRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(updateWebhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhookRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
    }
}
