/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1authenticationsetupsPaymentInformationFluidData
    /// </summary>
    [DataContract]
    public partial class Riskv1authenticationsetupsPaymentInformationFluidData :  IEquatable<Riskv1authenticationsetupsPaymentInformationFluidData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationsetupsPaymentInformationFluidData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Riskv1authenticationsetupsPaymentInformationFluidData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationsetupsPaymentInformationFluidData" /> class.
        /// </summary>
        /// <param name="Value">Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing This field represents the encrypted Bluefin PCI P2PE payment data. Obtain the encrypted payment data from a Bluefin-supported device.  (required).</param>
        /// <param name="KeySerialNumber">The encoded or encrypted value that a payment solution returns for an authorization request. For details about the valid values for a key, see [Creating an Online Authorization](https://developer.cybersource.com/api/developer-guides/dita-payments/CreatingOnlineAuth.html) .</param>
        /// <param name="Descriptor">The identifier for a payment solution, which is sending the encrypted payment data for decryption. Valid values: - Samsung Pay: &#x60;RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ&#x3D;&#x60;  **Note**: For other payment solutions, the value may be specific to the customer&#39;s mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing Format of the encrypted payment data. The value for Bluefin PCI P2PE is &#x60;Ymx1ZWZpbg&#x3D;&#x3D;&#x60;. Base64 format only. The value for Cybersource P2PE decryption is as follows: &#x60;RklEPUVNVi5QQVlNRU5ULkFQSQ&#x3D;&#x3D;&#x60; if &#x60;paymentInformation.fluidData.encoding&#x60; is \&quot;HEX\&quot; &#x60;4649443D454D562E5041594D454E542E415049&#x60; if &#x60;paymentInformation.fluidData.encoding&#x60; is \&quot;base64\&quot; .</param>
        /// <param name="Encoding">Encoding method used to encrypt the payment data.  Valid value: Base64 .</param>
        public Riskv1authenticationsetupsPaymentInformationFluidData(string Value = default(string), string KeySerialNumber = default(string), string Descriptor = default(string), string Encoding = default(string))
        {
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for Riskv1authenticationsetupsPaymentInformationFluidData and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            this.KeySerialNumber = KeySerialNumber;
            this.Descriptor = Descriptor;
            this.Encoding = Encoding;
        }
        
        /// <summary>
        /// Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing This field represents the encrypted Bluefin PCI P2PE payment data. Obtain the encrypted payment data from a Bluefin-supported device. 
        /// </summary>
        /// <value>Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing This field represents the encrypted Bluefin PCI P2PE payment data. Obtain the encrypted payment data from a Bluefin-supported device. </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// The encoded or encrypted value that a payment solution returns for an authorization request. For details about the valid values for a key, see [Creating an Online Authorization](https://developer.cybersource.com/api/developer-guides/dita-payments/CreatingOnlineAuth.html) 
        /// </summary>
        /// <value>The encoded or encrypted value that a payment solution returns for an authorization request. For details about the valid values for a key, see [Creating an Online Authorization](https://developer.cybersource.com/api/developer-guides/dita-payments/CreatingOnlineAuth.html) </value>
        [DataMember(Name="keySerialNumber", EmitDefaultValue=false)]
        public string KeySerialNumber { get; set; }

        /// <summary>
        /// The identifier for a payment solution, which is sending the encrypted payment data for decryption. Valid values: - Samsung Pay: &#x60;RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ&#x3D;&#x60;  **Note**: For other payment solutions, the value may be specific to the customer&#39;s mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing Format of the encrypted payment data. The value for Bluefin PCI P2PE is &#x60;Ymx1ZWZpbg&#x3D;&#x3D;&#x60;. Base64 format only. The value for Cybersource P2PE decryption is as follows: &#x60;RklEPUVNVi5QQVlNRU5ULkFQSQ&#x3D;&#x3D;&#x60; if &#x60;paymentInformation.fluidData.encoding&#x60; is \&quot;HEX\&quot; &#x60;4649443D454D562E5041594D454E542E415049&#x60; if &#x60;paymentInformation.fluidData.encoding&#x60; is \&quot;base64\&quot; 
        /// </summary>
        /// <value>The identifier for a payment solution, which is sending the encrypted payment data for decryption. Valid values: - Samsung Pay: &#x60;RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ&#x3D;&#x60;  **Note**: For other payment solutions, the value may be specific to the customer&#39;s mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing Format of the encrypted payment data. The value for Bluefin PCI P2PE is &#x60;Ymx1ZWZpbg&#x3D;&#x3D;&#x60;. Base64 format only. The value for Cybersource P2PE decryption is as follows: &#x60;RklEPUVNVi5QQVlNRU5ULkFQSQ&#x3D;&#x3D;&#x60; if &#x60;paymentInformation.fluidData.encoding&#x60; is \&quot;HEX\&quot; &#x60;4649443D454D562E5041594D454E542E415049&#x60; if &#x60;paymentInformation.fluidData.encoding&#x60; is \&quot;base64\&quot; </value>
        [DataMember(Name="descriptor", EmitDefaultValue=false)]
        public string Descriptor { get; set; }

        /// <summary>
        /// Encoding method used to encrypt the payment data.  Valid value: Base64 
        /// </summary>
        /// <value>Encoding method used to encrypt the payment data.  Valid value: Base64 </value>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1authenticationsetupsPaymentInformationFluidData {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  KeySerialNumber: ").Append(KeySerialNumber).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1authenticationsetupsPaymentInformationFluidData);
        }

        /// <summary>
        /// Returns true if Riskv1authenticationsetupsPaymentInformationFluidData instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1authenticationsetupsPaymentInformationFluidData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1authenticationsetupsPaymentInformationFluidData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.KeySerialNumber == other.KeySerialNumber ||
                    this.KeySerialNumber != null &&
                    this.KeySerialNumber.Equals(other.KeySerialNumber)
                ) && 
                (
                    this.Descriptor == other.Descriptor ||
                    this.Descriptor != null &&
                    this.Descriptor.Equals(other.Descriptor)
                ) && 
                (
                    this.Encoding == other.Encoding ||
                    this.Encoding != null &&
                    this.Encoding.Equals(other.Encoding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.KeySerialNumber != null)
                    hash = hash * 59 + this.KeySerialNumber.GetHashCode();
                if (this.Descriptor != null)
                    hash = hash * 59 + this.Descriptor.GetHashCode();
                if (this.Encoding != null)
                    hash = hash * 59 + this.Encoding.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length >= 3072)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than or equal to 3072.", new [] { "Value" });
            }

            // Descriptor (string) maxLength
            if(this.Descriptor != null && this.Descriptor.Length >= 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Descriptor, length must be less than or equal to 128.", new [] { "Descriptor" });
            }

            // Encoding (string) maxLength
            if(this.Encoding != null && this.Encoding.Length >= 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Encoding, length must be less than or equal to 6.", new [] { "Encoding" });
            }

            yield break;
        }
    }

}
