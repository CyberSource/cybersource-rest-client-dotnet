/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a New Invoice
        /// </summary>
        /// <remarks>
        /// Create a new invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        InvoicingV2InvoicesPost201Response CreateInvoice (CreateInvoiceRequest createInvoiceRequest);

        /// <summary>
        /// Create a New Invoice
        /// </summary>
        /// <remarks>
        /// Create a new invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        ApiResponse<InvoicingV2InvoicesPost201Response> CreateInvoiceWithHttpInfo (CreateInvoiceRequest createInvoiceRequest);
        /// <summary>
        /// Get a List of Invoices
        /// </summary>
        /// <remarks>
        /// Get a list of invoices.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>InvoicingV2InvoicesAllGet200Response</returns>
        InvoicingV2InvoicesAllGet200Response GetAllInvoices (int? offset, int? limit, string status = null);

        /// <summary>
        /// Get a List of Invoices
        /// </summary>
        /// <remarks>
        /// Get a list of invoices.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesAllGet200Response</returns>
        ApiResponse<InvoicingV2InvoicesAllGet200Response> GetAllInvoicesWithHttpInfo (int? offset, int? limit, string status = null);
        /// <summary>
        /// Get Invoice Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>InvoicingV2InvoicesGet200Response</returns>
        InvoicingV2InvoicesGet200Response GetInvoice (string id);

        /// <summary>
        /// Get Invoice Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesGet200Response</returns>
        ApiResponse<InvoicingV2InvoicesGet200Response> GetInvoiceWithHttpInfo (string id);
        /// <summary>
        /// Cancel an Invoice
        /// </summary>
        /// <remarks>
        /// Cancel an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        InvoicingV2InvoicesPost201Response PerformCancelAction (string id);

        /// <summary>
        /// Cancel an Invoice
        /// </summary>
        /// <remarks>
        /// Cancel an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        ApiResponse<InvoicingV2InvoicesPost201Response> PerformCancelActionWithHttpInfo (string id);
        /// <summary>
        /// Send an Invoice
        /// </summary>
        /// <remarks>
        /// Send an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        InvoicingV2InvoicesPost201Response PerformSendAction (string id);

        /// <summary>
        /// Send an Invoice
        /// </summary>
        /// <remarks>
        /// Send an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        ApiResponse<InvoicingV2InvoicesPost201Response> PerformSendActionWithHttpInfo (string id);
        /// <summary>
        /// Update an Invoice
        /// </summary>
        /// <remarks>
        /// Update an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        InvoicingV2InvoicesPost201Response UpdateInvoice (string id, UpdateInvoiceRequest updateInvoiceRequest);

        /// <summary>
        /// Update an Invoice
        /// </summary>
        /// <remarks>
        /// Update an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        ApiResponse<InvoicingV2InvoicesPost201Response> UpdateInvoiceWithHttpInfo (string id, UpdateInvoiceRequest updateInvoiceRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a New Invoice
        /// </summary>
        /// <remarks>
        /// Create a new invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> CreateInvoiceAsync (CreateInvoiceRequest createInvoiceRequest);

        /// <summary>
        /// Create a New Invoice
        /// </summary>
        /// <remarks>
        /// Create a new invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> CreateInvoiceAsyncWithHttpInfo (CreateInvoiceRequest createInvoiceRequest);
        /// <summary>
        /// Get a List of Invoices
        /// </summary>
        /// <remarks>
        /// Get a list of invoices.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>Task of InvoicingV2InvoicesAllGet200Response</returns>
        System.Threading.Tasks.Task<InvoicingV2InvoicesAllGet200Response> GetAllInvoicesAsync (int? offset, int? limit, string status = null);

        /// <summary>
        /// Get a List of Invoices
        /// </summary>
        /// <remarks>
        /// Get a list of invoices.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesAllGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesAllGet200Response>> GetAllInvoicesAsyncWithHttpInfo (int? offset, int? limit, string status = null);
        /// <summary>
        /// Get Invoice Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of InvoicingV2InvoicesGet200Response</returns>
        System.Threading.Tasks.Task<InvoicingV2InvoicesGet200Response> GetInvoiceAsync (string id);

        /// <summary>
        /// Get Invoice Details
        /// </summary>
        /// <remarks>
        /// Get the details of a specific invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesGet200Response>> GetInvoiceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Cancel an Invoice
        /// </summary>
        /// <remarks>
        /// Cancel an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> PerformCancelActionAsync (string id);

        /// <summary>
        /// Cancel an Invoice
        /// </summary>
        /// <remarks>
        /// Cancel an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> PerformCancelActionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Send an Invoice
        /// </summary>
        /// <remarks>
        /// Send an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> PerformSendActionAsync (string id);

        /// <summary>
        /// Send an Invoice
        /// </summary>
        /// <remarks>
        /// Send an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> PerformSendActionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update an Invoice
        /// </summary>
        /// <remarks>
        /// Update an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> UpdateInvoiceAsync (string id, UpdateInvoiceRequest updateInvoiceRequest);

        /// <summary>
        /// Update an Invoice
        /// </summary>
        /// <remarks>
        /// Update an invoice.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> UpdateInvoiceAsyncWithHttpInfo (string id, UpdateInvoiceRequest updateInvoiceRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoicesApi : IInvoicesApi
    {
        private CyberSource.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoicesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            this.Configuration.ApiClient.Configuration = this.Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CyberSource.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a New Invoice Create a new invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        public InvoicingV2InvoicesPost201Response CreateInvoice (CreateInvoiceRequest createInvoiceRequest)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = CreateInvoiceWithHttpInfo(createInvoiceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a New Invoice Create a new invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        public ApiResponse< InvoicingV2InvoicesPost201Response > CreateInvoiceWithHttpInfo (CreateInvoiceRequest createInvoiceRequest)
        {
            // verify the required parameter 'createInvoiceRequest' is set
            if (createInvoiceRequest == null)
                throw new ApiException(400, "Missing required parameter 'createInvoiceRequest' when calling InvoicesApi->CreateInvoice");

            var localVarPath = $"/invoicing/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createInvoiceRequest != null && createInvoiceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createInvoiceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createInvoiceRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Create a New Invoice Create a new invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        public async System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> CreateInvoiceAsync (CreateInvoiceRequest createInvoiceRequest)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = await CreateInvoiceAsyncWithHttpInfo(createInvoiceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a New Invoice Create a new invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInvoiceRequest"></param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> CreateInvoiceAsyncWithHttpInfo (CreateInvoiceRequest createInvoiceRequest)
        {
            // verify the required parameter 'createInvoiceRequest' is set
            if (createInvoiceRequest == null)
                throw new ApiException(400, "Missing required parameter 'createInvoiceRequest' when calling InvoicesApi->CreateInvoice");

            var localVarPath = $"/invoicing/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createInvoiceRequest != null && createInvoiceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createInvoiceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createInvoiceRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Get a List of Invoices Get a list of invoices.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>InvoicingV2InvoicesAllGet200Response</returns>
        public InvoicingV2InvoicesAllGet200Response GetAllInvoices (int? offset, int? limit, string status = null)
        {
             ApiResponse<InvoicingV2InvoicesAllGet200Response> localVarResponse = GetAllInvoicesWithHttpInfo(offset, limit, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a List of Invoices Get a list of invoices.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesAllGet200Response</returns>
        public ApiResponse< InvoicingV2InvoicesAllGet200Response > GetAllInvoicesWithHttpInfo (int? offset, int? limit, string status = null)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling InvoicesApi->GetAllInvoices");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling InvoicesApi->GetAllInvoices");

            var localVarPath = $"/invoicing/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesAllGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesAllGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesAllGet200Response))); // Return statement
        }

        /// <summary>
        /// Get a List of Invoices Get a list of invoices.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>Task of InvoicingV2InvoicesAllGet200Response</returns>
        public async System.Threading.Tasks.Task<InvoicingV2InvoicesAllGet200Response> GetAllInvoicesAsync (int? offset, int? limit, string status = null)
        {
             ApiResponse<InvoicingV2InvoicesAllGet200Response> localVarResponse = await GetAllInvoicesAsyncWithHttpInfo(offset, limit, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a List of Invoices Get a list of invoices.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.</param>
        /// <param name="status">The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED  (optional)</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesAllGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesAllGet200Response>> GetAllInvoicesAsyncWithHttpInfo (int? offset, int? limit, string status = null)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling InvoicesApi->GetAllInvoices");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling InvoicesApi->GetAllInvoices");

            var localVarPath = $"/invoicing/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesAllGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesAllGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesAllGet200Response))); // Return statement
        }

        /// <summary>
        /// Get Invoice Details Get the details of a specific invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>InvoicingV2InvoicesGet200Response</returns>
        public InvoicingV2InvoicesGet200Response GetInvoice (string id)
        {
             ApiResponse<InvoicingV2InvoicesGet200Response> localVarResponse = GetInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Details Get the details of a specific invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesGet200Response</returns>
        public ApiResponse< InvoicingV2InvoicesGet200Response > GetInvoiceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->GetInvoice");

            var localVarPath = $"/invoicing/v2/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesGet200Response))); // Return statement
        }

        /// <summary>
        /// Get Invoice Details Get the details of a specific invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of InvoicingV2InvoicesGet200Response</returns>
        public async System.Threading.Tasks.Task<InvoicingV2InvoicesGet200Response> GetInvoiceAsync (string id)
        {
             ApiResponse<InvoicingV2InvoicesGet200Response> localVarResponse = await GetInvoiceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Invoice Details Get the details of a specific invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesGet200Response>> GetInvoiceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->GetInvoice");

            var localVarPath = $"/invoicing/v2/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesGet200Response))); // Return statement
        }

        /// <summary>
        /// Cancel an Invoice Cancel an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        public InvoicingV2InvoicesPost201Response PerformCancelAction (string id)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = PerformCancelActionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an Invoice Cancel an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        public ApiResponse< InvoicingV2InvoicesPost201Response > PerformCancelActionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->PerformCancelAction");

            var localVarPath = $"/invoicing/v2/invoices/{id}/cancelation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformCancelAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Cancel an Invoice Cancel an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        public async System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> PerformCancelActionAsync (string id)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = await PerformCancelActionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel an Invoice Cancel an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> PerformCancelActionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->PerformCancelAction");

            var localVarPath = $"/invoicing/v2/invoices/{id}/cancelation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformCancelAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Send an Invoice Send an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        public InvoicingV2InvoicesPost201Response PerformSendAction (string id)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = PerformSendActionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an Invoice Send an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        public ApiResponse< InvoicingV2InvoicesPost201Response > PerformSendActionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->PerformSendAction");

            var localVarPath = $"/invoicing/v2/invoices/{id}/delivery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformSendAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Send an Invoice Send an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        public async System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> PerformSendActionAsync (string id)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = await PerformSendActionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an Invoice Send an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> PerformSendActionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->PerformSendAction");

            var localVarPath = $"/invoicing/v2/invoices/{id}/delivery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformSendAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Update an Invoice Update an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>InvoicingV2InvoicesPost201Response</returns>
        public InvoicingV2InvoicesPost201Response UpdateInvoice (string id, UpdateInvoiceRequest updateInvoiceRequest)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = UpdateInvoiceWithHttpInfo(id, updateInvoiceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Invoice Update an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>ApiResponse of InvoicingV2InvoicesPost201Response</returns>
        public ApiResponse< InvoicingV2InvoicesPost201Response > UpdateInvoiceWithHttpInfo (string id, UpdateInvoiceRequest updateInvoiceRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'updateInvoiceRequest' is set
            if (updateInvoiceRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateInvoiceRequest' when calling InvoicesApi->UpdateInvoice");

            var localVarPath = $"/invoicing/v2/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateInvoiceRequest != null && updateInvoiceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateInvoiceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInvoiceRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

        /// <summary>
        /// Update an Invoice Update an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>Task of InvoicingV2InvoicesPost201Response</returns>
        public async System.Threading.Tasks.Task<InvoicingV2InvoicesPost201Response> UpdateInvoiceAsync (string id, UpdateInvoiceRequest updateInvoiceRequest)
        {
             ApiResponse<InvoicingV2InvoicesPost201Response> localVarResponse = await UpdateInvoiceAsyncWithHttpInfo(id, updateInvoiceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Invoice Update an invoice.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The invoice number.</param>
        /// <param name="updateInvoiceRequest">Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.</param>
        /// <returns>Task of ApiResponse (InvoicingV2InvoicesPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicingV2InvoicesPost201Response>> UpdateInvoiceAsyncWithHttpInfo (string id, UpdateInvoiceRequest updateInvoiceRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'updateInvoiceRequest' is set
            if (updateInvoiceRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateInvoiceRequest' when calling InvoicesApi->UpdateInvoice");

            var localVarPath = $"/invoicing/v2/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateInvoiceRequest != null && updateInvoiceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateInvoiceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInvoiceRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicingV2InvoicesPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoicingV2InvoicesPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicingV2InvoicesPost201Response))); // Return statement
        }

    }
}
