/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Payment Order Request
        /// </summary>
        /// <remarks>
        /// Create a Payment Order Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>PtsV2PaymentsOrderPost201Response</returns>
        PtsV2PaymentsOrderPost201Response CreateOrderRequest (OrderPaymentRequest orderPaymentRequest, string id);

        /// <summary>
        /// Create a Payment Order Request
        /// </summary>
        /// <remarks>
        /// Create a Payment Order Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>ApiResponse of PtsV2PaymentsOrderPost201Response</returns>
        ApiResponse<PtsV2PaymentsOrderPost201Response> CreateOrderRequestWithHttpInfo (OrderPaymentRequest orderPaymentRequest, string id);
        /// <summary>
        /// Process a Payment
        /// </summary>
        /// <remarks>
        /// A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>PtsV2PaymentsPost201Response</returns>
        PtsV2PaymentsPost201Response CreatePayment (CreatePaymentRequest createPaymentRequest);

        /// <summary>
        /// Process a Payment
        /// </summary>
        /// <remarks>
        /// A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response</returns>
        ApiResponse<PtsV2PaymentsPost201Response> CreatePaymentWithHttpInfo (CreatePaymentRequest createPaymentRequest);
        /// <summary>
        /// Create Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Create Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>PtsV2PaymentsPost201Response2</returns>
        PtsV2PaymentsPost201Response2 CreateSessionRequest (CreateSessionReq createSessionReq);

        /// <summary>
        /// Create Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Create Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response2</returns>
        ApiResponse<PtsV2PaymentsPost201Response2> CreateSessionRequestWithHttpInfo (CreateSessionReq createSessionReq);
        /// <summary>
        /// Increment an Authorization
        /// </summary>
        /// <remarks>
        /// Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>PtsV2IncrementalAuthorizationPatch201Response</returns>
        PtsV2IncrementalAuthorizationPatch201Response IncrementAuth (string id, IncrementAuthRequest incrementAuthRequest);

        /// <summary>
        /// Increment an Authorization
        /// </summary>
        /// <remarks>
        /// Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>ApiResponse of PtsV2IncrementalAuthorizationPatch201Response</returns>
        ApiResponse<PtsV2IncrementalAuthorizationPatch201Response> IncrementAuthWithHttpInfo (string id, IncrementAuthRequest incrementAuthRequest);
        /// <summary>
        /// Check a Payment Status
        /// </summary>
        /// <remarks>
        /// Checks and updates the payment status 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>PtsV2PaymentsPost201Response1</returns>
        PtsV2PaymentsPost201Response1 RefreshPaymentStatus (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest);

        /// <summary>
        /// Check a Payment Status
        /// </summary>
        /// <remarks>
        /// Checks and updates the payment status 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response1</returns>
        ApiResponse<PtsV2PaymentsPost201Response1> RefreshPaymentStatusWithHttpInfo (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest);
        /// <summary>
        /// Update Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Update Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>PtsV2PaymentsPost201Response2</returns>
        PtsV2PaymentsPost201Response2 UpdateSessionReq (CreateSessionRequest createSessionRequest, string id);

        /// <summary>
        /// Update Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Update Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response2</returns>
        ApiResponse<PtsV2PaymentsPost201Response2> UpdateSessionReqWithHttpInfo (CreateSessionRequest createSessionRequest, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Payment Order Request
        /// </summary>
        /// <remarks>
        /// Create a Payment Order Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>Task of PtsV2PaymentsOrderPost201Response</returns>
        System.Threading.Tasks.Task<PtsV2PaymentsOrderPost201Response> CreateOrderRequestAsync (OrderPaymentRequest orderPaymentRequest, string id);

        /// <summary>
        /// Create a Payment Order Request
        /// </summary>
        /// <remarks>
        /// Create a Payment Order Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsOrderPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsOrderPost201Response>> CreateOrderRequestAsyncWithHttpInfo (OrderPaymentRequest orderPaymentRequest, string id);
        /// <summary>
        /// Process a Payment
        /// </summary>
        /// <remarks>
        /// A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>Task of PtsV2PaymentsPost201Response</returns>
        System.Threading.Tasks.Task<PtsV2PaymentsPost201Response> CreatePaymentAsync (CreatePaymentRequest createPaymentRequest);

        /// <summary>
        /// Process a Payment
        /// </summary>
        /// <remarks>
        /// A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response>> CreatePaymentAsyncWithHttpInfo (CreatePaymentRequest createPaymentRequest);
        /// <summary>
        /// Create Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Create Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>Task of PtsV2PaymentsPost201Response2</returns>
        System.Threading.Tasks.Task<PtsV2PaymentsPost201Response2> CreateSessionRequestAsync (CreateSessionReq createSessionReq);

        /// <summary>
        /// Create Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Create Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response2)</returns>
        System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response2>> CreateSessionRequestAsyncWithHttpInfo (CreateSessionReq createSessionReq);
        /// <summary>
        /// Increment an Authorization
        /// </summary>
        /// <remarks>
        /// Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>Task of PtsV2IncrementalAuthorizationPatch201Response</returns>
        System.Threading.Tasks.Task<PtsV2IncrementalAuthorizationPatch201Response> IncrementAuthAsync (string id, IncrementAuthRequest incrementAuthRequest);

        /// <summary>
        /// Increment an Authorization
        /// </summary>
        /// <remarks>
        /// Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>Task of ApiResponse (PtsV2IncrementalAuthorizationPatch201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PtsV2IncrementalAuthorizationPatch201Response>> IncrementAuthAsyncWithHttpInfo (string id, IncrementAuthRequest incrementAuthRequest);
        /// <summary>
        /// Check a Payment Status
        /// </summary>
        /// <remarks>
        /// Checks and updates the payment status 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>Task of PtsV2PaymentsPost201Response1</returns>
        System.Threading.Tasks.Task<PtsV2PaymentsPost201Response1> RefreshPaymentStatusAsync (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest);

        /// <summary>
        /// Check a Payment Status
        /// </summary>
        /// <remarks>
        /// Checks and updates the payment status 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response1)</returns>
        System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response1>> RefreshPaymentStatusAsyncWithHttpInfo (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest);
        /// <summary>
        /// Update Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Update Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>Task of PtsV2PaymentsPost201Response2</returns>
        System.Threading.Tasks.Task<PtsV2PaymentsPost201Response2> UpdateSessionReqAsync (CreateSessionRequest createSessionRequest, string id);

        /// <summary>
        /// Update Alternative Payments Sessions Request
        /// </summary>
        /// <remarks>
        /// Update Alternative Payments Sessions Request
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response2)</returns>
        System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response2>> UpdateSessionReqAsyncWithHttpInfo (CreateSessionRequest createSessionRequest, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Create a Payment Order Request Create a Payment Order Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>PtsV2PaymentsOrderPost201Response</returns>
        public PtsV2PaymentsOrderPost201Response CreateOrderRequest (OrderPaymentRequest orderPaymentRequest, string id)
        {
            logger.Debug("CALLING API \"CreateOrderRequest\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsOrderPost201Response> localVarResponse = CreateOrderRequestWithHttpInfo(orderPaymentRequest, id);
            logger.Debug("CALLING API \"CreateOrderRequest\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Payment Order Request Create a Payment Order Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>ApiResponse of PtsV2PaymentsOrderPost201Response</returns>
        public ApiResponse< PtsV2PaymentsOrderPost201Response > CreateOrderRequestWithHttpInfo (OrderPaymentRequest orderPaymentRequest, string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'orderPaymentRequest' is set
            if (orderPaymentRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'orderPaymentRequest' when calling PaymentsApi->CreateOrderRequest");
                throw new ApiException(400, "Missing required parameter 'orderPaymentRequest' when calling PaymentsApi->CreateOrderRequest");
            }
            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->CreateOrderRequest");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->CreateOrderRequest");
            }

            var localVarPath = $"/pts/v2/payment-references/{id}/intents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (orderPaymentRequest != null && orderPaymentRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                orderPaymentRequest = (OrderPaymentRequest)sdkTracker.InsertDeveloperIdTracker(orderPaymentRequest, orderPaymentRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(orderPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderPaymentRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderRequest", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsOrderPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsOrderPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsOrderPost201Response))); // Return statement
        }

        /// <summary>
        /// Create a Payment Order Request Create a Payment Order Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>Task of PtsV2PaymentsOrderPost201Response</returns>
        public async System.Threading.Tasks.Task<PtsV2PaymentsOrderPost201Response> CreateOrderRequestAsync (OrderPaymentRequest orderPaymentRequest, string id)
        {
            logger.Debug("CALLING API \"CreateOrderRequestAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsOrderPost201Response> localVarResponse = await CreateOrderRequestAsyncWithHttpInfo(orderPaymentRequest, id);
            logger.Debug("CALLING API \"CreateOrderRequestAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Payment Order Request Create a Payment Order Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPaymentRequest"></param>
        /// <param name="id">Request identifier number for the order request. </param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsOrderPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsOrderPost201Response>> CreateOrderRequestAsyncWithHttpInfo (OrderPaymentRequest orderPaymentRequest, string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'orderPaymentRequest' is set
            if (orderPaymentRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'orderPaymentRequest' when calling PaymentsApi->CreateOrderRequest");
                throw new ApiException(400, "Missing required parameter 'orderPaymentRequest' when calling PaymentsApi->CreateOrderRequest");
            }
            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->CreateOrderRequest");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->CreateOrderRequest");
            }

            var localVarPath = $"/pts/v2/payment-references/{id}/intents";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (orderPaymentRequest != null && orderPaymentRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                orderPaymentRequest = (OrderPaymentRequest)sdkTracker.InsertDeveloperIdTracker(orderPaymentRequest, orderPaymentRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(orderPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderPaymentRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderRequest", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsOrderPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsOrderPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsOrderPost201Response))); // Return statement
        }
        /// <summary>
        /// Process a Payment A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>PtsV2PaymentsPost201Response</returns>
        public PtsV2PaymentsPost201Response CreatePayment (CreatePaymentRequest createPaymentRequest)
        {
            logger.Debug("CALLING API \"CreatePayment\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response> localVarResponse = CreatePaymentWithHttpInfo(createPaymentRequest);
            logger.Debug("CALLING API \"CreatePayment\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process a Payment A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response</returns>
        public ApiResponse< PtsV2PaymentsPost201Response > CreatePaymentWithHttpInfo (CreatePaymentRequest createPaymentRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createPaymentRequest' is set
            if (createPaymentRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createPaymentRequest' when calling PaymentsApi->CreatePayment");
                throw new ApiException(400, "Missing required parameter 'createPaymentRequest' when calling PaymentsApi->CreatePayment");
            }

            var localVarPath = $"/pts/v2/payments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createPaymentRequest != null && createPaymentRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createPaymentRequest = (CreatePaymentRequest)sdkTracker.InsertDeveloperIdTracker(createPaymentRequest, createPaymentRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPaymentRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayment", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response))); // Return statement
        }

        /// <summary>
        /// Process a Payment A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>Task of PtsV2PaymentsPost201Response</returns>
        public async System.Threading.Tasks.Task<PtsV2PaymentsPost201Response> CreatePaymentAsync (CreatePaymentRequest createPaymentRequest)
        {
            logger.Debug("CALLING API \"CreatePaymentAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response> localVarResponse = await CreatePaymentAsyncWithHttpInfo(createPaymentRequest);
            logger.Debug("CALLING API \"CreatePaymentAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Process a Payment A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentRequest"></param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response>> CreatePaymentAsyncWithHttpInfo (CreatePaymentRequest createPaymentRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createPaymentRequest' is set
            if (createPaymentRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createPaymentRequest' when calling PaymentsApi->CreatePayment");
                throw new ApiException(400, "Missing required parameter 'createPaymentRequest' when calling PaymentsApi->CreatePayment");
            }

            var localVarPath = $"/pts/v2/payments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createPaymentRequest != null && createPaymentRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createPaymentRequest = (CreatePaymentRequest)sdkTracker.InsertDeveloperIdTracker(createPaymentRequest, createPaymentRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPaymentRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePayment", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response))); // Return statement
        }
        /// <summary>
        /// Create Alternative Payments Sessions Request Create Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>PtsV2PaymentsPost201Response2</returns>
        public PtsV2PaymentsPost201Response2 CreateSessionRequest (CreateSessionReq createSessionReq)
        {
            logger.Debug("CALLING API \"CreateSessionRequest\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response2> localVarResponse = CreateSessionRequestWithHttpInfo(createSessionReq);
            logger.Debug("CALLING API \"CreateSessionRequest\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Alternative Payments Sessions Request Create Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response2</returns>
        public ApiResponse< PtsV2PaymentsPost201Response2 > CreateSessionRequestWithHttpInfo (CreateSessionReq createSessionReq)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createSessionReq' is set
            if (createSessionReq == null)
            {
                logger.Error("ApiException : Missing required parameter 'createSessionReq' when calling PaymentsApi->CreateSessionRequest");
                throw new ApiException(400, "Missing required parameter 'createSessionReq' when calling PaymentsApi->CreateSessionRequest");
            }

            var localVarPath = $"/pts/v2/payment-references";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createSessionReq != null && createSessionReq.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createSessionReq = (CreateSessionReq)sdkTracker.InsertDeveloperIdTracker(createSessionReq, createSessionReq.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createSessionReq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSessionReq; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSessionRequest", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response2>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response2))); // Return statement
        }

        /// <summary>
        /// Create Alternative Payments Sessions Request Create Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>Task of PtsV2PaymentsPost201Response2</returns>
        public async System.Threading.Tasks.Task<PtsV2PaymentsPost201Response2> CreateSessionRequestAsync (CreateSessionReq createSessionReq)
        {
            logger.Debug("CALLING API \"CreateSessionRequestAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response2> localVarResponse = await CreateSessionRequestAsyncWithHttpInfo(createSessionReq);
            logger.Debug("CALLING API \"CreateSessionRequestAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create Alternative Payments Sessions Request Create Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionReq"></param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response2>> CreateSessionRequestAsyncWithHttpInfo (CreateSessionReq createSessionReq)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createSessionReq' is set
            if (createSessionReq == null)
            {
                logger.Error("ApiException : Missing required parameter 'createSessionReq' when calling PaymentsApi->CreateSessionRequest");
                throw new ApiException(400, "Missing required parameter 'createSessionReq' when calling PaymentsApi->CreateSessionRequest");
            }

            var localVarPath = $"/pts/v2/payment-references";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createSessionReq != null && createSessionReq.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createSessionReq = (CreateSessionReq)sdkTracker.InsertDeveloperIdTracker(createSessionReq, createSessionReq.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createSessionReq); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSessionReq; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSessionRequest", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response2>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response2))); // Return statement
        }
        /// <summary>
        /// Increment an Authorization Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>PtsV2IncrementalAuthorizationPatch201Response</returns>
        public PtsV2IncrementalAuthorizationPatch201Response IncrementAuth (string id, IncrementAuthRequest incrementAuthRequest)
        {
            logger.Debug("CALLING API \"IncrementAuth\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2IncrementalAuthorizationPatch201Response> localVarResponse = IncrementAuthWithHttpInfo(id, incrementAuthRequest);
            logger.Debug("CALLING API \"IncrementAuth\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Increment an Authorization Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>ApiResponse of PtsV2IncrementalAuthorizationPatch201Response</returns>
        public ApiResponse< PtsV2IncrementalAuthorizationPatch201Response > IncrementAuthWithHttpInfo (string id, IncrementAuthRequest incrementAuthRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->IncrementAuth");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->IncrementAuth");
            }
            // verify the required parameter 'incrementAuthRequest' is set
            if (incrementAuthRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'incrementAuthRequest' when calling PaymentsApi->IncrementAuth");
                throw new ApiException(400, "Missing required parameter 'incrementAuthRequest' when calling PaymentsApi->IncrementAuth");
            }

            var localVarPath = $"/pts/v2/payments/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (incrementAuthRequest != null && incrementAuthRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                incrementAuthRequest = (IncrementAuthRequest)sdkTracker.InsertDeveloperIdTracker(incrementAuthRequest, incrementAuthRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(incrementAuthRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = incrementAuthRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncrementAuth", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2IncrementalAuthorizationPatch201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2IncrementalAuthorizationPatch201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2IncrementalAuthorizationPatch201Response))); // Return statement
        }

        /// <summary>
        /// Increment an Authorization Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>Task of PtsV2IncrementalAuthorizationPatch201Response</returns>
        public async System.Threading.Tasks.Task<PtsV2IncrementalAuthorizationPatch201Response> IncrementAuthAsync (string id, IncrementAuthRequest incrementAuthRequest)
        {
            logger.Debug("CALLING API \"IncrementAuthAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2IncrementalAuthorizationPatch201Response> localVarResponse = await IncrementAuthAsyncWithHttpInfo(id, incrementAuthRequest);
            logger.Debug("CALLING API \"IncrementAuthAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Increment an Authorization Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID returned from the original authorization request.</param>
        /// <param name="incrementAuthRequest"></param>
        /// <returns>Task of ApiResponse (PtsV2IncrementalAuthorizationPatch201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PtsV2IncrementalAuthorizationPatch201Response>> IncrementAuthAsyncWithHttpInfo (string id, IncrementAuthRequest incrementAuthRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->IncrementAuth");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->IncrementAuth");
            }
            // verify the required parameter 'incrementAuthRequest' is set
            if (incrementAuthRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'incrementAuthRequest' when calling PaymentsApi->IncrementAuth");
                throw new ApiException(400, "Missing required parameter 'incrementAuthRequest' when calling PaymentsApi->IncrementAuth");
            }

            var localVarPath = $"/pts/v2/payments/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (incrementAuthRequest != null && incrementAuthRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                incrementAuthRequest = (IncrementAuthRequest)sdkTracker.InsertDeveloperIdTracker(incrementAuthRequest, incrementAuthRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(incrementAuthRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = incrementAuthRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncrementAuth", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2IncrementalAuthorizationPatch201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2IncrementalAuthorizationPatch201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2IncrementalAuthorizationPatch201Response))); // Return statement
        }
        /// <summary>
        /// Check a Payment Status Checks and updates the payment status 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>PtsV2PaymentsPost201Response1</returns>
        public PtsV2PaymentsPost201Response1 RefreshPaymentStatus (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest)
        {
            logger.Debug("CALLING API \"RefreshPaymentStatus\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response1> localVarResponse = RefreshPaymentStatusWithHttpInfo(id, refreshPaymentStatusRequest);
            logger.Debug("CALLING API \"RefreshPaymentStatus\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check a Payment Status Checks and updates the payment status 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response1</returns>
        public ApiResponse< PtsV2PaymentsPost201Response1 > RefreshPaymentStatusWithHttpInfo (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->RefreshPaymentStatus");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->RefreshPaymentStatus");
            }
            // verify the required parameter 'refreshPaymentStatusRequest' is set
            if (refreshPaymentStatusRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'refreshPaymentStatusRequest' when calling PaymentsApi->RefreshPaymentStatus");
                throw new ApiException(400, "Missing required parameter 'refreshPaymentStatusRequest' when calling PaymentsApi->RefreshPaymentStatus");
            }

            var localVarPath = $"/pts/v2/refresh-payment-status/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (refreshPaymentStatusRequest != null && refreshPaymentStatusRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                refreshPaymentStatusRequest = (RefreshPaymentStatusRequest)sdkTracker.InsertDeveloperIdTracker(refreshPaymentStatusRequest, refreshPaymentStatusRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(refreshPaymentStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refreshPaymentStatusRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshPaymentStatus", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response1>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response1))); // Return statement
        }

        /// <summary>
        /// Check a Payment Status Checks and updates the payment status 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>Task of PtsV2PaymentsPost201Response1</returns>
        public async System.Threading.Tasks.Task<PtsV2PaymentsPost201Response1> RefreshPaymentStatusAsync (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest)
        {
            logger.Debug("CALLING API \"RefreshPaymentStatusAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response1> localVarResponse = await RefreshPaymentStatusAsyncWithHttpInfo(id, refreshPaymentStatusRequest);
            logger.Debug("CALLING API \"RefreshPaymentStatusAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Check a Payment Status Checks and updates the payment status 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The payment id whose status needs to be checked and updated.</param>
        /// <param name="refreshPaymentStatusRequest"></param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response1>> RefreshPaymentStatusAsyncWithHttpInfo (string id, RefreshPaymentStatusRequest refreshPaymentStatusRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->RefreshPaymentStatus");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->RefreshPaymentStatus");
            }
            // verify the required parameter 'refreshPaymentStatusRequest' is set
            if (refreshPaymentStatusRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'refreshPaymentStatusRequest' when calling PaymentsApi->RefreshPaymentStatus");
                throw new ApiException(400, "Missing required parameter 'refreshPaymentStatusRequest' when calling PaymentsApi->RefreshPaymentStatus");
            }

            var localVarPath = $"/pts/v2/refresh-payment-status/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (refreshPaymentStatusRequest != null && refreshPaymentStatusRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                refreshPaymentStatusRequest = (RefreshPaymentStatusRequest)sdkTracker.InsertDeveloperIdTracker(refreshPaymentStatusRequest, refreshPaymentStatusRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(refreshPaymentStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refreshPaymentStatusRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshPaymentStatus", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response1>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response1))); // Return statement
        }
        /// <summary>
        /// Update Alternative Payments Sessions Request Update Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>PtsV2PaymentsPost201Response2</returns>
        public PtsV2PaymentsPost201Response2 UpdateSessionReq (CreateSessionRequest createSessionRequest, string id)
        {
            logger.Debug("CALLING API \"UpdateSessionReq\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response2> localVarResponse = UpdateSessionReqWithHttpInfo(createSessionRequest, id);
            logger.Debug("CALLING API \"UpdateSessionReq\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Alternative Payments Sessions Request Update Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>ApiResponse of PtsV2PaymentsPost201Response2</returns>
        public ApiResponse< PtsV2PaymentsPost201Response2 > UpdateSessionReqWithHttpInfo (CreateSessionRequest createSessionRequest, string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createSessionRequest' is set
            if (createSessionRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createSessionRequest' when calling PaymentsApi->UpdateSessionReq");
                throw new ApiException(400, "Missing required parameter 'createSessionRequest' when calling PaymentsApi->UpdateSessionReq");
            }
            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->UpdateSessionReq");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->UpdateSessionReq");
            }

            var localVarPath = $"/pts/v2/payment-references/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (createSessionRequest != null && createSessionRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createSessionRequest = (CreateSessionRequest)sdkTracker.InsertDeveloperIdTracker(createSessionRequest, createSessionRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSessionRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSessionReq", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response2>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response2))); // Return statement
        }

        /// <summary>
        /// Update Alternative Payments Sessions Request Update Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>Task of PtsV2PaymentsPost201Response2</returns>
        public async System.Threading.Tasks.Task<PtsV2PaymentsPost201Response2> UpdateSessionReqAsync (CreateSessionRequest createSessionRequest, string id)
        {
            logger.Debug("CALLING API \"UpdateSessionReqAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PtsV2PaymentsPost201Response2> localVarResponse = await UpdateSessionReqAsyncWithHttpInfo(createSessionRequest, id);
            logger.Debug("CALLING API \"UpdateSessionReqAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update Alternative Payments Sessions Request Update Alternative Payments Sessions Request
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="id">The payment ID. This ID is returned from a previous payment request.</param>
        /// <returns>Task of ApiResponse (PtsV2PaymentsPost201Response2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PtsV2PaymentsPost201Response2>> UpdateSessionReqAsyncWithHttpInfo (CreateSessionRequest createSessionRequest, string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createSessionRequest' is set
            if (createSessionRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createSessionRequest' when calling PaymentsApi->UpdateSessionReq");
                throw new ApiException(400, "Missing required parameter 'createSessionRequest' when calling PaymentsApi->UpdateSessionReq");
            }
            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentsApi->UpdateSessionReq");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->UpdateSessionReq");
            }

            var localVarPath = $"/pts/v2/payment-references/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (createSessionRequest != null && createSessionRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createSessionRequest = (CreateSessionRequest)sdkTracker.InsertDeveloperIdTracker(createSessionRequest, createSessionRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"]);
                localVarPostBody = Configuration.ApiClient.Serialize(createSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSessionRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSessionReq", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PtsV2PaymentsPost201Response2>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PtsV2PaymentsPost201Response2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PtsV2PaymentsPost201Response2))); // Return statement
        }
    }
}
