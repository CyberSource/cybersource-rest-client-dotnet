/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PostPaymentCredentialsRequest
    /// </summary>
    [DataContract]
    public partial class PostPaymentCredentialsRequest :  IEquatable<PostPaymentCredentialsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostPaymentCredentialsRequest" /> class.
        /// </summary>
        /// <param name="PaymentCredentialType">The type of payment credentials to be returned. By default, payment credentials include network token and cryptogram or dynamic CVV. If \&quot;NETWORK_TOKEN\&quot; is supplied then only network token card number will be returned and no cryptogram or dynamic CVV will be requested. If \&quot;SECURITY_CODE\&quot; is supplied then dynamic CVV will be requested and returned with the network token card number. Dynamic CVV is only supported for Amex and SCOF. If \&quot;CRYPTOGRAM\&quot; is supplied then cryptogram will be requested and returned with the network token card number. Cryptogram is NOT supported for Amex.  Possible Values:   - NETWORK_TOKEN   - SECURITY_CODE   - CRYPTOGRAM .</param>
        /// <param name="TransactionType">Specifies the type of transaction for which the network token credentials are required. Possible Values:   - ECOM: Ecommerce transaction. If transactionType is not provided, ECOM is set as the default.   - AFT: Account Funding Transaction. This is only supported for VISA and paymentCredentialType of CRYPTOGRAM. .</param>
        /// <param name="ClientCorrelationId">Used to correlate authentication and payment credential requests. .</param>
        /// <param name="OrderInformation">OrderInformation.</param>
        /// <param name="MerchantInformation">MerchantInformation.</param>
        /// <param name="DeviceInformation">DeviceInformation.</param>
        /// <param name="AuthenticatedIdentities">AuthenticatedIdentities.</param>
        public PostPaymentCredentialsRequest(string PaymentCredentialType = default(string), string TransactionType = default(string), string ClientCorrelationId = default(string), Tmsv2tokenstokenIdpaymentcredentialsOrderInformation OrderInformation = default(Tmsv2tokenstokenIdpaymentcredentialsOrderInformation), Tmsv2tokenstokenIdpaymentcredentialsMerchantInformation MerchantInformation = default(Tmsv2tokenstokenIdpaymentcredentialsMerchantInformation), Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation DeviceInformation = default(Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation), List<Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities> AuthenticatedIdentities = default(List<Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities>))
        {
            this.PaymentCredentialType = PaymentCredentialType;
            this.TransactionType = TransactionType;
            this.ClientCorrelationId = ClientCorrelationId;
            this.OrderInformation = OrderInformation;
            this.MerchantInformation = MerchantInformation;
            this.DeviceInformation = DeviceInformation;
            this.AuthenticatedIdentities = AuthenticatedIdentities;
        }
        
        /// <summary>
        /// The type of payment credentials to be returned. By default, payment credentials include network token and cryptogram or dynamic CVV. If \&quot;NETWORK_TOKEN\&quot; is supplied then only network token card number will be returned and no cryptogram or dynamic CVV will be requested. If \&quot;SECURITY_CODE\&quot; is supplied then dynamic CVV will be requested and returned with the network token card number. Dynamic CVV is only supported for Amex and SCOF. If \&quot;CRYPTOGRAM\&quot; is supplied then cryptogram will be requested and returned with the network token card number. Cryptogram is NOT supported for Amex.  Possible Values:   - NETWORK_TOKEN   - SECURITY_CODE   - CRYPTOGRAM 
        /// </summary>
        /// <value>The type of payment credentials to be returned. By default, payment credentials include network token and cryptogram or dynamic CVV. If \&quot;NETWORK_TOKEN\&quot; is supplied then only network token card number will be returned and no cryptogram or dynamic CVV will be requested. If \&quot;SECURITY_CODE\&quot; is supplied then dynamic CVV will be requested and returned with the network token card number. Dynamic CVV is only supported for Amex and SCOF. If \&quot;CRYPTOGRAM\&quot; is supplied then cryptogram will be requested and returned with the network token card number. Cryptogram is NOT supported for Amex.  Possible Values:   - NETWORK_TOKEN   - SECURITY_CODE   - CRYPTOGRAM </value>
        [DataMember(Name="paymentCredentialType", EmitDefaultValue=false)]
        public string PaymentCredentialType { get; set; }

        /// <summary>
        /// Specifies the type of transaction for which the network token credentials are required. Possible Values:   - ECOM: Ecommerce transaction. If transactionType is not provided, ECOM is set as the default.   - AFT: Account Funding Transaction. This is only supported for VISA and paymentCredentialType of CRYPTOGRAM. 
        /// </summary>
        /// <value>Specifies the type of transaction for which the network token credentials are required. Possible Values:   - ECOM: Ecommerce transaction. If transactionType is not provided, ECOM is set as the default.   - AFT: Account Funding Transaction. This is only supported for VISA and paymentCredentialType of CRYPTOGRAM. </value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Used to correlate authentication and payment credential requests. 
        /// </summary>
        /// <value>Used to correlate authentication and payment credential requests. </value>
        [DataMember(Name="clientCorrelationId", EmitDefaultValue=false)]
        public string ClientCorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets OrderInformation
        /// </summary>
        [DataMember(Name="orderInformation", EmitDefaultValue=false)]
        public Tmsv2tokenstokenIdpaymentcredentialsOrderInformation OrderInformation { get; set; }

        /// <summary>
        /// Gets or Sets MerchantInformation
        /// </summary>
        [DataMember(Name="merchantInformation", EmitDefaultValue=false)]
        public Tmsv2tokenstokenIdpaymentcredentialsMerchantInformation MerchantInformation { get; set; }

        /// <summary>
        /// Gets or Sets DeviceInformation
        /// </summary>
        [DataMember(Name="deviceInformation", EmitDefaultValue=false)]
        public Tmsv2tokenstokenIdpaymentcredentialsDeviceInformation DeviceInformation { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatedIdentities
        /// </summary>
        [DataMember(Name="authenticatedIdentities", EmitDefaultValue=false)]
        public List<Tmsv2tokenstokenIdpaymentcredentialsAuthenticatedIdentities> AuthenticatedIdentities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostPaymentCredentialsRequest {\n");
            if (PaymentCredentialType != null) sb.Append("  PaymentCredentialType: ").Append(PaymentCredentialType).Append("\n");
            if (TransactionType != null) sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            if (ClientCorrelationId != null) sb.Append("  ClientCorrelationId: ").Append(ClientCorrelationId).Append("\n");
            if (OrderInformation != null) sb.Append("  OrderInformation: ").Append(OrderInformation).Append("\n");
            if (MerchantInformation != null) sb.Append("  MerchantInformation: ").Append(MerchantInformation).Append("\n");
            if (DeviceInformation != null) sb.Append("  DeviceInformation: ").Append(DeviceInformation).Append("\n");
            if (AuthenticatedIdentities != null) sb.Append("  AuthenticatedIdentities: ").Append(AuthenticatedIdentities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PostPaymentCredentialsRequest);
        }

        /// <summary>
        /// Returns true if PostPaymentCredentialsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PostPaymentCredentialsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPaymentCredentialsRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentCredentialType == other.PaymentCredentialType ||
                    this.PaymentCredentialType != null &&
                    this.PaymentCredentialType.Equals(other.PaymentCredentialType)
                ) && 
                (
                    this.TransactionType == other.TransactionType ||
                    this.TransactionType != null &&
                    this.TransactionType.Equals(other.TransactionType)
                ) && 
                (
                    this.ClientCorrelationId == other.ClientCorrelationId ||
                    this.ClientCorrelationId != null &&
                    this.ClientCorrelationId.Equals(other.ClientCorrelationId)
                ) && 
                (
                    this.OrderInformation == other.OrderInformation ||
                    this.OrderInformation != null &&
                    this.OrderInformation.Equals(other.OrderInformation)
                ) && 
                (
                    this.MerchantInformation == other.MerchantInformation ||
                    this.MerchantInformation != null &&
                    this.MerchantInformation.Equals(other.MerchantInformation)
                ) && 
                (
                    this.DeviceInformation == other.DeviceInformation ||
                    this.DeviceInformation != null &&
                    this.DeviceInformation.Equals(other.DeviceInformation)
                ) && 
                (
                    this.AuthenticatedIdentities == other.AuthenticatedIdentities ||
                    this.AuthenticatedIdentities != null &&
                    this.AuthenticatedIdentities.SequenceEqual(other.AuthenticatedIdentities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentCredentialType != null)
                    hash = hash * 59 + this.PaymentCredentialType.GetHashCode();
                if (this.TransactionType != null)
                    hash = hash * 59 + this.TransactionType.GetHashCode();
                if (this.ClientCorrelationId != null)
                    hash = hash * 59 + this.ClientCorrelationId.GetHashCode();
                if (this.OrderInformation != null)
                    hash = hash * 59 + this.OrderInformation.GetHashCode();
                if (this.MerchantInformation != null)
                    hash = hash * 59 + this.MerchantInformation.GetHashCode();
                if (this.DeviceInformation != null)
                    hash = hash * 59 + this.DeviceInformation.GetHashCode();
                if (this.AuthenticatedIdentities != null)
                    hash = hash * 59 + this.AuthenticatedIdentities.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
