/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// ECheckConfigUnderwriting
    /// </summary>
    [DataContract]
    public partial class ECheckConfigUnderwriting :  IEquatable<ECheckConfigUnderwriting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECheckConfigUnderwriting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ECheckConfigUnderwriting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ECheckConfigUnderwriting" /> class.
        /// </summary>
        /// <param name="StandardEntryClassCodes">Mandatory  Free-text (csv)  Possible values (combination):  CCD — Cash Concentration or Disbursement, or CCD, is a charge or refund against a business checking account. One-time or recurring CCD transactions are fund transfers to or from a corporate entity. A standing authorization is required for recurring transactions. PPD — Prearranged Payment and Deposit Entry, or PPD, is a charge or refund against a customer&#39;s checking or savings account. PPD entries can only be originated when payment and deposit terms between the merchant and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions. TEL — Telephone-Initiated Entry, or TEL, is a one-time charge against a customer&#39;s checking or savings account. TEL transactions can only be originated when a business relationship between the merchant and the customer already exists; or if a relationship does not exist, then only when the customer initiates the telephone call to the merchant. Payment authorization is obtained from the customer by telephone. WEB — Internet-Initiated Entry or WEB is a charge against a customer&#39;s checking or savings account. One-time or recurring WEB transactions are originated through the Internet. Payment authorization is also obtained from the customer through the Internet.  (required) (default to &quot;CCD,PPD,TEL,WEB&quot;).</param>
        /// <param name="EnableHold">Mandatory  Determines whether CYBS has placed the merchant on a funding hold This will often be set to True for new merchants until the risk team has completed additional verification of their first transaction. It will be switched to \&quot;false\&quot; once underwriting review is completed and we are ready to start funding the merchant.  (required) (default to true).</param>
        /// <param name="MonthlyTotalTransactionAmountLimit">Mandatory  Monthly Maximum total Transaction Amount 12 digit including decimal  (required).</param>
        /// <param name="HoldingDays">Mandatory  Funds Hold Days (Number of days funds will be held before it will be deposited into merchant account) 3 digits  (required).</param>
        /// <param name="EnableCredits">Optional  Allow Credits (True/False) .</param>
        /// <param name="TransactionAmountLimit">Mandatory  Maximum total Transaction Amount This is a per transaction limit. For example, the merchant is limited to processing transactions under $100 12 digits (including decimal - USD only)  (required).</param>
        /// <param name="RiskReserveMethod">Mandatory Reserve Method  Possible value: - fixed - none Most merchants do not have a reserve attached to their account so the default value would be \&quot;none.\&quot;   For a Fixed Reserve, the reserve balance is established by either, (1) a receipt of a lump sum deposit from a merchant, or (2) withholding funds at a Reserve Rate established for the account from each batch settlement until the reserve balance is equal to a set Reserve Target. A Fixed Reserve may also be established by a combination of lump sum deposit and withholding of settlement funds.  A Rolling Reserve balance is established by withholding from a merchant&#39;s available settlement funds at a Reserve Rate (percentage) and no Reserve Target is specified. Rather, each amount withheld is retained for a specified number of Reserve Holding Days and then released back to the merchant.  (required).</param>
        /// <param name="RiskReserveRate">Mandatory  Reserve Rate (% of TPV)&#x3D;&gt; Relevant for Rolling Reserve and Fixed Reserve The percentage rate at which risk funds are withheld from each eCheck.Net batch settlement.  (required).</param>
        /// <param name="RiskReserveTargetAmount">Mandatory  Reserve Target (fixed $ amount)&#x3D;&gt; Relevant for Fixed Reserve ONLY  The maximum dollar amount that can be held in Risk Reserve for a fixed reserve. Once risk withholdings reach the Reserve Target established for the eCheck.Net account, a portion of available funds will be deposited to the merchant&#39;s bank account 12 digit including decimal  (required).</param>
        /// <param name="SolutionOrganizationId">Solution organization id.</param>
        public ECheckConfigUnderwriting(string StandardEntryClassCodes = "CCD,PPD,TEL,WEB", bool? EnableHold = true, decimal? MonthlyTotalTransactionAmountLimit = default(decimal?), decimal? HoldingDays = default(decimal?), bool? EnableCredits = default(bool?), decimal? TransactionAmountLimit = default(decimal?), string RiskReserveMethod = default(string), decimal? RiskReserveRate = default(decimal?), decimal? RiskReserveTargetAmount = default(decimal?), string SolutionOrganizationId = default(string))
        {
            // to ensure "StandardEntryClassCodes" is required (not null)
            if (StandardEntryClassCodes == null)
            {
                throw new InvalidDataException("StandardEntryClassCodes is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.StandardEntryClassCodes = StandardEntryClassCodes;
            }
            // to ensure "EnableHold" is required (not null)
            if (EnableHold == null)
            {
                throw new InvalidDataException("EnableHold is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.EnableHold = EnableHold;
            }
            // to ensure "MonthlyTotalTransactionAmountLimit" is required (not null)
            if (MonthlyTotalTransactionAmountLimit == null)
            {
                throw new InvalidDataException("MonthlyTotalTransactionAmountLimit is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.MonthlyTotalTransactionAmountLimit = MonthlyTotalTransactionAmountLimit;
            }
            // to ensure "HoldingDays" is required (not null)
            if (HoldingDays == null)
            {
                throw new InvalidDataException("HoldingDays is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.HoldingDays = HoldingDays;
            }
            // to ensure "TransactionAmountLimit" is required (not null)
            if (TransactionAmountLimit == null)
            {
                throw new InvalidDataException("TransactionAmountLimit is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.TransactionAmountLimit = TransactionAmountLimit;
            }
            // to ensure "RiskReserveMethod" is required (not null)
            if (RiskReserveMethod == null)
            {
                throw new InvalidDataException("RiskReserveMethod is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.RiskReserveMethod = RiskReserveMethod;
            }
            // to ensure "RiskReserveRate" is required (not null)
            if (RiskReserveRate == null)
            {
                throw new InvalidDataException("RiskReserveRate is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.RiskReserveRate = RiskReserveRate;
            }
            // to ensure "RiskReserveTargetAmount" is required (not null)
            if (RiskReserveTargetAmount == null)
            {
                throw new InvalidDataException("RiskReserveTargetAmount is a required property for ECheckConfigUnderwriting and cannot be null");
            }
            else
            {
                this.RiskReserveTargetAmount = RiskReserveTargetAmount;
            }
            this.EnableCredits = EnableCredits;
            this.SolutionOrganizationId = SolutionOrganizationId;
        }
        
        /// <summary>
        /// Mandatory  Free-text (csv)  Possible values (combination):  CCD — Cash Concentration or Disbursement, or CCD, is a charge or refund against a business checking account. One-time or recurring CCD transactions are fund transfers to or from a corporate entity. A standing authorization is required for recurring transactions. PPD — Prearranged Payment and Deposit Entry, or PPD, is a charge or refund against a customer&#39;s checking or savings account. PPD entries can only be originated when payment and deposit terms between the merchant and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions. TEL — Telephone-Initiated Entry, or TEL, is a one-time charge against a customer&#39;s checking or savings account. TEL transactions can only be originated when a business relationship between the merchant and the customer already exists; or if a relationship does not exist, then only when the customer initiates the telephone call to the merchant. Payment authorization is obtained from the customer by telephone. WEB — Internet-Initiated Entry or WEB is a charge against a customer&#39;s checking or savings account. One-time or recurring WEB transactions are originated through the Internet. Payment authorization is also obtained from the customer through the Internet. 
        /// </summary>
        /// <value>Mandatory  Free-text (csv)  Possible values (combination):  CCD — Cash Concentration or Disbursement, or CCD, is a charge or refund against a business checking account. One-time or recurring CCD transactions are fund transfers to or from a corporate entity. A standing authorization is required for recurring transactions. PPD — Prearranged Payment and Deposit Entry, or PPD, is a charge or refund against a customer&#39;s checking or savings account. PPD entries can only be originated when payment and deposit terms between the merchant and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions. TEL — Telephone-Initiated Entry, or TEL, is a one-time charge against a customer&#39;s checking or savings account. TEL transactions can only be originated when a business relationship between the merchant and the customer already exists; or if a relationship does not exist, then only when the customer initiates the telephone call to the merchant. Payment authorization is obtained from the customer by telephone. WEB — Internet-Initiated Entry or WEB is a charge against a customer&#39;s checking or savings account. One-time or recurring WEB transactions are originated through the Internet. Payment authorization is also obtained from the customer through the Internet. </value>
        [DataMember(Name="standardEntryClassCodes", EmitDefaultValue=false)]
        public string StandardEntryClassCodes { get; set; }

        /// <summary>
        /// Mandatory  Determines whether CYBS has placed the merchant on a funding hold This will often be set to True for new merchants until the risk team has completed additional verification of their first transaction. It will be switched to \&quot;false\&quot; once underwriting review is completed and we are ready to start funding the merchant. 
        /// </summary>
        /// <value>Mandatory  Determines whether CYBS has placed the merchant on a funding hold This will often be set to True for new merchants until the risk team has completed additional verification of their first transaction. It will be switched to \&quot;false\&quot; once underwriting review is completed and we are ready to start funding the merchant. </value>
        [DataMember(Name="enableHold", EmitDefaultValue=false)]
        public bool? EnableHold { get; set; }

        /// <summary>
        /// Mandatory  Monthly Maximum total Transaction Amount 12 digit including decimal 
        /// </summary>
        /// <value>Mandatory  Monthly Maximum total Transaction Amount 12 digit including decimal </value>
        [DataMember(Name="monthlyTotalTransactionAmountLimit", EmitDefaultValue=false)]
        public decimal? MonthlyTotalTransactionAmountLimit { get; set; }

        /// <summary>
        /// Mandatory  Funds Hold Days (Number of days funds will be held before it will be deposited into merchant account) 3 digits 
        /// </summary>
        /// <value>Mandatory  Funds Hold Days (Number of days funds will be held before it will be deposited into merchant account) 3 digits </value>
        [DataMember(Name="holdingDays", EmitDefaultValue=false)]
        public decimal? HoldingDays { get; set; }

        /// <summary>
        /// Optional  Allow Credits (True/False) 
        /// </summary>
        /// <value>Optional  Allow Credits (True/False) </value>
        [DataMember(Name="enableCredits", EmitDefaultValue=false)]
        public bool? EnableCredits { get; set; }

        /// <summary>
        /// Mandatory  Maximum total Transaction Amount This is a per transaction limit. For example, the merchant is limited to processing transactions under $100 12 digits (including decimal - USD only) 
        /// </summary>
        /// <value>Mandatory  Maximum total Transaction Amount This is a per transaction limit. For example, the merchant is limited to processing transactions under $100 12 digits (including decimal - USD only) </value>
        [DataMember(Name="transactionAmountLimit", EmitDefaultValue=false)]
        public decimal? TransactionAmountLimit { get; set; }

        /// <summary>
        /// Mandatory Reserve Method  Possible value: - fixed - none Most merchants do not have a reserve attached to their account so the default value would be \&quot;none.\&quot;   For a Fixed Reserve, the reserve balance is established by either, (1) a receipt of a lump sum deposit from a merchant, or (2) withholding funds at a Reserve Rate established for the account from each batch settlement until the reserve balance is equal to a set Reserve Target. A Fixed Reserve may also be established by a combination of lump sum deposit and withholding of settlement funds.  A Rolling Reserve balance is established by withholding from a merchant&#39;s available settlement funds at a Reserve Rate (percentage) and no Reserve Target is specified. Rather, each amount withheld is retained for a specified number of Reserve Holding Days and then released back to the merchant. 
        /// </summary>
        /// <value>Mandatory Reserve Method  Possible value: - fixed - none Most merchants do not have a reserve attached to their account so the default value would be \&quot;none.\&quot;   For a Fixed Reserve, the reserve balance is established by either, (1) a receipt of a lump sum deposit from a merchant, or (2) withholding funds at a Reserve Rate established for the account from each batch settlement until the reserve balance is equal to a set Reserve Target. A Fixed Reserve may also be established by a combination of lump sum deposit and withholding of settlement funds.  A Rolling Reserve balance is established by withholding from a merchant&#39;s available settlement funds at a Reserve Rate (percentage) and no Reserve Target is specified. Rather, each amount withheld is retained for a specified number of Reserve Holding Days and then released back to the merchant. </value>
        [DataMember(Name="riskReserveMethod", EmitDefaultValue=false)]
        public string RiskReserveMethod { get; set; }

        /// <summary>
        /// Mandatory  Reserve Rate (% of TPV)&#x3D;&gt; Relevant for Rolling Reserve and Fixed Reserve The percentage rate at which risk funds are withheld from each eCheck.Net batch settlement. 
        /// </summary>
        /// <value>Mandatory  Reserve Rate (% of TPV)&#x3D;&gt; Relevant for Rolling Reserve and Fixed Reserve The percentage rate at which risk funds are withheld from each eCheck.Net batch settlement. </value>
        [DataMember(Name="riskReserveRate", EmitDefaultValue=false)]
        public decimal? RiskReserveRate { get; set; }

        /// <summary>
        /// Mandatory  Reserve Target (fixed $ amount)&#x3D;&gt; Relevant for Fixed Reserve ONLY  The maximum dollar amount that can be held in Risk Reserve for a fixed reserve. Once risk withholdings reach the Reserve Target established for the eCheck.Net account, a portion of available funds will be deposited to the merchant&#39;s bank account 12 digit including decimal 
        /// </summary>
        /// <value>Mandatory  Reserve Target (fixed $ amount)&#x3D;&gt; Relevant for Fixed Reserve ONLY  The maximum dollar amount that can be held in Risk Reserve for a fixed reserve. Once risk withholdings reach the Reserve Target established for the eCheck.Net account, a portion of available funds will be deposited to the merchant&#39;s bank account 12 digit including decimal </value>
        [DataMember(Name="riskReserveTargetAmount", EmitDefaultValue=false)]
        public decimal? RiskReserveTargetAmount { get; set; }

        /// <summary>
        /// Solution organization id
        /// </summary>
        /// <value>Solution organization id</value>
        [DataMember(Name="solutionOrganizationId", EmitDefaultValue=false)]
        public string SolutionOrganizationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECheckConfigUnderwriting {\n");
            sb.Append("  StandardEntryClassCodes: ").Append(StandardEntryClassCodes).Append("\n");
            sb.Append("  EnableHold: ").Append(EnableHold).Append("\n");
            sb.Append("  MonthlyTotalTransactionAmountLimit: ").Append(MonthlyTotalTransactionAmountLimit).Append("\n");
            sb.Append("  HoldingDays: ").Append(HoldingDays).Append("\n");
            sb.Append("  EnableCredits: ").Append(EnableCredits).Append("\n");
            sb.Append("  TransactionAmountLimit: ").Append(TransactionAmountLimit).Append("\n");
            sb.Append("  RiskReserveMethod: ").Append(RiskReserveMethod).Append("\n");
            sb.Append("  RiskReserveRate: ").Append(RiskReserveRate).Append("\n");
            sb.Append("  RiskReserveTargetAmount: ").Append(RiskReserveTargetAmount).Append("\n");
            sb.Append("  SolutionOrganizationId: ").Append(SolutionOrganizationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ECheckConfigUnderwriting);
        }

        /// <summary>
        /// Returns true if ECheckConfigUnderwriting instances are equal
        /// </summary>
        /// <param name="other">Instance of ECheckConfigUnderwriting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECheckConfigUnderwriting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StandardEntryClassCodes == other.StandardEntryClassCodes ||
                    this.StandardEntryClassCodes != null &&
                    this.StandardEntryClassCodes.Equals(other.StandardEntryClassCodes)
                ) && 
                (
                    this.EnableHold == other.EnableHold ||
                    this.EnableHold != null &&
                    this.EnableHold.Equals(other.EnableHold)
                ) && 
                (
                    this.MonthlyTotalTransactionAmountLimit == other.MonthlyTotalTransactionAmountLimit ||
                    this.MonthlyTotalTransactionAmountLimit != null &&
                    this.MonthlyTotalTransactionAmountLimit.Equals(other.MonthlyTotalTransactionAmountLimit)
                ) && 
                (
                    this.HoldingDays == other.HoldingDays ||
                    this.HoldingDays != null &&
                    this.HoldingDays.Equals(other.HoldingDays)
                ) && 
                (
                    this.EnableCredits == other.EnableCredits ||
                    this.EnableCredits != null &&
                    this.EnableCredits.Equals(other.EnableCredits)
                ) && 
                (
                    this.TransactionAmountLimit == other.TransactionAmountLimit ||
                    this.TransactionAmountLimit != null &&
                    this.TransactionAmountLimit.Equals(other.TransactionAmountLimit)
                ) && 
                (
                    this.RiskReserveMethod == other.RiskReserveMethod ||
                    this.RiskReserveMethod != null &&
                    this.RiskReserveMethod.Equals(other.RiskReserveMethod)
                ) && 
                (
                    this.RiskReserveRate == other.RiskReserveRate ||
                    this.RiskReserveRate != null &&
                    this.RiskReserveRate.Equals(other.RiskReserveRate)
                ) && 
                (
                    this.RiskReserveTargetAmount == other.RiskReserveTargetAmount ||
                    this.RiskReserveTargetAmount != null &&
                    this.RiskReserveTargetAmount.Equals(other.RiskReserveTargetAmount)
                ) && 
                (
                    this.SolutionOrganizationId == other.SolutionOrganizationId ||
                    this.SolutionOrganizationId != null &&
                    this.SolutionOrganizationId.Equals(other.SolutionOrganizationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StandardEntryClassCodes != null)
                    hash = hash * 59 + this.StandardEntryClassCodes.GetHashCode();
                if (this.EnableHold != null)
                    hash = hash * 59 + this.EnableHold.GetHashCode();
                if (this.MonthlyTotalTransactionAmountLimit != null)
                    hash = hash * 59 + this.MonthlyTotalTransactionAmountLimit.GetHashCode();
                if (this.HoldingDays != null)
                    hash = hash * 59 + this.HoldingDays.GetHashCode();
                if (this.EnableCredits != null)
                    hash = hash * 59 + this.EnableCredits.GetHashCode();
                if (this.TransactionAmountLimit != null)
                    hash = hash * 59 + this.TransactionAmountLimit.GetHashCode();
                if (this.RiskReserveMethod != null)
                    hash = hash * 59 + this.RiskReserveMethod.GetHashCode();
                if (this.RiskReserveRate != null)
                    hash = hash * 59 + this.RiskReserveRate.GetHashCode();
                if (this.RiskReserveTargetAmount != null)
                    hash = hash * 59 + this.RiskReserveTargetAmount.GetHashCode();
                if (this.SolutionOrganizationId != null)
                    hash = hash * 59 + this.SolutionOrganizationId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
