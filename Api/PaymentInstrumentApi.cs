/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentInstrumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns></returns>
        void DeletePaymentInstrument (string paymentInstrumentTokenId, string profileId = null);

        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePaymentInstrumentWithHttpInfo (string paymentInstrumentTokenId, string profileId = null);
        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        Tmsv2customersEmbeddedDefaultPaymentInstrument GetPaymentInstrument (string paymentInstrumentTokenId, string profileId = null);

        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> GetPaymentInstrumentWithHttpInfo (string paymentInstrumentTokenId, string profileId = null);
        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        Tmsv2customersEmbeddedDefaultPaymentInstrument PatchPaymentInstrument (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null);

        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>ApiResponse of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> PatchPaymentInstrumentWithHttpInfo (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null);
        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        Tmsv2customersEmbeddedDefaultPaymentInstrument PostPaymentInstrument (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null);

        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> PostPaymentInstrumentWithHttpInfo (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePaymentInstrumentAsync (string paymentInstrumentTokenId, string profileId = null);

        /// <summary>
        /// Delete a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentInstrumentAsyncWithHttpInfo (string paymentInstrumentTokenId, string profileId = null);
        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        System.Threading.Tasks.Task<Tmsv2customersEmbeddedDefaultPaymentInstrument> GetPaymentInstrumentAsync (string paymentInstrumentTokenId, string profileId = null);

        /// <summary>
        /// Retrieve a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (Tmsv2customersEmbeddedDefaultPaymentInstrument)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>> GetPaymentInstrumentAsyncWithHttpInfo (string paymentInstrumentTokenId, string profileId = null);
        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        System.Threading.Tasks.Task<Tmsv2customersEmbeddedDefaultPaymentInstrument> PatchPaymentInstrumentAsync (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null);

        /// <summary>
        /// Update a Payment Instrument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of ApiResponse (Tmsv2customersEmbeddedDefaultPaymentInstrument)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>> PatchPaymentInstrumentAsyncWithHttpInfo (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null);
        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        System.Threading.Tasks.Task<Tmsv2customersEmbeddedDefaultPaymentInstrument> PostPaymentInstrumentAsync (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null);

        /// <summary>
        /// Create a Payment Instrument
        /// </summary>
        /// <remarks>
        /// Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (Tmsv2customersEmbeddedDefaultPaymentInstrument)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>> PostPaymentInstrumentAsyncWithHttpInfo (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentInstrumentApi : IPaymentInstrumentApi
    {
        private CyberSource.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentInstrumentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInstrumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentInstrumentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            this.Configuration.ApiClient.Configuration = this.Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CyberSource.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns></returns>
        public void DeletePaymentInstrument (string paymentInstrumentTokenId, string profileId = null)
        {
             DeletePaymentInstrumentWithHttpInfo(paymentInstrumentTokenId, profileId);
        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePaymentInstrumentWithHttpInfo (string paymentInstrumentTokenId, string profileId = null)
        {
            // verify the required parameter 'paymentInstrumentTokenId' is set
            if (paymentInstrumentTokenId == null)
                throw new ApiException(400, "Missing required parameter 'paymentInstrumentTokenId' when calling PaymentInstrumentApi->DeletePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{paymentInstrumentTokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentInstrumentTokenId != null) localVarPathParams.Add("paymentInstrumentTokenId", Configuration.ApiClient.ParameterToString(paymentInstrumentTokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null); // Return statement
        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePaymentInstrumentAsync (string paymentInstrumentTokenId, string profileId = null)
        {
             await DeletePaymentInstrumentAsyncWithHttpInfo(paymentInstrumentTokenId, profileId);

        }

        /// <summary>
        /// Delete a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePaymentInstrumentAsyncWithHttpInfo (string paymentInstrumentTokenId, string profileId = null)
        {
            // verify the required parameter 'paymentInstrumentTokenId' is set
            if (paymentInstrumentTokenId == null)
                throw new ApiException(400, "Missing required parameter 'paymentInstrumentTokenId' when calling PaymentInstrumentApi->DeletePaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{paymentInstrumentTokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentInstrumentTokenId != null) localVarPathParams.Add("paymentInstrumentTokenId", Configuration.ApiClient.ParameterToString(paymentInstrumentTokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null); // Return statement
        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public Tmsv2customersEmbeddedDefaultPaymentInstrument GetPaymentInstrument (string paymentInstrumentTokenId, string profileId = null)
        {
             ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> localVarResponse = GetPaymentInstrumentWithHttpInfo(paymentInstrumentTokenId, profileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public ApiResponse< Tmsv2customersEmbeddedDefaultPaymentInstrument > GetPaymentInstrumentWithHttpInfo (string paymentInstrumentTokenId, string profileId = null)
        {
            // verify the required parameter 'paymentInstrumentTokenId' is set
            if (paymentInstrumentTokenId == null)
                throw new ApiException(400, "Missing required parameter 'paymentInstrumentTokenId' when calling PaymentInstrumentApi->GetPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{paymentInstrumentTokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentInstrumentTokenId != null) localVarPathParams.Add("paymentInstrumentTokenId", Configuration.ApiClient.ParameterToString(paymentInstrumentTokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tmsv2customersEmbeddedDefaultPaymentInstrument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tmsv2customersEmbeddedDefaultPaymentInstrument))); // Return statement
        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public async System.Threading.Tasks.Task<Tmsv2customersEmbeddedDefaultPaymentInstrument> GetPaymentInstrumentAsync (string paymentInstrumentTokenId, string profileId = null)
        {
             ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> localVarResponse = await GetPaymentInstrumentAsyncWithHttpInfo(paymentInstrumentTokenId, profileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (Tmsv2customersEmbeddedDefaultPaymentInstrument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>> GetPaymentInstrumentAsyncWithHttpInfo (string paymentInstrumentTokenId, string profileId = null)
        {
            // verify the required parameter 'paymentInstrumentTokenId' is set
            if (paymentInstrumentTokenId == null)
                throw new ApiException(400, "Missing required parameter 'paymentInstrumentTokenId' when calling PaymentInstrumentApi->GetPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{paymentInstrumentTokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentInstrumentTokenId != null) localVarPathParams.Add("paymentInstrumentTokenId", Configuration.ApiClient.ParameterToString(paymentInstrumentTokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tmsv2customersEmbeddedDefaultPaymentInstrument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tmsv2customersEmbeddedDefaultPaymentInstrument))); // Return statement
        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public Tmsv2customersEmbeddedDefaultPaymentInstrument PatchPaymentInstrument (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null)
        {
             ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> localVarResponse = PatchPaymentInstrumentWithHttpInfo(paymentInstrumentTokenId, patchPaymentInstrumentRequest, profileId, ifMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>ApiResponse of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public ApiResponse< Tmsv2customersEmbeddedDefaultPaymentInstrument > PatchPaymentInstrumentWithHttpInfo (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null)
        {
            // verify the required parameter 'paymentInstrumentTokenId' is set
            if (paymentInstrumentTokenId == null)
                throw new ApiException(400, "Missing required parameter 'paymentInstrumentTokenId' when calling PaymentInstrumentApi->PatchPaymentInstrument");
            // verify the required parameter 'patchPaymentInstrumentRequest' is set
            if (patchPaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'patchPaymentInstrumentRequest' when calling PaymentInstrumentApi->PatchPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{paymentInstrumentTokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentInstrumentTokenId != null) localVarPathParams.Add("paymentInstrumentTokenId", Configuration.ApiClient.ParameterToString(paymentInstrumentTokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("if-match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (patchPaymentInstrumentRequest != null && patchPaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patchPaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchPaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tmsv2customersEmbeddedDefaultPaymentInstrument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tmsv2customersEmbeddedDefaultPaymentInstrument))); // Return statement
        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public async System.Threading.Tasks.Task<Tmsv2customersEmbeddedDefaultPaymentInstrument> PatchPaymentInstrumentAsync (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null)
        {
             ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> localVarResponse = await PatchPaymentInstrumentAsyncWithHttpInfo(paymentInstrumentTokenId, patchPaymentInstrumentRequest, profileId, ifMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Payment Instrument 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInstrumentTokenId">The TokenId of a payment instrument.</param>
        /// <param name="patchPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <param name="ifMatch">Contains an ETag value from a GET request to make the request conditional. (optional)</param>
        /// <returns>Task of ApiResponse (Tmsv2customersEmbeddedDefaultPaymentInstrument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>> PatchPaymentInstrumentAsyncWithHttpInfo (string paymentInstrumentTokenId, PatchPaymentInstrumentRequest patchPaymentInstrumentRequest, string profileId = null, string ifMatch = null)
        {
            // verify the required parameter 'paymentInstrumentTokenId' is set
            if (paymentInstrumentTokenId == null)
                throw new ApiException(400, "Missing required parameter 'paymentInstrumentTokenId' when calling PaymentInstrumentApi->PatchPaymentInstrument");
            // verify the required parameter 'patchPaymentInstrumentRequest' is set
            if (patchPaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'patchPaymentInstrumentRequest' when calling PaymentInstrumentApi->PatchPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments/{paymentInstrumentTokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentInstrumentTokenId != null) localVarPathParams.Add("paymentInstrumentTokenId", Configuration.ApiClient.ParameterToString(paymentInstrumentTokenId)); // path parameter
            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (ifMatch != null) localVarHeaderParams.Add("if-match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (patchPaymentInstrumentRequest != null && patchPaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(patchPaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchPaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tmsv2customersEmbeddedDefaultPaymentInstrument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tmsv2customersEmbeddedDefaultPaymentInstrument))); // Return statement
        }

        /// <summary>
        /// Create a Payment Instrument Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public Tmsv2customersEmbeddedDefaultPaymentInstrument PostPaymentInstrument (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null)
        {
             ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> localVarResponse = PostPaymentInstrumentWithHttpInfo(postPaymentInstrumentRequest, profileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Payment Instrument Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>ApiResponse of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public ApiResponse< Tmsv2customersEmbeddedDefaultPaymentInstrument > PostPaymentInstrumentWithHttpInfo (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null)
        {
            // verify the required parameter 'postPaymentInstrumentRequest' is set
            if (postPaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postPaymentInstrumentRequest' when calling PaymentInstrumentApi->PostPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (postPaymentInstrumentRequest != null && postPaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(postPaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postPaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tmsv2customersEmbeddedDefaultPaymentInstrument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tmsv2customersEmbeddedDefaultPaymentInstrument))); // Return statement
        }

        /// <summary>
        /// Create a Payment Instrument Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of Tmsv2customersEmbeddedDefaultPaymentInstrument</returns>
        public async System.Threading.Tasks.Task<Tmsv2customersEmbeddedDefaultPaymentInstrument> PostPaymentInstrumentAsync (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null)
        {
             ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument> localVarResponse = await PostPaymentInstrumentAsyncWithHttpInfo(postPaymentInstrumentRequest, profileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Payment Instrument Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPaymentInstrumentRequest"></param>
        /// <param name="profileId">The id of a profile containing user specific TMS configuration. (optional)</param>
        /// <returns>Task of ApiResponse (Tmsv2customersEmbeddedDefaultPaymentInstrument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>> PostPaymentInstrumentAsyncWithHttpInfo (PostPaymentInstrumentRequest postPaymentInstrumentRequest, string profileId = null)
        {
            // verify the required parameter 'postPaymentInstrumentRequest' is set
            if (postPaymentInstrumentRequest == null)
                throw new ApiException(400, "Missing required parameter 'postPaymentInstrumentRequest' when calling PaymentInstrumentApi->PostPaymentInstrument");

            var localVarPath = $"/tms/v1/paymentinstruments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarHeaderParams.Add("profile-id", Configuration.ApiClient.ParameterToString(profileId)); // header parameter
            if (postPaymentInstrumentRequest != null && postPaymentInstrumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(postPaymentInstrumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postPaymentInstrumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPaymentInstrument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tmsv2customersEmbeddedDefaultPaymentInstrument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tmsv2customersEmbeddedDefaultPaymentInstrument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tmsv2customersEmbeddedDefaultPaymentInstrument))); // Return statement
        }

    }
}
