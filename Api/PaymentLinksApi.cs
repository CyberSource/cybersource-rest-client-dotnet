/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;
using AuthenticationSdk.core;
using CyberSource.Utilities;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentLinksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Payment Link
        /// </summary>
        /// <remarks>
        /// Create a new payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>PblPaymentLinksPost201Response</returns>
        PblPaymentLinksPost201Response CreatePaymentLink (CreatePaymentLinkRequest createPaymentLinkRequest);

        /// <summary>
        /// Create a Payment Link
        /// </summary>
        /// <remarks>
        /// Create a new payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>ApiResponse of PblPaymentLinksPost201Response</returns>
        ApiResponse<PblPaymentLinksPost201Response> CreatePaymentLinkWithHttpInfo (CreatePaymentLinkRequest createPaymentLinkRequest);
        /// <summary>
        /// Get a List of Payment Links
        /// </summary>
        /// <remarks>
        /// Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>PblPaymentLinksAllGet200Response</returns>
        PblPaymentLinksAllGet200Response GetAllPaymentLinks (int? offset, int? limit, string status = null);

        /// <summary>
        /// Get a List of Payment Links
        /// </summary>
        /// <remarks>
        /// Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>ApiResponse of PblPaymentLinksAllGet200Response</returns>
        ApiResponse<PblPaymentLinksAllGet200Response> GetAllPaymentLinksWithHttpInfo (int? offset, int? limit, string status = null);
        /// <summary>
        /// Get Payment Link Details
        /// </summary>
        /// <remarks>
        /// You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>PblPaymentLinksGet200Response</returns>
        PblPaymentLinksGet200Response GetPaymentLink (string id);

        /// <summary>
        /// Get Payment Link Details
        /// </summary>
        /// <remarks>
        /// You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>ApiResponse of PblPaymentLinksGet200Response</returns>
        ApiResponse<PblPaymentLinksGet200Response> GetPaymentLinkWithHttpInfo (string id);
        /// <summary>
        /// Update a Payment Link
        /// </summary>
        /// <remarks>
        /// You can update all information except the payment link number until any payment is received for a payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>PblPaymentLinksPost201Response</returns>
        PblPaymentLinksPost201Response UpdatePaymentLink (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest);

        /// <summary>
        /// Update a Payment Link
        /// </summary>
        /// <remarks>
        /// You can update all information except the payment link number until any payment is received for a payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>ApiResponse of PblPaymentLinksPost201Response</returns>
        ApiResponse<PblPaymentLinksPost201Response> UpdatePaymentLinkWithHttpInfo (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Payment Link
        /// </summary>
        /// <remarks>
        /// Create a new payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>Task of PblPaymentLinksPost201Response</returns>
        System.Threading.Tasks.Task<PblPaymentLinksPost201Response> CreatePaymentLinkAsync (CreatePaymentLinkRequest createPaymentLinkRequest);

        /// <summary>
        /// Create a Payment Link
        /// </summary>
        /// <remarks>
        /// Create a new payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>Task of ApiResponse (PblPaymentLinksPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksPost201Response>> CreatePaymentLinkAsyncWithHttpInfo (CreatePaymentLinkRequest createPaymentLinkRequest);
        /// <summary>
        /// Get a List of Payment Links
        /// </summary>
        /// <remarks>
        /// Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>Task of PblPaymentLinksAllGet200Response</returns>
        System.Threading.Tasks.Task<PblPaymentLinksAllGet200Response> GetAllPaymentLinksAsync (int? offset, int? limit, string status = null);

        /// <summary>
        /// Get a List of Payment Links
        /// </summary>
        /// <remarks>
        /// Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>Task of ApiResponse (PblPaymentLinksAllGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksAllGet200Response>> GetAllPaymentLinksAsyncWithHttpInfo (int? offset, int? limit, string status = null);
        /// <summary>
        /// Get Payment Link Details
        /// </summary>
        /// <remarks>
        /// You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>Task of PblPaymentLinksGet200Response</returns>
        System.Threading.Tasks.Task<PblPaymentLinksGet200Response> GetPaymentLinkAsync (string id);

        /// <summary>
        /// Get Payment Link Details
        /// </summary>
        /// <remarks>
        /// You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>Task of ApiResponse (PblPaymentLinksGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksGet200Response>> GetPaymentLinkAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a Payment Link
        /// </summary>
        /// <remarks>
        /// You can update all information except the payment link number until any payment is received for a payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>Task of PblPaymentLinksPost201Response</returns>
        System.Threading.Tasks.Task<PblPaymentLinksPost201Response> UpdatePaymentLinkAsync (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest);

        /// <summary>
        /// Update a Payment Link
        /// </summary>
        /// <remarks>
        /// You can update all information except the payment link number until any payment is received for a payment link.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>Task of ApiResponse (PblPaymentLinksPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksPost201Response>> UpdatePaymentLinkAsyncWithHttpInfo (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentLinksApi : IPaymentLinksApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentLinksApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLinksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentLinksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Create a Payment Link Create a new payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>PblPaymentLinksPost201Response</returns>
        public PblPaymentLinksPost201Response CreatePaymentLink (CreatePaymentLinkRequest createPaymentLinkRequest)
        {
            logger.Debug("CALLING API \"CreatePaymentLink\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksPost201Response> localVarResponse = CreatePaymentLinkWithHttpInfo(createPaymentLinkRequest);
            logger.Debug("CALLING API \"CreatePaymentLink\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Payment Link Create a new payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>ApiResponse of PblPaymentLinksPost201Response</returns>
        public ApiResponse< PblPaymentLinksPost201Response > CreatePaymentLinkWithHttpInfo (CreatePaymentLinkRequest createPaymentLinkRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createPaymentLinkRequest' is set
            if (createPaymentLinkRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createPaymentLinkRequest' when calling PaymentLinksApi->CreatePaymentLink");
                throw new ApiException(400, "Missing required parameter 'createPaymentLinkRequest' when calling PaymentLinksApi->CreatePaymentLink");
            }

            var localVarPath = $"/ipl/v2/payment-links";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createPaymentLinkRequest != null && createPaymentLinkRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createPaymentLinkRequest = (CreatePaymentLinkRequest)sdkTracker.InsertDeveloperIdTracker(createPaymentLinkRequest, createPaymentLinkRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(createPaymentLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPaymentLinkRequest; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "CreatePaymentLink,CreatePaymentLinkAsync,CreatePaymentLinkWithHttpInfo,CreatePaymentLinkAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentLink", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksPost201Response))); // Return statement
        }

        /// <summary>
        /// Create a Payment Link Create a new payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>Task of PblPaymentLinksPost201Response</returns>
        public async System.Threading.Tasks.Task<PblPaymentLinksPost201Response> CreatePaymentLinkAsync (CreatePaymentLinkRequest createPaymentLinkRequest)
        {
            logger.Debug("CALLING API \"CreatePaymentLinkAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksPost201Response> localVarResponse = await CreatePaymentLinkAsyncWithHttpInfo(createPaymentLinkRequest);
            logger.Debug("CALLING API \"CreatePaymentLinkAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Payment Link Create a new payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPaymentLinkRequest"></param>
        /// <returns>Task of ApiResponse (PblPaymentLinksPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksPost201Response>> CreatePaymentLinkAsyncWithHttpInfo (CreatePaymentLinkRequest createPaymentLinkRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'createPaymentLinkRequest' is set
            if (createPaymentLinkRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'createPaymentLinkRequest' when calling PaymentLinksApi->CreatePaymentLink");
                throw new ApiException(400, "Missing required parameter 'createPaymentLinkRequest' when calling PaymentLinksApi->CreatePaymentLink");
            }

            var localVarPath = $"/ipl/v2/payment-links";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createPaymentLinkRequest != null && createPaymentLinkRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                createPaymentLinkRequest = (CreatePaymentLinkRequest)sdkTracker.InsertDeveloperIdTracker(createPaymentLinkRequest, createPaymentLinkRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(createPaymentLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPaymentLinkRequest; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "CreatePaymentLink,CreatePaymentLinkAsync,CreatePaymentLinkWithHttpInfo,CreatePaymentLinkAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentLink", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksPost201Response))); // Return statement
        }
        /// <summary>
        /// Get a List of Payment Links Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>PblPaymentLinksAllGet200Response</returns>
        public PblPaymentLinksAllGet200Response GetAllPaymentLinks (int? offset, int? limit, string status = null)
        {
            logger.Debug("CALLING API \"GetAllPaymentLinks\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksAllGet200Response> localVarResponse = GetAllPaymentLinksWithHttpInfo(offset, limit, status);
            logger.Debug("CALLING API \"GetAllPaymentLinks\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a List of Payment Links Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>ApiResponse of PblPaymentLinksAllGet200Response</returns>
        public ApiResponse< PblPaymentLinksAllGet200Response > GetAllPaymentLinksWithHttpInfo (int? offset, int? limit, string status = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'offset' is set
            if (offset == null)
            {
                logger.Error("ApiException : Missing required parameter 'offset' when calling PaymentLinksApi->GetAllPaymentLinks");
                throw new ApiException(400, "Missing required parameter 'offset' when calling PaymentLinksApi->GetAllPaymentLinks");
            }
            // verify the required parameter 'limit' is set
            if (limit == null)
            {
                logger.Error("ApiException : Missing required parameter 'limit' when calling PaymentLinksApi->GetAllPaymentLinks");
                throw new ApiException(400, "Missing required parameter 'limit' when calling PaymentLinksApi->GetAllPaymentLinks");
            }

            var localVarPath = $"/ipl/v2/payment-links";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetAllPaymentLinks,GetAllPaymentLinksAsync,GetAllPaymentLinksWithHttpInfo,GetAllPaymentLinksAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPaymentLinks", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksAllGet200Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksAllGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksAllGet200Response))); // Return statement
        }

        /// <summary>
        /// Get a List of Payment Links Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>Task of PblPaymentLinksAllGet200Response</returns>
        public async System.Threading.Tasks.Task<PblPaymentLinksAllGet200Response> GetAllPaymentLinksAsync (int? offset, int? limit, string status = null)
        {
            logger.Debug("CALLING API \"GetAllPaymentLinksAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksAllGet200Response> localVarResponse = await GetAllPaymentLinksAsyncWithHttpInfo(offset, limit, status);
            logger.Debug("CALLING API \"GetAllPaymentLinksAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a List of Payment Links Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Page offset number.</param>
        /// <param name="limit">Maximum number of items you would like returned.   Maximum limit: 1000 </param>
        /// <param name="status">The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE  (optional)</param>
        /// <returns>Task of ApiResponse (PblPaymentLinksAllGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksAllGet200Response>> GetAllPaymentLinksAsyncWithHttpInfo (int? offset, int? limit, string status = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'offset' is set
            if (offset == null)
            {
                logger.Error("ApiException : Missing required parameter 'offset' when calling PaymentLinksApi->GetAllPaymentLinks");
                throw new ApiException(400, "Missing required parameter 'offset' when calling PaymentLinksApi->GetAllPaymentLinks");
            }
            // verify the required parameter 'limit' is set
            if (limit == null)
            {
                logger.Error("ApiException : Missing required parameter 'limit' when calling PaymentLinksApi->GetAllPaymentLinks");
                throw new ApiException(400, "Missing required parameter 'limit' when calling PaymentLinksApi->GetAllPaymentLinks");
            }

            var localVarPath = $"/ipl/v2/payment-links";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (offset != null)
            {
                localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            }
            if (limit != null)
            {
                localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            }
            if (status != null)
            {
                localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetAllPaymentLinks,GetAllPaymentLinksAsync,GetAllPaymentLinksWithHttpInfo,GetAllPaymentLinksAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPaymentLinks", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksAllGet200Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksAllGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksAllGet200Response))); // Return statement
        }
        /// <summary>
        /// Get Payment Link Details You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>PblPaymentLinksGet200Response</returns>
        public PblPaymentLinksGet200Response GetPaymentLink (string id)
        {
            logger.Debug("CALLING API \"GetPaymentLink\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksGet200Response> localVarResponse = GetPaymentLinkWithHttpInfo(id);
            logger.Debug("CALLING API \"GetPaymentLink\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Link Details You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>ApiResponse of PblPaymentLinksGet200Response</returns>
        public ApiResponse< PblPaymentLinksGet200Response > GetPaymentLinkWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentLinksApi->GetPaymentLink");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentLinksApi->GetPaymentLink");
            }

            var localVarPath = $"/ipl/v2/payment-links/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetPaymentLink,GetPaymentLinkAsync,GetPaymentLinkWithHttpInfo,GetPaymentLinkAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentLink", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksGet200Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksGet200Response))); // Return statement
        }

        /// <summary>
        /// Get Payment Link Details You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>Task of PblPaymentLinksGet200Response</returns>
        public async System.Threading.Tasks.Task<PblPaymentLinksGet200Response> GetPaymentLinkAsync (string id)
        {
            logger.Debug("CALLING API \"GetPaymentLinkAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksGet200Response> localVarResponse = await GetPaymentLinkAsyncWithHttpInfo(id);
            logger.Debug("CALLING API \"GetPaymentLinkAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payment Link Details You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <returns>Task of ApiResponse (PblPaymentLinksGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksGet200Response>> GetPaymentLinkAsyncWithHttpInfo (string id)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentLinksApi->GetPaymentLink");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentLinksApi->GetPaymentLink");
            }

            var localVarPath = $"/ipl/v2/payment-links/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetPaymentLink,GetPaymentLinkAsync,GetPaymentLinkWithHttpInfo,GetPaymentLinkAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentLink", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksGet200Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksGet200Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksGet200Response))); // Return statement
        }
        /// <summary>
        /// Update a Payment Link You can update all information except the payment link number until any payment is received for a payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>PblPaymentLinksPost201Response</returns>
        public PblPaymentLinksPost201Response UpdatePaymentLink (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest)
        {
            logger.Debug("CALLING API \"UpdatePaymentLink\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksPost201Response> localVarResponse = UpdatePaymentLinkWithHttpInfo(id, updatePaymentLinkRequest);
            logger.Debug("CALLING API \"UpdatePaymentLink\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Payment Link You can update all information except the payment link number until any payment is received for a payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>ApiResponse of PblPaymentLinksPost201Response</returns>
        public ApiResponse< PblPaymentLinksPost201Response > UpdatePaymentLinkWithHttpInfo (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentLinksApi->UpdatePaymentLink");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentLinksApi->UpdatePaymentLink");
            }
            // verify the required parameter 'updatePaymentLinkRequest' is set
            if (updatePaymentLinkRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'updatePaymentLinkRequest' when calling PaymentLinksApi->UpdatePaymentLink");
                throw new ApiException(400, "Missing required parameter 'updatePaymentLinkRequest' when calling PaymentLinksApi->UpdatePaymentLink");
            }

            var localVarPath = $"/ipl/v2/payment-links/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updatePaymentLinkRequest != null && updatePaymentLinkRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updatePaymentLinkRequest = (UpdatePaymentLinkRequest)sdkTracker.InsertDeveloperIdTracker(updatePaymentLinkRequest, updatePaymentLinkRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(updatePaymentLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePaymentLinkRequest; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "UpdatePaymentLink,UpdatePaymentLinkAsync,UpdatePaymentLinkWithHttpInfo,UpdatePaymentLinkAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentLink", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksPost201Response))); // Return statement
        }

        /// <summary>
        /// Update a Payment Link You can update all information except the payment link number until any payment is received for a payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>Task of PblPaymentLinksPost201Response</returns>
        public async System.Threading.Tasks.Task<PblPaymentLinksPost201Response> UpdatePaymentLinkAsync (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest)
        {
            logger.Debug("CALLING API \"UpdatePaymentLinkAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<PblPaymentLinksPost201Response> localVarResponse = await UpdatePaymentLinkAsyncWithHttpInfo(id, updatePaymentLinkRequest);
            logger.Debug("CALLING API \"UpdatePaymentLinkAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Payment Link You can update all information except the payment link number until any payment is received for a payment link.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The purchase number.</param>
        /// <param name="updatePaymentLinkRequest">Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.</param>
        /// <returns>Task of ApiResponse (PblPaymentLinksPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PblPaymentLinksPost201Response>> UpdatePaymentLinkAsyncWithHttpInfo (string id, UpdatePaymentLinkRequest updatePaymentLinkRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'id' is set
            if (id == null)
            {
                logger.Error("ApiException : Missing required parameter 'id' when calling PaymentLinksApi->UpdatePaymentLink");
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentLinksApi->UpdatePaymentLink");
            }
            // verify the required parameter 'updatePaymentLinkRequest' is set
            if (updatePaymentLinkRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'updatePaymentLinkRequest' when calling PaymentLinksApi->UpdatePaymentLink");
                throw new ApiException(400, "Missing required parameter 'updatePaymentLinkRequest' when calling PaymentLinksApi->UpdatePaymentLink");
            }

            var localVarPath = $"/ipl/v2/payment-links/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json",
                "application/hal+json",
                "application/json;charset=utf-8",
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updatePaymentLinkRequest != null && updatePaymentLinkRequest.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updatePaymentLinkRequest = (UpdatePaymentLinkRequest)sdkTracker.InsertDeveloperIdTracker(updatePaymentLinkRequest, updatePaymentLinkRequest.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(updatePaymentLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePaymentLinkRequest; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "UpdatePaymentLink,UpdatePaymentLinkAsync,UpdatePaymentLinkWithHttpInfo,UpdatePaymentLinkAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentLink", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<PblPaymentLinksPost201Response>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (PblPaymentLinksPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PblPaymentLinksPost201Response))); // Return statement
        }
    }
}
