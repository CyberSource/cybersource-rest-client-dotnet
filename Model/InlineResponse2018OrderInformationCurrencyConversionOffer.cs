/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2018OrderInformationCurrencyConversionOffer
    /// </summary>
    [DataContract]
    public partial class InlineResponse2018OrderInformationCurrencyConversionOffer :  IEquatable<InlineResponse2018OrderInformationCurrencyConversionOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2018OrderInformationCurrencyConversionOffer" /> class.
        /// </summary>
        /// <param name="OriginalAmount">The amount of the sale in the merchant&#39;s currency.  For DCC this should be the same value as the request. For MCP will be 1 major unit of the merchant&#39;s base currency. .</param>
        /// <param name="OriginalCurrency">Currency of the transaction in the merchant&#39;s currency.  For DCC this should be the same value as the request.  For MCP will be the merchant&#39;s base currency as configured on the currency conversion provider&#39;s system. Use three-character alphabetic [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) .</param>
        /// <param name="Amount">The offer amount, calculated using the originalAmount and the exchangeRate. For DCC this is the amount in the card issuer&#39;s currency. .</param>
        /// <param name="Currency">Currency of the offer. For DCC this is the card&#39;s issuers currency. Use three-character alphabetic  [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) .</param>
        /// <param name="ExchangeRate">The exchange rate of the offer from 1 major unit of the sale currency including margin. This will be printed on the receipt. For example, if a USD consumer is purchasing in EUR, this field should return the amount of 1 EUR in USD including mark-up. The receipt will contain the following: &#x60;EUR 1.00 &#x3D; USD 1.09998900010999&#x60; - where 1.09998900010999 is the value returned in this field. .</param>
        /// <param name="ExchangeRateInverted">An inverted exchange rate is the base currency amount divided by the converted currency amount. Ex. If a USD customer is purchasing in EUR, this field should return the value of USD divided by EUR. .</param>
        /// <param name="MarginRate">The margin between the offer exchange rate and wholesale rates, i.e. the mark up. Expressed as a percentage of 100, e.g. 3.75 .</param>
        /// <param name="RateSource">The source of the rate (excluding mark up). Optional field. .</param>
        /// <param name="ExchangeRateTimeUtc">The date and time of exchange rate in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; **Example** &#x60;2023-05-17T23:47:57Z&#x60; equals May 17, 2023, at 23:47:57 (11:47:57 PM). The &#x60;T&#x60; separates the date and the time. The &#x60;Z&#x60; indicates UTC. .</param>
        /// <param name="ExchangeRateExpirationTimeUtc">The expiration time of the exchange rate in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; .</param>
        /// <param name="RateId">A unique MCP rate identifier. .</param>
        public InlineResponse2018OrderInformationCurrencyConversionOffer(string OriginalAmount = default(string), string OriginalCurrency = default(string), string Amount = default(string), string Currency = default(string), string ExchangeRate = default(string), bool? ExchangeRateInverted = default(bool?), string MarginRate = default(string), string RateSource = default(string), string ExchangeRateTimeUtc = default(string), string ExchangeRateExpirationTimeUtc = default(string), string RateId = default(string))
        {
            this.OriginalAmount = OriginalAmount;
            this.OriginalCurrency = OriginalCurrency;
            this.Amount = Amount;
            this.Currency = Currency;
            this.ExchangeRate = ExchangeRate;
            this.ExchangeRateInverted = ExchangeRateInverted;
            this.MarginRate = MarginRate;
            this.RateSource = RateSource;
            this.ExchangeRateTimeUtc = ExchangeRateTimeUtc;
            this.ExchangeRateExpirationTimeUtc = ExchangeRateExpirationTimeUtc;
            this.RateId = RateId;
        }
        
        /// <summary>
        /// The amount of the sale in the merchant&#39;s currency.  For DCC this should be the same value as the request. For MCP will be 1 major unit of the merchant&#39;s base currency. 
        /// </summary>
        /// <value>The amount of the sale in the merchant&#39;s currency.  For DCC this should be the same value as the request. For MCP will be 1 major unit of the merchant&#39;s base currency. </value>
        [DataMember(Name="originalAmount", EmitDefaultValue=false)]
        public string OriginalAmount { get; set; }

        /// <summary>
        /// Currency of the transaction in the merchant&#39;s currency.  For DCC this should be the same value as the request.  For MCP will be the merchant&#39;s base currency as configured on the currency conversion provider&#39;s system. Use three-character alphabetic [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) 
        /// </summary>
        /// <value>Currency of the transaction in the merchant&#39;s currency.  For DCC this should be the same value as the request.  For MCP will be the merchant&#39;s base currency as configured on the currency conversion provider&#39;s system. Use three-character alphabetic [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) </value>
        [DataMember(Name="originalCurrency", EmitDefaultValue=false)]
        public string OriginalCurrency { get; set; }

        /// <summary>
        /// The offer amount, calculated using the originalAmount and the exchangeRate. For DCC this is the amount in the card issuer&#39;s currency. 
        /// </summary>
        /// <value>The offer amount, calculated using the originalAmount and the exchangeRate. For DCC this is the amount in the card issuer&#39;s currency. </value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Currency of the offer. For DCC this is the card&#39;s issuers currency. Use three-character alphabetic  [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) 
        /// </summary>
        /// <value>Currency of the offer. For DCC this is the card&#39;s issuers currency. Use three-character alphabetic  [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// The exchange rate of the offer from 1 major unit of the sale currency including margin. This will be printed on the receipt. For example, if a USD consumer is purchasing in EUR, this field should return the amount of 1 EUR in USD including mark-up. The receipt will contain the following: &#x60;EUR 1.00 &#x3D; USD 1.09998900010999&#x60; - where 1.09998900010999 is the value returned in this field. 
        /// </summary>
        /// <value>The exchange rate of the offer from 1 major unit of the sale currency including margin. This will be printed on the receipt. For example, if a USD consumer is purchasing in EUR, this field should return the amount of 1 EUR in USD including mark-up. The receipt will contain the following: &#x60;EUR 1.00 &#x3D; USD 1.09998900010999&#x60; - where 1.09998900010999 is the value returned in this field. </value>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public string ExchangeRate { get; set; }

        /// <summary>
        /// An inverted exchange rate is the base currency amount divided by the converted currency amount. Ex. If a USD customer is purchasing in EUR, this field should return the value of USD divided by EUR. 
        /// </summary>
        /// <value>An inverted exchange rate is the base currency amount divided by the converted currency amount. Ex. If a USD customer is purchasing in EUR, this field should return the value of USD divided by EUR. </value>
        [DataMember(Name="exchangeRateInverted", EmitDefaultValue=false)]
        public bool? ExchangeRateInverted { get; set; }

        /// <summary>
        /// The margin between the offer exchange rate and wholesale rates, i.e. the mark up. Expressed as a percentage of 100, e.g. 3.75 
        /// </summary>
        /// <value>The margin between the offer exchange rate and wholesale rates, i.e. the mark up. Expressed as a percentage of 100, e.g. 3.75 </value>
        [DataMember(Name="marginRate", EmitDefaultValue=false)]
        public string MarginRate { get; set; }

        /// <summary>
        /// The source of the rate (excluding mark up). Optional field. 
        /// </summary>
        /// <value>The source of the rate (excluding mark up). Optional field. </value>
        [DataMember(Name="rateSource", EmitDefaultValue=false)]
        public string RateSource { get; set; }

        /// <summary>
        /// The date and time of exchange rate in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; **Example** &#x60;2023-05-17T23:47:57Z&#x60; equals May 17, 2023, at 23:47:57 (11:47:57 PM). The &#x60;T&#x60; separates the date and the time. The &#x60;Z&#x60; indicates UTC. 
        /// </summary>
        /// <value>The date and time of exchange rate in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; **Example** &#x60;2023-05-17T23:47:57Z&#x60; equals May 17, 2023, at 23:47:57 (11:47:57 PM). The &#x60;T&#x60; separates the date and the time. The &#x60;Z&#x60; indicates UTC. </value>
        [DataMember(Name="exchangeRateTimeUtc", EmitDefaultValue=false)]
        public string ExchangeRateTimeUtc { get; set; }

        /// <summary>
        /// The expiration time of the exchange rate in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; 
        /// </summary>
        /// <value>The expiration time of the exchange rate in UTC. Format: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; </value>
        [DataMember(Name="exchangeRateExpirationTimeUtc", EmitDefaultValue=false)]
        public string ExchangeRateExpirationTimeUtc { get; set; }

        /// <summary>
        /// A unique MCP rate identifier. 
        /// </summary>
        /// <value>A unique MCP rate identifier. </value>
        [DataMember(Name="rateId", EmitDefaultValue=false)]
        public string RateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2018OrderInformationCurrencyConversionOffer {\n");
            if (OriginalAmount != null) sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            if (OriginalCurrency != null) sb.Append("  OriginalCurrency: ").Append(OriginalCurrency).Append("\n");
            if (Amount != null) sb.Append("  Amount: ").Append(Amount).Append("\n");
            if (Currency != null) sb.Append("  Currency: ").Append(Currency).Append("\n");
            if (ExchangeRate != null) sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            if (ExchangeRateInverted != null) sb.Append("  ExchangeRateInverted: ").Append(ExchangeRateInverted).Append("\n");
            if (MarginRate != null) sb.Append("  MarginRate: ").Append(MarginRate).Append("\n");
            if (RateSource != null) sb.Append("  RateSource: ").Append(RateSource).Append("\n");
            if (ExchangeRateTimeUtc != null) sb.Append("  ExchangeRateTimeUtc: ").Append(ExchangeRateTimeUtc).Append("\n");
            if (ExchangeRateExpirationTimeUtc != null) sb.Append("  ExchangeRateExpirationTimeUtc: ").Append(ExchangeRateExpirationTimeUtc).Append("\n");
            if (RateId != null) sb.Append("  RateId: ").Append(RateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2018OrderInformationCurrencyConversionOffer);
        }

        /// <summary>
        /// Returns true if InlineResponse2018OrderInformationCurrencyConversionOffer instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2018OrderInformationCurrencyConversionOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2018OrderInformationCurrencyConversionOffer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OriginalAmount == other.OriginalAmount ||
                    this.OriginalAmount != null &&
                    this.OriginalAmount.Equals(other.OriginalAmount)
                ) && 
                (
                    this.OriginalCurrency == other.OriginalCurrency ||
                    this.OriginalCurrency != null &&
                    this.OriginalCurrency.Equals(other.OriginalCurrency)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.ExchangeRate == other.ExchangeRate ||
                    this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(other.ExchangeRate)
                ) && 
                (
                    this.ExchangeRateInverted == other.ExchangeRateInverted ||
                    this.ExchangeRateInverted != null &&
                    this.ExchangeRateInverted.Equals(other.ExchangeRateInverted)
                ) && 
                (
                    this.MarginRate == other.MarginRate ||
                    this.MarginRate != null &&
                    this.MarginRate.Equals(other.MarginRate)
                ) && 
                (
                    this.RateSource == other.RateSource ||
                    this.RateSource != null &&
                    this.RateSource.Equals(other.RateSource)
                ) && 
                (
                    this.ExchangeRateTimeUtc == other.ExchangeRateTimeUtc ||
                    this.ExchangeRateTimeUtc != null &&
                    this.ExchangeRateTimeUtc.Equals(other.ExchangeRateTimeUtc)
                ) && 
                (
                    this.ExchangeRateExpirationTimeUtc == other.ExchangeRateExpirationTimeUtc ||
                    this.ExchangeRateExpirationTimeUtc != null &&
                    this.ExchangeRateExpirationTimeUtc.Equals(other.ExchangeRateExpirationTimeUtc)
                ) && 
                (
                    this.RateId == other.RateId ||
                    this.RateId != null &&
                    this.RateId.Equals(other.RateId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OriginalAmount != null)
                    hash = hash * 59 + this.OriginalAmount.GetHashCode();
                if (this.OriginalCurrency != null)
                    hash = hash * 59 + this.OriginalCurrency.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.ExchangeRate != null)
                    hash = hash * 59 + this.ExchangeRate.GetHashCode();
                if (this.ExchangeRateInverted != null)
                    hash = hash * 59 + this.ExchangeRateInverted.GetHashCode();
                if (this.MarginRate != null)
                    hash = hash * 59 + this.MarginRate.GetHashCode();
                if (this.RateSource != null)
                    hash = hash * 59 + this.RateSource.GetHashCode();
                if (this.ExchangeRateTimeUtc != null)
                    hash = hash * 59 + this.ExchangeRateTimeUtc.GetHashCode();
                if (this.ExchangeRateExpirationTimeUtc != null)
                    hash = hash * 59 + this.ExchangeRateExpirationTimeUtc.GetHashCode();
                if (this.RateId != null)
                    hash = hash * 59 + this.RateId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
