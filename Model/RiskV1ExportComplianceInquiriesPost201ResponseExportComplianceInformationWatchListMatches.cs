/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches
    /// </summary>
    [DataContract]
    public partial class RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches :  IEquatable<RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches" /> class.
        /// </summary>
        /// <param name="Addresses">Address found on the list specified in export_matchN_list for the entity (name and address) in the request. .</param>
        /// <param name="SanctionList">List on which the first Denied Parties List check match appears. For a list of codes, see \&quot;Denied Parties List Check Codes,\&quot; page 56. .</param>
        /// <param name="Aliases">Name found on the list specified in export_matchN_list for the entity (name and address) in the request. .</param>
        /// <param name="Programs">Sub-lists matched by the order data. List members are separated by carets (^)..</param>
        public RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches(List<string> Addresses = default(List<string>), string SanctionList = default(string), List<string> Aliases = default(List<string>), List<string> Programs = default(List<string>))
        {
            this.Addresses = Addresses;
            this.SanctionList = SanctionList;
            this.Aliases = Aliases;
            this.Programs = Programs;
        }
        
        /// <summary>
        /// Address found on the list specified in export_matchN_list for the entity (name and address) in the request. 
        /// </summary>
        /// <value>Address found on the list specified in export_matchN_list for the entity (name and address) in the request. </value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// List on which the first Denied Parties List check match appears. For a list of codes, see \&quot;Denied Parties List Check Codes,\&quot; page 56. 
        /// </summary>
        /// <value>List on which the first Denied Parties List check match appears. For a list of codes, see \&quot;Denied Parties List Check Codes,\&quot; page 56. </value>
        [DataMember(Name="sanctionList", EmitDefaultValue=false)]
        public string SanctionList { get; set; }

        /// <summary>
        /// Name found on the list specified in export_matchN_list for the entity (name and address) in the request. 
        /// </summary>
        /// <value>Name found on the list specified in export_matchN_list for the entity (name and address) in the request. </value>
        [DataMember(Name="aliases", EmitDefaultValue=false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        /// Sub-lists matched by the order data. List members are separated by carets (^).
        /// </summary>
        /// <value>Sub-lists matched by the order data. List members are separated by carets (^).</value>
        [DataMember(Name="programs", EmitDefaultValue=false)]
        public List<string> Programs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  SanctionList: ").Append(SanctionList).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  Programs: ").Append(Programs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches);
        }

        /// <summary>
        /// Returns true if RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Addresses == other.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    this.SanctionList == other.SanctionList ||
                    this.SanctionList != null &&
                    this.SanctionList.Equals(other.SanctionList)
                ) && 
                (
                    this.Aliases == other.Aliases ||
                    this.Aliases != null &&
                    this.Aliases.SequenceEqual(other.Aliases)
                ) && 
                (
                    this.Programs == other.Programs ||
                    this.Programs != null &&
                    this.Programs.SequenceEqual(other.Programs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Addresses != null)
                    hash = hash * 59 + this.Addresses.GetHashCode();
                if (this.SanctionList != null)
                    hash = hash * 59 + this.SanctionList.GetHashCode();
                if (this.Aliases != null)
                    hash = hash * 59 + this.Aliases.GetHashCode();
                if (this.Programs != null)
                    hash = hash * 59 + this.Programs.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
