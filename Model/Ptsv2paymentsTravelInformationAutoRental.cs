/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsTravelInformationAutoRental
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsTravelInformationAutoRental :  IEquatable<Ptsv2paymentsTravelInformationAutoRental>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsTravelInformationAutoRental" /> class.
        /// </summary>
        /// <param name="NoShowIndicator">No Show Indicator provides an indicator noting that the individual did not show up after making a reservation for a vehicle. Possible values: - true - false .</param>
        /// <param name="CustomerName">Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| .</param>
        /// <param name="VehicleClass">Classification of the rented auto.  **NOTE** For VISA, this is a 2-byte optional code.  Valid values for American Express &amp; MasterCard:  |American Express |MasterCard |Description| |- -- |- -- |- -- | | 0001| 0001| Mini| | 0002| 0002| Subcompact| | 0003| 0003| Economy| | 0004| 0004| Compact| | 0005| 0005| Midsize| | 0006| 0006| Intermediate| | 0007| 0007| Standard| | 0008| 0008| Fulll size| | 0009| 0009| Luxury| | 0010| 0010| Premium| | 0011| 0011| Minivan| | 0012| 0012| 12-passenger van| | 0013| 0013| Moving van| | 0014| 0014| 15-passenger van| | 0015| 0015| Cargo van| | 0016| 0016| 12-foot truck| | 0017| 0017| 20-foot truck| | 0018| 0018| 24-foot truck| | 0019| 0019| 26-foot truck| | 0020| 0020| Moped| | 0021| 0021| Stretch| | 0022| 0022| Regular| | 0023| 0023| Unique| | 0024| 0024| Exotic| | 0025| 0025| Small/medium truck| | 0026| 0026| Large truck| | 0027| 0027| Small SUV| | 0028| 0028| Medium SUV| | 0029| 0029| Large SUV| | 0030| 0030| Exotic SUV| | 9999| 9999| Miscellaneous|  Additional Values allowed **only** for &#x60;American Express&#x60;:  |American Express|MasterCard|Description| |- -- |- -- |- -- | | 0031| NA| Four Wheel Drive| | 0032| NA| Special| | 0099| NA| Taxi| .</param>
        /// <param name="DistanceTravelled">Total number of miles driven by the customer. This field is supported only for MasterCard and American Express. .</param>
        /// <param name="DistanceUnit">Miles/Kilometers Indicator shows whether the “miles” fields are expressed in miles or kilometers.  Allowed values: - &#x60;K&#x60; - Kilometers - &#x60;M&#x60; - Miles .</param>
        /// <param name="ReturnDateTime">Date/time the auto was returned to the rental agency. Format: &#x60;&#x60;yyyy-MM-dd HH-mm-ss z&#x60;&#x60; This field is supported for Visa, MasterCard, and American Express. .</param>
        /// <param name="RentalDateTime">Date/time the auto was picked up from the rental agency. Format: &#x60;yyyy-MM-dd HH-mm-ss z&#x60; This field is supported for Visa, MasterCard, and American Express. .</param>
        /// <param name="MaxFreeDistance">Maximum number of free miles or kilometers allowed to a customer for the duration of the auto rental agreement. This field is supported only for MasterCard and American Express. .</param>
        /// <param name="InsuranceIndicator">Used for MC and Discover  Valid values: - &#x60;true&#x60; - Yes (insurance was purchased) - &#x60;false&#x60; - No (insurance was not purchased) .</param>
        /// <param name="ProgramCode">Used to identify special circumstances applicable to the Card Transaction or Cardholder, such as \&quot;renter” or ”show”.  This code is &#x60;2 digit&#x60; value agreed by Merchant and processor. .</param>
        /// <param name="ReturnAddress">ReturnAddress.</param>
        /// <param name="RentalAddress">RentalAddress.</param>
        /// <param name="AgreementNumber">Auto rental agency’s agreement (invoice) number provided to the customer. It is used to trace any inquiries about transactions. This field is supported for Visa, MasterCard, and American Express. This Merchant-defined value, which may be composed of any combination of characters and/or numerals, may become part of the descriptive bill on the Cardmember&#39;s statement. .</param>
        /// <param name="OdometerReading">Odometer reading at time of vehicle rental. .</param>
        /// <param name="VehicleIdentificationNumber">This field contains a unique identifier assigned by the company to the vehicle. .</param>
        /// <param name="CompanyId">Corporate Identifier provides the unique identifier of the corporation or entity renting the vehicle:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| NA| 12| NA| NA| | Field Type| NA| AN| NA| NA| | M/O/C| NA| O| NA| NA| .</param>
        /// <param name="NumberOfAdditionalDrivers">The number of additional drivers included on the rental agreement not including the individual who signed the rental agreement. .</param>
        /// <param name="DriverAge">Age of the driver renting the vehicle. .</param>
        /// <param name="SpecialProgramCode">Program code used to identify special circumstances, such as “frequent renter” or “no show” status for the renter. Possible values: - &#x60;0&#x60;: not applicable (default) - &#x60;1&#x60;: frequent renter - &#x60;2&#x60;: no show  For authorizations, this field is supported only for Visa.  For captures, this field is supported for Visa, MasterCard, and American Express.  Code for special programs applicable to the Card Transaction or the Cardholder. .</param>
        /// <param name="VehicleMake">Make of the vehicle being rented (e.g., Chevrolet or Ford). .</param>
        /// <param name="VehicleModel">Model of the vehicle being rented (e.g., Cavalier or Focus). .</param>
        /// <param name="TimePeriod">Indicates the time period for which the vehicle rental rate applies (e.g., daily, weekly or monthly). Daily, Weekly and Monthly are valid values. .</param>
        /// <param name="CommodityCode">Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes. .</param>
        /// <param name="CustomerServicePhoneNumber">Customer service telephone number that is used to resolve questions or disputes. Include the area code, exchange, and number. This field is supported only for MasterCard and American Express. .</param>
        /// <param name="TaxDetails">TaxDetails.</param>
        /// <param name="InsuranceAmount">Insurance charges. Field is conditional and can include decimal point. .</param>
        /// <param name="OneWayDropOffAmount">Extra charges incurred for a one-way rental agreement for the auto. This field is supported only for Visa. .</param>
        /// <param name="AdjustedAmountIndicator">For **MasterCard** and **Discover**: Adjusted amount indicator code that indicates any miscellaneous charges incurred after the auto was returned. Possible values: - &#x60;A&#x60; - Drop-off charges - &#x60;B&#x60; - Delivery charges - &#x60;C&#x60; - Parking expenses - &#x60;D&#x60; - Extra hours - &#x60;E&#x60; - Violations - &#x60;X&#x60; - More than one of the above charges  For **American Express**: Audit indicator code that indicates any adjustment for mileage, fuel, auto damage, etc. made to a rental agreement and whether the cardholder was notified.  Possible value for the authorization service: - &#x60;A&#x60; (default): adjustment amount greater than 0 (zero)  Possible values for the capture service: - &#x60;X&#x60; - Multiple adjustments - &#x60;Y&#x60; - One adjustment only; Cardmember notified - &#x60;Z&#x60; - One adjustment only; Cardmember not notified. This value is used as the default if the request does not include this field and includes an adjustment amount greater than 0 (zero). This is an optional field. .</param>
        /// <param name="AdjustedAmount">Adjusted Amount indicates whether any miscellaneous charges were incurred after the vehicle was returned.  For authorizations, this field is supported only for American Express.  For captures, this field is supported only for MasterCard and American Express. **NOTE** For American Express, this field is required if the &#x60;travelInformation.autoRental.adjustedAmountIndicator&#x60; field is included in the request and has a value; otherwise, this field is optional.  For all other card types, this field is ignored. .</param>
        /// <param name="FuelCharges">Extra gasoline charges that extend beyond the basic rental agreement. This field is supported only for Visa. .</param>
        /// <param name="WeeklyRentalRate">Weekly Rental Amount provides the amount charged for a seven-day rental period. Field - Time Period needs to be populated with Weekly if this field is present .</param>
        /// <param name="DailyRentalRate">Daily auto rental rate charged. This field is supported only for MasterCard and American Express.  Field - Time Period needs to be populated with Daily if this field is present .</param>
        /// <param name="RatePerMile">Rate charged for each mile. This field is supported only for MasterCard and American Express. .</param>
        /// <param name="MileageCharge">Regular Mileage Charge provides the amount charged for regular miles traveled during vehicle rental. Two decimal places .</param>
        /// <param name="ExtraMileageCharge">Extra mileage charges that extend beyond the basic rental agreement. This field is supported only for Visa. .</param>
        /// <param name="LateFeeAmount">Extra charges related to a late return of the rented auto. This field is supported only for Visa. .</param>
        /// <param name="TowingCharge">(Towing Charges) provides the amount charged to tow the rental vehicle. .</param>
        /// <param name="ExtraCharge">(Extra Charges) provides the extra charges associated with the vehicle rental. .</param>
        /// <param name="GpsCharge">Amount charged for renting a Global Positioning Service (GPS). .</param>
        /// <param name="PhoneCharge">Additional charges incurred for phone usage included on the total bill. .</param>
        /// <param name="ParkingViolationCharge">Extra charges incurred due to a parking violation for the auto. This field is supported only for Visa. .</param>
        /// <param name="OtherCharges">Total amount charged for all other miscellaneous charges not previously defined. .</param>
        public Ptsv2paymentsTravelInformationAutoRental(bool? NoShowIndicator = default(bool?), string CustomerName = default(string), string VehicleClass = default(string), string DistanceTravelled = default(string), string DistanceUnit = default(string), string ReturnDateTime = default(string), string RentalDateTime = default(string), string MaxFreeDistance = default(string), bool? InsuranceIndicator = default(bool?), string ProgramCode = default(string), Ptsv2paymentsTravelInformationAutoRentalReturnAddress ReturnAddress = default(Ptsv2paymentsTravelInformationAutoRentalReturnAddress), Ptsv2paymentsTravelInformationAutoRentalRentalAddress RentalAddress = default(Ptsv2paymentsTravelInformationAutoRentalRentalAddress), string AgreementNumber = default(string), string OdometerReading = default(string), string VehicleIdentificationNumber = default(string), string CompanyId = default(string), string NumberOfAdditionalDrivers = default(string), string DriverAge = default(string), string SpecialProgramCode = default(string), string VehicleMake = default(string), string VehicleModel = default(string), string TimePeriod = default(string), string CommodityCode = default(string), string CustomerServicePhoneNumber = default(string), Ptsv2paymentsTravelInformationAutoRentalTaxDetails TaxDetails = default(Ptsv2paymentsTravelInformationAutoRentalTaxDetails), string InsuranceAmount = default(string), string OneWayDropOffAmount = default(string), string AdjustedAmountIndicator = default(string), string AdjustedAmount = default(string), string FuelCharges = default(string), string WeeklyRentalRate = default(string), string DailyRentalRate = default(string), string RatePerMile = default(string), string MileageCharge = default(string), string ExtraMileageCharge = default(string), string LateFeeAmount = default(string), string TowingCharge = default(string), string ExtraCharge = default(string), string GpsCharge = default(string), string PhoneCharge = default(string), string ParkingViolationCharge = default(string), string OtherCharges = default(string))
        {
            this.NoShowIndicator = NoShowIndicator;
            this.CustomerName = CustomerName;
            this.VehicleClass = VehicleClass;
            this.DistanceTravelled = DistanceTravelled;
            this.DistanceUnit = DistanceUnit;
            this.ReturnDateTime = ReturnDateTime;
            this.RentalDateTime = RentalDateTime;
            this.MaxFreeDistance = MaxFreeDistance;
            this.InsuranceIndicator = InsuranceIndicator;
            this.ProgramCode = ProgramCode;
            this.ReturnAddress = ReturnAddress;
            this.RentalAddress = RentalAddress;
            this.AgreementNumber = AgreementNumber;
            this.OdometerReading = OdometerReading;
            this.VehicleIdentificationNumber = VehicleIdentificationNumber;
            this.CompanyId = CompanyId;
            this.NumberOfAdditionalDrivers = NumberOfAdditionalDrivers;
            this.DriverAge = DriverAge;
            this.SpecialProgramCode = SpecialProgramCode;
            this.VehicleMake = VehicleMake;
            this.VehicleModel = VehicleModel;
            this.TimePeriod = TimePeriod;
            this.CommodityCode = CommodityCode;
            this.CustomerServicePhoneNumber = CustomerServicePhoneNumber;
            this.TaxDetails = TaxDetails;
            this.InsuranceAmount = InsuranceAmount;
            this.OneWayDropOffAmount = OneWayDropOffAmount;
            this.AdjustedAmountIndicator = AdjustedAmountIndicator;
            this.AdjustedAmount = AdjustedAmount;
            this.FuelCharges = FuelCharges;
            this.WeeklyRentalRate = WeeklyRentalRate;
            this.DailyRentalRate = DailyRentalRate;
            this.RatePerMile = RatePerMile;
            this.MileageCharge = MileageCharge;
            this.ExtraMileageCharge = ExtraMileageCharge;
            this.LateFeeAmount = LateFeeAmount;
            this.TowingCharge = TowingCharge;
            this.ExtraCharge = ExtraCharge;
            this.GpsCharge = GpsCharge;
            this.PhoneCharge = PhoneCharge;
            this.ParkingViolationCharge = ParkingViolationCharge;
            this.OtherCharges = OtherCharges;
        }
        
        /// <summary>
        /// No Show Indicator provides an indicator noting that the individual did not show up after making a reservation for a vehicle. Possible values: - true - false 
        /// </summary>
        /// <value>No Show Indicator provides an indicator noting that the individual did not show up after making a reservation for a vehicle. Possible values: - true - false </value>
        [DataMember(Name="noShowIndicator", EmitDefaultValue=false)]
        public bool? NoShowIndicator { get; set; }

        /// <summary>
        /// Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| 
        /// </summary>
        /// <value>Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| </value>
        [DataMember(Name="customerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Classification of the rented auto.  **NOTE** For VISA, this is a 2-byte optional code.  Valid values for American Express &amp; MasterCard:  |American Express |MasterCard |Description| |- -- |- -- |- -- | | 0001| 0001| Mini| | 0002| 0002| Subcompact| | 0003| 0003| Economy| | 0004| 0004| Compact| | 0005| 0005| Midsize| | 0006| 0006| Intermediate| | 0007| 0007| Standard| | 0008| 0008| Fulll size| | 0009| 0009| Luxury| | 0010| 0010| Premium| | 0011| 0011| Minivan| | 0012| 0012| 12-passenger van| | 0013| 0013| Moving van| | 0014| 0014| 15-passenger van| | 0015| 0015| Cargo van| | 0016| 0016| 12-foot truck| | 0017| 0017| 20-foot truck| | 0018| 0018| 24-foot truck| | 0019| 0019| 26-foot truck| | 0020| 0020| Moped| | 0021| 0021| Stretch| | 0022| 0022| Regular| | 0023| 0023| Unique| | 0024| 0024| Exotic| | 0025| 0025| Small/medium truck| | 0026| 0026| Large truck| | 0027| 0027| Small SUV| | 0028| 0028| Medium SUV| | 0029| 0029| Large SUV| | 0030| 0030| Exotic SUV| | 9999| 9999| Miscellaneous|  Additional Values allowed **only** for &#x60;American Express&#x60;:  |American Express|MasterCard|Description| |- -- |- -- |- -- | | 0031| NA| Four Wheel Drive| | 0032| NA| Special| | 0099| NA| Taxi| 
        /// </summary>
        /// <value>Classification of the rented auto.  **NOTE** For VISA, this is a 2-byte optional code.  Valid values for American Express &amp; MasterCard:  |American Express |MasterCard |Description| |- -- |- -- |- -- | | 0001| 0001| Mini| | 0002| 0002| Subcompact| | 0003| 0003| Economy| | 0004| 0004| Compact| | 0005| 0005| Midsize| | 0006| 0006| Intermediate| | 0007| 0007| Standard| | 0008| 0008| Fulll size| | 0009| 0009| Luxury| | 0010| 0010| Premium| | 0011| 0011| Minivan| | 0012| 0012| 12-passenger van| | 0013| 0013| Moving van| | 0014| 0014| 15-passenger van| | 0015| 0015| Cargo van| | 0016| 0016| 12-foot truck| | 0017| 0017| 20-foot truck| | 0018| 0018| 24-foot truck| | 0019| 0019| 26-foot truck| | 0020| 0020| Moped| | 0021| 0021| Stretch| | 0022| 0022| Regular| | 0023| 0023| Unique| | 0024| 0024| Exotic| | 0025| 0025| Small/medium truck| | 0026| 0026| Large truck| | 0027| 0027| Small SUV| | 0028| 0028| Medium SUV| | 0029| 0029| Large SUV| | 0030| 0030| Exotic SUV| | 9999| 9999| Miscellaneous|  Additional Values allowed **only** for &#x60;American Express&#x60;:  |American Express|MasterCard|Description| |- -- |- -- |- -- | | 0031| NA| Four Wheel Drive| | 0032| NA| Special| | 0099| NA| Taxi| </value>
        [DataMember(Name="vehicleClass", EmitDefaultValue=false)]
        public string VehicleClass { get; set; }

        /// <summary>
        /// Total number of miles driven by the customer. This field is supported only for MasterCard and American Express. 
        /// </summary>
        /// <value>Total number of miles driven by the customer. This field is supported only for MasterCard and American Express. </value>
        [DataMember(Name="distanceTravelled", EmitDefaultValue=false)]
        public string DistanceTravelled { get; set; }

        /// <summary>
        /// Miles/Kilometers Indicator shows whether the “miles” fields are expressed in miles or kilometers.  Allowed values: - &#x60;K&#x60; - Kilometers - &#x60;M&#x60; - Miles 
        /// </summary>
        /// <value>Miles/Kilometers Indicator shows whether the “miles” fields are expressed in miles or kilometers.  Allowed values: - &#x60;K&#x60; - Kilometers - &#x60;M&#x60; - Miles </value>
        [DataMember(Name="distanceUnit", EmitDefaultValue=false)]
        public string DistanceUnit { get; set; }

        /// <summary>
        /// Date/time the auto was returned to the rental agency. Format: &#x60;&#x60;yyyy-MM-dd HH-mm-ss z&#x60;&#x60; This field is supported for Visa, MasterCard, and American Express. 
        /// </summary>
        /// <value>Date/time the auto was returned to the rental agency. Format: &#x60;&#x60;yyyy-MM-dd HH-mm-ss z&#x60;&#x60; This field is supported for Visa, MasterCard, and American Express. </value>
        [DataMember(Name="returnDateTime", EmitDefaultValue=false)]
        public string ReturnDateTime { get; set; }

        /// <summary>
        /// Date/time the auto was picked up from the rental agency. Format: &#x60;yyyy-MM-dd HH-mm-ss z&#x60; This field is supported for Visa, MasterCard, and American Express. 
        /// </summary>
        /// <value>Date/time the auto was picked up from the rental agency. Format: &#x60;yyyy-MM-dd HH-mm-ss z&#x60; This field is supported for Visa, MasterCard, and American Express. </value>
        [DataMember(Name="rentalDateTime", EmitDefaultValue=false)]
        public string RentalDateTime { get; set; }

        /// <summary>
        /// Maximum number of free miles or kilometers allowed to a customer for the duration of the auto rental agreement. This field is supported only for MasterCard and American Express. 
        /// </summary>
        /// <value>Maximum number of free miles or kilometers allowed to a customer for the duration of the auto rental agreement. This field is supported only for MasterCard and American Express. </value>
        [DataMember(Name="maxFreeDistance", EmitDefaultValue=false)]
        public string MaxFreeDistance { get; set; }

        /// <summary>
        /// Used for MC and Discover  Valid values: - &#x60;true&#x60; - Yes (insurance was purchased) - &#x60;false&#x60; - No (insurance was not purchased) 
        /// </summary>
        /// <value>Used for MC and Discover  Valid values: - &#x60;true&#x60; - Yes (insurance was purchased) - &#x60;false&#x60; - No (insurance was not purchased) </value>
        [DataMember(Name="insuranceIndicator", EmitDefaultValue=false)]
        public bool? InsuranceIndicator { get; set; }

        /// <summary>
        /// Used to identify special circumstances applicable to the Card Transaction or Cardholder, such as \&quot;renter” or ”show”.  This code is &#x60;2 digit&#x60; value agreed by Merchant and processor. 
        /// </summary>
        /// <value>Used to identify special circumstances applicable to the Card Transaction or Cardholder, such as \&quot;renter” or ”show”.  This code is &#x60;2 digit&#x60; value agreed by Merchant and processor. </value>
        [DataMember(Name="programCode", EmitDefaultValue=false)]
        public string ProgramCode { get; set; }

        /// <summary>
        /// Gets or Sets ReturnAddress
        /// </summary>
        [DataMember(Name="returnAddress", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationAutoRentalReturnAddress ReturnAddress { get; set; }

        /// <summary>
        /// Gets or Sets RentalAddress
        /// </summary>
        [DataMember(Name="rentalAddress", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationAutoRentalRentalAddress RentalAddress { get; set; }

        /// <summary>
        /// Auto rental agency’s agreement (invoice) number provided to the customer. It is used to trace any inquiries about transactions. This field is supported for Visa, MasterCard, and American Express. This Merchant-defined value, which may be composed of any combination of characters and/or numerals, may become part of the descriptive bill on the Cardmember&#39;s statement. 
        /// </summary>
        /// <value>Auto rental agency’s agreement (invoice) number provided to the customer. It is used to trace any inquiries about transactions. This field is supported for Visa, MasterCard, and American Express. This Merchant-defined value, which may be composed of any combination of characters and/or numerals, may become part of the descriptive bill on the Cardmember&#39;s statement. </value>
        [DataMember(Name="agreementNumber", EmitDefaultValue=false)]
        public string AgreementNumber { get; set; }

        /// <summary>
        /// Odometer reading at time of vehicle rental. 
        /// </summary>
        /// <value>Odometer reading at time of vehicle rental. </value>
        [DataMember(Name="odometerReading", EmitDefaultValue=false)]
        public string OdometerReading { get; set; }

        /// <summary>
        /// This field contains a unique identifier assigned by the company to the vehicle. 
        /// </summary>
        /// <value>This field contains a unique identifier assigned by the company to the vehicle. </value>
        [DataMember(Name="vehicleIdentificationNumber", EmitDefaultValue=false)]
        public string VehicleIdentificationNumber { get; set; }

        /// <summary>
        /// Corporate Identifier provides the unique identifier of the corporation or entity renting the vehicle:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| NA| 12| NA| NA| | Field Type| NA| AN| NA| NA| | M/O/C| NA| O| NA| NA| 
        /// </summary>
        /// <value>Corporate Identifier provides the unique identifier of the corporation or entity renting the vehicle:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| NA| 12| NA| NA| | Field Type| NA| AN| NA| NA| | M/O/C| NA| O| NA| NA| </value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// The number of additional drivers included on the rental agreement not including the individual who signed the rental agreement. 
        /// </summary>
        /// <value>The number of additional drivers included on the rental agreement not including the individual who signed the rental agreement. </value>
        [DataMember(Name="numberOfAdditionalDrivers", EmitDefaultValue=false)]
        public string NumberOfAdditionalDrivers { get; set; }

        /// <summary>
        /// Age of the driver renting the vehicle. 
        /// </summary>
        /// <value>Age of the driver renting the vehicle. </value>
        [DataMember(Name="driverAge", EmitDefaultValue=false)]
        public string DriverAge { get; set; }

        /// <summary>
        /// Program code used to identify special circumstances, such as “frequent renter” or “no show” status for the renter. Possible values: - &#x60;0&#x60;: not applicable (default) - &#x60;1&#x60;: frequent renter - &#x60;2&#x60;: no show  For authorizations, this field is supported only for Visa.  For captures, this field is supported for Visa, MasterCard, and American Express.  Code for special programs applicable to the Card Transaction or the Cardholder. 
        /// </summary>
        /// <value>Program code used to identify special circumstances, such as “frequent renter” or “no show” status for the renter. Possible values: - &#x60;0&#x60;: not applicable (default) - &#x60;1&#x60;: frequent renter - &#x60;2&#x60;: no show  For authorizations, this field is supported only for Visa.  For captures, this field is supported for Visa, MasterCard, and American Express.  Code for special programs applicable to the Card Transaction or the Cardholder. </value>
        [DataMember(Name="specialProgramCode", EmitDefaultValue=false)]
        public string SpecialProgramCode { get; set; }

        /// <summary>
        /// Make of the vehicle being rented (e.g., Chevrolet or Ford). 
        /// </summary>
        /// <value>Make of the vehicle being rented (e.g., Chevrolet or Ford). </value>
        [DataMember(Name="vehicleMake", EmitDefaultValue=false)]
        public string VehicleMake { get; set; }

        /// <summary>
        /// Model of the vehicle being rented (e.g., Cavalier or Focus). 
        /// </summary>
        /// <value>Model of the vehicle being rented (e.g., Cavalier or Focus). </value>
        [DataMember(Name="vehicleModel", EmitDefaultValue=false)]
        public string VehicleModel { get; set; }

        /// <summary>
        /// Indicates the time period for which the vehicle rental rate applies (e.g., daily, weekly or monthly). Daily, Weekly and Monthly are valid values. 
        /// </summary>
        /// <value>Indicates the time period for which the vehicle rental rate applies (e.g., daily, weekly or monthly). Daily, Weekly and Monthly are valid values. </value>
        [DataMember(Name="timePeriod", EmitDefaultValue=false)]
        public string TimePeriod { get; set; }

        /// <summary>
        /// Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes. 
        /// </summary>
        /// <value>Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes. </value>
        [DataMember(Name="commodityCode", EmitDefaultValue=false)]
        public string CommodityCode { get; set; }

        /// <summary>
        /// Customer service telephone number that is used to resolve questions or disputes. Include the area code, exchange, and number. This field is supported only for MasterCard and American Express. 
        /// </summary>
        /// <value>Customer service telephone number that is used to resolve questions or disputes. Include the area code, exchange, and number. This field is supported only for MasterCard and American Express. </value>
        [DataMember(Name="customerServicePhoneNumber", EmitDefaultValue=false)]
        public string CustomerServicePhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="taxDetails", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationAutoRentalTaxDetails TaxDetails { get; set; }

        /// <summary>
        /// Insurance charges. Field is conditional and can include decimal point. 
        /// </summary>
        /// <value>Insurance charges. Field is conditional and can include decimal point. </value>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public string InsuranceAmount { get; set; }

        /// <summary>
        /// Extra charges incurred for a one-way rental agreement for the auto. This field is supported only for Visa. 
        /// </summary>
        /// <value>Extra charges incurred for a one-way rental agreement for the auto. This field is supported only for Visa. </value>
        [DataMember(Name="oneWayDropOffAmount", EmitDefaultValue=false)]
        public string OneWayDropOffAmount { get; set; }

        /// <summary>
        /// For **MasterCard** and **Discover**: Adjusted amount indicator code that indicates any miscellaneous charges incurred after the auto was returned. Possible values: - &#x60;A&#x60; - Drop-off charges - &#x60;B&#x60; - Delivery charges - &#x60;C&#x60; - Parking expenses - &#x60;D&#x60; - Extra hours - &#x60;E&#x60; - Violations - &#x60;X&#x60; - More than one of the above charges  For **American Express**: Audit indicator code that indicates any adjustment for mileage, fuel, auto damage, etc. made to a rental agreement and whether the cardholder was notified.  Possible value for the authorization service: - &#x60;A&#x60; (default): adjustment amount greater than 0 (zero)  Possible values for the capture service: - &#x60;X&#x60; - Multiple adjustments - &#x60;Y&#x60; - One adjustment only; Cardmember notified - &#x60;Z&#x60; - One adjustment only; Cardmember not notified. This value is used as the default if the request does not include this field and includes an adjustment amount greater than 0 (zero). This is an optional field. 
        /// </summary>
        /// <value>For **MasterCard** and **Discover**: Adjusted amount indicator code that indicates any miscellaneous charges incurred after the auto was returned. Possible values: - &#x60;A&#x60; - Drop-off charges - &#x60;B&#x60; - Delivery charges - &#x60;C&#x60; - Parking expenses - &#x60;D&#x60; - Extra hours - &#x60;E&#x60; - Violations - &#x60;X&#x60; - More than one of the above charges  For **American Express**: Audit indicator code that indicates any adjustment for mileage, fuel, auto damage, etc. made to a rental agreement and whether the cardholder was notified.  Possible value for the authorization service: - &#x60;A&#x60; (default): adjustment amount greater than 0 (zero)  Possible values for the capture service: - &#x60;X&#x60; - Multiple adjustments - &#x60;Y&#x60; - One adjustment only; Cardmember notified - &#x60;Z&#x60; - One adjustment only; Cardmember not notified. This value is used as the default if the request does not include this field and includes an adjustment amount greater than 0 (zero). This is an optional field. </value>
        [DataMember(Name="adjustedAmountIndicator", EmitDefaultValue=false)]
        public string AdjustedAmountIndicator { get; set; }

        /// <summary>
        /// Adjusted Amount indicates whether any miscellaneous charges were incurred after the vehicle was returned.  For authorizations, this field is supported only for American Express.  For captures, this field is supported only for MasterCard and American Express. **NOTE** For American Express, this field is required if the &#x60;travelInformation.autoRental.adjustedAmountIndicator&#x60; field is included in the request and has a value; otherwise, this field is optional.  For all other card types, this field is ignored. 
        /// </summary>
        /// <value>Adjusted Amount indicates whether any miscellaneous charges were incurred after the vehicle was returned.  For authorizations, this field is supported only for American Express.  For captures, this field is supported only for MasterCard and American Express. **NOTE** For American Express, this field is required if the &#x60;travelInformation.autoRental.adjustedAmountIndicator&#x60; field is included in the request and has a value; otherwise, this field is optional.  For all other card types, this field is ignored. </value>
        [DataMember(Name="adjustedAmount", EmitDefaultValue=false)]
        public string AdjustedAmount { get; set; }

        /// <summary>
        /// Extra gasoline charges that extend beyond the basic rental agreement. This field is supported only for Visa. 
        /// </summary>
        /// <value>Extra gasoline charges that extend beyond the basic rental agreement. This field is supported only for Visa. </value>
        [DataMember(Name="fuelCharges", EmitDefaultValue=false)]
        public string FuelCharges { get; set; }

        /// <summary>
        /// Weekly Rental Amount provides the amount charged for a seven-day rental period. Field - Time Period needs to be populated with Weekly if this field is present 
        /// </summary>
        /// <value>Weekly Rental Amount provides the amount charged for a seven-day rental period. Field - Time Period needs to be populated with Weekly if this field is present </value>
        [DataMember(Name="weeklyRentalRate", EmitDefaultValue=false)]
        public string WeeklyRentalRate { get; set; }

        /// <summary>
        /// Daily auto rental rate charged. This field is supported only for MasterCard and American Express.  Field - Time Period needs to be populated with Daily if this field is present 
        /// </summary>
        /// <value>Daily auto rental rate charged. This field is supported only for MasterCard and American Express.  Field - Time Period needs to be populated with Daily if this field is present </value>
        [DataMember(Name="dailyRentalRate", EmitDefaultValue=false)]
        public string DailyRentalRate { get; set; }

        /// <summary>
        /// Rate charged for each mile. This field is supported only for MasterCard and American Express. 
        /// </summary>
        /// <value>Rate charged for each mile. This field is supported only for MasterCard and American Express. </value>
        [DataMember(Name="ratePerMile", EmitDefaultValue=false)]
        public string RatePerMile { get; set; }

        /// <summary>
        /// Regular Mileage Charge provides the amount charged for regular miles traveled during vehicle rental. Two decimal places 
        /// </summary>
        /// <value>Regular Mileage Charge provides the amount charged for regular miles traveled during vehicle rental. Two decimal places </value>
        [DataMember(Name="mileageCharge", EmitDefaultValue=false)]
        public string MileageCharge { get; set; }

        /// <summary>
        /// Extra mileage charges that extend beyond the basic rental agreement. This field is supported only for Visa. 
        /// </summary>
        /// <value>Extra mileage charges that extend beyond the basic rental agreement. This field is supported only for Visa. </value>
        [DataMember(Name="extraMileageCharge", EmitDefaultValue=false)]
        public string ExtraMileageCharge { get; set; }

        /// <summary>
        /// Extra charges related to a late return of the rented auto. This field is supported only for Visa. 
        /// </summary>
        /// <value>Extra charges related to a late return of the rented auto. This field is supported only for Visa. </value>
        [DataMember(Name="lateFeeAmount", EmitDefaultValue=false)]
        public string LateFeeAmount { get; set; }

        /// <summary>
        /// (Towing Charges) provides the amount charged to tow the rental vehicle. 
        /// </summary>
        /// <value>(Towing Charges) provides the amount charged to tow the rental vehicle. </value>
        [DataMember(Name="towingCharge", EmitDefaultValue=false)]
        public string TowingCharge { get; set; }

        /// <summary>
        /// (Extra Charges) provides the extra charges associated with the vehicle rental. 
        /// </summary>
        /// <value>(Extra Charges) provides the extra charges associated with the vehicle rental. </value>
        [DataMember(Name="extraCharge", EmitDefaultValue=false)]
        public string ExtraCharge { get; set; }

        /// <summary>
        /// Amount charged for renting a Global Positioning Service (GPS). 
        /// </summary>
        /// <value>Amount charged for renting a Global Positioning Service (GPS). </value>
        [DataMember(Name="gpsCharge", EmitDefaultValue=false)]
        public string GpsCharge { get; set; }

        /// <summary>
        /// Additional charges incurred for phone usage included on the total bill. 
        /// </summary>
        /// <value>Additional charges incurred for phone usage included on the total bill. </value>
        [DataMember(Name="phoneCharge", EmitDefaultValue=false)]
        public string PhoneCharge { get; set; }

        /// <summary>
        /// Extra charges incurred due to a parking violation for the auto. This field is supported only for Visa. 
        /// </summary>
        /// <value>Extra charges incurred due to a parking violation for the auto. This field is supported only for Visa. </value>
        [DataMember(Name="parkingViolationCharge", EmitDefaultValue=false)]
        public string ParkingViolationCharge { get; set; }

        /// <summary>
        /// Total amount charged for all other miscellaneous charges not previously defined. 
        /// </summary>
        /// <value>Total amount charged for all other miscellaneous charges not previously defined. </value>
        [DataMember(Name="otherCharges", EmitDefaultValue=false)]
        public string OtherCharges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsTravelInformationAutoRental {\n");
            sb.Append("  NoShowIndicator: ").Append(NoShowIndicator).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  VehicleClass: ").Append(VehicleClass).Append("\n");
            sb.Append("  DistanceTravelled: ").Append(DistanceTravelled).Append("\n");
            sb.Append("  DistanceUnit: ").Append(DistanceUnit).Append("\n");
            sb.Append("  ReturnDateTime: ").Append(ReturnDateTime).Append("\n");
            sb.Append("  RentalDateTime: ").Append(RentalDateTime).Append("\n");
            sb.Append("  MaxFreeDistance: ").Append(MaxFreeDistance).Append("\n");
            sb.Append("  InsuranceIndicator: ").Append(InsuranceIndicator).Append("\n");
            sb.Append("  ProgramCode: ").Append(ProgramCode).Append("\n");
            sb.Append("  ReturnAddress: ").Append(ReturnAddress).Append("\n");
            sb.Append("  RentalAddress: ").Append(RentalAddress).Append("\n");
            sb.Append("  AgreementNumber: ").Append(AgreementNumber).Append("\n");
            sb.Append("  OdometerReading: ").Append(OdometerReading).Append("\n");
            sb.Append("  VehicleIdentificationNumber: ").Append(VehicleIdentificationNumber).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  NumberOfAdditionalDrivers: ").Append(NumberOfAdditionalDrivers).Append("\n");
            sb.Append("  DriverAge: ").Append(DriverAge).Append("\n");
            sb.Append("  SpecialProgramCode: ").Append(SpecialProgramCode).Append("\n");
            sb.Append("  VehicleMake: ").Append(VehicleMake).Append("\n");
            sb.Append("  VehicleModel: ").Append(VehicleModel).Append("\n");
            sb.Append("  TimePeriod: ").Append(TimePeriod).Append("\n");
            sb.Append("  CommodityCode: ").Append(CommodityCode).Append("\n");
            sb.Append("  CustomerServicePhoneNumber: ").Append(CustomerServicePhoneNumber).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  OneWayDropOffAmount: ").Append(OneWayDropOffAmount).Append("\n");
            sb.Append("  AdjustedAmountIndicator: ").Append(AdjustedAmountIndicator).Append("\n");
            sb.Append("  AdjustedAmount: ").Append(AdjustedAmount).Append("\n");
            sb.Append("  FuelCharges: ").Append(FuelCharges).Append("\n");
            sb.Append("  WeeklyRentalRate: ").Append(WeeklyRentalRate).Append("\n");
            sb.Append("  DailyRentalRate: ").Append(DailyRentalRate).Append("\n");
            sb.Append("  RatePerMile: ").Append(RatePerMile).Append("\n");
            sb.Append("  MileageCharge: ").Append(MileageCharge).Append("\n");
            sb.Append("  ExtraMileageCharge: ").Append(ExtraMileageCharge).Append("\n");
            sb.Append("  LateFeeAmount: ").Append(LateFeeAmount).Append("\n");
            sb.Append("  TowingCharge: ").Append(TowingCharge).Append("\n");
            sb.Append("  ExtraCharge: ").Append(ExtraCharge).Append("\n");
            sb.Append("  GpsCharge: ").Append(GpsCharge).Append("\n");
            sb.Append("  PhoneCharge: ").Append(PhoneCharge).Append("\n");
            sb.Append("  ParkingViolationCharge: ").Append(ParkingViolationCharge).Append("\n");
            sb.Append("  OtherCharges: ").Append(OtherCharges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsTravelInformationAutoRental);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsTravelInformationAutoRental instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsTravelInformationAutoRental to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsTravelInformationAutoRental other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NoShowIndicator == other.NoShowIndicator ||
                    this.NoShowIndicator != null &&
                    this.NoShowIndicator.Equals(other.NoShowIndicator)
                ) && 
                (
                    this.CustomerName == other.CustomerName ||
                    this.CustomerName != null &&
                    this.CustomerName.Equals(other.CustomerName)
                ) && 
                (
                    this.VehicleClass == other.VehicleClass ||
                    this.VehicleClass != null &&
                    this.VehicleClass.Equals(other.VehicleClass)
                ) && 
                (
                    this.DistanceTravelled == other.DistanceTravelled ||
                    this.DistanceTravelled != null &&
                    this.DistanceTravelled.Equals(other.DistanceTravelled)
                ) && 
                (
                    this.DistanceUnit == other.DistanceUnit ||
                    this.DistanceUnit != null &&
                    this.DistanceUnit.Equals(other.DistanceUnit)
                ) && 
                (
                    this.ReturnDateTime == other.ReturnDateTime ||
                    this.ReturnDateTime != null &&
                    this.ReturnDateTime.Equals(other.ReturnDateTime)
                ) && 
                (
                    this.RentalDateTime == other.RentalDateTime ||
                    this.RentalDateTime != null &&
                    this.RentalDateTime.Equals(other.RentalDateTime)
                ) && 
                (
                    this.MaxFreeDistance == other.MaxFreeDistance ||
                    this.MaxFreeDistance != null &&
                    this.MaxFreeDistance.Equals(other.MaxFreeDistance)
                ) && 
                (
                    this.InsuranceIndicator == other.InsuranceIndicator ||
                    this.InsuranceIndicator != null &&
                    this.InsuranceIndicator.Equals(other.InsuranceIndicator)
                ) && 
                (
                    this.ProgramCode == other.ProgramCode ||
                    this.ProgramCode != null &&
                    this.ProgramCode.Equals(other.ProgramCode)
                ) && 
                (
                    this.ReturnAddress == other.ReturnAddress ||
                    this.ReturnAddress != null &&
                    this.ReturnAddress.Equals(other.ReturnAddress)
                ) && 
                (
                    this.RentalAddress == other.RentalAddress ||
                    this.RentalAddress != null &&
                    this.RentalAddress.Equals(other.RentalAddress)
                ) && 
                (
                    this.AgreementNumber == other.AgreementNumber ||
                    this.AgreementNumber != null &&
                    this.AgreementNumber.Equals(other.AgreementNumber)
                ) && 
                (
                    this.OdometerReading == other.OdometerReading ||
                    this.OdometerReading != null &&
                    this.OdometerReading.Equals(other.OdometerReading)
                ) && 
                (
                    this.VehicleIdentificationNumber == other.VehicleIdentificationNumber ||
                    this.VehicleIdentificationNumber != null &&
                    this.VehicleIdentificationNumber.Equals(other.VehicleIdentificationNumber)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.NumberOfAdditionalDrivers == other.NumberOfAdditionalDrivers ||
                    this.NumberOfAdditionalDrivers != null &&
                    this.NumberOfAdditionalDrivers.Equals(other.NumberOfAdditionalDrivers)
                ) && 
                (
                    this.DriverAge == other.DriverAge ||
                    this.DriverAge != null &&
                    this.DriverAge.Equals(other.DriverAge)
                ) && 
                (
                    this.SpecialProgramCode == other.SpecialProgramCode ||
                    this.SpecialProgramCode != null &&
                    this.SpecialProgramCode.Equals(other.SpecialProgramCode)
                ) && 
                (
                    this.VehicleMake == other.VehicleMake ||
                    this.VehicleMake != null &&
                    this.VehicleMake.Equals(other.VehicleMake)
                ) && 
                (
                    this.VehicleModel == other.VehicleModel ||
                    this.VehicleModel != null &&
                    this.VehicleModel.Equals(other.VehicleModel)
                ) && 
                (
                    this.TimePeriod == other.TimePeriod ||
                    this.TimePeriod != null &&
                    this.TimePeriod.Equals(other.TimePeriod)
                ) && 
                (
                    this.CommodityCode == other.CommodityCode ||
                    this.CommodityCode != null &&
                    this.CommodityCode.Equals(other.CommodityCode)
                ) && 
                (
                    this.CustomerServicePhoneNumber == other.CustomerServicePhoneNumber ||
                    this.CustomerServicePhoneNumber != null &&
                    this.CustomerServicePhoneNumber.Equals(other.CustomerServicePhoneNumber)
                ) && 
                (
                    this.TaxDetails == other.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.Equals(other.TaxDetails)
                ) && 
                (
                    this.InsuranceAmount == other.InsuranceAmount ||
                    this.InsuranceAmount != null &&
                    this.InsuranceAmount.Equals(other.InsuranceAmount)
                ) && 
                (
                    this.OneWayDropOffAmount == other.OneWayDropOffAmount ||
                    this.OneWayDropOffAmount != null &&
                    this.OneWayDropOffAmount.Equals(other.OneWayDropOffAmount)
                ) && 
                (
                    this.AdjustedAmountIndicator == other.AdjustedAmountIndicator ||
                    this.AdjustedAmountIndicator != null &&
                    this.AdjustedAmountIndicator.Equals(other.AdjustedAmountIndicator)
                ) && 
                (
                    this.AdjustedAmount == other.AdjustedAmount ||
                    this.AdjustedAmount != null &&
                    this.AdjustedAmount.Equals(other.AdjustedAmount)
                ) && 
                (
                    this.FuelCharges == other.FuelCharges ||
                    this.FuelCharges != null &&
                    this.FuelCharges.Equals(other.FuelCharges)
                ) && 
                (
                    this.WeeklyRentalRate == other.WeeklyRentalRate ||
                    this.WeeklyRentalRate != null &&
                    this.WeeklyRentalRate.Equals(other.WeeklyRentalRate)
                ) && 
                (
                    this.DailyRentalRate == other.DailyRentalRate ||
                    this.DailyRentalRate != null &&
                    this.DailyRentalRate.Equals(other.DailyRentalRate)
                ) && 
                (
                    this.RatePerMile == other.RatePerMile ||
                    this.RatePerMile != null &&
                    this.RatePerMile.Equals(other.RatePerMile)
                ) && 
                (
                    this.MileageCharge == other.MileageCharge ||
                    this.MileageCharge != null &&
                    this.MileageCharge.Equals(other.MileageCharge)
                ) && 
                (
                    this.ExtraMileageCharge == other.ExtraMileageCharge ||
                    this.ExtraMileageCharge != null &&
                    this.ExtraMileageCharge.Equals(other.ExtraMileageCharge)
                ) && 
                (
                    this.LateFeeAmount == other.LateFeeAmount ||
                    this.LateFeeAmount != null &&
                    this.LateFeeAmount.Equals(other.LateFeeAmount)
                ) && 
                (
                    this.TowingCharge == other.TowingCharge ||
                    this.TowingCharge != null &&
                    this.TowingCharge.Equals(other.TowingCharge)
                ) && 
                (
                    this.ExtraCharge == other.ExtraCharge ||
                    this.ExtraCharge != null &&
                    this.ExtraCharge.Equals(other.ExtraCharge)
                ) && 
                (
                    this.GpsCharge == other.GpsCharge ||
                    this.GpsCharge != null &&
                    this.GpsCharge.Equals(other.GpsCharge)
                ) && 
                (
                    this.PhoneCharge == other.PhoneCharge ||
                    this.PhoneCharge != null &&
                    this.PhoneCharge.Equals(other.PhoneCharge)
                ) && 
                (
                    this.ParkingViolationCharge == other.ParkingViolationCharge ||
                    this.ParkingViolationCharge != null &&
                    this.ParkingViolationCharge.Equals(other.ParkingViolationCharge)
                ) && 
                (
                    this.OtherCharges == other.OtherCharges ||
                    this.OtherCharges != null &&
                    this.OtherCharges.Equals(other.OtherCharges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NoShowIndicator != null)
                    hash = hash * 59 + this.NoShowIndicator.GetHashCode();
                if (this.CustomerName != null)
                    hash = hash * 59 + this.CustomerName.GetHashCode();
                if (this.VehicleClass != null)
                    hash = hash * 59 + this.VehicleClass.GetHashCode();
                if (this.DistanceTravelled != null)
                    hash = hash * 59 + this.DistanceTravelled.GetHashCode();
                if (this.DistanceUnit != null)
                    hash = hash * 59 + this.DistanceUnit.GetHashCode();
                if (this.ReturnDateTime != null)
                    hash = hash * 59 + this.ReturnDateTime.GetHashCode();
                if (this.RentalDateTime != null)
                    hash = hash * 59 + this.RentalDateTime.GetHashCode();
                if (this.MaxFreeDistance != null)
                    hash = hash * 59 + this.MaxFreeDistance.GetHashCode();
                if (this.InsuranceIndicator != null)
                    hash = hash * 59 + this.InsuranceIndicator.GetHashCode();
                if (this.ProgramCode != null)
                    hash = hash * 59 + this.ProgramCode.GetHashCode();
                if (this.ReturnAddress != null)
                    hash = hash * 59 + this.ReturnAddress.GetHashCode();
                if (this.RentalAddress != null)
                    hash = hash * 59 + this.RentalAddress.GetHashCode();
                if (this.AgreementNumber != null)
                    hash = hash * 59 + this.AgreementNumber.GetHashCode();
                if (this.OdometerReading != null)
                    hash = hash * 59 + this.OdometerReading.GetHashCode();
                if (this.VehicleIdentificationNumber != null)
                    hash = hash * 59 + this.VehicleIdentificationNumber.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.NumberOfAdditionalDrivers != null)
                    hash = hash * 59 + this.NumberOfAdditionalDrivers.GetHashCode();
                if (this.DriverAge != null)
                    hash = hash * 59 + this.DriverAge.GetHashCode();
                if (this.SpecialProgramCode != null)
                    hash = hash * 59 + this.SpecialProgramCode.GetHashCode();
                if (this.VehicleMake != null)
                    hash = hash * 59 + this.VehicleMake.GetHashCode();
                if (this.VehicleModel != null)
                    hash = hash * 59 + this.VehicleModel.GetHashCode();
                if (this.TimePeriod != null)
                    hash = hash * 59 + this.TimePeriod.GetHashCode();
                if (this.CommodityCode != null)
                    hash = hash * 59 + this.CommodityCode.GetHashCode();
                if (this.CustomerServicePhoneNumber != null)
                    hash = hash * 59 + this.CustomerServicePhoneNumber.GetHashCode();
                if (this.TaxDetails != null)
                    hash = hash * 59 + this.TaxDetails.GetHashCode();
                if (this.InsuranceAmount != null)
                    hash = hash * 59 + this.InsuranceAmount.GetHashCode();
                if (this.OneWayDropOffAmount != null)
                    hash = hash * 59 + this.OneWayDropOffAmount.GetHashCode();
                if (this.AdjustedAmountIndicator != null)
                    hash = hash * 59 + this.AdjustedAmountIndicator.GetHashCode();
                if (this.AdjustedAmount != null)
                    hash = hash * 59 + this.AdjustedAmount.GetHashCode();
                if (this.FuelCharges != null)
                    hash = hash * 59 + this.FuelCharges.GetHashCode();
                if (this.WeeklyRentalRate != null)
                    hash = hash * 59 + this.WeeklyRentalRate.GetHashCode();
                if (this.DailyRentalRate != null)
                    hash = hash * 59 + this.DailyRentalRate.GetHashCode();
                if (this.RatePerMile != null)
                    hash = hash * 59 + this.RatePerMile.GetHashCode();
                if (this.MileageCharge != null)
                    hash = hash * 59 + this.MileageCharge.GetHashCode();
                if (this.ExtraMileageCharge != null)
                    hash = hash * 59 + this.ExtraMileageCharge.GetHashCode();
                if (this.LateFeeAmount != null)
                    hash = hash * 59 + this.LateFeeAmount.GetHashCode();
                if (this.TowingCharge != null)
                    hash = hash * 59 + this.TowingCharge.GetHashCode();
                if (this.ExtraCharge != null)
                    hash = hash * 59 + this.ExtraCharge.GetHashCode();
                if (this.GpsCharge != null)
                    hash = hash * 59 + this.GpsCharge.GetHashCode();
                if (this.PhoneCharge != null)
                    hash = hash * 59 + this.PhoneCharge.GetHashCode();
                if (this.ParkingViolationCharge != null)
                    hash = hash * 59 + this.ParkingViolationCharge.GetHashCode();
                if (this.OtherCharges != null)
                    hash = hash * 59 + this.OtherCharges.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
