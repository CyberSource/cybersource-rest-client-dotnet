/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Boardingv1registrationsOrganizationInformationKYC
    /// </summary>
    [DataContract]
    public partial class Boardingv1registrationsOrganizationInformationKYC :  IEquatable<Boardingv1registrationsOrganizationInformationKYC>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets WhenIsCustomerCharged
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WhenIsCustomerChargedEnum
        {
            
            /// <summary>
            /// Enum ONETIMEBEFORE for "ONETIMEBEFORE"
            /// </summary>
            [EnumMember(Value = "ONETIMEBEFORE")]
            ONETIMEBEFORE,
            
            /// <summary>
            /// Enum ONETIMEAFTER for "ONETIMEAFTER"
            /// </summary>
            [EnumMember(Value = "ONETIMEAFTER")]
            ONETIMEAFTER,
            
            /// <summary>
            /// Enum OTHER for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER
        }
        /// <summary>
        /// Gets or Sets TimeToProductDelivery
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeToProductDeliveryEnum
        {
            
            /// <summary>
            /// Enum INSTANT for "INSTANT"
            /// </summary>
            [EnumMember(Value = "INSTANT")]
            INSTANT,
            
            /// <summary>
            /// Enum UPTO2 for "UPTO2"
            /// </summary>
            [EnumMember(Value = "UPTO2")]
            UPTO2,
            
            /// <summary>
            /// Enum UPTO5 for "UPTO5"
            /// </summary>
            [EnumMember(Value = "UPTO5")]
            UPTO5,
            
            /// <summary>
            /// Enum UPTO10 for "UPTO10"
            /// </summary>
            [EnumMember(Value = "UPTO10")]
            UPTO10,
            
            /// <summary>
            /// Enum GREATERTHAN10 for "GREATERTHAN10"
            /// </summary>
            [EnumMember(Value = "GREATERTHAN10")]
            GREATERTHAN10
        }
        /// <summary>
        /// Gets or Sets WhenIsCustomerCharged
        /// </summary>
        [DataMember(Name="whenIsCustomerCharged", EmitDefaultValue=false)]
        public WhenIsCustomerChargedEnum? WhenIsCustomerCharged { get; set; }
        /// <summary>
        /// Gets or Sets TimeToProductDelivery
        /// </summary>
        [DataMember(Name="timeToProductDelivery", EmitDefaultValue=false)]
        public TimeToProductDeliveryEnum? TimeToProductDelivery { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationKYC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Boardingv1registrationsOrganizationInformationKYC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Boardingv1registrationsOrganizationInformationKYC" /> class.
        /// </summary>
        /// <param name="WhenIsCustomerCharged">WhenIsCustomerCharged (required).</param>
        /// <param name="WhenIsCustomerChargedDescription">WhenIsCustomerChargedDescription.</param>
        /// <param name="OfferSubscriptions">OfferSubscriptions (required).</param>
        /// <param name="MonthlySubscriptionPercent">MonthlySubscriptionPercent.</param>
        /// <param name="QuarterlySubscriptionPercent">QuarterlySubscriptionPercent.</param>
        /// <param name="SemiAnnualSubscriptionPercent">SemiAnnualSubscriptionPercent.</param>
        /// <param name="AnnualSubscriptionPercent">AnnualSubscriptionPercent.</param>
        /// <param name="TimeToProductDelivery">TimeToProductDelivery (required).</param>
        /// <param name="EstimatedMonthlySales">EstimatedMonthlySales (required).</param>
        /// <param name="AverageOrderAmount">AverageOrderAmount (required).</param>
        /// <param name="LargestExpectedOrderAmount">LargestExpectedOrderAmount (required).</param>
        /// <param name="DepositBankAccount">DepositBankAccount.</param>
        public Boardingv1registrationsOrganizationInformationKYC(WhenIsCustomerChargedEnum? WhenIsCustomerCharged = default(WhenIsCustomerChargedEnum?), string WhenIsCustomerChargedDescription = default(string), bool? OfferSubscriptions = default(bool?), decimal? MonthlySubscriptionPercent = default(decimal?), decimal? QuarterlySubscriptionPercent = default(decimal?), decimal? SemiAnnualSubscriptionPercent = default(decimal?), decimal? AnnualSubscriptionPercent = default(decimal?), TimeToProductDeliveryEnum? TimeToProductDelivery = default(TimeToProductDeliveryEnum?), decimal? EstimatedMonthlySales = default(decimal?), decimal? AverageOrderAmount = default(decimal?), decimal? LargestExpectedOrderAmount = default(decimal?), Boardingv1registrationsOrganizationInformationKYCDepositBankAccount DepositBankAccount = default(Boardingv1registrationsOrganizationInformationKYCDepositBankAccount))
        {
            // to ensure "WhenIsCustomerCharged" is required (not null)
            if (WhenIsCustomerCharged == null)
            {
                throw new InvalidDataException("WhenIsCustomerCharged is a required property for Boardingv1registrationsOrganizationInformationKYC and cannot be null");
            }
            else
            {
                this.WhenIsCustomerCharged = WhenIsCustomerCharged;
            }
            // to ensure "OfferSubscriptions" is required (not null)
            if (OfferSubscriptions == null)
            {
                throw new InvalidDataException("OfferSubscriptions is a required property for Boardingv1registrationsOrganizationInformationKYC and cannot be null");
            }
            else
            {
                this.OfferSubscriptions = OfferSubscriptions;
            }
            // to ensure "TimeToProductDelivery" is required (not null)
            if (TimeToProductDelivery == null)
            {
                throw new InvalidDataException("TimeToProductDelivery is a required property for Boardingv1registrationsOrganizationInformationKYC and cannot be null");
            }
            else
            {
                this.TimeToProductDelivery = TimeToProductDelivery;
            }
            // to ensure "EstimatedMonthlySales" is required (not null)
            if (EstimatedMonthlySales == null)
            {
                throw new InvalidDataException("EstimatedMonthlySales is a required property for Boardingv1registrationsOrganizationInformationKYC and cannot be null");
            }
            else
            {
                this.EstimatedMonthlySales = EstimatedMonthlySales;
            }
            // to ensure "AverageOrderAmount" is required (not null)
            if (AverageOrderAmount == null)
            {
                throw new InvalidDataException("AverageOrderAmount is a required property for Boardingv1registrationsOrganizationInformationKYC and cannot be null");
            }
            else
            {
                this.AverageOrderAmount = AverageOrderAmount;
            }
            // to ensure "LargestExpectedOrderAmount" is required (not null)
            if (LargestExpectedOrderAmount == null)
            {
                throw new InvalidDataException("LargestExpectedOrderAmount is a required property for Boardingv1registrationsOrganizationInformationKYC and cannot be null");
            }
            else
            {
                this.LargestExpectedOrderAmount = LargestExpectedOrderAmount;
            }
            this.WhenIsCustomerChargedDescription = WhenIsCustomerChargedDescription;
            this.MonthlySubscriptionPercent = MonthlySubscriptionPercent;
            this.QuarterlySubscriptionPercent = QuarterlySubscriptionPercent;
            this.SemiAnnualSubscriptionPercent = SemiAnnualSubscriptionPercent;
            this.AnnualSubscriptionPercent = AnnualSubscriptionPercent;
            this.DepositBankAccount = DepositBankAccount;
        }
        

        /// <summary>
        /// Gets or Sets WhenIsCustomerChargedDescription
        /// </summary>
        [DataMember(Name="whenIsCustomerChargedDescription", EmitDefaultValue=false)]
        public string WhenIsCustomerChargedDescription { get; set; }

        /// <summary>
        /// Gets or Sets OfferSubscriptions
        /// </summary>
        [DataMember(Name="offerSubscriptions", EmitDefaultValue=false)]
        public bool? OfferSubscriptions { get; set; }

        /// <summary>
        /// Gets or Sets MonthlySubscriptionPercent
        /// </summary>
        [DataMember(Name="monthlySubscriptionPercent", EmitDefaultValue=false)]
        public decimal? MonthlySubscriptionPercent { get; set; }

        /// <summary>
        /// Gets or Sets QuarterlySubscriptionPercent
        /// </summary>
        [DataMember(Name="quarterlySubscriptionPercent", EmitDefaultValue=false)]
        public decimal? QuarterlySubscriptionPercent { get; set; }

        /// <summary>
        /// Gets or Sets SemiAnnualSubscriptionPercent
        /// </summary>
        [DataMember(Name="semiAnnualSubscriptionPercent", EmitDefaultValue=false)]
        public decimal? SemiAnnualSubscriptionPercent { get; set; }

        /// <summary>
        /// Gets or Sets AnnualSubscriptionPercent
        /// </summary>
        [DataMember(Name="annualSubscriptionPercent", EmitDefaultValue=false)]
        public decimal? AnnualSubscriptionPercent { get; set; }


        /// <summary>
        /// Gets or Sets EstimatedMonthlySales
        /// </summary>
        [DataMember(Name="estimatedMonthlySales", EmitDefaultValue=false)]
        public decimal? EstimatedMonthlySales { get; set; }

        /// <summary>
        /// Gets or Sets AverageOrderAmount
        /// </summary>
        [DataMember(Name="averageOrderAmount", EmitDefaultValue=false)]
        public decimal? AverageOrderAmount { get; set; }

        /// <summary>
        /// Gets or Sets LargestExpectedOrderAmount
        /// </summary>
        [DataMember(Name="largestExpectedOrderAmount", EmitDefaultValue=false)]
        public decimal? LargestExpectedOrderAmount { get; set; }

        /// <summary>
        /// Gets or Sets DepositBankAccount
        /// </summary>
        [DataMember(Name="depositBankAccount", EmitDefaultValue=false)]
        public Boardingv1registrationsOrganizationInformationKYCDepositBankAccount DepositBankAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Boardingv1registrationsOrganizationInformationKYC {\n");
            sb.Append("  WhenIsCustomerCharged: ").Append(WhenIsCustomerCharged).Append("\n");
            sb.Append("  WhenIsCustomerChargedDescription: ").Append(WhenIsCustomerChargedDescription).Append("\n");
            sb.Append("  OfferSubscriptions: ").Append(OfferSubscriptions).Append("\n");
            sb.Append("  MonthlySubscriptionPercent: ").Append(MonthlySubscriptionPercent).Append("\n");
            sb.Append("  QuarterlySubscriptionPercent: ").Append(QuarterlySubscriptionPercent).Append("\n");
            sb.Append("  SemiAnnualSubscriptionPercent: ").Append(SemiAnnualSubscriptionPercent).Append("\n");
            sb.Append("  AnnualSubscriptionPercent: ").Append(AnnualSubscriptionPercent).Append("\n");
            sb.Append("  TimeToProductDelivery: ").Append(TimeToProductDelivery).Append("\n");
            sb.Append("  EstimatedMonthlySales: ").Append(EstimatedMonthlySales).Append("\n");
            sb.Append("  AverageOrderAmount: ").Append(AverageOrderAmount).Append("\n");
            sb.Append("  LargestExpectedOrderAmount: ").Append(LargestExpectedOrderAmount).Append("\n");
            sb.Append("  DepositBankAccount: ").Append(DepositBankAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Boardingv1registrationsOrganizationInformationKYC);
        }

        /// <summary>
        /// Returns true if Boardingv1registrationsOrganizationInformationKYC instances are equal
        /// </summary>
        /// <param name="other">Instance of Boardingv1registrationsOrganizationInformationKYC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Boardingv1registrationsOrganizationInformationKYC other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WhenIsCustomerCharged == other.WhenIsCustomerCharged ||
                    this.WhenIsCustomerCharged != null &&
                    this.WhenIsCustomerCharged.Equals(other.WhenIsCustomerCharged)
                ) && 
                (
                    this.WhenIsCustomerChargedDescription == other.WhenIsCustomerChargedDescription ||
                    this.WhenIsCustomerChargedDescription != null &&
                    this.WhenIsCustomerChargedDescription.Equals(other.WhenIsCustomerChargedDescription)
                ) && 
                (
                    this.OfferSubscriptions == other.OfferSubscriptions ||
                    this.OfferSubscriptions != null &&
                    this.OfferSubscriptions.Equals(other.OfferSubscriptions)
                ) && 
                (
                    this.MonthlySubscriptionPercent == other.MonthlySubscriptionPercent ||
                    this.MonthlySubscriptionPercent != null &&
                    this.MonthlySubscriptionPercent.Equals(other.MonthlySubscriptionPercent)
                ) && 
                (
                    this.QuarterlySubscriptionPercent == other.QuarterlySubscriptionPercent ||
                    this.QuarterlySubscriptionPercent != null &&
                    this.QuarterlySubscriptionPercent.Equals(other.QuarterlySubscriptionPercent)
                ) && 
                (
                    this.SemiAnnualSubscriptionPercent == other.SemiAnnualSubscriptionPercent ||
                    this.SemiAnnualSubscriptionPercent != null &&
                    this.SemiAnnualSubscriptionPercent.Equals(other.SemiAnnualSubscriptionPercent)
                ) && 
                (
                    this.AnnualSubscriptionPercent == other.AnnualSubscriptionPercent ||
                    this.AnnualSubscriptionPercent != null &&
                    this.AnnualSubscriptionPercent.Equals(other.AnnualSubscriptionPercent)
                ) && 
                (
                    this.TimeToProductDelivery == other.TimeToProductDelivery ||
                    this.TimeToProductDelivery != null &&
                    this.TimeToProductDelivery.Equals(other.TimeToProductDelivery)
                ) && 
                (
                    this.EstimatedMonthlySales == other.EstimatedMonthlySales ||
                    this.EstimatedMonthlySales != null &&
                    this.EstimatedMonthlySales.Equals(other.EstimatedMonthlySales)
                ) && 
                (
                    this.AverageOrderAmount == other.AverageOrderAmount ||
                    this.AverageOrderAmount != null &&
                    this.AverageOrderAmount.Equals(other.AverageOrderAmount)
                ) && 
                (
                    this.LargestExpectedOrderAmount == other.LargestExpectedOrderAmount ||
                    this.LargestExpectedOrderAmount != null &&
                    this.LargestExpectedOrderAmount.Equals(other.LargestExpectedOrderAmount)
                ) && 
                (
                    this.DepositBankAccount == other.DepositBankAccount ||
                    this.DepositBankAccount != null &&
                    this.DepositBankAccount.Equals(other.DepositBankAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WhenIsCustomerCharged != null)
                    hash = hash * 59 + this.WhenIsCustomerCharged.GetHashCode();
                if (this.WhenIsCustomerChargedDescription != null)
                    hash = hash * 59 + this.WhenIsCustomerChargedDescription.GetHashCode();
                if (this.OfferSubscriptions != null)
                    hash = hash * 59 + this.OfferSubscriptions.GetHashCode();
                if (this.MonthlySubscriptionPercent != null)
                    hash = hash * 59 + this.MonthlySubscriptionPercent.GetHashCode();
                if (this.QuarterlySubscriptionPercent != null)
                    hash = hash * 59 + this.QuarterlySubscriptionPercent.GetHashCode();
                if (this.SemiAnnualSubscriptionPercent != null)
                    hash = hash * 59 + this.SemiAnnualSubscriptionPercent.GetHashCode();
                if (this.AnnualSubscriptionPercent != null)
                    hash = hash * 59 + this.AnnualSubscriptionPercent.GetHashCode();
                if (this.TimeToProductDelivery != null)
                    hash = hash * 59 + this.TimeToProductDelivery.GetHashCode();
                if (this.EstimatedMonthlySales != null)
                    hash = hash * 59 + this.EstimatedMonthlySales.GetHashCode();
                if (this.AverageOrderAmount != null)
                    hash = hash * 59 + this.AverageOrderAmount.GetHashCode();
                if (this.LargestExpectedOrderAmount != null)
                    hash = hash * 59 + this.LargestExpectedOrderAmount.GetHashCode();
                if (this.DepositBankAccount != null)
                    hash = hash * 59 + this.DepositBankAccount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
