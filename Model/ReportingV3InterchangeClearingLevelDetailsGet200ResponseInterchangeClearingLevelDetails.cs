/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails
    /// </summary>
    [DataContract]
    public partial class ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails :  IEquatable<ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails" /> class.
        /// </summary>
        /// <param name="RequestId">RequestId.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="ProcessorMerchantId">ProcessorMerchantId.</param>
        /// <param name="TransactionReferenceNumber">TransactionReferenceNumber.</param>
        /// <param name="MerchantReferenceNumber">MerchantReferenceNumber.</param>
        /// <param name="AccountSuffix">AccountSuffix.</param>
        /// <param name="PaymentSubType">PaymentSubType.</param>
        /// <param name="PaymentSubTypeDescription">PaymentSubTypeDescription.</param>
        /// <param name="TransactionTime">TransactionTime.</param>
        /// <param name="ProcessedTime">ProcessedTime.</param>
        /// <param name="TransactionType">TransactionType.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="CurrencyCode">Valid ISO 4217 ALPHA-3 currency code.</param>
        /// <param name="PriceType">PriceType.</param>
        /// <param name="PriceAmountOne">PriceAmountOne.</param>
        /// <param name="PriceAmountTwo">PriceAmountTwo.</param>
        /// <param name="ReClass">ReClass.</param>
        /// <param name="SettlementTime">SettlementTime.</param>
        /// <param name="SettlementProcessor">SettlementProcessor.</param>
        /// <param name="MerchantBatchNumber">MerchantBatchNumber.</param>
        /// <param name="ClearedLevel">ClearedLevel.</param>
        /// <param name="BillbackReasonCode">BillbackReasonCode.</param>
        /// <param name="BillbackReasonDescription">BillbackReasonDescription.</param>
        /// <param name="MerchantPricedLevel">MerchantPricedLevel.</param>
        /// <param name="DiscountRate">DiscountRate.</param>
        /// <param name="DiscountAmount">DiscountAmount.</param>
        /// <param name="ClearingRateAmountOne">ClearingRateAmountOne.</param>
        /// <param name="ClearingRateAmountTwo">ClearingRateAmountTwo.</param>
        /// <param name="ClearingRateAmountThree">ClearingRateAmountThree.</param>
        /// <param name="ClearingRateCurrencyCode">Valid ISO 4217 ALPHA-3 currency code.</param>
        /// <param name="InterchangeAmount">InterchangeAmount.</param>
        /// <param name="BillbackAmount">BillbackAmount.</param>
        /// <param name="SettlementAmount">SettlementAmount.</param>
        /// <param name="SettlementCurrencyCode">Valid ISO 4217 ALPHA-3 currency code.</param>
        /// <param name="ConversionRate">ConversionRate.</param>
        /// <param name="DeltaCost">DeltaCost.</param>
        /// <param name="SurchargeAmount">SurchargeAmount.</param>
        /// <param name="PercentRateCharged">PercentRateCharged.</param>
        /// <param name="PerTransactionCharged">PerTransactionCharged.</param>
        /// <param name="DowngradeReasonCode">DowngradeReasonCode.</param>
        /// <param name="ProcessTime">ProcessTime.</param>
        /// <param name="AuthCode">AuthCode.</param>
        /// <param name="BatchTime">BatchTime.</param>
        /// <param name="ProcessorBatchNumber">ProcessorBatchNumber.</param>
        /// <param name="CardIndicator">CardIndicator.</param>
        /// <param name="MinimumUnit">MinimumUnit.</param>
        /// <param name="MinimumUnitCurrencyCode">Valid ISO 4217 ALPHA-3 currency code.</param>
        /// <param name="CreditDeltaIndicator">CreditDeltaIndicator.</param>
        /// <param name="FeeCategory">FeeCategory.</param>
        /// <param name="ApplicationName">ApplicationName.</param>
        public ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails(string RequestId = default(string), string OrganizationId = default(string), string AccountId = default(string), string ProcessorMerchantId = default(string), string TransactionReferenceNumber = default(string), string MerchantReferenceNumber = default(string), string AccountSuffix = default(string), string PaymentSubType = default(string), string PaymentSubTypeDescription = default(string), DateTime? TransactionTime = default(DateTime?), DateTime? ProcessedTime = default(DateTime?), string TransactionType = default(string), string Amount = default(string), string CurrencyCode = default(string), string PriceType = default(string), string PriceAmountOne = default(string), string PriceAmountTwo = default(string), string ReClass = default(string), DateTime? SettlementTime = default(DateTime?), string SettlementProcessor = default(string), string MerchantBatchNumber = default(string), string ClearedLevel = default(string), string BillbackReasonCode = default(string), string BillbackReasonDescription = default(string), string MerchantPricedLevel = default(string), string DiscountRate = default(string), string DiscountAmount = default(string), string ClearingRateAmountOne = default(string), string ClearingRateAmountTwo = default(string), string ClearingRateAmountThree = default(string), string ClearingRateCurrencyCode = default(string), string InterchangeAmount = default(string), string BillbackAmount = default(string), string SettlementAmount = default(string), string SettlementCurrencyCode = default(string), string ConversionRate = default(string), string DeltaCost = default(string), string SurchargeAmount = default(string), string PercentRateCharged = default(string), string PerTransactionCharged = default(string), string DowngradeReasonCode = default(string), DateTime? ProcessTime = default(DateTime?), string AuthCode = default(string), DateTime? BatchTime = default(DateTime?), string ProcessorBatchNumber = default(string), string CardIndicator = default(string), int? MinimumUnit = default(int?), string MinimumUnitCurrencyCode = default(string), string CreditDeltaIndicator = default(string), string FeeCategory = default(string), string ApplicationName = default(string))
        {
            this.RequestId = RequestId;
            this.OrganizationId = OrganizationId;
            this.AccountId = AccountId;
            this.ProcessorMerchantId = ProcessorMerchantId;
            this.TransactionReferenceNumber = TransactionReferenceNumber;
            this.MerchantReferenceNumber = MerchantReferenceNumber;
            this.AccountSuffix = AccountSuffix;
            this.PaymentSubType = PaymentSubType;
            this.PaymentSubTypeDescription = PaymentSubTypeDescription;
            this.TransactionTime = TransactionTime;
            this.ProcessedTime = ProcessedTime;
            this.TransactionType = TransactionType;
            this.Amount = Amount;
            this.CurrencyCode = CurrencyCode;
            this.PriceType = PriceType;
            this.PriceAmountOne = PriceAmountOne;
            this.PriceAmountTwo = PriceAmountTwo;
            this.ReClass = ReClass;
            this.SettlementTime = SettlementTime;
            this.SettlementProcessor = SettlementProcessor;
            this.MerchantBatchNumber = MerchantBatchNumber;
            this.ClearedLevel = ClearedLevel;
            this.BillbackReasonCode = BillbackReasonCode;
            this.BillbackReasonDescription = BillbackReasonDescription;
            this.MerchantPricedLevel = MerchantPricedLevel;
            this.DiscountRate = DiscountRate;
            this.DiscountAmount = DiscountAmount;
            this.ClearingRateAmountOne = ClearingRateAmountOne;
            this.ClearingRateAmountTwo = ClearingRateAmountTwo;
            this.ClearingRateAmountThree = ClearingRateAmountThree;
            this.ClearingRateCurrencyCode = ClearingRateCurrencyCode;
            this.InterchangeAmount = InterchangeAmount;
            this.BillbackAmount = BillbackAmount;
            this.SettlementAmount = SettlementAmount;
            this.SettlementCurrencyCode = SettlementCurrencyCode;
            this.ConversionRate = ConversionRate;
            this.DeltaCost = DeltaCost;
            this.SurchargeAmount = SurchargeAmount;
            this.PercentRateCharged = PercentRateCharged;
            this.PerTransactionCharged = PerTransactionCharged;
            this.DowngradeReasonCode = DowngradeReasonCode;
            this.ProcessTime = ProcessTime;
            this.AuthCode = AuthCode;
            this.BatchTime = BatchTime;
            this.ProcessorBatchNumber = ProcessorBatchNumber;
            this.CardIndicator = CardIndicator;
            this.MinimumUnit = MinimumUnit;
            this.MinimumUnitCurrencyCode = MinimumUnitCurrencyCode;
            this.CreditDeltaIndicator = CreditDeltaIndicator;
            this.FeeCategory = FeeCategory;
            this.ApplicationName = ApplicationName;
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorMerchantId
        /// </summary>
        [DataMember(Name="processorMerchantId", EmitDefaultValue=false)]
        public string ProcessorMerchantId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionReferenceNumber
        /// </summary>
        [DataMember(Name="transactionReferenceNumber", EmitDefaultValue=false)]
        public string TransactionReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets MerchantReferenceNumber
        /// </summary>
        [DataMember(Name="merchantReferenceNumber", EmitDefaultValue=false)]
        public string MerchantReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountSuffix
        /// </summary>
        [DataMember(Name="accountSuffix", EmitDefaultValue=false)]
        public string AccountSuffix { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSubType
        /// </summary>
        [DataMember(Name="paymentSubType", EmitDefaultValue=false)]
        public string PaymentSubType { get; set; }

        /// <summary>
        /// Gets or Sets PaymentSubTypeDescription
        /// </summary>
        [DataMember(Name="paymentSubTypeDescription", EmitDefaultValue=false)]
        public string PaymentSubTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets TransactionTime
        /// </summary>
        [DataMember(Name="transactionTime", EmitDefaultValue=false)]
        public DateTime? TransactionTime { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedTime
        /// </summary>
        [DataMember(Name="processedTime", EmitDefaultValue=false)]
        public DateTime? ProcessedTime { get; set; }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Valid ISO 4217 ALPHA-3 currency code
        /// </summary>
        /// <value>Valid ISO 4217 ALPHA-3 currency code</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets PriceType
        /// </summary>
        [DataMember(Name="priceType", EmitDefaultValue=false)]
        public string PriceType { get; set; }

        /// <summary>
        /// Gets or Sets PriceAmountOne
        /// </summary>
        [DataMember(Name="priceAmountOne", EmitDefaultValue=false)]
        public string PriceAmountOne { get; set; }

        /// <summary>
        /// Gets or Sets PriceAmountTwo
        /// </summary>
        [DataMember(Name="priceAmountTwo", EmitDefaultValue=false)]
        public string PriceAmountTwo { get; set; }

        /// <summary>
        /// Gets or Sets ReClass
        /// </summary>
        [DataMember(Name="reClass", EmitDefaultValue=false)]
        public string ReClass { get; set; }

        /// <summary>
        /// Gets or Sets SettlementTime
        /// </summary>
        [DataMember(Name="settlementTime", EmitDefaultValue=false)]
        public DateTime? SettlementTime { get; set; }

        /// <summary>
        /// Gets or Sets SettlementProcessor
        /// </summary>
        [DataMember(Name="settlementProcessor", EmitDefaultValue=false)]
        public string SettlementProcessor { get; set; }

        /// <summary>
        /// Gets or Sets MerchantBatchNumber
        /// </summary>
        [DataMember(Name="merchantBatchNumber", EmitDefaultValue=false)]
        public string MerchantBatchNumber { get; set; }

        /// <summary>
        /// Gets or Sets ClearedLevel
        /// </summary>
        [DataMember(Name="clearedLevel", EmitDefaultValue=false)]
        public string ClearedLevel { get; set; }

        /// <summary>
        /// Gets or Sets BillbackReasonCode
        /// </summary>
        [DataMember(Name="billbackReasonCode", EmitDefaultValue=false)]
        public string BillbackReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets BillbackReasonDescription
        /// </summary>
        [DataMember(Name="billbackReasonDescription", EmitDefaultValue=false)]
        public string BillbackReasonDescription { get; set; }

        /// <summary>
        /// Gets or Sets MerchantPricedLevel
        /// </summary>
        [DataMember(Name="merchantPricedLevel", EmitDefaultValue=false)]
        public string MerchantPricedLevel { get; set; }

        /// <summary>
        /// Gets or Sets DiscountRate
        /// </summary>
        [DataMember(Name="discountRate", EmitDefaultValue=false)]
        public string DiscountRate { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets ClearingRateAmountOne
        /// </summary>
        [DataMember(Name="clearingRateAmountOne", EmitDefaultValue=false)]
        public string ClearingRateAmountOne { get; set; }

        /// <summary>
        /// Gets or Sets ClearingRateAmountTwo
        /// </summary>
        [DataMember(Name="clearingRateAmountTwo", EmitDefaultValue=false)]
        public string ClearingRateAmountTwo { get; set; }

        /// <summary>
        /// Gets or Sets ClearingRateAmountThree
        /// </summary>
        [DataMember(Name="clearingRateAmountThree", EmitDefaultValue=false)]
        public string ClearingRateAmountThree { get; set; }

        /// <summary>
        /// Valid ISO 4217 ALPHA-3 currency code
        /// </summary>
        /// <value>Valid ISO 4217 ALPHA-3 currency code</value>
        [DataMember(Name="clearingRateCurrencyCode", EmitDefaultValue=false)]
        public string ClearingRateCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets InterchangeAmount
        /// </summary>
        [DataMember(Name="interchangeAmount", EmitDefaultValue=false)]
        public string InterchangeAmount { get; set; }

        /// <summary>
        /// Gets or Sets BillbackAmount
        /// </summary>
        [DataMember(Name="billbackAmount", EmitDefaultValue=false)]
        public string BillbackAmount { get; set; }

        /// <summary>
        /// Gets or Sets SettlementAmount
        /// </summary>
        [DataMember(Name="settlementAmount", EmitDefaultValue=false)]
        public string SettlementAmount { get; set; }

        /// <summary>
        /// Valid ISO 4217 ALPHA-3 currency code
        /// </summary>
        /// <value>Valid ISO 4217 ALPHA-3 currency code</value>
        [DataMember(Name="settlementCurrencyCode", EmitDefaultValue=false)]
        public string SettlementCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ConversionRate
        /// </summary>
        [DataMember(Name="conversionRate", EmitDefaultValue=false)]
        public string ConversionRate { get; set; }

        /// <summary>
        /// Gets or Sets DeltaCost
        /// </summary>
        [DataMember(Name="deltaCost", EmitDefaultValue=false)]
        public string DeltaCost { get; set; }

        /// <summary>
        /// Gets or Sets SurchargeAmount
        /// </summary>
        [DataMember(Name="surchargeAmount", EmitDefaultValue=false)]
        public string SurchargeAmount { get; set; }

        /// <summary>
        /// Gets or Sets PercentRateCharged
        /// </summary>
        [DataMember(Name="percentRateCharged", EmitDefaultValue=false)]
        public string PercentRateCharged { get; set; }

        /// <summary>
        /// Gets or Sets PerTransactionCharged
        /// </summary>
        [DataMember(Name="perTransactionCharged", EmitDefaultValue=false)]
        public string PerTransactionCharged { get; set; }

        /// <summary>
        /// Gets or Sets DowngradeReasonCode
        /// </summary>
        [DataMember(Name="downgradeReasonCode", EmitDefaultValue=false)]
        public string DowngradeReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets ProcessTime
        /// </summary>
        [DataMember(Name="processTime", EmitDefaultValue=false)]
        public DateTime? ProcessTime { get; set; }

        /// <summary>
        /// Gets or Sets AuthCode
        /// </summary>
        [DataMember(Name="authCode", EmitDefaultValue=false)]
        public string AuthCode { get; set; }

        /// <summary>
        /// Gets or Sets BatchTime
        /// </summary>
        [DataMember(Name="batchTime", EmitDefaultValue=false)]
        public DateTime? BatchTime { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorBatchNumber
        /// </summary>
        [DataMember(Name="processorBatchNumber", EmitDefaultValue=false)]
        public string ProcessorBatchNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardIndicator
        /// </summary>
        [DataMember(Name="cardIndicator", EmitDefaultValue=false)]
        public string CardIndicator { get; set; }

        /// <summary>
        /// Gets or Sets MinimumUnit
        /// </summary>
        [DataMember(Name="minimumUnit", EmitDefaultValue=false)]
        public int? MinimumUnit { get; set; }

        /// <summary>
        /// Valid ISO 4217 ALPHA-3 currency code
        /// </summary>
        /// <value>Valid ISO 4217 ALPHA-3 currency code</value>
        [DataMember(Name="minimumUnitCurrencyCode", EmitDefaultValue=false)]
        public string MinimumUnitCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CreditDeltaIndicator
        /// </summary>
        [DataMember(Name="creditDeltaIndicator", EmitDefaultValue=false)]
        public string CreditDeltaIndicator { get; set; }

        /// <summary>
        /// Gets or Sets FeeCategory
        /// </summary>
        [DataMember(Name="feeCategory", EmitDefaultValue=false)]
        public string FeeCategory { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ProcessorMerchantId: ").Append(ProcessorMerchantId).Append("\n");
            sb.Append("  TransactionReferenceNumber: ").Append(TransactionReferenceNumber).Append("\n");
            sb.Append("  MerchantReferenceNumber: ").Append(MerchantReferenceNumber).Append("\n");
            sb.Append("  AccountSuffix: ").Append(AccountSuffix).Append("\n");
            sb.Append("  PaymentSubType: ").Append(PaymentSubType).Append("\n");
            sb.Append("  PaymentSubTypeDescription: ").Append(PaymentSubTypeDescription).Append("\n");
            sb.Append("  TransactionTime: ").Append(TransactionTime).Append("\n");
            sb.Append("  ProcessedTime: ").Append(ProcessedTime).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PriceType: ").Append(PriceType).Append("\n");
            sb.Append("  PriceAmountOne: ").Append(PriceAmountOne).Append("\n");
            sb.Append("  PriceAmountTwo: ").Append(PriceAmountTwo).Append("\n");
            sb.Append("  ReClass: ").Append(ReClass).Append("\n");
            sb.Append("  SettlementTime: ").Append(SettlementTime).Append("\n");
            sb.Append("  SettlementProcessor: ").Append(SettlementProcessor).Append("\n");
            sb.Append("  MerchantBatchNumber: ").Append(MerchantBatchNumber).Append("\n");
            sb.Append("  ClearedLevel: ").Append(ClearedLevel).Append("\n");
            sb.Append("  BillbackReasonCode: ").Append(BillbackReasonCode).Append("\n");
            sb.Append("  BillbackReasonDescription: ").Append(BillbackReasonDescription).Append("\n");
            sb.Append("  MerchantPricedLevel: ").Append(MerchantPricedLevel).Append("\n");
            sb.Append("  DiscountRate: ").Append(DiscountRate).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  ClearingRateAmountOne: ").Append(ClearingRateAmountOne).Append("\n");
            sb.Append("  ClearingRateAmountTwo: ").Append(ClearingRateAmountTwo).Append("\n");
            sb.Append("  ClearingRateAmountThree: ").Append(ClearingRateAmountThree).Append("\n");
            sb.Append("  ClearingRateCurrencyCode: ").Append(ClearingRateCurrencyCode).Append("\n");
            sb.Append("  InterchangeAmount: ").Append(InterchangeAmount).Append("\n");
            sb.Append("  BillbackAmount: ").Append(BillbackAmount).Append("\n");
            sb.Append("  SettlementAmount: ").Append(SettlementAmount).Append("\n");
            sb.Append("  SettlementCurrencyCode: ").Append(SettlementCurrencyCode).Append("\n");
            sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
            sb.Append("  DeltaCost: ").Append(DeltaCost).Append("\n");
            sb.Append("  SurchargeAmount: ").Append(SurchargeAmount).Append("\n");
            sb.Append("  PercentRateCharged: ").Append(PercentRateCharged).Append("\n");
            sb.Append("  PerTransactionCharged: ").Append(PerTransactionCharged).Append("\n");
            sb.Append("  DowngradeReasonCode: ").Append(DowngradeReasonCode).Append("\n");
            sb.Append("  ProcessTime: ").Append(ProcessTime).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  BatchTime: ").Append(BatchTime).Append("\n");
            sb.Append("  ProcessorBatchNumber: ").Append(ProcessorBatchNumber).Append("\n");
            sb.Append("  CardIndicator: ").Append(CardIndicator).Append("\n");
            sb.Append("  MinimumUnit: ").Append(MinimumUnit).Append("\n");
            sb.Append("  MinimumUnitCurrencyCode: ").Append(MinimumUnitCurrencyCode).Append("\n");
            sb.Append("  CreditDeltaIndicator: ").Append(CreditDeltaIndicator).Append("\n");
            sb.Append("  FeeCategory: ").Append(FeeCategory).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails);
        }

        /// <summary>
        /// Returns true if ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ProcessorMerchantId == other.ProcessorMerchantId ||
                    this.ProcessorMerchantId != null &&
                    this.ProcessorMerchantId.Equals(other.ProcessorMerchantId)
                ) && 
                (
                    this.TransactionReferenceNumber == other.TransactionReferenceNumber ||
                    this.TransactionReferenceNumber != null &&
                    this.TransactionReferenceNumber.Equals(other.TransactionReferenceNumber)
                ) && 
                (
                    this.MerchantReferenceNumber == other.MerchantReferenceNumber ||
                    this.MerchantReferenceNumber != null &&
                    this.MerchantReferenceNumber.Equals(other.MerchantReferenceNumber)
                ) && 
                (
                    this.AccountSuffix == other.AccountSuffix ||
                    this.AccountSuffix != null &&
                    this.AccountSuffix.Equals(other.AccountSuffix)
                ) && 
                (
                    this.PaymentSubType == other.PaymentSubType ||
                    this.PaymentSubType != null &&
                    this.PaymentSubType.Equals(other.PaymentSubType)
                ) && 
                (
                    this.PaymentSubTypeDescription == other.PaymentSubTypeDescription ||
                    this.PaymentSubTypeDescription != null &&
                    this.PaymentSubTypeDescription.Equals(other.PaymentSubTypeDescription)
                ) && 
                (
                    this.TransactionTime == other.TransactionTime ||
                    this.TransactionTime != null &&
                    this.TransactionTime.Equals(other.TransactionTime)
                ) && 
                (
                    this.ProcessedTime == other.ProcessedTime ||
                    this.ProcessedTime != null &&
                    this.ProcessedTime.Equals(other.ProcessedTime)
                ) && 
                (
                    this.TransactionType == other.TransactionType ||
                    this.TransactionType != null &&
                    this.TransactionType.Equals(other.TransactionType)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.PriceType == other.PriceType ||
                    this.PriceType != null &&
                    this.PriceType.Equals(other.PriceType)
                ) && 
                (
                    this.PriceAmountOne == other.PriceAmountOne ||
                    this.PriceAmountOne != null &&
                    this.PriceAmountOne.Equals(other.PriceAmountOne)
                ) && 
                (
                    this.PriceAmountTwo == other.PriceAmountTwo ||
                    this.PriceAmountTwo != null &&
                    this.PriceAmountTwo.Equals(other.PriceAmountTwo)
                ) && 
                (
                    this.ReClass == other.ReClass ||
                    this.ReClass != null &&
                    this.ReClass.Equals(other.ReClass)
                ) && 
                (
                    this.SettlementTime == other.SettlementTime ||
                    this.SettlementTime != null &&
                    this.SettlementTime.Equals(other.SettlementTime)
                ) && 
                (
                    this.SettlementProcessor == other.SettlementProcessor ||
                    this.SettlementProcessor != null &&
                    this.SettlementProcessor.Equals(other.SettlementProcessor)
                ) && 
                (
                    this.MerchantBatchNumber == other.MerchantBatchNumber ||
                    this.MerchantBatchNumber != null &&
                    this.MerchantBatchNumber.Equals(other.MerchantBatchNumber)
                ) && 
                (
                    this.ClearedLevel == other.ClearedLevel ||
                    this.ClearedLevel != null &&
                    this.ClearedLevel.Equals(other.ClearedLevel)
                ) && 
                (
                    this.BillbackReasonCode == other.BillbackReasonCode ||
                    this.BillbackReasonCode != null &&
                    this.BillbackReasonCode.Equals(other.BillbackReasonCode)
                ) && 
                (
                    this.BillbackReasonDescription == other.BillbackReasonDescription ||
                    this.BillbackReasonDescription != null &&
                    this.BillbackReasonDescription.Equals(other.BillbackReasonDescription)
                ) && 
                (
                    this.MerchantPricedLevel == other.MerchantPricedLevel ||
                    this.MerchantPricedLevel != null &&
                    this.MerchantPricedLevel.Equals(other.MerchantPricedLevel)
                ) && 
                (
                    this.DiscountRate == other.DiscountRate ||
                    this.DiscountRate != null &&
                    this.DiscountRate.Equals(other.DiscountRate)
                ) && 
                (
                    this.DiscountAmount == other.DiscountAmount ||
                    this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    this.ClearingRateAmountOne == other.ClearingRateAmountOne ||
                    this.ClearingRateAmountOne != null &&
                    this.ClearingRateAmountOne.Equals(other.ClearingRateAmountOne)
                ) && 
                (
                    this.ClearingRateAmountTwo == other.ClearingRateAmountTwo ||
                    this.ClearingRateAmountTwo != null &&
                    this.ClearingRateAmountTwo.Equals(other.ClearingRateAmountTwo)
                ) && 
                (
                    this.ClearingRateAmountThree == other.ClearingRateAmountThree ||
                    this.ClearingRateAmountThree != null &&
                    this.ClearingRateAmountThree.Equals(other.ClearingRateAmountThree)
                ) && 
                (
                    this.ClearingRateCurrencyCode == other.ClearingRateCurrencyCode ||
                    this.ClearingRateCurrencyCode != null &&
                    this.ClearingRateCurrencyCode.Equals(other.ClearingRateCurrencyCode)
                ) && 
                (
                    this.InterchangeAmount == other.InterchangeAmount ||
                    this.InterchangeAmount != null &&
                    this.InterchangeAmount.Equals(other.InterchangeAmount)
                ) && 
                (
                    this.BillbackAmount == other.BillbackAmount ||
                    this.BillbackAmount != null &&
                    this.BillbackAmount.Equals(other.BillbackAmount)
                ) && 
                (
                    this.SettlementAmount == other.SettlementAmount ||
                    this.SettlementAmount != null &&
                    this.SettlementAmount.Equals(other.SettlementAmount)
                ) && 
                (
                    this.SettlementCurrencyCode == other.SettlementCurrencyCode ||
                    this.SettlementCurrencyCode != null &&
                    this.SettlementCurrencyCode.Equals(other.SettlementCurrencyCode)
                ) && 
                (
                    this.ConversionRate == other.ConversionRate ||
                    this.ConversionRate != null &&
                    this.ConversionRate.Equals(other.ConversionRate)
                ) && 
                (
                    this.DeltaCost == other.DeltaCost ||
                    this.DeltaCost != null &&
                    this.DeltaCost.Equals(other.DeltaCost)
                ) && 
                (
                    this.SurchargeAmount == other.SurchargeAmount ||
                    this.SurchargeAmount != null &&
                    this.SurchargeAmount.Equals(other.SurchargeAmount)
                ) && 
                (
                    this.PercentRateCharged == other.PercentRateCharged ||
                    this.PercentRateCharged != null &&
                    this.PercentRateCharged.Equals(other.PercentRateCharged)
                ) && 
                (
                    this.PerTransactionCharged == other.PerTransactionCharged ||
                    this.PerTransactionCharged != null &&
                    this.PerTransactionCharged.Equals(other.PerTransactionCharged)
                ) && 
                (
                    this.DowngradeReasonCode == other.DowngradeReasonCode ||
                    this.DowngradeReasonCode != null &&
                    this.DowngradeReasonCode.Equals(other.DowngradeReasonCode)
                ) && 
                (
                    this.ProcessTime == other.ProcessTime ||
                    this.ProcessTime != null &&
                    this.ProcessTime.Equals(other.ProcessTime)
                ) && 
                (
                    this.AuthCode == other.AuthCode ||
                    this.AuthCode != null &&
                    this.AuthCode.Equals(other.AuthCode)
                ) && 
                (
                    this.BatchTime == other.BatchTime ||
                    this.BatchTime != null &&
                    this.BatchTime.Equals(other.BatchTime)
                ) && 
                (
                    this.ProcessorBatchNumber == other.ProcessorBatchNumber ||
                    this.ProcessorBatchNumber != null &&
                    this.ProcessorBatchNumber.Equals(other.ProcessorBatchNumber)
                ) && 
                (
                    this.CardIndicator == other.CardIndicator ||
                    this.CardIndicator != null &&
                    this.CardIndicator.Equals(other.CardIndicator)
                ) && 
                (
                    this.MinimumUnit == other.MinimumUnit ||
                    this.MinimumUnit != null &&
                    this.MinimumUnit.Equals(other.MinimumUnit)
                ) && 
                (
                    this.MinimumUnitCurrencyCode == other.MinimumUnitCurrencyCode ||
                    this.MinimumUnitCurrencyCode != null &&
                    this.MinimumUnitCurrencyCode.Equals(other.MinimumUnitCurrencyCode)
                ) && 
                (
                    this.CreditDeltaIndicator == other.CreditDeltaIndicator ||
                    this.CreditDeltaIndicator != null &&
                    this.CreditDeltaIndicator.Equals(other.CreditDeltaIndicator)
                ) && 
                (
                    this.FeeCategory == other.FeeCategory ||
                    this.FeeCategory != null &&
                    this.FeeCategory.Equals(other.FeeCategory)
                ) && 
                (
                    this.ApplicationName == other.ApplicationName ||
                    this.ApplicationName != null &&
                    this.ApplicationName.Equals(other.ApplicationName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ProcessorMerchantId != null)
                    hash = hash * 59 + this.ProcessorMerchantId.GetHashCode();
                if (this.TransactionReferenceNumber != null)
                    hash = hash * 59 + this.TransactionReferenceNumber.GetHashCode();
                if (this.MerchantReferenceNumber != null)
                    hash = hash * 59 + this.MerchantReferenceNumber.GetHashCode();
                if (this.AccountSuffix != null)
                    hash = hash * 59 + this.AccountSuffix.GetHashCode();
                if (this.PaymentSubType != null)
                    hash = hash * 59 + this.PaymentSubType.GetHashCode();
                if (this.PaymentSubTypeDescription != null)
                    hash = hash * 59 + this.PaymentSubTypeDescription.GetHashCode();
                if (this.TransactionTime != null)
                    hash = hash * 59 + this.TransactionTime.GetHashCode();
                if (this.ProcessedTime != null)
                    hash = hash * 59 + this.ProcessedTime.GetHashCode();
                if (this.TransactionType != null)
                    hash = hash * 59 + this.TransactionType.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.PriceType != null)
                    hash = hash * 59 + this.PriceType.GetHashCode();
                if (this.PriceAmountOne != null)
                    hash = hash * 59 + this.PriceAmountOne.GetHashCode();
                if (this.PriceAmountTwo != null)
                    hash = hash * 59 + this.PriceAmountTwo.GetHashCode();
                if (this.ReClass != null)
                    hash = hash * 59 + this.ReClass.GetHashCode();
                if (this.SettlementTime != null)
                    hash = hash * 59 + this.SettlementTime.GetHashCode();
                if (this.SettlementProcessor != null)
                    hash = hash * 59 + this.SettlementProcessor.GetHashCode();
                if (this.MerchantBatchNumber != null)
                    hash = hash * 59 + this.MerchantBatchNumber.GetHashCode();
                if (this.ClearedLevel != null)
                    hash = hash * 59 + this.ClearedLevel.GetHashCode();
                if (this.BillbackReasonCode != null)
                    hash = hash * 59 + this.BillbackReasonCode.GetHashCode();
                if (this.BillbackReasonDescription != null)
                    hash = hash * 59 + this.BillbackReasonDescription.GetHashCode();
                if (this.MerchantPricedLevel != null)
                    hash = hash * 59 + this.MerchantPricedLevel.GetHashCode();
                if (this.DiscountRate != null)
                    hash = hash * 59 + this.DiscountRate.GetHashCode();
                if (this.DiscountAmount != null)
                    hash = hash * 59 + this.DiscountAmount.GetHashCode();
                if (this.ClearingRateAmountOne != null)
                    hash = hash * 59 + this.ClearingRateAmountOne.GetHashCode();
                if (this.ClearingRateAmountTwo != null)
                    hash = hash * 59 + this.ClearingRateAmountTwo.GetHashCode();
                if (this.ClearingRateAmountThree != null)
                    hash = hash * 59 + this.ClearingRateAmountThree.GetHashCode();
                if (this.ClearingRateCurrencyCode != null)
                    hash = hash * 59 + this.ClearingRateCurrencyCode.GetHashCode();
                if (this.InterchangeAmount != null)
                    hash = hash * 59 + this.InterchangeAmount.GetHashCode();
                if (this.BillbackAmount != null)
                    hash = hash * 59 + this.BillbackAmount.GetHashCode();
                if (this.SettlementAmount != null)
                    hash = hash * 59 + this.SettlementAmount.GetHashCode();
                if (this.SettlementCurrencyCode != null)
                    hash = hash * 59 + this.SettlementCurrencyCode.GetHashCode();
                if (this.ConversionRate != null)
                    hash = hash * 59 + this.ConversionRate.GetHashCode();
                if (this.DeltaCost != null)
                    hash = hash * 59 + this.DeltaCost.GetHashCode();
                if (this.SurchargeAmount != null)
                    hash = hash * 59 + this.SurchargeAmount.GetHashCode();
                if (this.PercentRateCharged != null)
                    hash = hash * 59 + this.PercentRateCharged.GetHashCode();
                if (this.PerTransactionCharged != null)
                    hash = hash * 59 + this.PerTransactionCharged.GetHashCode();
                if (this.DowngradeReasonCode != null)
                    hash = hash * 59 + this.DowngradeReasonCode.GetHashCode();
                if (this.ProcessTime != null)
                    hash = hash * 59 + this.ProcessTime.GetHashCode();
                if (this.AuthCode != null)
                    hash = hash * 59 + this.AuthCode.GetHashCode();
                if (this.BatchTime != null)
                    hash = hash * 59 + this.BatchTime.GetHashCode();
                if (this.ProcessorBatchNumber != null)
                    hash = hash * 59 + this.ProcessorBatchNumber.GetHashCode();
                if (this.CardIndicator != null)
                    hash = hash * 59 + this.CardIndicator.GetHashCode();
                if (this.MinimumUnit != null)
                    hash = hash * 59 + this.MinimumUnit.GetHashCode();
                if (this.MinimumUnitCurrencyCode != null)
                    hash = hash * 59 + this.MinimumUnitCurrencyCode.GetHashCode();
                if (this.CreditDeltaIndicator != null)
                    hash = hash * 59 + this.CreditDeltaIndicator.GetHashCode();
                if (this.FeeCategory != null)
                    hash = hash * 59 + this.FeeCategory.GetHashCode();
                if (this.ApplicationName != null)
                    hash = hash * 59 + this.ApplicationName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
