/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsSenderInformationAccount
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsSenderInformationAccount :  IEquatable<Ptsv2paymentsSenderInformationAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsSenderInformationAccount" /> class.
        /// </summary>
        /// <param name="Number">The account number of the entity funding the transaction. The value for this field can be a payment card account number or bank account number. .</param>
        /// <param name="Type">Identifies the sender&#39;s account type. This field is applicable for AFT transactions.  Valid values are:   - &#x60;00&#x60; for Other   - &#x60;01&#x60; for Routing Transit Number (RTN) + Bank Account Number (BAN)   - &#x60;02&#x60; for International Bank Account Number (IBAN)   - &#x60;03&#x60; for Card Account   - &#x60;04&#x60; for Email   - &#x60;05&#x60; for Phone Number   - &#x60;06&#x60; for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code   - &#x60;07&#x60; for Wallet ID   - &#x60;08&#x60; for Social Network ID .</param>
        /// <param name="FundsSource">Source of funds. Possible Values:  - &#x60;01&#x60;: Credit.  - &#x60;02&#x60;: Debit.  - &#x60;03&#x60;: Prepaid.  - &#x60;04&#x60;: Deposit Account.  - &#x60;05&#x60;: Mobile Money Account.  - &#x60;06&#x60;: Cash.  - &#x60;07&#x60;: Other.  - &#x60;V5&#x60;: Debits / deposit access other than those linked to the cardholders&#39; scheme.  - &#x60;V6&#x60;: Credit accounts other than those linked to the cardholder&#39;s scheme. .</param>
        public Ptsv2paymentsSenderInformationAccount(string Number = default(string), string Type = default(string), string FundsSource = default(string))
        {
            this.Number = Number;
            this.Type = Type;
            this.FundsSource = FundsSource;
        }
        
        /// <summary>
        /// The account number of the entity funding the transaction. The value for this field can be a payment card account number or bank account number. 
        /// </summary>
        /// <value>The account number of the entity funding the transaction. The value for this field can be a payment card account number or bank account number. </value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Identifies the sender&#39;s account type. This field is applicable for AFT transactions.  Valid values are:   - &#x60;00&#x60; for Other   - &#x60;01&#x60; for Routing Transit Number (RTN) + Bank Account Number (BAN)   - &#x60;02&#x60; for International Bank Account Number (IBAN)   - &#x60;03&#x60; for Card Account   - &#x60;04&#x60; for Email   - &#x60;05&#x60; for Phone Number   - &#x60;06&#x60; for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code   - &#x60;07&#x60; for Wallet ID   - &#x60;08&#x60; for Social Network ID 
        /// </summary>
        /// <value>Identifies the sender&#39;s account type. This field is applicable for AFT transactions.  Valid values are:   - &#x60;00&#x60; for Other   - &#x60;01&#x60; for Routing Transit Number (RTN) + Bank Account Number (BAN)   - &#x60;02&#x60; for International Bank Account Number (IBAN)   - &#x60;03&#x60; for Card Account   - &#x60;04&#x60; for Email   - &#x60;05&#x60; for Phone Number   - &#x60;06&#x60; for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code   - &#x60;07&#x60; for Wallet ID   - &#x60;08&#x60; for Social Network ID </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Source of funds. Possible Values:  - &#x60;01&#x60;: Credit.  - &#x60;02&#x60;: Debit.  - &#x60;03&#x60;: Prepaid.  - &#x60;04&#x60;: Deposit Account.  - &#x60;05&#x60;: Mobile Money Account.  - &#x60;06&#x60;: Cash.  - &#x60;07&#x60;: Other.  - &#x60;V5&#x60;: Debits / deposit access other than those linked to the cardholders&#39; scheme.  - &#x60;V6&#x60;: Credit accounts other than those linked to the cardholder&#39;s scheme. 
        /// </summary>
        /// <value>Source of funds. Possible Values:  - &#x60;01&#x60;: Credit.  - &#x60;02&#x60;: Debit.  - &#x60;03&#x60;: Prepaid.  - &#x60;04&#x60;: Deposit Account.  - &#x60;05&#x60;: Mobile Money Account.  - &#x60;06&#x60;: Cash.  - &#x60;07&#x60;: Other.  - &#x60;V5&#x60;: Debits / deposit access other than those linked to the cardholders&#39; scheme.  - &#x60;V6&#x60;: Credit accounts other than those linked to the cardholder&#39;s scheme. </value>
        [DataMember(Name="fundsSource", EmitDefaultValue=false)]
        public string FundsSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsSenderInformationAccount {\n");
            if (Number != null) sb.Append("  Number: ").Append(Number).Append("\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (FundsSource != null) sb.Append("  FundsSource: ").Append(FundsSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsSenderInformationAccount);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsSenderInformationAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsSenderInformationAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsSenderInformationAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.FundsSource == other.FundsSource ||
                    this.FundsSource != null &&
                    this.FundsSource.Equals(other.FundsSource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.FundsSource != null)
                    hash = hash * 59 + this.FundsSource.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
