/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Upv1capturecontextsDataOrderInformationAmountDetails
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsDataOrderInformationAmountDetails :  IEquatable<Upv1capturecontextsDataOrderInformationAmountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsDataOrderInformationAmountDetails" /> class.
        /// </summary>
        /// <param name="TotalAmount">This field defines the total order amount. .</param>
        /// <param name="Currency">This field defines the currency applicable to the order. .</param>
        /// <param name="Surcharge">Surcharge.</param>
        /// <param name="DiscountAmount">This field defines the discount amount applicable to the order. .</param>
        /// <param name="SubTotalAmount">This field defines the sub total amount applicable to the order. .</param>
        /// <param name="ServiceFeeAmount">This field defines the service fee amount applicable to the order. .</param>
        /// <param name="TaxAmount">This field defines the tax amount applicable to the order. .</param>
        public Upv1capturecontextsDataOrderInformationAmountDetails(string TotalAmount = default(string), string Currency = default(string), Upv1capturecontextsDataOrderInformationAmountDetailsSurcharge Surcharge = default(Upv1capturecontextsDataOrderInformationAmountDetailsSurcharge), string DiscountAmount = default(string), string SubTotalAmount = default(string), string ServiceFeeAmount = default(string), string TaxAmount = default(string))
        {
            this.TotalAmount = TotalAmount;
            this.Currency = Currency;
            this.Surcharge = Surcharge;
            this.DiscountAmount = DiscountAmount;
            this.SubTotalAmount = SubTotalAmount;
            this.ServiceFeeAmount = ServiceFeeAmount;
            this.TaxAmount = TaxAmount;
        }
        
        /// <summary>
        /// This field defines the total order amount. 
        /// </summary>
        /// <value>This field defines the total order amount. </value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public string TotalAmount { get; set; }

        /// <summary>
        /// This field defines the currency applicable to the order. 
        /// </summary>
        /// <value>This field defines the currency applicable to the order. </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [DataMember(Name="surcharge", EmitDefaultValue=false)]
        public Upv1capturecontextsDataOrderInformationAmountDetailsSurcharge Surcharge { get; set; }

        /// <summary>
        /// This field defines the discount amount applicable to the order. 
        /// </summary>
        /// <value>This field defines the discount amount applicable to the order. </value>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// This field defines the sub total amount applicable to the order. 
        /// </summary>
        /// <value>This field defines the sub total amount applicable to the order. </value>
        [DataMember(Name="subTotalAmount", EmitDefaultValue=false)]
        public string SubTotalAmount { get; set; }

        /// <summary>
        /// This field defines the service fee amount applicable to the order. 
        /// </summary>
        /// <value>This field defines the service fee amount applicable to the order. </value>
        [DataMember(Name="serviceFeeAmount", EmitDefaultValue=false)]
        public string ServiceFeeAmount { get; set; }

        /// <summary>
        /// This field defines the tax amount applicable to the order. 
        /// </summary>
        /// <value>This field defines the tax amount applicable to the order. </value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public string TaxAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsDataOrderInformationAmountDetails {\n");
            if (TotalAmount != null) sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            if (Currency != null) sb.Append("  Currency: ").Append(Currency).Append("\n");
            if (Surcharge != null) sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            if (DiscountAmount != null) sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            if (SubTotalAmount != null) sb.Append("  SubTotalAmount: ").Append(SubTotalAmount).Append("\n");
            if (ServiceFeeAmount != null) sb.Append("  ServiceFeeAmount: ").Append(ServiceFeeAmount).Append("\n");
            if (TaxAmount != null) sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsDataOrderInformationAmountDetails);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsDataOrderInformationAmountDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsDataOrderInformationAmountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsDataOrderInformationAmountDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.Surcharge == other.Surcharge ||
                    this.Surcharge != null &&
                    this.Surcharge.Equals(other.Surcharge)
                ) && 
                (
                    this.DiscountAmount == other.DiscountAmount ||
                    this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    this.SubTotalAmount == other.SubTotalAmount ||
                    this.SubTotalAmount != null &&
                    this.SubTotalAmount.Equals(other.SubTotalAmount)
                ) && 
                (
                    this.ServiceFeeAmount == other.ServiceFeeAmount ||
                    this.ServiceFeeAmount != null &&
                    this.ServiceFeeAmount.Equals(other.ServiceFeeAmount)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.Surcharge != null)
                    hash = hash * 59 + this.Surcharge.GetHashCode();
                if (this.DiscountAmount != null)
                    hash = hash * 59 + this.DiscountAmount.GetHashCode();
                if (this.SubTotalAmount != null)
                    hash = hash * 59 + this.SubTotalAmount.GetHashCode();
                if (this.ServiceFeeAmount != null)
                    hash = hash * 59 + this.ServiceFeeAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
