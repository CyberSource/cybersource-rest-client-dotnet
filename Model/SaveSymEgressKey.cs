/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// SaveSymEgressKey
    /// </summary>
    [DataContract]
    public partial class SaveSymEgressKey :  IEquatable<SaveSymEgressKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveSymEgressKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaveSymEgressKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveSymEgressKey" /> class.
        /// </summary>
        /// <param name="ClientReferenceInformation">ClientReferenceInformation.</param>
        /// <param name="ClientRequestAction">Client request action.  (required).</param>
        /// <param name="KeyInformation">KeyInformation (required).</param>
        public SaveSymEgressKey(Kmsegressv2keyssymClientReferenceInformation ClientReferenceInformation = default(Kmsegressv2keyssymClientReferenceInformation), string ClientRequestAction = default(string), Kmsegressv2keyssymKeyInformation KeyInformation = default(Kmsegressv2keyssymKeyInformation))
        {
            // to ensure "ClientRequestAction" is required (not null)
            if (ClientRequestAction == null)
            {
                throw new InvalidDataException("ClientRequestAction is a required property for SaveSymEgressKey and cannot be null");
            }
            else
            {
                this.ClientRequestAction = ClientRequestAction;
            }
            // to ensure "KeyInformation" is required (not null)
            if (KeyInformation == null)
            {
                throw new InvalidDataException("KeyInformation is a required property for SaveSymEgressKey and cannot be null");
            }
            else
            {
                this.KeyInformation = KeyInformation;
            }
            this.ClientReferenceInformation = ClientReferenceInformation;
        }
        
        /// <summary>
        /// Gets or Sets ClientReferenceInformation
        /// </summary>
        [DataMember(Name="clientReferenceInformation", EmitDefaultValue=false)]
        public Kmsegressv2keyssymClientReferenceInformation ClientReferenceInformation { get; set; }

        /// <summary>
        /// Client request action. 
        /// </summary>
        /// <value>Client request action. </value>
        [DataMember(Name="clientRequestAction", EmitDefaultValue=false)]
        public string ClientRequestAction { get; set; }

        /// <summary>
        /// Gets or Sets KeyInformation
        /// </summary>
        [DataMember(Name="keyInformation", EmitDefaultValue=false)]
        public Kmsegressv2keyssymKeyInformation KeyInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SaveSymEgressKey {\n");
            sb.Append("  ClientReferenceInformation: ").Append(ClientReferenceInformation).Append("\n");
            sb.Append("  ClientRequestAction: ").Append(ClientRequestAction).Append("\n");
            sb.Append("  KeyInformation: ").Append(KeyInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SaveSymEgressKey);
        }

        /// <summary>
        /// Returns true if SaveSymEgressKey instances are equal
        /// </summary>
        /// <param name="other">Instance of SaveSymEgressKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaveSymEgressKey other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientReferenceInformation == other.ClientReferenceInformation ||
                    this.ClientReferenceInformation != null &&
                    this.ClientReferenceInformation.Equals(other.ClientReferenceInformation)
                ) && 
                (
                    this.ClientRequestAction == other.ClientRequestAction ||
                    this.ClientRequestAction != null &&
                    this.ClientRequestAction.Equals(other.ClientRequestAction)
                ) && 
                (
                    this.KeyInformation == other.KeyInformation ||
                    this.KeyInformation != null &&
                    this.KeyInformation.Equals(other.KeyInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientReferenceInformation != null)
                    hash = hash * 59 + this.ClientReferenceInformation.GetHashCode();
                if (this.ClientRequestAction != null)
                    hash = hash * 59 + this.ClientRequestAction.GetHashCode();
                if (this.KeyInformation != null)
                    hash = hash * 59 + this.KeyInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
