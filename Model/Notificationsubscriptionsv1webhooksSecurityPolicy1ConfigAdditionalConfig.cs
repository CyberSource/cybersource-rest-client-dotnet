/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Additional, free form configuration data.
    /// </summary>
    [DataContract]
    public partial class Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig :  IEquatable<Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig" /> class.
        /// </summary>
        /// <param name="Aud">Aud.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="KeyId">KeyId.</param>
        /// <param name="Scope">Scope.</param>
        public Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig(string Aud = default(string), string ClientId = default(string), string KeyId = default(string), string Scope = default(string))
        {
            this.Aud = Aud;
            this.ClientId = ClientId;
            this.KeyId = KeyId;
            this.Scope = Scope;
        }
        
        /// <summary>
        /// Gets or Sets Aud
        /// </summary>
        [DataMember(Name="aud", EmitDefaultValue=false)]
        public string Aud { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets KeyId
        /// </summary>
        [DataMember(Name="keyId", EmitDefaultValue=false)]
        public string KeyId { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig {\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig);
        }

        /// <summary>
        /// Returns true if Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Aud == other.Aud ||
                    this.Aud != null &&
                    this.Aud.Equals(other.Aud)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.KeyId == other.KeyId ||
                    this.KeyId != null &&
                    this.KeyId.Equals(other.KeyId)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Aud != null)
                    hash = hash * 59 + this.Aud.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.KeyId != null)
                    hash = hash * 59 + this.KeyId.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
