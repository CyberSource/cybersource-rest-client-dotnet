/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// This is a server-to-server API request to generate the capture context that can be used to initiate an instance of Microform on an acceptance page.   The capture context is a digitally signed JWT that provides authentication, one-time keys, and the target origin to the Microform Integration application. 
    /// </summary>
    [DataContract]
    public partial class GenerateCaptureContextRequest :  IEquatable<GenerateCaptureContextRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCaptureContextRequest" /> class.
        /// </summary>
        /// <param name="ClientVersion">Specify the version of Microform that you want to use. .</param>
        /// <param name="TargetOrigins">The [target origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the website on which you will be launching Microform is defined by the scheme (protocol), hostname (domain) and port number (if used).    You must use https://hostname (unless you use http://localhost) Wildcards are NOT supported.  Ensure that subdomains are included. Any valid top-level domain is supported (e.g. .com, .co.uk, .gov.br etc)  Examples:   - https://example.com   - https://subdomain.example.com   - https://example.com:8080&lt;br&gt;&lt;br&gt;  If you are embedding within multiple nested iframes you need to specify the origins of all the browser contexts used, for example:    targetOrigins: [     \&quot;https://example.com\&quot;,     \&quot;https://basket.example.com\&quot;,     \&quot;https://ecom.example.com\&quot;   ] .</param>
        /// <param name="AllowedCardNetworks">The list of card networks you want to use for this Microform transaction.  Microform currently supports the following card networks: - VISA - MASTERCARD - AMEX - CARNET - CARTESBANCAIRES - CUP - DINERSCLUB - DISCOVER - EFTPOS - ELO - JCB - JCREW - MADA - MAESTRO - MEEZA  **Important:**    - When integrating Microform (Card) at least one card network should be specified in the allowedCardNetworks field in the capture context request.   - When integrating Microform (ACH/Echeck) the allowedCardNetworks field is not required in the capture context request.   - When integrating both Microform (Card) and Microform (ACH/Echeck) at least one card network should be specified in the allowedCardNetworks field in the capture context request. .</param>
        /// <param name="AllowedPaymentTypes">The payment types that are allowed for the merchant.    Possible values when launching Microform: - CARD - CHECK &lt;br&gt;&lt;br&gt; .</param>
        /// <param name="TransientTokenResponseOptions">TransientTokenResponseOptions.</param>
        public GenerateCaptureContextRequest(string ClientVersion = default(string), List<string> TargetOrigins = default(List<string>), List<string> AllowedCardNetworks = default(List<string>), List<string> AllowedPaymentTypes = default(List<string>), Microformv2sessionsTransientTokenResponseOptions TransientTokenResponseOptions = default(Microformv2sessionsTransientTokenResponseOptions))
        {
            this.ClientVersion = ClientVersion;
            this.TargetOrigins = TargetOrigins;
            this.AllowedCardNetworks = AllowedCardNetworks;
            this.AllowedPaymentTypes = AllowedPaymentTypes;
            this.TransientTokenResponseOptions = TransientTokenResponseOptions;
        }
        
        /// <summary>
        /// Specify the version of Microform that you want to use. 
        /// </summary>
        /// <value>Specify the version of Microform that you want to use. </value>
        [DataMember(Name="clientVersion", EmitDefaultValue=false)]
        public string ClientVersion { get; set; }

        /// <summary>
        /// The [target origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the website on which you will be launching Microform is defined by the scheme (protocol), hostname (domain) and port number (if used).    You must use https://hostname (unless you use http://localhost) Wildcards are NOT supported.  Ensure that subdomains are included. Any valid top-level domain is supported (e.g. .com, .co.uk, .gov.br etc)  Examples:   - https://example.com   - https://subdomain.example.com   - https://example.com:8080&lt;br&gt;&lt;br&gt;  If you are embedding within multiple nested iframes you need to specify the origins of all the browser contexts used, for example:    targetOrigins: [     \&quot;https://example.com\&quot;,     \&quot;https://basket.example.com\&quot;,     \&quot;https://ecom.example.com\&quot;   ] 
        /// </summary>
        /// <value>The [target origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the website on which you will be launching Microform is defined by the scheme (protocol), hostname (domain) and port number (if used).    You must use https://hostname (unless you use http://localhost) Wildcards are NOT supported.  Ensure that subdomains are included. Any valid top-level domain is supported (e.g. .com, .co.uk, .gov.br etc)  Examples:   - https://example.com   - https://subdomain.example.com   - https://example.com:8080&lt;br&gt;&lt;br&gt;  If you are embedding within multiple nested iframes you need to specify the origins of all the browser contexts used, for example:    targetOrigins: [     \&quot;https://example.com\&quot;,     \&quot;https://basket.example.com\&quot;,     \&quot;https://ecom.example.com\&quot;   ] </value>
        [DataMember(Name="targetOrigins", EmitDefaultValue=false)]
        public List<string> TargetOrigins { get; set; }

        /// <summary>
        /// The list of card networks you want to use for this Microform transaction.  Microform currently supports the following card networks: - VISA - MASTERCARD - AMEX - CARNET - CARTESBANCAIRES - CUP - DINERSCLUB - DISCOVER - EFTPOS - ELO - JCB - JCREW - MADA - MAESTRO - MEEZA  **Important:**    - When integrating Microform (Card) at least one card network should be specified in the allowedCardNetworks field in the capture context request.   - When integrating Microform (ACH/Echeck) the allowedCardNetworks field is not required in the capture context request.   - When integrating both Microform (Card) and Microform (ACH/Echeck) at least one card network should be specified in the allowedCardNetworks field in the capture context request. 
        /// </summary>
        /// <value>The list of card networks you want to use for this Microform transaction.  Microform currently supports the following card networks: - VISA - MASTERCARD - AMEX - CARNET - CARTESBANCAIRES - CUP - DINERSCLUB - DISCOVER - EFTPOS - ELO - JCB - JCREW - MADA - MAESTRO - MEEZA  **Important:**    - When integrating Microform (Card) at least one card network should be specified in the allowedCardNetworks field in the capture context request.   - When integrating Microform (ACH/Echeck) the allowedCardNetworks field is not required in the capture context request.   - When integrating both Microform (Card) and Microform (ACH/Echeck) at least one card network should be specified in the allowedCardNetworks field in the capture context request. </value>
        [DataMember(Name="allowedCardNetworks", EmitDefaultValue=false)]
        public List<string> AllowedCardNetworks { get; set; }

        /// <summary>
        /// The payment types that are allowed for the merchant.    Possible values when launching Microform: - CARD - CHECK &lt;br&gt;&lt;br&gt; 
        /// </summary>
        /// <value>The payment types that are allowed for the merchant.    Possible values when launching Microform: - CARD - CHECK &lt;br&gt;&lt;br&gt; </value>
        [DataMember(Name="allowedPaymentTypes", EmitDefaultValue=false)]
        public List<string> AllowedPaymentTypes { get; set; }

        /// <summary>
        /// Gets or Sets TransientTokenResponseOptions
        /// </summary>
        [DataMember(Name="transientTokenResponseOptions", EmitDefaultValue=false)]
        public Microformv2sessionsTransientTokenResponseOptions TransientTokenResponseOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateCaptureContextRequest {\n");
            if (ClientVersion != null) sb.Append("  ClientVersion: ").Append(ClientVersion).Append("\n");
            if (TargetOrigins != null) sb.Append("  TargetOrigins: ").Append(TargetOrigins).Append("\n");
            if (AllowedCardNetworks != null) sb.Append("  AllowedCardNetworks: ").Append(AllowedCardNetworks).Append("\n");
            if (AllowedPaymentTypes != null) sb.Append("  AllowedPaymentTypes: ").Append(AllowedPaymentTypes).Append("\n");
            if (TransientTokenResponseOptions != null) sb.Append("  TransientTokenResponseOptions: ").Append(TransientTokenResponseOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GenerateCaptureContextRequest);
        }

        /// <summary>
        /// Returns true if GenerateCaptureContextRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GenerateCaptureContextRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateCaptureContextRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientVersion == other.ClientVersion ||
                    this.ClientVersion != null &&
                    this.ClientVersion.Equals(other.ClientVersion)
                ) && 
                (
                    this.TargetOrigins == other.TargetOrigins ||
                    this.TargetOrigins != null &&
                    this.TargetOrigins.SequenceEqual(other.TargetOrigins)
                ) && 
                (
                    this.AllowedCardNetworks == other.AllowedCardNetworks ||
                    this.AllowedCardNetworks != null &&
                    this.AllowedCardNetworks.SequenceEqual(other.AllowedCardNetworks)
                ) && 
                (
                    this.AllowedPaymentTypes == other.AllowedPaymentTypes ||
                    this.AllowedPaymentTypes != null &&
                    this.AllowedPaymentTypes.SequenceEqual(other.AllowedPaymentTypes)
                ) && 
                (
                    this.TransientTokenResponseOptions == other.TransientTokenResponseOptions ||
                    this.TransientTokenResponseOptions != null &&
                    this.TransientTokenResponseOptions.Equals(other.TransientTokenResponseOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientVersion != null)
                    hash = hash * 59 + this.ClientVersion.GetHashCode();
                if (this.TargetOrigins != null)
                    hash = hash * 59 + this.TargetOrigins.GetHashCode();
                if (this.AllowedCardNetworks != null)
                    hash = hash * 59 + this.AllowedCardNetworks.GetHashCode();
                if (this.AllowedPaymentTypes != null)
                    hash = hash * 59 + this.AllowedPaymentTypes.GetHashCode();
                if (this.TransientTokenResponseOptions != null)
                    hash = hash * 59 + this.TransientTokenResponseOptions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
