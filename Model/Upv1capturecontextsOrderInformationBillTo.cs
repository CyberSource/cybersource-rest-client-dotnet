/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Upv1capturecontextsOrderInformationBillTo
    /// </summary>
    [DataContract]
    public partial class Upv1capturecontextsOrderInformationBillTo :  IEquatable<Upv1capturecontextsOrderInformationBillTo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Upv1capturecontextsOrderInformationBillTo" /> class.
        /// </summary>
        /// <param name="Address1">Payment card billing street address as it appears on the credit card issuer&#39;s records. .</param>
        /// <param name="Address2">Used for additional address information. For example: _Attention: Accounts Payable_ Optional field. .</param>
        /// <param name="Address3">Additional address information (third line of the billing address).</param>
        /// <param name="Address4">Additional address information (fourth line of the billing address) .</param>
        /// <param name="AdministrativeArea">State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). .</param>
        /// <param name="BuildingNumber">Building number in the street address. .</param>
        /// <param name="Country">Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). .</param>
        /// <param name="District">Customer&#39;s neighborhood, community, or region (a barrio in Brazil) within the city or municipality .</param>
        /// <param name="Locality">Payment card billing city. .</param>
        /// <param name="PostalCode">Postal code for the billing address. The postal code must consist of 5 to 9 digits. .</param>
        /// <param name="Company">Company.</param>
        /// <param name="Email">Customer&#39;s email address, including the full domain name. .</param>
        /// <param name="FirstName">Customer&#39;s first name. This name must be the same as the name on the card.</param>
        /// <param name="LastName">Customer&#39;s last name. This name must be the same as the name on the card. .</param>
        /// <param name="MiddleName">Customer&#39;s middle name. .</param>
        /// <param name="NameSuffix">Customer&#39;s name suffix. .</param>
        /// <param name="Title">Title. .</param>
        /// <param name="PhoneNumber">Customer&#39;s phone number. .</param>
        /// <param name="PhoneType">Customer&#39;s phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work .</param>
        public Upv1capturecontextsOrderInformationBillTo(string Address1 = default(string), string Address2 = default(string), string Address3 = default(string), string Address4 = default(string), string AdministrativeArea = default(string), string BuildingNumber = default(string), string Country = default(string), string District = default(string), string Locality = default(string), string PostalCode = default(string), Upv1capturecontextsOrderInformationBillToCompany Company = default(Upv1capturecontextsOrderInformationBillToCompany), string Email = default(string), string FirstName = default(string), string LastName = default(string), string MiddleName = default(string), string NameSuffix = default(string), string Title = default(string), string PhoneNumber = default(string), string PhoneType = default(string))
        {
            this.Address1 = Address1;
            this.Address2 = Address2;
            this.Address3 = Address3;
            this.Address4 = Address4;
            this.AdministrativeArea = AdministrativeArea;
            this.BuildingNumber = BuildingNumber;
            this.Country = Country;
            this.District = District;
            this.Locality = Locality;
            this.PostalCode = PostalCode;
            this.Company = Company;
            this.Email = Email;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.MiddleName = MiddleName;
            this.NameSuffix = NameSuffix;
            this.Title = Title;
            this.PhoneNumber = PhoneNumber;
            this.PhoneType = PhoneType;
        }
        
        /// <summary>
        /// Payment card billing street address as it appears on the credit card issuer&#39;s records. 
        /// </summary>
        /// <value>Payment card billing street address as it appears on the credit card issuer&#39;s records. </value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Used for additional address information. For example: _Attention: Accounts Payable_ Optional field. 
        /// </summary>
        /// <value>Used for additional address information. For example: _Attention: Accounts Payable_ Optional field. </value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Additional address information (third line of the billing address)
        /// </summary>
        /// <value>Additional address information (third line of the billing address)</value>
        [DataMember(Name="address3", EmitDefaultValue=false)]
        public string Address3 { get; set; }

        /// <summary>
        /// Additional address information (fourth line of the billing address) 
        /// </summary>
        /// <value>Additional address information (fourth line of the billing address) </value>
        [DataMember(Name="address4", EmitDefaultValue=false)]
        public string Address4 { get; set; }

        /// <summary>
        /// State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). 
        /// </summary>
        /// <value>State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). </value>
        [DataMember(Name="administrativeArea", EmitDefaultValue=false)]
        public string AdministrativeArea { get; set; }

        /// <summary>
        /// Building number in the street address. 
        /// </summary>
        /// <value>Building number in the street address. </value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). 
        /// </summary>
        /// <value>Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). </value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Customer&#39;s neighborhood, community, or region (a barrio in Brazil) within the city or municipality 
        /// </summary>
        /// <value>Customer&#39;s neighborhood, community, or region (a barrio in Brazil) within the city or municipality </value>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Payment card billing city. 
        /// </summary>
        /// <value>Payment card billing city. </value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Postal code for the billing address. The postal code must consist of 5 to 9 digits. 
        /// </summary>
        /// <value>Postal code for the billing address. The postal code must consist of 5 to 9 digits. </value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Upv1capturecontextsOrderInformationBillToCompany Company { get; set; }

        /// <summary>
        /// Customer&#39;s email address, including the full domain name. 
        /// </summary>
        /// <value>Customer&#39;s email address, including the full domain name. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Customer&#39;s first name. This name must be the same as the name on the card
        /// </summary>
        /// <value>Customer&#39;s first name. This name must be the same as the name on the card</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Customer&#39;s last name. This name must be the same as the name on the card. 
        /// </summary>
        /// <value>Customer&#39;s last name. This name must be the same as the name on the card. </value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Customer&#39;s middle name. 
        /// </summary>
        /// <value>Customer&#39;s middle name. </value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Customer&#39;s name suffix. 
        /// </summary>
        /// <value>Customer&#39;s name suffix. </value>
        [DataMember(Name="nameSuffix", EmitDefaultValue=false)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Title. 
        /// </summary>
        /// <value>Title. </value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Customer&#39;s phone number. 
        /// </summary>
        /// <value>Customer&#39;s phone number. </value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Customer&#39;s phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work 
        /// </summary>
        /// <value>Customer&#39;s phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work </value>
        [DataMember(Name="phoneType", EmitDefaultValue=false)]
        public string PhoneType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Upv1capturecontextsOrderInformationBillTo {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  Address4: ").Append(Address4).Append("\n");
            sb.Append("  AdministrativeArea: ").Append(AdministrativeArea).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  NameSuffix: ").Append(NameSuffix).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Upv1capturecontextsOrderInformationBillTo);
        }

        /// <summary>
        /// Returns true if Upv1capturecontextsOrderInformationBillTo instances are equal
        /// </summary>
        /// <param name="other">Instance of Upv1capturecontextsOrderInformationBillTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upv1capturecontextsOrderInformationBillTo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Address1 == other.Address1 ||
                    this.Address1 != null &&
                    this.Address1.Equals(other.Address1)
                ) && 
                (
                    this.Address2 == other.Address2 ||
                    this.Address2 != null &&
                    this.Address2.Equals(other.Address2)
                ) && 
                (
                    this.Address3 == other.Address3 ||
                    this.Address3 != null &&
                    this.Address3.Equals(other.Address3)
                ) && 
                (
                    this.Address4 == other.Address4 ||
                    this.Address4 != null &&
                    this.Address4.Equals(other.Address4)
                ) && 
                (
                    this.AdministrativeArea == other.AdministrativeArea ||
                    this.AdministrativeArea != null &&
                    this.AdministrativeArea.Equals(other.AdministrativeArea)
                ) && 
                (
                    this.BuildingNumber == other.BuildingNumber ||
                    this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(other.BuildingNumber)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.District == other.District ||
                    this.District != null &&
                    this.District.Equals(other.District)
                ) && 
                (
                    this.Locality == other.Locality ||
                    this.Locality != null &&
                    this.Locality.Equals(other.Locality)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.NameSuffix == other.NameSuffix ||
                    this.NameSuffix != null &&
                    this.NameSuffix.Equals(other.NameSuffix)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.PhoneType == other.PhoneType ||
                    this.PhoneType != null &&
                    this.PhoneType.Equals(other.PhoneType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Address1 != null)
                    hash = hash * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hash = hash * 59 + this.Address2.GetHashCode();
                if (this.Address3 != null)
                    hash = hash * 59 + this.Address3.GetHashCode();
                if (this.Address4 != null)
                    hash = hash * 59 + this.Address4.GetHashCode();
                if (this.AdministrativeArea != null)
                    hash = hash * 59 + this.AdministrativeArea.GetHashCode();
                if (this.BuildingNumber != null)
                    hash = hash * 59 + this.BuildingNumber.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.District != null)
                    hash = hash * 59 + this.District.GetHashCode();
                if (this.Locality != null)
                    hash = hash * 59 + this.Locality.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.NameSuffix != null)
                    hash = hash * 59 + this.NameSuffix.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.PhoneType != null)
                    hash = hash * 59 + this.PhoneType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
