/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2011RegistrationInformation
    /// </summary>
    [DataContract]
    public partial class InlineResponse2011RegistrationInformation :  IEquatable<InlineResponse2011RegistrationInformation>, IValidatableObject
    {
        /// <summary>
        /// In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; 
        /// </summary>
        /// <value>In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum COMPLETE for "COMPLETE"
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE,
            
            /// <summary>
            /// Enum PARTIAL for "PARTIAL"
            /// </summary>
            [EnumMember(Value = "PARTIAL")]
            PARTIAL
        }
        /// <summary>
        /// In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; 
        /// </summary>
        /// <value>In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; </value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2011RegistrationInformation" /> class.
        /// </summary>
        /// <param name="Mode">In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; .</param>
        /// <param name="SalesRepId">SalesRepId.</param>
        public InlineResponse2011RegistrationInformation(ModeEnum? Mode = default(ModeEnum?), string SalesRepId = default(string))
        {
            this.Mode = Mode;
            this.SalesRepId = SalesRepId;
        }
        
        /// <summary>
        /// Gets or Sets BoardingPackageId
        /// </summary>
        [DataMember(Name="boardingPackageId", EmitDefaultValue=false)]
        public string BoardingPackageId { get; private set; }


        /// <summary>
        /// Gets or Sets SalesRepId
        /// </summary>
        [DataMember(Name="salesRepId", EmitDefaultValue=false)]
        public string SalesRepId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2011RegistrationInformation {\n");
            sb.Append("  BoardingPackageId: ").Append(BoardingPackageId).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SalesRepId: ").Append(SalesRepId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2011RegistrationInformation);
        }

        /// <summary>
        /// Returns true if InlineResponse2011RegistrationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2011RegistrationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2011RegistrationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BoardingPackageId == other.BoardingPackageId ||
                    this.BoardingPackageId != null &&
                    this.BoardingPackageId.Equals(other.BoardingPackageId)
                ) && 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.SalesRepId == other.SalesRepId ||
                    this.SalesRepId != null &&
                    this.SalesRepId.Equals(other.SalesRepId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BoardingPackageId != null)
                    hash = hash * 59 + this.BoardingPackageId.GetHashCode();
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.SalesRepId != null)
                    hash = hash * 59 + this.SalesRepId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
