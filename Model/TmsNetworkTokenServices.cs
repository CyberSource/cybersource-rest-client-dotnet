/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// TmsNetworkTokenServices
    /// </summary>
    [DataContract]
    public partial class TmsNetworkTokenServices :  IEquatable<TmsNetworkTokenServices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TmsNetworkTokenServices" /> class.
        /// </summary>
        /// <param name="Notifications">Notifications.</param>
        /// <param name="PaymentCredentials">PaymentCredentials.</param>
        /// <param name="SynchronousProvisioning">SynchronousProvisioning.</param>
        /// <param name="VisaTokenService">VisaTokenService.</param>
        /// <param name="MastercardDigitalEnablementService">MastercardDigitalEnablementService.</param>
        /// <param name="AmericanExpressTokenService">AmericanExpressTokenService.</param>
        public TmsNetworkTokenServices(TmsNetworkTokenServicesNotifications Notifications = default(TmsNetworkTokenServicesNotifications), TmsNetworkTokenServicesPaymentCredentials PaymentCredentials = default(TmsNetworkTokenServicesPaymentCredentials), TmsNetworkTokenServicesSynchronousProvisioning SynchronousProvisioning = default(TmsNetworkTokenServicesSynchronousProvisioning), TmsNetworkTokenServicesVisaTokenService VisaTokenService = default(TmsNetworkTokenServicesVisaTokenService), TmsNetworkTokenServicesMastercardDigitalEnablementService MastercardDigitalEnablementService = default(TmsNetworkTokenServicesMastercardDigitalEnablementService), TmsNetworkTokenServicesAmericanExpressTokenService AmericanExpressTokenService = default(TmsNetworkTokenServicesAmericanExpressTokenService))
        {
            this.Notifications = Notifications;
            this.PaymentCredentials = PaymentCredentials;
            this.SynchronousProvisioning = SynchronousProvisioning;
            this.VisaTokenService = VisaTokenService;
            this.MastercardDigitalEnablementService = MastercardDigitalEnablementService;
            this.AmericanExpressTokenService = AmericanExpressTokenService;
        }
        
        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public TmsNetworkTokenServicesNotifications Notifications { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCredentials
        /// </summary>
        [DataMember(Name="paymentCredentials", EmitDefaultValue=false)]
        public TmsNetworkTokenServicesPaymentCredentials PaymentCredentials { get; set; }

        /// <summary>
        /// Gets or Sets SynchronousProvisioning
        /// </summary>
        [DataMember(Name="synchronousProvisioning", EmitDefaultValue=false)]
        public TmsNetworkTokenServicesSynchronousProvisioning SynchronousProvisioning { get; set; }

        /// <summary>
        /// Gets or Sets VisaTokenService
        /// </summary>
        [DataMember(Name="visaTokenService", EmitDefaultValue=false)]
        public TmsNetworkTokenServicesVisaTokenService VisaTokenService { get; set; }

        /// <summary>
        /// Gets or Sets MastercardDigitalEnablementService
        /// </summary>
        [DataMember(Name="mastercardDigitalEnablementService", EmitDefaultValue=false)]
        public TmsNetworkTokenServicesMastercardDigitalEnablementService MastercardDigitalEnablementService { get; set; }

        /// <summary>
        /// Gets or Sets AmericanExpressTokenService
        /// </summary>
        [DataMember(Name="americanExpressTokenService", EmitDefaultValue=false)]
        public TmsNetworkTokenServicesAmericanExpressTokenService AmericanExpressTokenService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TmsNetworkTokenServices {\n");
            if (Notifications != null) sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            if (PaymentCredentials != null) sb.Append("  PaymentCredentials: ").Append(PaymentCredentials).Append("\n");
            if (SynchronousProvisioning != null) sb.Append("  SynchronousProvisioning: ").Append(SynchronousProvisioning).Append("\n");
            if (VisaTokenService != null) sb.Append("  VisaTokenService: ").Append(VisaTokenService).Append("\n");
            if (MastercardDigitalEnablementService != null) sb.Append("  MastercardDigitalEnablementService: ").Append(MastercardDigitalEnablementService).Append("\n");
            if (AmericanExpressTokenService != null) sb.Append("  AmericanExpressTokenService: ").Append(AmericanExpressTokenService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TmsNetworkTokenServices);
        }

        /// <summary>
        /// Returns true if TmsNetworkTokenServices instances are equal
        /// </summary>
        /// <param name="other">Instance of TmsNetworkTokenServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TmsNetworkTokenServices other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Notifications == other.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.Equals(other.Notifications)
                ) && 
                (
                    this.PaymentCredentials == other.PaymentCredentials ||
                    this.PaymentCredentials != null &&
                    this.PaymentCredentials.Equals(other.PaymentCredentials)
                ) && 
                (
                    this.SynchronousProvisioning == other.SynchronousProvisioning ||
                    this.SynchronousProvisioning != null &&
                    this.SynchronousProvisioning.Equals(other.SynchronousProvisioning)
                ) && 
                (
                    this.VisaTokenService == other.VisaTokenService ||
                    this.VisaTokenService != null &&
                    this.VisaTokenService.Equals(other.VisaTokenService)
                ) && 
                (
                    this.MastercardDigitalEnablementService == other.MastercardDigitalEnablementService ||
                    this.MastercardDigitalEnablementService != null &&
                    this.MastercardDigitalEnablementService.Equals(other.MastercardDigitalEnablementService)
                ) && 
                (
                    this.AmericanExpressTokenService == other.AmericanExpressTokenService ||
                    this.AmericanExpressTokenService != null &&
                    this.AmericanExpressTokenService.Equals(other.AmericanExpressTokenService)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Notifications != null)
                    hash = hash * 59 + this.Notifications.GetHashCode();
                if (this.PaymentCredentials != null)
                    hash = hash * 59 + this.PaymentCredentials.GetHashCode();
                if (this.SynchronousProvisioning != null)
                    hash = hash * 59 + this.SynchronousProvisioning.GetHashCode();
                if (this.VisaTokenService != null)
                    hash = hash * 59 + this.VisaTokenService.GetHashCode();
                if (this.MastercardDigitalEnablementService != null)
                    hash = hash * 59 + this.MastercardDigitalEnablementService.GetHashCode();
                if (this.AmericanExpressTokenService != null)
                    hash = hash * 59 + this.AmericanExpressTokenService.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
