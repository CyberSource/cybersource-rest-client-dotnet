/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// UpdatePGPKeysRequest1
    /// </summary>
    [DataContract]
    public partial class UpdatePGPKeysRequest1 :  IEquatable<UpdatePGPKeysRequest1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePGPKeysRequest1" /> class.
        /// </summary>
        /// <param name="OrganizationId">Organization Id.</param>
        /// <param name="Status">Only inactive status is applicable for SCMP_API. Only status as inactive needs to be provided to deactivate scmp..</param>
        /// <param name="ExpirationDate">Expiration Date. Required field to update the SCMP_API key.</param>
        /// <param name="Version">Version. Required field to update the SCMP_API key.</param>
        /// <param name="Comment">Comment. Optional field. Can be provided along with Expiration Date and Version.</param>
        public UpdatePGPKeysRequest1(string OrganizationId = default(string), string Status = default(string), string ExpirationDate = default(string), string Version = default(string), string Comment = default(string))
        {
            this.OrganizationId = OrganizationId;
            this.Status = Status;
            this.ExpirationDate = ExpirationDate;
            this.Version = Version;
            this.Comment = Comment;
        }
        
        /// <summary>
        /// Organization Id
        /// </summary>
        /// <value>Organization Id</value>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Only inactive status is applicable for SCMP_API. Only status as inactive needs to be provided to deactivate scmp.
        /// </summary>
        /// <value>Only inactive status is applicable for SCMP_API. Only status as inactive needs to be provided to deactivate scmp.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Expiration Date. Required field to update the SCMP_API key
        /// </summary>
        /// <value>Expiration Date. Required field to update the SCMP_API key</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Version. Required field to update the SCMP_API key
        /// </summary>
        /// <value>Version. Required field to update the SCMP_API key</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Comment. Optional field. Can be provided along with Expiration Date and Version
        /// </summary>
        /// <value>Comment. Optional field. Can be provided along with Expiration Date and Version</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePGPKeysRequest1 {\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdatePGPKeysRequest1);
        }

        /// <summary>
        /// Returns true if UpdatePGPKeysRequest1 instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdatePGPKeysRequest1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePGPKeysRequest1 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
