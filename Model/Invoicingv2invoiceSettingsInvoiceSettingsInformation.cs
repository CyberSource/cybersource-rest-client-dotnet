/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Invoicingv2invoiceSettingsInvoiceSettingsInformation
    /// </summary>
    [DataContract]
    public partial class Invoicingv2invoiceSettingsInvoiceSettingsInformation :  IEquatable<Invoicingv2invoiceSettingsInvoiceSettingsInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoicingv2invoiceSettingsInvoiceSettingsInformation" /> class.
        /// </summary>
        /// <param name="MerchantLogo">The image file, which must be encoded in Base64 format. Supported file formats are &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;. The image file size restriction is 1 MB..</param>
        /// <param name="MerchantDisplayName">The merchant&#39;s display name shown on the invoice..</param>
        /// <param name="CustomEmailMessage">The content of the email message that we send to your customers..</param>
        /// <param name="EnableReminders">Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due..</param>
        /// <param name="HeaderStyle">HeaderStyle.</param>
        /// <param name="DeliveryLanguage">The language of the email that we send to your customers. Possible values are &#x60;zh-CN&#x60;, &#x60;zh-TW&#x60;, &#x60;en-US&#x60;, &#x60;fr-FR&#x60;, &#x60;de-DE&#x60;, &#x60;ja-JP&#x60;, &#x60;pt-BR&#x60;, &#x60;ru-RU&#x60; and &#x60;es-419&#x60;..</param>
        /// <param name="DefaultCurrencyCode">Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (&#x60;reversalInformation&#x60;) or a capture (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60;), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency.  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency. .</param>
        /// <param name="PayerAuthenticationInInvoicing">For a merchant&#39;s invoice payments, enable 3D Secure payer authentication version 1, update to 3D Secure version 2, or disable 3D Secure. Possible values are:  - &#x60;enable&#x60; - &#x60;update&#x60; - &#x60;disable&#x60;  .</param>
        /// <param name="ShowVatNumber">Display VAT number on Invoice. (default to false).</param>
        /// <param name="VatRegistrationNumber">Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes. .</param>
        /// <param name="ShipTo">Collect the payers shipping address. (default to false).</param>
        /// <param name="PhoneNumber">Collect the payers phone number. (default to false).</param>
        /// <param name="Email">Collect the payers email address when the email address is not known or confirm it if it is known at the time of invoice creation. (default to false).</param>
        /// <param name="EnableMerchantEmailNotifications">Whether you would like to receive payment notification for successful transaction (default to false).</param>
        /// <param name="CustomLabels">A list of custom labels that allows you to override (rename) default field names and control the visibility of specific fields on invoices and items. If the list is empty, the labels will not be overwritten. .</param>
        public Invoicingv2invoiceSettingsInvoiceSettingsInformation(string MerchantLogo = default(string), string MerchantDisplayName = default(string), string CustomEmailMessage = default(string), bool? EnableReminders = default(bool?), InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle HeaderStyle = default(InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle), string DeliveryLanguage = default(string), string DefaultCurrencyCode = default(string), string PayerAuthenticationInInvoicing = default(string), bool? ShowVatNumber = false, string VatRegistrationNumber = default(string), bool? ShipTo = false, bool? PhoneNumber = false, bool? Email = false, bool? EnableMerchantEmailNotifications = false, List<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels> CustomLabels = default(List<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels>))
        {
            this.MerchantLogo = MerchantLogo;
            this.MerchantDisplayName = MerchantDisplayName;
            this.CustomEmailMessage = CustomEmailMessage;
            this.EnableReminders = EnableReminders;
            this.HeaderStyle = HeaderStyle;
            this.DeliveryLanguage = DeliveryLanguage;
            this.DefaultCurrencyCode = DefaultCurrencyCode;
            this.PayerAuthenticationInInvoicing = PayerAuthenticationInInvoicing;
            // use default value if no "ShowVatNumber" provided
            if (ShowVatNumber == null)
            {
                this.ShowVatNumber = false;
            }
            else
            {
                this.ShowVatNumber = ShowVatNumber;
            }
            this.VatRegistrationNumber = VatRegistrationNumber;
            // use default value if no "ShipTo" provided
            if (ShipTo == null)
            {
                this.ShipTo = false;
            }
            else
            {
                this.ShipTo = ShipTo;
            }
            // use default value if no "PhoneNumber" provided
            if (PhoneNumber == null)
            {
                this.PhoneNumber = false;
            }
            else
            {
                this.PhoneNumber = PhoneNumber;
            }
            // use default value if no "Email" provided
            if (Email == null)
            {
                this.Email = false;
            }
            else
            {
                this.Email = Email;
            }
            // use default value if no "EnableMerchantEmailNotifications" provided
            if (EnableMerchantEmailNotifications == null)
            {
                this.EnableMerchantEmailNotifications = false;
            }
            else
            {
                this.EnableMerchantEmailNotifications = EnableMerchantEmailNotifications;
            }
            this.CustomLabels = CustomLabels;
        }
        
        /// <summary>
        /// The image file, which must be encoded in Base64 format. Supported file formats are &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;. The image file size restriction is 1 MB.
        /// </summary>
        /// <value>The image file, which must be encoded in Base64 format. Supported file formats are &#x60;png&#x60;, &#x60;jpg&#x60;, and &#x60;gif&#x60;. The image file size restriction is 1 MB.</value>
        [DataMember(Name="merchantLogo", EmitDefaultValue=false)]
        public string MerchantLogo { get; set; }

        /// <summary>
        /// The merchant&#39;s display name shown on the invoice.
        /// </summary>
        /// <value>The merchant&#39;s display name shown on the invoice.</value>
        [DataMember(Name="merchantDisplayName", EmitDefaultValue=false)]
        public string MerchantDisplayName { get; set; }

        /// <summary>
        /// The content of the email message that we send to your customers.
        /// </summary>
        /// <value>The content of the email message that we send to your customers.</value>
        [DataMember(Name="customEmailMessage", EmitDefaultValue=false)]
        public string CustomEmailMessage { get; set; }

        /// <summary>
        /// Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.
        /// </summary>
        /// <value>Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.</value>
        [DataMember(Name="enableReminders", EmitDefaultValue=false)]
        public bool? EnableReminders { get; set; }

        /// <summary>
        /// Gets or Sets HeaderStyle
        /// </summary>
        [DataMember(Name="headerStyle", EmitDefaultValue=false)]
        public InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle HeaderStyle { get; set; }

        /// <summary>
        /// The language of the email that we send to your customers. Possible values are &#x60;zh-CN&#x60;, &#x60;zh-TW&#x60;, &#x60;en-US&#x60;, &#x60;fr-FR&#x60;, &#x60;de-DE&#x60;, &#x60;ja-JP&#x60;, &#x60;pt-BR&#x60;, &#x60;ru-RU&#x60; and &#x60;es-419&#x60;.
        /// </summary>
        /// <value>The language of the email that we send to your customers. Possible values are &#x60;zh-CN&#x60;, &#x60;zh-TW&#x60;, &#x60;en-US&#x60;, &#x60;fr-FR&#x60;, &#x60;de-DE&#x60;, &#x60;ja-JP&#x60;, &#x60;pt-BR&#x60;, &#x60;ru-RU&#x60; and &#x60;es-419&#x60;.</value>
        [DataMember(Name="deliveryLanguage", EmitDefaultValue=false)]
        public string DeliveryLanguage { get; set; }

        /// <summary>
        /// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (&#x60;reversalInformation&#x60;) or a capture (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60;), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency.  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency. 
        /// </summary>
        /// <value>Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (&#x60;reversalInformation&#x60;) or a capture (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60;), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency.  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency. </value>
        [DataMember(Name="defaultCurrencyCode", EmitDefaultValue=false)]
        public string DefaultCurrencyCode { get; set; }

        /// <summary>
        /// For a merchant&#39;s invoice payments, enable 3D Secure payer authentication version 1, update to 3D Secure version 2, or disable 3D Secure. Possible values are:  - &#x60;enable&#x60; - &#x60;update&#x60; - &#x60;disable&#x60;  
        /// </summary>
        /// <value>For a merchant&#39;s invoice payments, enable 3D Secure payer authentication version 1, update to 3D Secure version 2, or disable 3D Secure. Possible values are:  - &#x60;enable&#x60; - &#x60;update&#x60; - &#x60;disable&#x60;  </value>
        [DataMember(Name="payerAuthenticationInInvoicing", EmitDefaultValue=false)]
        public string PayerAuthenticationInInvoicing { get; set; }

        /// <summary>
        /// Display VAT number on Invoice.
        /// </summary>
        /// <value>Display VAT number on Invoice.</value>
        [DataMember(Name="showVatNumber", EmitDefaultValue=false)]
        public bool? ShowVatNumber { get; set; }

        /// <summary>
        /// Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes. 
        /// </summary>
        /// <value>Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes. </value>
        [DataMember(Name="vatRegistrationNumber", EmitDefaultValue=false)]
        public string VatRegistrationNumber { get; set; }

        /// <summary>
        /// Collect the payers shipping address.
        /// </summary>
        /// <value>Collect the payers shipping address.</value>
        [DataMember(Name="shipTo", EmitDefaultValue=false)]
        public bool? ShipTo { get; set; }

        /// <summary>
        /// Collect the payers phone number.
        /// </summary>
        /// <value>Collect the payers phone number.</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public bool? PhoneNumber { get; set; }

        /// <summary>
        /// Collect the payers email address when the email address is not known or confirm it if it is known at the time of invoice creation.
        /// </summary>
        /// <value>Collect the payers email address when the email address is not known or confirm it if it is known at the time of invoice creation.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public bool? Email { get; set; }

        /// <summary>
        /// Whether you would like to receive payment notification for successful transaction
        /// </summary>
        /// <value>Whether you would like to receive payment notification for successful transaction</value>
        [DataMember(Name="enableMerchantEmailNotifications", EmitDefaultValue=false)]
        public bool? EnableMerchantEmailNotifications { get; set; }

        /// <summary>
        /// A list of custom labels that allows you to override (rename) default field names and control the visibility of specific fields on invoices and items. If the list is empty, the labels will not be overwritten. 
        /// </summary>
        /// <value>A list of custom labels that allows you to override (rename) default field names and control the visibility of specific fields on invoices and items. If the list is empty, the labels will not be overwritten. </value>
        [DataMember(Name="customLabels", EmitDefaultValue=false)]
        public List<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels> CustomLabels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoicingv2invoiceSettingsInvoiceSettingsInformation {\n");
            if (MerchantLogo != null) sb.Append("  MerchantLogo: ").Append(MerchantLogo).Append("\n");
            if (MerchantDisplayName != null) sb.Append("  MerchantDisplayName: ").Append(MerchantDisplayName).Append("\n");
            if (CustomEmailMessage != null) sb.Append("  CustomEmailMessage: ").Append(CustomEmailMessage).Append("\n");
            if (EnableReminders != null) sb.Append("  EnableReminders: ").Append(EnableReminders).Append("\n");
            if (HeaderStyle != null) sb.Append("  HeaderStyle: ").Append(HeaderStyle).Append("\n");
            if (DeliveryLanguage != null) sb.Append("  DeliveryLanguage: ").Append(DeliveryLanguage).Append("\n");
            if (DefaultCurrencyCode != null) sb.Append("  DefaultCurrencyCode: ").Append(DefaultCurrencyCode).Append("\n");
            if (PayerAuthenticationInInvoicing != null) sb.Append("  PayerAuthenticationInInvoicing: ").Append(PayerAuthenticationInInvoicing).Append("\n");
            if (ShowVatNumber != null) sb.Append("  ShowVatNumber: ").Append(ShowVatNumber).Append("\n");
            if (VatRegistrationNumber != null) sb.Append("  VatRegistrationNumber: ").Append(VatRegistrationNumber).Append("\n");
            if (ShipTo != null) sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            if (PhoneNumber != null) sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            if (Email != null) sb.Append("  Email: ").Append(Email).Append("\n");
            if (EnableMerchantEmailNotifications != null) sb.Append("  EnableMerchantEmailNotifications: ").Append(EnableMerchantEmailNotifications).Append("\n");
            if (CustomLabels != null) sb.Append("  CustomLabels: ").Append(CustomLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Invoicingv2invoiceSettingsInvoiceSettingsInformation);
        }

        /// <summary>
        /// Returns true if Invoicingv2invoiceSettingsInvoiceSettingsInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Invoicingv2invoiceSettingsInvoiceSettingsInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoicingv2invoiceSettingsInvoiceSettingsInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantLogo == other.MerchantLogo ||
                    this.MerchantLogo != null &&
                    this.MerchantLogo.Equals(other.MerchantLogo)
                ) && 
                (
                    this.MerchantDisplayName == other.MerchantDisplayName ||
                    this.MerchantDisplayName != null &&
                    this.MerchantDisplayName.Equals(other.MerchantDisplayName)
                ) && 
                (
                    this.CustomEmailMessage == other.CustomEmailMessage ||
                    this.CustomEmailMessage != null &&
                    this.CustomEmailMessage.Equals(other.CustomEmailMessage)
                ) && 
                (
                    this.EnableReminders == other.EnableReminders ||
                    this.EnableReminders != null &&
                    this.EnableReminders.Equals(other.EnableReminders)
                ) && 
                (
                    this.HeaderStyle == other.HeaderStyle ||
                    this.HeaderStyle != null &&
                    this.HeaderStyle.Equals(other.HeaderStyle)
                ) && 
                (
                    this.DeliveryLanguage == other.DeliveryLanguage ||
                    this.DeliveryLanguage != null &&
                    this.DeliveryLanguage.Equals(other.DeliveryLanguage)
                ) && 
                (
                    this.DefaultCurrencyCode == other.DefaultCurrencyCode ||
                    this.DefaultCurrencyCode != null &&
                    this.DefaultCurrencyCode.Equals(other.DefaultCurrencyCode)
                ) && 
                (
                    this.PayerAuthenticationInInvoicing == other.PayerAuthenticationInInvoicing ||
                    this.PayerAuthenticationInInvoicing != null &&
                    this.PayerAuthenticationInInvoicing.Equals(other.PayerAuthenticationInInvoicing)
                ) && 
                (
                    this.ShowVatNumber == other.ShowVatNumber ||
                    this.ShowVatNumber != null &&
                    this.ShowVatNumber.Equals(other.ShowVatNumber)
                ) && 
                (
                    this.VatRegistrationNumber == other.VatRegistrationNumber ||
                    this.VatRegistrationNumber != null &&
                    this.VatRegistrationNumber.Equals(other.VatRegistrationNumber)
                ) && 
                (
                    this.ShipTo == other.ShipTo ||
                    this.ShipTo != null &&
                    this.ShipTo.Equals(other.ShipTo)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.EnableMerchantEmailNotifications == other.EnableMerchantEmailNotifications ||
                    this.EnableMerchantEmailNotifications != null &&
                    this.EnableMerchantEmailNotifications.Equals(other.EnableMerchantEmailNotifications)
                ) && 
                (
                    this.CustomLabels == other.CustomLabels ||
                    this.CustomLabels != null &&
                    this.CustomLabels.SequenceEqual(other.CustomLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantLogo != null)
                    hash = hash * 59 + this.MerchantLogo.GetHashCode();
                if (this.MerchantDisplayName != null)
                    hash = hash * 59 + this.MerchantDisplayName.GetHashCode();
                if (this.CustomEmailMessage != null)
                    hash = hash * 59 + this.CustomEmailMessage.GetHashCode();
                if (this.EnableReminders != null)
                    hash = hash * 59 + this.EnableReminders.GetHashCode();
                if (this.HeaderStyle != null)
                    hash = hash * 59 + this.HeaderStyle.GetHashCode();
                if (this.DeliveryLanguage != null)
                    hash = hash * 59 + this.DeliveryLanguage.GetHashCode();
                if (this.DefaultCurrencyCode != null)
                    hash = hash * 59 + this.DefaultCurrencyCode.GetHashCode();
                if (this.PayerAuthenticationInInvoicing != null)
                    hash = hash * 59 + this.PayerAuthenticationInInvoicing.GetHashCode();
                if (this.ShowVatNumber != null)
                    hash = hash * 59 + this.ShowVatNumber.GetHashCode();
                if (this.VatRegistrationNumber != null)
                    hash = hash * 59 + this.VatRegistrationNumber.GetHashCode();
                if (this.ShipTo != null)
                    hash = hash * 59 + this.ShipTo.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.EnableMerchantEmailNotifications != null)
                    hash = hash * 59 + this.EnableMerchantEmailNotifications.GetHashCode();
                if (this.CustomLabels != null)
                    hash = hash * 59 + this.CustomLabels.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
