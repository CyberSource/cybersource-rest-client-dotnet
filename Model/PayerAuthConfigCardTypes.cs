/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// PayerAuthConfigCardTypes
    /// </summary>
    [DataContract]
    public partial class PayerAuthConfigCardTypes :  IEquatable<PayerAuthConfigCardTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayerAuthConfigCardTypes" /> class.
        /// </summary>
        /// <param name="VerifiedByVisa">VerifiedByVisa.</param>
        /// <param name="MasterCardSecureCode">MasterCardSecureCode.</param>
        /// <param name="AmexSafeKey">AmexSafeKey.</param>
        /// <param name="JCBJSecure">JCBJSecure.</param>
        /// <param name="DinersClubInternationalProtectBuy">DinersClubInternationalProtectBuy.</param>
        /// <param name="ELO">ELO.</param>
        /// <param name="UPI">UPI.</param>
        /// <param name="CB">CB.</param>
        public PayerAuthConfigCardTypes(PayerAuthConfigCardTypesVerifiedByVisa VerifiedByVisa = default(PayerAuthConfigCardTypesVerifiedByVisa), PayerAuthConfigCardTypesVerifiedByVisa MasterCardSecureCode = default(PayerAuthConfigCardTypesVerifiedByVisa), PayerAuthConfigCardTypesVerifiedByVisa AmexSafeKey = default(PayerAuthConfigCardTypesVerifiedByVisa), PayerAuthConfigCardTypesJCBJSecure JCBJSecure = default(PayerAuthConfigCardTypesJCBJSecure), PayerAuthConfigCardTypesVerifiedByVisa DinersClubInternationalProtectBuy = default(PayerAuthConfigCardTypesVerifiedByVisa), PayerAuthConfigCardTypesVerifiedByVisa ELO = default(PayerAuthConfigCardTypesVerifiedByVisa), PayerAuthConfigCardTypesVerifiedByVisa UPI = default(PayerAuthConfigCardTypesVerifiedByVisa), PayerAuthConfigCardTypesCB CB = default(PayerAuthConfigCardTypesCB))
        {
            this.VerifiedByVisa = VerifiedByVisa;
            this.MasterCardSecureCode = MasterCardSecureCode;
            this.AmexSafeKey = AmexSafeKey;
            this.JCBJSecure = JCBJSecure;
            this.DinersClubInternationalProtectBuy = DinersClubInternationalProtectBuy;
            this.ELO = ELO;
            this.UPI = UPI;
            this.CB = CB;
        }
        
        /// <summary>
        /// Gets or Sets VerifiedByVisa
        /// </summary>
        [DataMember(Name="verifiedByVisa", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesVerifiedByVisa VerifiedByVisa { get; set; }

        /// <summary>
        /// Gets or Sets MasterCardSecureCode
        /// </summary>
        [DataMember(Name="masterCardSecureCode", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesVerifiedByVisa MasterCardSecureCode { get; set; }

        /// <summary>
        /// Gets or Sets AmexSafeKey
        /// </summary>
        [DataMember(Name="amexSafeKey", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesVerifiedByVisa AmexSafeKey { get; set; }

        /// <summary>
        /// Gets or Sets JCBJSecure
        /// </summary>
        [DataMember(Name="jCBJSecure", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesJCBJSecure JCBJSecure { get; set; }

        /// <summary>
        /// Gets or Sets DinersClubInternationalProtectBuy
        /// </summary>
        [DataMember(Name="dinersClubInternationalProtectBuy", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesVerifiedByVisa DinersClubInternationalProtectBuy { get; set; }

        /// <summary>
        /// Gets or Sets ELO
        /// </summary>
        [DataMember(Name="ELO", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesVerifiedByVisa ELO { get; set; }

        /// <summary>
        /// Gets or Sets UPI
        /// </summary>
        [DataMember(Name="UPI", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesVerifiedByVisa UPI { get; set; }

        /// <summary>
        /// Gets or Sets CB
        /// </summary>
        [DataMember(Name="CB", EmitDefaultValue=false)]
        public PayerAuthConfigCardTypesCB CB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayerAuthConfigCardTypes {\n");
            sb.Append("  VerifiedByVisa: ").Append(VerifiedByVisa).Append("\n");
            sb.Append("  MasterCardSecureCode: ").Append(MasterCardSecureCode).Append("\n");
            sb.Append("  AmexSafeKey: ").Append(AmexSafeKey).Append("\n");
            sb.Append("  JCBJSecure: ").Append(JCBJSecure).Append("\n");
            sb.Append("  DinersClubInternationalProtectBuy: ").Append(DinersClubInternationalProtectBuy).Append("\n");
            sb.Append("  ELO: ").Append(ELO).Append("\n");
            sb.Append("  UPI: ").Append(UPI).Append("\n");
            sb.Append("  CB: ").Append(CB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PayerAuthConfigCardTypes);
        }

        /// <summary>
        /// Returns true if PayerAuthConfigCardTypes instances are equal
        /// </summary>
        /// <param name="other">Instance of PayerAuthConfigCardTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayerAuthConfigCardTypes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VerifiedByVisa == other.VerifiedByVisa ||
                    this.VerifiedByVisa != null &&
                    this.VerifiedByVisa.Equals(other.VerifiedByVisa)
                ) && 
                (
                    this.MasterCardSecureCode == other.MasterCardSecureCode ||
                    this.MasterCardSecureCode != null &&
                    this.MasterCardSecureCode.Equals(other.MasterCardSecureCode)
                ) && 
                (
                    this.AmexSafeKey == other.AmexSafeKey ||
                    this.AmexSafeKey != null &&
                    this.AmexSafeKey.Equals(other.AmexSafeKey)
                ) && 
                (
                    this.JCBJSecure == other.JCBJSecure ||
                    this.JCBJSecure != null &&
                    this.JCBJSecure.Equals(other.JCBJSecure)
                ) && 
                (
                    this.DinersClubInternationalProtectBuy == other.DinersClubInternationalProtectBuy ||
                    this.DinersClubInternationalProtectBuy != null &&
                    this.DinersClubInternationalProtectBuy.Equals(other.DinersClubInternationalProtectBuy)
                ) && 
                (
                    this.ELO == other.ELO ||
                    this.ELO != null &&
                    this.ELO.Equals(other.ELO)
                ) && 
                (
                    this.UPI == other.UPI ||
                    this.UPI != null &&
                    this.UPI.Equals(other.UPI)
                ) && 
                (
                    this.CB == other.CB ||
                    this.CB != null &&
                    this.CB.Equals(other.CB)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VerifiedByVisa != null)
                    hash = hash * 59 + this.VerifiedByVisa.GetHashCode();
                if (this.MasterCardSecureCode != null)
                    hash = hash * 59 + this.MasterCardSecureCode.GetHashCode();
                if (this.AmexSafeKey != null)
                    hash = hash * 59 + this.AmexSafeKey.GetHashCode();
                if (this.JCBJSecure != null)
                    hash = hash * 59 + this.JCBJSecure.GetHashCode();
                if (this.DinersClubInternationalProtectBuy != null)
                    hash = hash * 59 + this.DinersClubInternationalProtectBuy.GetHashCode();
                if (this.ELO != null)
                    hash = hash * 59 + this.ELO.GetHashCode();
                if (this.UPI != null)
                    hash = hash * 59 + this.UPI.GetHashCode();
                if (this.CB != null)
                    hash = hash * 59 + this.CB.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
