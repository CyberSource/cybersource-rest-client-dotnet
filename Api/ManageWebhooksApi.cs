/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;
using CyberSource.Utilities.Tracking;
using AuthenticationSdk.core;
using CyberSource.Utilities;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManageWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns></returns>
        void DeleteWebhookSubscription (string webhookId);

        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>InlineResponse2015</returns>
        InlineResponse2015 GetWebhookSubscriptionById (string webhookId);

        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        ApiResponse<InlineResponse2015> GetWebhookSubscriptionByIdWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        List<InlineResponse2004> GetWebhookSubscriptionsByOrg (string organizationId, string productId = null, string eventType = null);

        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        ApiResponse<List<InlineResponse2004>> GetWebhookSubscriptionsByOrgWithHttpInfo (string organizationId, string productId = null, string eventType = null);
        /// <summary>
        /// Test a Webhook Configuration
        /// </summary>
        /// <remarks>
        /// Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>InlineResponse2016</returns>
        InlineResponse2016 NotificationSubscriptionsV1WebhooksWebhookIdPost (string webhookId);

        /// <summary>
        /// Test a Webhook Configuration
        /// </summary>
        /// <remarks>
        /// Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>ApiResponse of InlineResponse2016</returns>
        ApiResponse<InlineResponse2016> NotificationSubscriptionsV1WebhooksWebhookIdPostWithHttpInfo (string webhookId);
        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update a Webhook Subscription.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns></returns>
        void NotificationSubscriptionsV2WebhooksWebhookIdPatch (string webhookId, UpdateWebhook updateWebhook = null);

        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update a Webhook Subscription.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationSubscriptionsV2WebhooksWebhookIdPatchWithHttpInfo (string webhookId, UpdateWebhook updateWebhook = null);
        /// <summary>
        /// Update a Webhook Status
        /// </summary>
        /// <remarks>
        /// Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns></returns>
        void NotificationSubscriptionsV2WebhooksWebhookIdStatusPut (string webhookId, UpdateStatus updateStatus = null);

        /// <summary>
        /// Update a Webhook Status
        /// </summary>
        /// <remarks>
        /// Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationSubscriptionsV2WebhooksWebhookIdStatusPutWithHttpInfo (string webhookId, UpdateStatus updateStatus = null);
        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>InlineResponse2017</returns>
        InlineResponse2017 SaveAsymEgressKey (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);

        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>ApiResponse of InlineResponse2017</returns>
        ApiResponse<InlineResponse2017> SaveAsymEgressKeyWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync (string webhookId);

        /// <summary>
        /// Delete a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionAsyncWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of InlineResponse2015</returns>
        System.Threading.Tasks.Task<InlineResponse2015> GetWebhookSubscriptionByIdAsync (string webhookId);

        /// <summary>
        /// Get Details On a Single Webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2015>> GetWebhookSubscriptionByIdAsyncWithHttpInfo (string webhookId);
        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2004>> GetWebhookSubscriptionsByOrgAsync (string organizationId, string productId = null, string eventType = null);

        /// <summary>
        /// Get Details On All Created Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all previously created webhooks.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> GetWebhookSubscriptionsByOrgAsyncWithHttpInfo (string organizationId, string productId = null, string eventType = null);
        /// <summary>
        /// Test a Webhook Configuration
        /// </summary>
        /// <remarks>
        /// Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>Task of InlineResponse2016</returns>
        System.Threading.Tasks.Task<InlineResponse2016> NotificationSubscriptionsV1WebhooksWebhookIdPostAsync (string webhookId);

        /// <summary>
        /// Test a Webhook Configuration
        /// </summary>
        /// <remarks>
        /// Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>Task of ApiResponse (InlineResponse2016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2016>> NotificationSubscriptionsV1WebhooksWebhookIdPostAsyncWithHttpInfo (string webhookId);
        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update a Webhook Subscription.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationSubscriptionsV2WebhooksWebhookIdPatchAsync (string webhookId, UpdateWebhook updateWebhook = null);

        /// <summary>
        /// Update a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update a Webhook Subscription.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsV2WebhooksWebhookIdPatchAsyncWithHttpInfo (string webhookId, UpdateWebhook updateWebhook = null);
        /// <summary>
        /// Update a Webhook Status
        /// </summary>
        /// <remarks>
        /// Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsync (string webhookId, UpdateStatus updateStatus = null);

        /// <summary>
        /// Update a Webhook Status
        /// </summary>
        /// <remarks>
        /// Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsyncWithHttpInfo (string webhookId, UpdateStatus updateStatus = null);
        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of InlineResponse2017</returns>
        System.Threading.Tasks.Task<InlineResponse2017> SaveAsymEgressKeyAsync (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);

        /// <summary>
        /// Message Level Encryption
        /// </summary>
        /// <remarks>
        /// Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2017>> SaveAsymEgressKeyAsyncWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManageWebhooksApi : IManageWebhooksApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageWebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManageWebhooksApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManageWebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManageWebhooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns></returns>
        public void DeleteWebhookSubscription (string webhookId)
        {
            logger.Debug("CALLING API \"DeleteWebhookSubscription\" STARTED");
            this.SetStatusCode(null);
            DeleteWebhookSubscriptionWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "DeleteWebhookSubscription,DeleteWebhookSubscriptionAsync,DeleteWebhookSubscriptionWithHttpInfo,DeleteWebhookSubscriptionAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync (string webhookId)
        {
            logger.Debug("CALLING API \"DeleteWebhookSubscriptionAsync\" STARTED");
            this.SetStatusCode(null);
            await DeleteWebhookSubscriptionAsyncWithHttpInfo(webhookId);

        }

        /// <summary>
        /// Delete a Webhook Subscription Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionAsyncWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->DeleteWebhookSubscription");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Delete == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "DeleteWebhookSubscription,DeleteWebhookSubscriptionAsync,DeleteWebhookSubscriptionWithHttpInfo,DeleteWebhookSubscriptionAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>InlineResponse2015</returns>
        public InlineResponse2015 GetWebhookSubscriptionById (string webhookId)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionById\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2015> localVarResponse = GetWebhookSubscriptionByIdWithHttpInfo(webhookId);
            logger.Debug("CALLING API \"GetWebhookSubscriptionById\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>ApiResponse of InlineResponse2015</returns>
        public ApiResponse< InlineResponse2015 > GetWebhookSubscriptionByIdWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetWebhookSubscriptionById,GetWebhookSubscriptionByIdAsync,GetWebhookSubscriptionByIdWithHttpInfo,GetWebhookSubscriptionByIdAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionById", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2015>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2015))); // Return statement
        }

        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of InlineResponse2015</returns>
        public async System.Threading.Tasks.Task<InlineResponse2015> GetWebhookSubscriptionByIdAsync (string webhookId)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionByIdAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2015> localVarResponse = await GetWebhookSubscriptionByIdAsyncWithHttpInfo(webhookId);
            logger.Debug("CALLING API \"GetWebhookSubscriptionByIdAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get Details On a Single Webhook Retrieve the details of a specific webhook by supplying the webhook ID in the path.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The webhook Identifier</param>
        /// <returns>Task of ApiResponse (InlineResponse2015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2015>> GetWebhookSubscriptionByIdAsyncWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->GetWebhookSubscriptionById");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetWebhookSubscriptionById,GetWebhookSubscriptionByIdAsync,GetWebhookSubscriptionByIdWithHttpInfo,GetWebhookSubscriptionByIdAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionById", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2015>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2015))); // Return statement
        }
        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        public List<InlineResponse2004> GetWebhookSubscriptionsByOrg (string organizationId, string productId = null, string eventType = null)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrg\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<List<InlineResponse2004>> localVarResponse = GetWebhookSubscriptionsByOrgWithHttpInfo(organizationId, productId, eventType);
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrg\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        public ApiResponse< List<InlineResponse2004> > GetWebhookSubscriptionsByOrgWithHttpInfo (string organizationId, string productId = null, string eventType = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (organizationId != null)
            {
                localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            }
            if (productId != null)
            {
                localVarQueryParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // query parameter
            }
            if (eventType != null)
            {
                localVarQueryParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetWebhookSubscriptionsByOrg,GetWebhookSubscriptionsByOrgAsync,GetWebhookSubscriptionsByOrgWithHttpInfo,GetWebhookSubscriptionsByOrgAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionsByOrg", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (List<InlineResponse2004>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>))); // Return statement
        }

        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2004>> GetWebhookSubscriptionsByOrgAsync (string organizationId, string productId = null, string eventType = null)
        {
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrgAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<List<InlineResponse2004>> localVarResponse = await GetWebhookSubscriptionsByOrgAsyncWithHttpInfo(organizationId, productId, eventType);
            logger.Debug("CALLING API \"GetWebhookSubscriptionsByOrgAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get Details On All Created Webhooks Retrieve a list of all previously created webhooks.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Organization Identifier.</param>
        /// <param name="productId">The Product Identifier. (optional)</param>
        /// <param name="eventType">The Event Type. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> GetWebhookSubscriptionsByOrgAsyncWithHttpInfo (string organizationId, string productId = null, string eventType = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ManageWebhooksApi->GetWebhookSubscriptionsByOrg");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (organizationId != null)
            {
                localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            }
            if (productId != null)
            {
                localVarQueryParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // query parameter
            }
            if (eventType != null)
            {
                localVarQueryParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // query parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarQueryParams)}");
            if (Method.Get == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "GetWebhookSubscriptionsByOrg,GetWebhookSubscriptionsByOrgAsync,GetWebhookSubscriptionsByOrgWithHttpInfo,GetWebhookSubscriptionsByOrgAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookSubscriptionsByOrg", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (List<InlineResponse2004>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>))); // Return statement
        }
        /// <summary>
        /// Test a Webhook Configuration Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>InlineResponse2016</returns>
        public InlineResponse2016 NotificationSubscriptionsV1WebhooksWebhookIdPost (string webhookId)
        {
            logger.Debug("CALLING API \"NotificationSubscriptionsV1WebhooksWebhookIdPost\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2016> localVarResponse = NotificationSubscriptionsV1WebhooksWebhookIdPostWithHttpInfo(webhookId);
            logger.Debug("CALLING API \"NotificationSubscriptionsV1WebhooksWebhookIdPost\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test a Webhook Configuration Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>ApiResponse of InlineResponse2016</returns>
        public ApiResponse< InlineResponse2016 > NotificationSubscriptionsV1WebhooksWebhookIdPostWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV1WebhooksWebhookIdPost");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV1WebhooksWebhookIdPost");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "NotificationSubscriptionsV1WebhooksWebhookIdPost,NotificationSubscriptionsV1WebhooksWebhookIdPostAsync,NotificationSubscriptionsV1WebhooksWebhookIdPostWithHttpInfo,NotificationSubscriptionsV1WebhooksWebhookIdPostAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationSubscriptionsV1WebhooksWebhookIdPost", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2016>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2016))); // Return statement
        }

        /// <summary>
        /// Test a Webhook Configuration Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>Task of InlineResponse2016</returns>
        public async System.Threading.Tasks.Task<InlineResponse2016> NotificationSubscriptionsV1WebhooksWebhookIdPostAsync (string webhookId)
        {
            logger.Debug("CALLING API \"NotificationSubscriptionsV1WebhooksWebhookIdPostAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2016> localVarResponse = await NotificationSubscriptionsV1WebhooksWebhookIdPostAsyncWithHttpInfo(webhookId);
            logger.Debug("CALLING API \"NotificationSubscriptionsV1WebhooksWebhookIdPostAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Test a Webhook Configuration Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user&#39;s subscription.   It will contain sample values for the product &amp; eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <returns>Task of ApiResponse (InlineResponse2016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2016>> NotificationSubscriptionsV1WebhooksWebhookIdPostAsyncWithHttpInfo (string webhookId)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV1WebhooksWebhookIdPost");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV1WebhooksWebhookIdPost");
            }

            var localVarPath = $"/notification-subscriptions/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (Method.Post == Method.Post)
            {
                localVarPostBody = "{}";
            }
            else
            {
                localVarPostBody = null;
            }
            String[] filePostBodyAndDelimiter = MultipartHelpers.BuildPostBodyForFiles(localVarFileParams);
            if(null!= filePostBodyAndDelimiter)
            {
                localVarPostBody = filePostBodyAndDelimiter[0];
                localVarHttpContentType = "multipart/form-data; boundary=" + filePostBodyAndDelimiter[1];
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "NotificationSubscriptionsV1WebhooksWebhookIdPost,NotificationSubscriptionsV1WebhooksWebhookIdPostAsync,NotificationSubscriptionsV1WebhooksWebhookIdPostWithHttpInfo,NotificationSubscriptionsV1WebhooksWebhookIdPostAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }



            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationSubscriptionsV1WebhooksWebhookIdPost", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2016>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2016))); // Return statement
        }
        /// <summary>
        /// Update a Webhook Subscription Update a Webhook Subscription.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns></returns>
        public void NotificationSubscriptionsV2WebhooksWebhookIdPatch (string webhookId, UpdateWebhook updateWebhook = null)
        {
            logger.Debug("CALLING API \"NotificationSubscriptionsV2WebhooksWebhookIdPatch\" STARTED");
            this.SetStatusCode(null);
            NotificationSubscriptionsV2WebhooksWebhookIdPatchWithHttpInfo(webhookId, updateWebhook);
        }

        /// <summary>
        /// Update a Webhook Subscription Update a Webhook Subscription.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationSubscriptionsV2WebhooksWebhookIdPatchWithHttpInfo (string webhookId, UpdateWebhook updateWebhook = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdPatch");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdPatch");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateWebhook != null && updateWebhook.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateWebhook = (UpdateWebhook)sdkTracker.InsertDeveloperIdTracker(updateWebhook, updateWebhook.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(updateWebhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhook; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "NotificationSubscriptionsV2WebhooksWebhookIdPatch,NotificationSubscriptionsV2WebhooksWebhookIdPatchAsync,NotificationSubscriptionsV2WebhooksWebhookIdPatchWithHttpInfo,NotificationSubscriptionsV2WebhooksWebhookIdPatchAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationSubscriptionsV2WebhooksWebhookIdPatch", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// Update a Webhook Subscription Update a Webhook Subscription.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationSubscriptionsV2WebhooksWebhookIdPatchAsync (string webhookId, UpdateWebhook updateWebhook = null)
        {
            logger.Debug("CALLING API \"NotificationSubscriptionsV2WebhooksWebhookIdPatchAsync\" STARTED");
            this.SetStatusCode(null);
            await NotificationSubscriptionsV2WebhooksWebhookIdPatchAsyncWithHttpInfo(webhookId, updateWebhook);

        }

        /// <summary>
        /// Update a Webhook Subscription Update a Webhook Subscription.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateWebhook">The webhook payload or changes to apply. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsV2WebhooksWebhookIdPatchAsyncWithHttpInfo (string webhookId, UpdateWebhook updateWebhook = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdPatch");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdPatch");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateWebhook != null && updateWebhook.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateWebhook = (UpdateWebhook)sdkTracker.InsertDeveloperIdTracker(updateWebhook, updateWebhook.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(updateWebhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWebhook; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "NotificationSubscriptionsV2WebhooksWebhookIdPatch,NotificationSubscriptionsV2WebhooksWebhookIdPatchAsync,NotificationSubscriptionsV2WebhooksWebhookIdPatchWithHttpInfo,NotificationSubscriptionsV2WebhooksWebhookIdPatchAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationSubscriptionsV2WebhooksWebhookIdPatch", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
        /// <summary>
        /// Update a Webhook Status Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns></returns>
        public void NotificationSubscriptionsV2WebhooksWebhookIdStatusPut (string webhookId, UpdateStatus updateStatus = null)
        {
            logger.Debug("CALLING API \"NotificationSubscriptionsV2WebhooksWebhookIdStatusPut\" STARTED");
            this.SetStatusCode(null);
            NotificationSubscriptionsV2WebhooksWebhookIdStatusPutWithHttpInfo(webhookId, updateStatus);
        }

        /// <summary>
        /// Update a Webhook Status Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationSubscriptionsV2WebhooksWebhookIdStatusPutWithHttpInfo (string webhookId, UpdateStatus updateStatus = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdStatusPut");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdStatusPut");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateStatus != null && updateStatus.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateStatus = (UpdateStatus)sdkTracker.InsertDeveloperIdTracker(updateStatus, updateStatus.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(updateStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStatus; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "NotificationSubscriptionsV2WebhooksWebhookIdStatusPut,NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsync,NotificationSubscriptionsV2WebhooksWebhookIdStatusPutWithHttpInfo,NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationSubscriptionsV2WebhooksWebhookIdStatusPut", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }

        /// <summary>
        /// Update a Webhook Status Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsync (string webhookId, UpdateStatus updateStatus = null)
        {
            logger.Debug("CALLING API \"NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsync\" STARTED");
            this.SetStatusCode(null);
            await NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsyncWithHttpInfo(webhookId, updateStatus);

        }

        /// <summary>
        /// Update a Webhook Status Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">The Webhook Identifier.</param>
        /// <param name="updateStatus">The status that the subscription should be updated to. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsyncWithHttpInfo (string webhookId, UpdateStatus updateStatus = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                logger.Error("ApiException : Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdStatusPut");
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManageWebhooksApi->NotificationSubscriptionsV2WebhooksWebhookIdStatusPut");
            }

            var localVarPath = $"/notification-subscriptions/v2/webhooks/{webhookId}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (webhookId != null)
            {
                localVarPathParams.Add("webhookId", Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            }
            logger.Debug($"HTTP Request Body :\n{logUtility.ConvertDictionaryToString(localVarPathParams)}");
            if (updateStatus != null && updateStatus.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                updateStatus = (UpdateStatus)sdkTracker.InsertDeveloperIdTracker(updateStatus, updateStatus.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(updateStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStatus; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "NotificationSubscriptionsV2WebhooksWebhookIdStatusPut,NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsync,NotificationSubscriptionsV2WebhooksWebhookIdStatusPutWithHttpInfo,NotificationSubscriptionsV2WebhooksWebhookIdStatusPutAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationSubscriptionsV2WebhooksWebhookIdStatusPut", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            this.SetStatusCode(localVarStatusCode);
            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                localVarResponse.Content); // Return statement
        }
        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>InlineResponse2017</returns>
        public InlineResponse2017 SaveAsymEgressKey (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            logger.Debug("CALLING API \"SaveAsymEgressKey\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2017> localVarResponse = SaveAsymEgressKeyWithHttpInfo(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId);
            logger.Debug("CALLING API \"SaveAsymEgressKey\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>ApiResponse of InlineResponse2017</returns>
        public ApiResponse< InlineResponse2017 > SaveAsymEgressKeyWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'vCSenderOrganizationId' is set
            if (vCSenderOrganizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'vCPermissions' is set
            if (vCPermissions == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'saveAsymEgressKey' is set
            if (saveAsymEgressKey == null)
            {
                logger.Error("ApiException : Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }

            var localVarPath = $"/kms/egress/v2/keys-asym";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (vCCorrelationId != null)
            {
                localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            }
            if (vCSenderOrganizationId != null)
            {
                localVarHeaderParams.Add("v-c-sender-organization-id", Configuration.ApiClient.ParameterToString(vCSenderOrganizationId)); // header parameter
            }
            if (vCPermissions != null)
            {
                localVarHeaderParams.Add("v-c-permissions", Configuration.ApiClient.ParameterToString(vCPermissions)); // header parameter
            }
            if (saveAsymEgressKey != null && saveAsymEgressKey.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                saveAsymEgressKey = (SaveAsymEgressKey)sdkTracker.InsertDeveloperIdTracker(saveAsymEgressKey, saveAsymEgressKey.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsymEgressKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsymEgressKey; // byte array
            }
            
            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "SaveAsymEgressKey,SaveAsymEgressKeyAsync,SaveAsymEgressKeyWithHttpInfo,SaveAsymEgressKeyAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsymEgressKey", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2017>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2017))); // Return statement
        }

        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of InlineResponse2017</returns>
        public async System.Threading.Tasks.Task<InlineResponse2017> SaveAsymEgressKeyAsync (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            logger.Debug("CALLING API \"SaveAsymEgressKeyAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<InlineResponse2017> localVarResponse = await SaveAsymEgressKeyAsyncWithHttpInfo(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId);
            logger.Debug("CALLING API \"SaveAsymEgressKeyAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Message Level Encryption Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCSenderOrganizationId">Sender organization id</param>
        /// <param name="vCPermissions">Encoded user permissions returned by the CGK, for the entity user who initiated the boarding</param>
        /// <param name="saveAsymEgressKey">Provide egress Asymmetric key information to save (create or store)</param>
        /// <param name="vCCorrelationId">A globally unique id associated with your request (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2017>> SaveAsymEgressKeyAsyncWithHttpInfo (string vCSenderOrganizationId, string vCPermissions, SaveAsymEgressKey saveAsymEgressKey, string vCCorrelationId = null)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'vCSenderOrganizationId' is set
            if (vCSenderOrganizationId == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCSenderOrganizationId' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'vCPermissions' is set
            if (vCPermissions == null)
            {
                logger.Error("ApiException : Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'vCPermissions' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }
            // verify the required parameter 'saveAsymEgressKey' is set
            if (saveAsymEgressKey == null)
            {
                logger.Error("ApiException : Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
                throw new ApiException(400, "Missing required parameter 'saveAsymEgressKey' when calling ManageWebhooksApi->SaveAsymEgressKey");
            }

            var localVarPath = $"/kms/egress/v2/keys-asym";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (vCCorrelationId != null)
            {
                localVarHeaderParams.Add("v-c-correlation-id", Configuration.ApiClient.ParameterToString(vCCorrelationId)); // header parameter
            }
            if (vCSenderOrganizationId != null)
            {
                localVarHeaderParams.Add("v-c-sender-organization-id", Configuration.ApiClient.ParameterToString(vCSenderOrganizationId)); // header parameter
            }
            if (vCPermissions != null)
            {
                localVarHeaderParams.Add("v-c-permissions", Configuration.ApiClient.ParameterToString(vCPermissions)); // header parameter
            }
            if (saveAsymEgressKey != null && saveAsymEgressKey.GetType() != typeof(byte[]))
            {
                SdkTracker sdkTracker = new SdkTracker();
                saveAsymEgressKey = (SaveAsymEgressKey)sdkTracker.InsertDeveloperIdTracker(saveAsymEgressKey, saveAsymEgressKey.GetType().Name, Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["runEnvironment"], Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj.ContainsKey("defaultDeveloperId")? Configuration.ApiClient.Configuration.MerchantConfigDictionaryObj["defaultDeveloperId"]:"");
                localVarPostBody = Configuration.ApiClient.Serialize(saveAsymEgressKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveAsymEgressKey; // byte array
            }

            bool isMLESupportedByCybsForApi = false;
            MerchantConfig merchantConfig = new MerchantConfig(Configuration.MerchantConfigDictionaryObj, Configuration.MapToControlMLEonAPI);
            if (MLEUtility.CheckIsMLEForAPI(merchantConfig, isMLESupportedByCybsForApi, "SaveAsymEgressKey,SaveAsymEgressKeyAsync,SaveAsymEgressKeyWithHttpInfo,SaveAsymEgressKeyAsyncWithHttpInfo"))
            {
                try
                {
                    localVarPostBody = MLEUtility.EncryptRequestPayload(merchantConfig, localVarPostBody);
                }
                catch (Exception e)
                {
                    logger.Error("Failed to encrypt request body {}", e.Message, e);
                    throw new ApiException(400,"Failed to encrypt request body : " + e.Message);
                }
            }

            logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveAsymEgressKey", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<InlineResponse2017>(localVarStatusCode,
                localVarResponse.Headers.GroupBy(h => h.Name).ToDictionary(x => x.Key, x => string.Join(", ", x.Select(h => h.Value.ToString()))),
                (InlineResponse2017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2017))); // Return statement
        }
    }
}
