/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// SAConfigCheckout
    /// </summary>
    [DataContract]
    public partial class SAConfigCheckout :  IEquatable<SAConfigCheckout>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAConfigCheckout" /> class.
        /// </summary>
        /// <param name="DisplayTaxAmount">Toggles whether or not the tax amount is displayed on the Hosted Checkout..</param>
        /// <param name="TemplateType">Specifies whether the Hosted Checkout is displayed as a single page form or multi page checkout.   Valid values:  &#x60;multi&#x60;  &#x60;single&#x60; .</param>
        /// <param name="ReturnToMerchantSiteUrl">URL of the website linked to from the Secure Acceptance receipt page. Only used if the profile does not have custom receipt pages configured..</param>
        public SAConfigCheckout(bool? DisplayTaxAmount = default(bool?), string TemplateType = default(string), string ReturnToMerchantSiteUrl = default(string))
        {
            this.DisplayTaxAmount = DisplayTaxAmount;
            this.TemplateType = TemplateType;
            this.ReturnToMerchantSiteUrl = ReturnToMerchantSiteUrl;
        }
        
        /// <summary>
        /// Toggles whether or not the tax amount is displayed on the Hosted Checkout.
        /// </summary>
        /// <value>Toggles whether or not the tax amount is displayed on the Hosted Checkout.</value>
        [DataMember(Name="displayTaxAmount", EmitDefaultValue=false)]
        public bool? DisplayTaxAmount { get; set; }

        /// <summary>
        /// Specifies whether the Hosted Checkout is displayed as a single page form or multi page checkout.   Valid values:  &#x60;multi&#x60;  &#x60;single&#x60; 
        /// </summary>
        /// <value>Specifies whether the Hosted Checkout is displayed as a single page form or multi page checkout.   Valid values:  &#x60;multi&#x60;  &#x60;single&#x60; </value>
        [DataMember(Name="templateType", EmitDefaultValue=false)]
        public string TemplateType { get; set; }

        /// <summary>
        /// URL of the website linked to from the Secure Acceptance receipt page. Only used if the profile does not have custom receipt pages configured.
        /// </summary>
        /// <value>URL of the website linked to from the Secure Acceptance receipt page. Only used if the profile does not have custom receipt pages configured.</value>
        [DataMember(Name="returnToMerchantSiteUrl", EmitDefaultValue=false)]
        public string ReturnToMerchantSiteUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SAConfigCheckout {\n");
            sb.Append("  DisplayTaxAmount: ").Append(DisplayTaxAmount).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  ReturnToMerchantSiteUrl: ").Append(ReturnToMerchantSiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SAConfigCheckout);
        }

        /// <summary>
        /// Returns true if SAConfigCheckout instances are equal
        /// </summary>
        /// <param name="other">Instance of SAConfigCheckout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SAConfigCheckout other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DisplayTaxAmount == other.DisplayTaxAmount ||
                    this.DisplayTaxAmount != null &&
                    this.DisplayTaxAmount.Equals(other.DisplayTaxAmount)
                ) && 
                (
                    this.TemplateType == other.TemplateType ||
                    this.TemplateType != null &&
                    this.TemplateType.Equals(other.TemplateType)
                ) && 
                (
                    this.ReturnToMerchantSiteUrl == other.ReturnToMerchantSiteUrl ||
                    this.ReturnToMerchantSiteUrl != null &&
                    this.ReturnToMerchantSiteUrl.Equals(other.ReturnToMerchantSiteUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DisplayTaxAmount != null)
                    hash = hash * 59 + this.DisplayTaxAmount.GetHashCode();
                if (this.TemplateType != null)
                    hash = hash * 59 + this.TemplateType.GetHashCode();
                if (this.ReturnToMerchantSiteUrl != null)
                    hash = hash * 59 + this.ReturnToMerchantSiteUrl.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
