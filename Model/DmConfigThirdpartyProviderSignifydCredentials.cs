/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// DmConfigThirdpartyProviderSignifydCredentials
    /// </summary>
    [DataContract]
    public partial class DmConfigThirdpartyProviderSignifydCredentials :  IEquatable<DmConfigThirdpartyProviderSignifydCredentials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DmConfigThirdpartyProviderSignifydCredentials" /> class.
        /// </summary>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="ApiKey">ApiKey.</param>
        /// <param name="SecretKeyid">SecretKeyid.</param>
        /// <param name="SecretKey">SecretKey.</param>
        public DmConfigThirdpartyProviderSignifydCredentials(string TeamId = default(string), string ApiKey = default(string), string SecretKeyid = default(string), string SecretKey = default(string))
        {
            this.TeamId = TeamId;
            this.ApiKey = ApiKey;
            this.SecretKeyid = SecretKeyid;
            this.SecretKey = SecretKey;
        }
        
        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets SecretKeyid
        /// </summary>
        [DataMember(Name="secretKeyid", EmitDefaultValue=false)]
        public string SecretKeyid { get; set; }

        /// <summary>
        /// Gets or Sets SecretKey
        /// </summary>
        [DataMember(Name="secretKey", EmitDefaultValue=false)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DmConfigThirdpartyProviderSignifydCredentials {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  SecretKeyid: ").Append(SecretKeyid).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DmConfigThirdpartyProviderSignifydCredentials);
        }

        /// <summary>
        /// Returns true if DmConfigThirdpartyProviderSignifydCredentials instances are equal
        /// </summary>
        /// <param name="other">Instance of DmConfigThirdpartyProviderSignifydCredentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DmConfigThirdpartyProviderSignifydCredentials other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.ApiKey == other.ApiKey ||
                    this.ApiKey != null &&
                    this.ApiKey.Equals(other.ApiKey)
                ) && 
                (
                    this.SecretKeyid == other.SecretKeyid ||
                    this.SecretKeyid != null &&
                    this.SecretKeyid.Equals(other.SecretKeyid)
                ) && 
                (
                    this.SecretKey == other.SecretKey ||
                    this.SecretKey != null &&
                    this.SecretKey.Equals(other.SecretKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.ApiKey != null)
                    hash = hash * 59 + this.ApiKey.GetHashCode();
                if (this.SecretKeyid != null)
                    hash = hash * 59 + this.SecretKeyid.GetHashCode();
                if (this.SecretKey != null)
                    hash = hash * 59 + this.SecretKey.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
