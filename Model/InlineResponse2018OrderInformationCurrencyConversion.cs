/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// InlineResponse2018OrderInformationCurrencyConversion
    /// </summary>
    [DataContract]
    public partial class InlineResponse2018OrderInformationCurrencyConversion :  IEquatable<InlineResponse2018OrderInformationCurrencyConversion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2018OrderInformationCurrencyConversion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2018OrderInformationCurrencyConversion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2018OrderInformationCurrencyConversion" /> class.
        /// </summary>
        /// <param name="Type">Valid Values: - &#x60;DCC&#x60;: Dynamic Currency Conversion - &#x60;MCP&#x60;: Multi-Currency Pricing This should be echo&#39;d from the request .</param>
        /// <param name="ReconciliationId">Unique identifier generated by the DCC provider. (required).</param>
        /// <param name="Offer">When type is DCC this is a single item. When type is MCP this is an array that repeats for each currency that&#39;s configured by the currency conversion provider for the merchant. .</param>
        /// <param name="Disclaimer">This text is intended to inform customers about their opt-in choices. It should include details such  as the amount, exchange rate, currency, mark-up, and any other regulated requirements, such as  the mark-up over the ECB rate, if applicable. It is mandatory for DCC (Dynamic Currency  Conversion) and optional otherwise. This information will be displayed on the screen and printed on  the receipt without modification. .</param>
        public InlineResponse2018OrderInformationCurrencyConversion(string Type = default(string), string ReconciliationId = default(string), List<InlineResponse2018OrderInformationCurrencyConversionOffer> Offer = default(List<InlineResponse2018OrderInformationCurrencyConversionOffer>), string Disclaimer = default(string))
        {
            this.Type = Type;
            this.ReconciliationId = ReconciliationId;
            this.Offer = Offer;
            this.Disclaimer = Disclaimer;
        }
        
        /// <summary>
        /// Valid Values: - &#x60;DCC&#x60;: Dynamic Currency Conversion - &#x60;MCP&#x60;: Multi-Currency Pricing This should be echo&#39;d from the request 
        /// </summary>
        /// <value>Valid Values: - &#x60;DCC&#x60;: Dynamic Currency Conversion - &#x60;MCP&#x60;: Multi-Currency Pricing This should be echo&#39;d from the request </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Unique identifier generated by the DCC provider.
        /// </summary>
        /// <value>Unique identifier generated by the DCC provider.</value>
        [DataMember(Name="reconciliationId", EmitDefaultValue=false)]
        public string ReconciliationId { get; set; }

        /// <summary>
        /// When type is DCC this is a single item. When type is MCP this is an array that repeats for each currency that&#39;s configured by the currency conversion provider for the merchant. 
        /// </summary>
        /// <value>When type is DCC this is a single item. When type is MCP this is an array that repeats for each currency that&#39;s configured by the currency conversion provider for the merchant. </value>
        [DataMember(Name="offer", EmitDefaultValue=false)]
        public List<InlineResponse2018OrderInformationCurrencyConversionOffer> Offer { get; set; }

        /// <summary>
        /// This text is intended to inform customers about their opt-in choices. It should include details such  as the amount, exchange rate, currency, mark-up, and any other regulated requirements, such as  the mark-up over the ECB rate, if applicable. It is mandatory for DCC (Dynamic Currency  Conversion) and optional otherwise. This information will be displayed on the screen and printed on  the receipt without modification. 
        /// </summary>
        /// <value>This text is intended to inform customers about their opt-in choices. It should include details such  as the amount, exchange rate, currency, mark-up, and any other regulated requirements, such as  the mark-up over the ECB rate, if applicable. It is mandatory for DCC (Dynamic Currency  Conversion) and optional otherwise. This information will be displayed on the screen and printed on  the receipt without modification. </value>
        [DataMember(Name="disclaimer", EmitDefaultValue=false)]
        public string Disclaimer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2018OrderInformationCurrencyConversion {\n");
            if (Type != null) sb.Append("  Type: ").Append(Type).Append("\n");
            if (ReconciliationId != null) sb.Append("  ReconciliationId: ").Append(ReconciliationId).Append("\n");
            if (Offer != null) sb.Append("  Offer: ").Append(Offer).Append("\n");
            if (Disclaimer != null) sb.Append("  Disclaimer: ").Append(Disclaimer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2018OrderInformationCurrencyConversion);
        }

        /// <summary>
        /// Returns true if InlineResponse2018OrderInformationCurrencyConversion instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2018OrderInformationCurrencyConversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2018OrderInformationCurrencyConversion other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.ReconciliationId == other.ReconciliationId ||
                    this.ReconciliationId != null &&
                    this.ReconciliationId.Equals(other.ReconciliationId)
                ) && 
                (
                    this.Offer == other.Offer ||
                    this.Offer != null &&
                    this.Offer.SequenceEqual(other.Offer)
                ) && 
                (
                    this.Disclaimer == other.Disclaimer ||
                    this.Disclaimer != null &&
                    this.Disclaimer.Equals(other.Disclaimer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.ReconciliationId != null)
                    hash = hash * 59 + this.ReconciliationId.GetHashCode();
                if (this.Offer != null)
                    hash = hash * 59 + this.Offer.GetHashCode();
                if (this.Disclaimer != null)
                    hash = hash * 59 + this.Disclaimer.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
