/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Request Info Section
    /// </summary>
    [DataContract]
    public partial class ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails :  IEquatable<ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails" /> class.
        /// </summary>
        /// <param name="RequestId">An unique identification number assigned by CyberSource to identify the submitted request..</param>
        /// <param name="CybersourceMerchantId">Cybersource Merchant Id.</param>
        /// <param name="ProcessorMerchantId">Cybersource Processor Merchant Id.</param>
        /// <param name="GroupName">Group Name.</param>
        /// <param name="TransactionReferenceNumber">Transaction Reference Number.</param>
        /// <param name="MerchantReferenceNumber">Merchant Reference Number.</param>
        public ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails(string RequestId = default(string), string CybersourceMerchantId = default(string), string ProcessorMerchantId = default(string), string GroupName = default(string), string TransactionReferenceNumber = default(string), string MerchantReferenceNumber = default(string))
        {
            this.RequestId = RequestId;
            this.CybersourceMerchantId = CybersourceMerchantId;
            this.ProcessorMerchantId = ProcessorMerchantId;
            this.GroupName = GroupName;
            this.TransactionReferenceNumber = TransactionReferenceNumber;
            this.MerchantReferenceNumber = MerchantReferenceNumber;
        }
        
        /// <summary>
        /// An unique identification number assigned by CyberSource to identify the submitted request.
        /// </summary>
        /// <value>An unique identification number assigned by CyberSource to identify the submitted request.</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Cybersource Merchant Id
        /// </summary>
        /// <value>Cybersource Merchant Id</value>
        [DataMember(Name="cybersourceMerchantId", EmitDefaultValue=false)]
        public string CybersourceMerchantId { get; set; }

        /// <summary>
        /// Cybersource Processor Merchant Id
        /// </summary>
        /// <value>Cybersource Processor Merchant Id</value>
        [DataMember(Name="processorMerchantId", EmitDefaultValue=false)]
        public string ProcessorMerchantId { get; set; }

        /// <summary>
        /// Group Name
        /// </summary>
        /// <value>Group Name</value>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Transaction Reference Number
        /// </summary>
        /// <value>Transaction Reference Number</value>
        [DataMember(Name="transactionReferenceNumber", EmitDefaultValue=false)]
        public string TransactionReferenceNumber { get; set; }

        /// <summary>
        /// Merchant Reference Number
        /// </summary>
        /// <value>Merchant Reference Number</value>
        [DataMember(Name="merchantReferenceNumber", EmitDefaultValue=false)]
        public string MerchantReferenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails {\n");
            if (RequestId != null) sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            if (CybersourceMerchantId != null) sb.Append("  CybersourceMerchantId: ").Append(CybersourceMerchantId).Append("\n");
            if (ProcessorMerchantId != null) sb.Append("  ProcessorMerchantId: ").Append(ProcessorMerchantId).Append("\n");
            if (GroupName != null) sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            if (TransactionReferenceNumber != null) sb.Append("  TransactionReferenceNumber: ").Append(TransactionReferenceNumber).Append("\n");
            if (MerchantReferenceNumber != null) sb.Append("  MerchantReferenceNumber: ").Append(MerchantReferenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails);
        }

        /// <summary>
        /// Returns true if ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.CybersourceMerchantId == other.CybersourceMerchantId ||
                    this.CybersourceMerchantId != null &&
                    this.CybersourceMerchantId.Equals(other.CybersourceMerchantId)
                ) && 
                (
                    this.ProcessorMerchantId == other.ProcessorMerchantId ||
                    this.ProcessorMerchantId != null &&
                    this.ProcessorMerchantId.Equals(other.ProcessorMerchantId)
                ) && 
                (
                    this.GroupName == other.GroupName ||
                    this.GroupName != null &&
                    this.GroupName.Equals(other.GroupName)
                ) && 
                (
                    this.TransactionReferenceNumber == other.TransactionReferenceNumber ||
                    this.TransactionReferenceNumber != null &&
                    this.TransactionReferenceNumber.Equals(other.TransactionReferenceNumber)
                ) && 
                (
                    this.MerchantReferenceNumber == other.MerchantReferenceNumber ||
                    this.MerchantReferenceNumber != null &&
                    this.MerchantReferenceNumber.Equals(other.MerchantReferenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.CybersourceMerchantId != null)
                    hash = hash * 59 + this.CybersourceMerchantId.GetHashCode();
                if (this.ProcessorMerchantId != null)
                    hash = hash * 59 + this.ProcessorMerchantId.GetHashCode();
                if (this.GroupName != null)
                    hash = hash * 59 + this.GroupName.GetHashCode();
                if (this.TransactionReferenceNumber != null)
                    hash = hash * 59 + this.TransactionReferenceNumber.GetHashCode();
                if (this.MerchantReferenceNumber != null)
                    hash = hash * 59 + this.MerchantReferenceNumber.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
