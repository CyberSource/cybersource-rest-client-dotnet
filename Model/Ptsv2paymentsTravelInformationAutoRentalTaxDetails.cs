/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentsTravelInformationAutoRentalTaxDetails
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentsTravelInformationAutoRentalTaxDetails :  IEquatable<Ptsv2paymentsTravelInformationAutoRentalTaxDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentsTravelInformationAutoRentalTaxDetails" /> class.
        /// </summary>
        /// <param name="Amount">Indicates the amount of tax based on the &#x60;type&#x60; field as described in the table below: .</param>
        /// <param name="Rate">Rate of VAT or other tax for the order.  Example 0.040 (&#x3D;4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated) .</param>
        /// <param name="Applied">Flag that indicates whether the tax amount (&#x60;travelInformation.autoRental.taxDetails.amount&#x60;) is included in the request.  Possible values: - &#x60;false&#x60;: tax amount is not included in the request. - &#x60;true&#x60;:  tax amount is included in the request. .</param>
        /// <param name="ExemptionCode">Status code for exemption from sales and use tax. This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. .</param>
        /// <param name="TaxType">Different taxes the rental agency applies to the rental agreement such as tourist tax, airport tax, or rental tax. .</param>
        /// <param name="TaxSummary">Summary of all tax types .</param>
        public Ptsv2paymentsTravelInformationAutoRentalTaxDetails(string Amount = default(string), string Rate = default(string), bool? Applied = default(bool?), string ExemptionCode = default(string), string TaxType = default(string), string TaxSummary = default(string))
        {
            this.Amount = Amount;
            this.Rate = Rate;
            this.Applied = Applied;
            this.ExemptionCode = ExemptionCode;
            this.TaxType = TaxType;
            this.TaxSummary = TaxSummary;
        }
        
        /// <summary>
        /// Indicates the amount of tax based on the &#x60;type&#x60; field as described in the table below: 
        /// </summary>
        /// <value>Indicates the amount of tax based on the &#x60;type&#x60; field as described in the table below: </value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Rate of VAT or other tax for the order.  Example 0.040 (&#x3D;4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated) 
        /// </summary>
        /// <value>Rate of VAT or other tax for the order.  Example 0.040 (&#x3D;4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated) </value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }

        /// <summary>
        /// Flag that indicates whether the tax amount (&#x60;travelInformation.autoRental.taxDetails.amount&#x60;) is included in the request.  Possible values: - &#x60;false&#x60;: tax amount is not included in the request. - &#x60;true&#x60;:  tax amount is included in the request. 
        /// </summary>
        /// <value>Flag that indicates whether the tax amount (&#x60;travelInformation.autoRental.taxDetails.amount&#x60;) is included in the request.  Possible values: - &#x60;false&#x60;: tax amount is not included in the request. - &#x60;true&#x60;:  tax amount is included in the request. </value>
        [DataMember(Name="applied", EmitDefaultValue=false)]
        public bool? Applied { get; set; }

        /// <summary>
        /// Status code for exemption from sales and use tax. This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. 
        /// </summary>
        /// <value>Status code for exemption from sales and use tax. This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. </value>
        [DataMember(Name="exemptionCode", EmitDefaultValue=false)]
        public string ExemptionCode { get; set; }

        /// <summary>
        /// Different taxes the rental agency applies to the rental agreement such as tourist tax, airport tax, or rental tax. 
        /// </summary>
        /// <value>Different taxes the rental agency applies to the rental agreement such as tourist tax, airport tax, or rental tax. </value>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public string TaxType { get; set; }

        /// <summary>
        /// Summary of all tax types 
        /// </summary>
        /// <value>Summary of all tax types </value>
        [DataMember(Name="taxSummary", EmitDefaultValue=false)]
        public string TaxSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentsTravelInformationAutoRentalTaxDetails {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("  ExemptionCode: ").Append(ExemptionCode).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxSummary: ").Append(TaxSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentsTravelInformationAutoRentalTaxDetails);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentsTravelInformationAutoRentalTaxDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentsTravelInformationAutoRentalTaxDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentsTravelInformationAutoRentalTaxDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.Applied == other.Applied ||
                    this.Applied != null &&
                    this.Applied.Equals(other.Applied)
                ) && 
                (
                    this.ExemptionCode == other.ExemptionCode ||
                    this.ExemptionCode != null &&
                    this.ExemptionCode.Equals(other.ExemptionCode)
                ) && 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.TaxSummary == other.TaxSummary ||
                    this.TaxSummary != null &&
                    this.TaxSummary.Equals(other.TaxSummary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.Applied != null)
                    hash = hash * 59 + this.Applied.GetHashCode();
                if (this.ExemptionCode != null)
                    hash = hash * 59 + this.ExemptionCode.GetHashCode();
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.TaxSummary != null)
                    hash = hash * 59 + this.TaxSummary.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
