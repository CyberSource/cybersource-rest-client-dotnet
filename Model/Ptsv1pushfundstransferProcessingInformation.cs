/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv1pushfundstransferProcessingInformation
    /// </summary>
    [DataContract]
    public partial class Ptsv1pushfundstransferProcessingInformation :  IEquatable<Ptsv1pushfundstransferProcessingInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv1pushfundstransferProcessingInformation" /> class.
        /// </summary>
        /// <param name="BusinessApplicationId">Payouts transaction type.  Business Application ID: - &#x60;PP&#x60;: Person to person. - &#x60;FD&#x60;: Funds disbursement (general) .</param>
        /// <param name="PayoutsOptions">PayoutsOptions.</param>
        /// <param name="EnablerId">Enablers are payment processing entities that are not acquiring members and are often the primary relationship owner with merchants and originators. Enablers own technical solutions through which the merchant or originator will access acceptance. The Enabler ID is a five-character hexadecimal identifier that will be used by Visa to identify enablers. Enabler ID assignment will be determined by Visa. Visa will communicate Enablers assignments to enablers. .</param>
        public Ptsv1pushfundstransferProcessingInformation(string BusinessApplicationId = default(string), Ptsv1pushfundstransferProcessingInformationPayoutsOptions PayoutsOptions = default(Ptsv1pushfundstransferProcessingInformationPayoutsOptions), string EnablerId = default(string))
        {
            this.BusinessApplicationId = BusinessApplicationId;
            this.PayoutsOptions = PayoutsOptions;
            this.EnablerId = EnablerId;
        }
        
        /// <summary>
        /// Payouts transaction type.  Business Application ID: - &#x60;PP&#x60;: Person to person. - &#x60;FD&#x60;: Funds disbursement (general) 
        /// </summary>
        /// <value>Payouts transaction type.  Business Application ID: - &#x60;PP&#x60;: Person to person. - &#x60;FD&#x60;: Funds disbursement (general) </value>
        [DataMember(Name="businessApplicationId", EmitDefaultValue=false)]
        public string BusinessApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets PayoutsOptions
        /// </summary>
        [DataMember(Name="payoutsOptions", EmitDefaultValue=false)]
        public Ptsv1pushfundstransferProcessingInformationPayoutsOptions PayoutsOptions { get; set; }

        /// <summary>
        /// Enablers are payment processing entities that are not acquiring members and are often the primary relationship owner with merchants and originators. Enablers own technical solutions through which the merchant or originator will access acceptance. The Enabler ID is a five-character hexadecimal identifier that will be used by Visa to identify enablers. Enabler ID assignment will be determined by Visa. Visa will communicate Enablers assignments to enablers. 
        /// </summary>
        /// <value>Enablers are payment processing entities that are not acquiring members and are often the primary relationship owner with merchants and originators. Enablers own technical solutions through which the merchant or originator will access acceptance. The Enabler ID is a five-character hexadecimal identifier that will be used by Visa to identify enablers. Enabler ID assignment will be determined by Visa. Visa will communicate Enablers assignments to enablers. </value>
        [DataMember(Name="enablerId", EmitDefaultValue=false)]
        public string EnablerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv1pushfundstransferProcessingInformation {\n");
            sb.Append("  BusinessApplicationId: ").Append(BusinessApplicationId).Append("\n");
            sb.Append("  PayoutsOptions: ").Append(PayoutsOptions).Append("\n");
            sb.Append("  EnablerId: ").Append(EnablerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv1pushfundstransferProcessingInformation);
        }

        /// <summary>
        /// Returns true if Ptsv1pushfundstransferProcessingInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv1pushfundstransferProcessingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv1pushfundstransferProcessingInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BusinessApplicationId == other.BusinessApplicationId ||
                    this.BusinessApplicationId != null &&
                    this.BusinessApplicationId.Equals(other.BusinessApplicationId)
                ) && 
                (
                    this.PayoutsOptions == other.PayoutsOptions ||
                    this.PayoutsOptions != null &&
                    this.PayoutsOptions.Equals(other.PayoutsOptions)
                ) && 
                (
                    this.EnablerId == other.EnablerId ||
                    this.EnablerId != null &&
                    this.EnablerId.Equals(other.EnablerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BusinessApplicationId != null)
                    hash = hash * 59 + this.BusinessApplicationId.GetHashCode();
                if (this.PayoutsOptions != null)
                    hash = hash * 59 + this.PayoutsOptions.GetHashCode();
                if (this.EnablerId != null)
                    hash = hash * 59 + this.EnablerId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
