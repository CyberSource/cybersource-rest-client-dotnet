/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Ptsv2paymentreferencesTravelInformationAutoRental
    /// </summary>
    [DataContract]
    public partial class Ptsv2paymentreferencesTravelInformationAutoRental :  IEquatable<Ptsv2paymentreferencesTravelInformationAutoRental>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ptsv2paymentreferencesTravelInformationAutoRental" /> class.
        /// </summary>
        /// <param name="CompanyName">Merchant to send their auto rental company name .</param>
        /// <param name="AffiliateName">When merchant wants to send the affiliate name. .</param>
        /// <param name="RentalAddress">RentalAddress.</param>
        /// <param name="ReturnAddress">ReturnAddress.</param>
        /// <param name="ReturnDateTime">Date/time the auto was returned to the rental agency. Format: &#x60;&#x60;yyyy-MM-dd HH-mm-ss z&#x60;&#x60; This field is supported for Visa, MasterCard, and American Express. .</param>
        /// <param name="RentalDateTime">Date/time the auto was picked up from the rental agency. Format: &#x60;yyyy-MM-dd HH-mm-ss z&#x60; This field is supported for Visa, MasterCard, and American Express. .</param>
        /// <param name="CustomerName">Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| .</param>
        public Ptsv2paymentreferencesTravelInformationAutoRental(string CompanyName = default(string), string AffiliateName = default(string), Ptsv2paymentsTravelInformationAutoRentalRentalAddress RentalAddress = default(Ptsv2paymentsTravelInformationAutoRentalRentalAddress), Ptsv2paymentsTravelInformationAutoRentalReturnAddress ReturnAddress = default(Ptsv2paymentsTravelInformationAutoRentalReturnAddress), string ReturnDateTime = default(string), string RentalDateTime = default(string), string CustomerName = default(string))
        {
            this.CompanyName = CompanyName;
            this.AffiliateName = AffiliateName;
            this.RentalAddress = RentalAddress;
            this.ReturnAddress = ReturnAddress;
            this.ReturnDateTime = ReturnDateTime;
            this.RentalDateTime = RentalDateTime;
            this.CustomerName = CustomerName;
        }
        
        /// <summary>
        /// Merchant to send their auto rental company name 
        /// </summary>
        /// <value>Merchant to send their auto rental company name </value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// When merchant wants to send the affiliate name. 
        /// </summary>
        /// <value>When merchant wants to send the affiliate name. </value>
        [DataMember(Name="affiliateName", EmitDefaultValue=false)]
        public string AffiliateName { get; set; }

        /// <summary>
        /// Gets or Sets RentalAddress
        /// </summary>
        [DataMember(Name="rentalAddress", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationAutoRentalRentalAddress RentalAddress { get; set; }

        /// <summary>
        /// Gets or Sets ReturnAddress
        /// </summary>
        [DataMember(Name="returnAddress", EmitDefaultValue=false)]
        public Ptsv2paymentsTravelInformationAutoRentalReturnAddress ReturnAddress { get; set; }

        /// <summary>
        /// Date/time the auto was returned to the rental agency. Format: &#x60;&#x60;yyyy-MM-dd HH-mm-ss z&#x60;&#x60; This field is supported for Visa, MasterCard, and American Express. 
        /// </summary>
        /// <value>Date/time the auto was returned to the rental agency. Format: &#x60;&#x60;yyyy-MM-dd HH-mm-ss z&#x60;&#x60; This field is supported for Visa, MasterCard, and American Express. </value>
        [DataMember(Name="returnDateTime", EmitDefaultValue=false)]
        public string ReturnDateTime { get; set; }

        /// <summary>
        /// Date/time the auto was picked up from the rental agency. Format: &#x60;yyyy-MM-dd HH-mm-ss z&#x60; This field is supported for Visa, MasterCard, and American Express. 
        /// </summary>
        /// <value>Date/time the auto was picked up from the rental agency. Format: &#x60;yyyy-MM-dd HH-mm-ss z&#x60; This field is supported for Visa, MasterCard, and American Express. </value>
        [DataMember(Name="rentalDateTime", EmitDefaultValue=false)]
        public string RentalDateTime { get; set; }

        /// <summary>
        /// Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| 
        /// </summary>
        /// <value>Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |- -- |- -- |- -- |- -- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| </value>
        [DataMember(Name="customerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ptsv2paymentreferencesTravelInformationAutoRental {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  AffiliateName: ").Append(AffiliateName).Append("\n");
            sb.Append("  RentalAddress: ").Append(RentalAddress).Append("\n");
            sb.Append("  ReturnAddress: ").Append(ReturnAddress).Append("\n");
            sb.Append("  ReturnDateTime: ").Append(ReturnDateTime).Append("\n");
            sb.Append("  RentalDateTime: ").Append(RentalDateTime).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Ptsv2paymentreferencesTravelInformationAutoRental);
        }

        /// <summary>
        /// Returns true if Ptsv2paymentreferencesTravelInformationAutoRental instances are equal
        /// </summary>
        /// <param name="other">Instance of Ptsv2paymentreferencesTravelInformationAutoRental to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ptsv2paymentreferencesTravelInformationAutoRental other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyName == other.CompanyName ||
                    this.CompanyName != null &&
                    this.CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    this.AffiliateName == other.AffiliateName ||
                    this.AffiliateName != null &&
                    this.AffiliateName.Equals(other.AffiliateName)
                ) && 
                (
                    this.RentalAddress == other.RentalAddress ||
                    this.RentalAddress != null &&
                    this.RentalAddress.Equals(other.RentalAddress)
                ) && 
                (
                    this.ReturnAddress == other.ReturnAddress ||
                    this.ReturnAddress != null &&
                    this.ReturnAddress.Equals(other.ReturnAddress)
                ) && 
                (
                    this.ReturnDateTime == other.ReturnDateTime ||
                    this.ReturnDateTime != null &&
                    this.ReturnDateTime.Equals(other.ReturnDateTime)
                ) && 
                (
                    this.RentalDateTime == other.RentalDateTime ||
                    this.RentalDateTime != null &&
                    this.RentalDateTime.Equals(other.RentalDateTime)
                ) && 
                (
                    this.CustomerName == other.CustomerName ||
                    this.CustomerName != null &&
                    this.CustomerName.Equals(other.CustomerName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyName != null)
                    hash = hash * 59 + this.CompanyName.GetHashCode();
                if (this.AffiliateName != null)
                    hash = hash * 59 + this.AffiliateName.GetHashCode();
                if (this.RentalAddress != null)
                    hash = hash * 59 + this.RentalAddress.GetHashCode();
                if (this.ReturnAddress != null)
                    hash = hash * 59 + this.ReturnAddress.GetHashCode();
                if (this.ReturnDateTime != null)
                    hash = hash * 59 + this.ReturnDateTime.GetHashCode();
                if (this.RentalDateTime != null)
                    hash = hash * 59 + this.RentalDateTime.GetHashCode();
                if (this.CustomerName != null)
                    hash = hash * 59 + this.CustomerName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
