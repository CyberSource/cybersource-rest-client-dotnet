/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// VTConfigCardNotPresentGlobalPaymentInformationBasicInformation
    /// </summary>
    [DataContract]
    public partial class VTConfigCardNotPresentGlobalPaymentInformationBasicInformation :  IEquatable<VTConfigCardNotPresentGlobalPaymentInformationBasicInformation>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DefaultTransactionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultTransactionTypeEnum
        {
            
            /// <summary>
            /// Enum AUTHORIZATION for "AUTHORIZATION"
            /// </summary>
            [EnumMember(Value = "AUTHORIZATION")]
            AUTHORIZATION,
            
            /// <summary>
            /// Enum SALE for "SALE"
            /// </summary>
            [EnumMember(Value = "SALE")]
            SALE
        }
        /// <summary>
        /// Gets or Sets DefaultPaymentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultPaymentTypeEnum
        {
            
            /// <summary>
            /// Enum CREDITCARD for "CREDIT_CARD"
            /// </summary>
            [EnumMember(Value = "CREDIT_CARD")]
            CREDITCARD,
            
            /// <summary>
            /// Enum ECHECK for "ECHECK"
            /// </summary>
            [EnumMember(Value = "ECHECK")]
            ECHECK
        }
        /// <summary>
        /// Gets or Sets DefaultTransactionType
        /// </summary>
        [DataMember(Name="defaultTransactionType", EmitDefaultValue=false)]
        public DefaultTransactionTypeEnum? DefaultTransactionType { get; set; }
        /// <summary>
        /// Gets or Sets DefaultPaymentType
        /// </summary>
        [DataMember(Name="defaultPaymentType", EmitDefaultValue=false)]
        public DefaultPaymentTypeEnum? DefaultPaymentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VTConfigCardNotPresentGlobalPaymentInformationBasicInformation" /> class.
        /// </summary>
        /// <param name="DefaultStandardEntryClassCode">DefaultStandardEntryClassCode.</param>
        /// <param name="DefaultCountryCode">ISO 4217 format.</param>
        /// <param name="DefaultCurrencyCode">Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).</param>
        /// <param name="DefaultTransactionType">DefaultTransactionType.</param>
        /// <param name="DefaultPaymentType">DefaultPaymentType.</param>
        /// <param name="DefaultTransactionSource">DefaultTransactionSource.</param>
        /// <param name="DisplayRetail">DisplayRetail.</param>
        /// <param name="DisplayMoto">DisplayMoto.</param>
        /// <param name="DisplayInternet">DisplayInternet.</param>
        public VTConfigCardNotPresentGlobalPaymentInformationBasicInformation(string DefaultStandardEntryClassCode = default(string), string DefaultCountryCode = default(string), string DefaultCurrencyCode = default(string), DefaultTransactionTypeEnum? DefaultTransactionType = default(DefaultTransactionTypeEnum?), DefaultPaymentTypeEnum? DefaultPaymentType = default(DefaultPaymentTypeEnum?), string DefaultTransactionSource = default(string), bool? DisplayRetail = default(bool?), bool? DisplayMoto = default(bool?), bool? DisplayInternet = default(bool?))
        {
            this.DefaultStandardEntryClassCode = DefaultStandardEntryClassCode;
            this.DefaultCountryCode = DefaultCountryCode;
            this.DefaultCurrencyCode = DefaultCurrencyCode;
            this.DefaultTransactionType = DefaultTransactionType;
            this.DefaultPaymentType = DefaultPaymentType;
            this.DefaultTransactionSource = DefaultTransactionSource;
            this.DisplayRetail = DisplayRetail;
            this.DisplayMoto = DisplayMoto;
            this.DisplayInternet = DisplayInternet;
        }
        
        /// <summary>
        /// Gets or Sets DefaultStandardEntryClassCode
        /// </summary>
        [DataMember(Name="defaultStandardEntryClassCode", EmitDefaultValue=false)]
        public string DefaultStandardEntryClassCode { get; set; }

        /// <summary>
        /// ISO 4217 format
        /// </summary>
        /// <value>ISO 4217 format</value>
        [DataMember(Name="defaultCountryCode", EmitDefaultValue=false)]
        public string DefaultCountryCode { get; set; }

        /// <summary>
        /// Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
        /// </summary>
        /// <value>Three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)</value>
        [DataMember(Name="defaultCurrencyCode", EmitDefaultValue=false)]
        public string DefaultCurrencyCode { get; set; }



        /// <summary>
        /// Gets or Sets DefaultTransactionSource
        /// </summary>
        [DataMember(Name="defaultTransactionSource", EmitDefaultValue=false)]
        public string DefaultTransactionSource { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRetail
        /// </summary>
        [DataMember(Name="displayRetail", EmitDefaultValue=false)]
        public bool? DisplayRetail { get; set; }

        /// <summary>
        /// Gets or Sets DisplayMoto
        /// </summary>
        [DataMember(Name="displayMoto", EmitDefaultValue=false)]
        public bool? DisplayMoto { get; set; }

        /// <summary>
        /// Gets or Sets DisplayInternet
        /// </summary>
        [DataMember(Name="displayInternet", EmitDefaultValue=false)]
        public bool? DisplayInternet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VTConfigCardNotPresentGlobalPaymentInformationBasicInformation {\n");
            sb.Append("  DefaultStandardEntryClassCode: ").Append(DefaultStandardEntryClassCode).Append("\n");
            sb.Append("  DefaultCountryCode: ").Append(DefaultCountryCode).Append("\n");
            sb.Append("  DefaultCurrencyCode: ").Append(DefaultCurrencyCode).Append("\n");
            sb.Append("  DefaultTransactionType: ").Append(DefaultTransactionType).Append("\n");
            sb.Append("  DefaultPaymentType: ").Append(DefaultPaymentType).Append("\n");
            sb.Append("  DefaultTransactionSource: ").Append(DefaultTransactionSource).Append("\n");
            sb.Append("  DisplayRetail: ").Append(DisplayRetail).Append("\n");
            sb.Append("  DisplayMoto: ").Append(DisplayMoto).Append("\n");
            sb.Append("  DisplayInternet: ").Append(DisplayInternet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VTConfigCardNotPresentGlobalPaymentInformationBasicInformation);
        }

        /// <summary>
        /// Returns true if VTConfigCardNotPresentGlobalPaymentInformationBasicInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of VTConfigCardNotPresentGlobalPaymentInformationBasicInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VTConfigCardNotPresentGlobalPaymentInformationBasicInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultStandardEntryClassCode == other.DefaultStandardEntryClassCode ||
                    this.DefaultStandardEntryClassCode != null &&
                    this.DefaultStandardEntryClassCode.Equals(other.DefaultStandardEntryClassCode)
                ) && 
                (
                    this.DefaultCountryCode == other.DefaultCountryCode ||
                    this.DefaultCountryCode != null &&
                    this.DefaultCountryCode.Equals(other.DefaultCountryCode)
                ) && 
                (
                    this.DefaultCurrencyCode == other.DefaultCurrencyCode ||
                    this.DefaultCurrencyCode != null &&
                    this.DefaultCurrencyCode.Equals(other.DefaultCurrencyCode)
                ) && 
                (
                    this.DefaultTransactionType == other.DefaultTransactionType ||
                    this.DefaultTransactionType != null &&
                    this.DefaultTransactionType.Equals(other.DefaultTransactionType)
                ) && 
                (
                    this.DefaultPaymentType == other.DefaultPaymentType ||
                    this.DefaultPaymentType != null &&
                    this.DefaultPaymentType.Equals(other.DefaultPaymentType)
                ) && 
                (
                    this.DefaultTransactionSource == other.DefaultTransactionSource ||
                    this.DefaultTransactionSource != null &&
                    this.DefaultTransactionSource.Equals(other.DefaultTransactionSource)
                ) && 
                (
                    this.DisplayRetail == other.DisplayRetail ||
                    this.DisplayRetail != null &&
                    this.DisplayRetail.Equals(other.DisplayRetail)
                ) && 
                (
                    this.DisplayMoto == other.DisplayMoto ||
                    this.DisplayMoto != null &&
                    this.DisplayMoto.Equals(other.DisplayMoto)
                ) && 
                (
                    this.DisplayInternet == other.DisplayInternet ||
                    this.DisplayInternet != null &&
                    this.DisplayInternet.Equals(other.DisplayInternet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultStandardEntryClassCode != null)
                    hash = hash * 59 + this.DefaultStandardEntryClassCode.GetHashCode();
                if (this.DefaultCountryCode != null)
                    hash = hash * 59 + this.DefaultCountryCode.GetHashCode();
                if (this.DefaultCurrencyCode != null)
                    hash = hash * 59 + this.DefaultCurrencyCode.GetHashCode();
                if (this.DefaultTransactionType != null)
                    hash = hash * 59 + this.DefaultTransactionType.GetHashCode();
                if (this.DefaultPaymentType != null)
                    hash = hash * 59 + this.DefaultPaymentType.GetHashCode();
                if (this.DefaultTransactionSource != null)
                    hash = hash * 59 + this.DefaultTransactionSource.GetHashCode();
                if (this.DisplayRetail != null)
                    hash = hash * 59 + this.DisplayRetail.GetHashCode();
                if (this.DisplayMoto != null)
                    hash = hash * 59 + this.DisplayMoto.GetHashCode();
                if (this.DisplayInternet != null)
                    hash = hash * 59 + this.DisplayInternet.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
