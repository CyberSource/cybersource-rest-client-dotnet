/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// A list of purchase or donation links.
    /// </summary>
    [DataContract]
    public partial class PblPaymentLinksAllGet200ResponseSdkLinks :  IEquatable<PblPaymentLinksAllGet200ResponseSdkLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PblPaymentLinksAllGet200ResponseSdkLinks" /> class.
        /// </summary>
        /// <param name="Links">Links.</param>
        /// <param name="Id">An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. .</param>
        /// <param name="Status">The status of the purchase or donation link.  Possible values: - ACTIVE - INACTIVE .</param>
        /// <param name="CreatedDate">Date and time (UTC) the invoice was created.  Format: YYYY-MM-DDThh:mm:ssZ Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. .</param>
        /// <param name="ProcessingInformation">ProcessingInformation.</param>
        /// <param name="PurchaseInformation">PurchaseInformation.</param>
        /// <param name="OrderInformation">OrderInformation.</param>
        public PblPaymentLinksAllGet200ResponseSdkLinks(GetAllPlansResponseLinks Links = default(GetAllPlansResponseLinks), string Id = default(string), string Status = default(string), string CreatedDate = default(string), PblPaymentLinksAllGet200ResponseProcessingInformation ProcessingInformation = default(PblPaymentLinksAllGet200ResponseProcessingInformation), PblPaymentLinksAllGet200ResponsePurchaseInformation PurchaseInformation = default(PblPaymentLinksAllGet200ResponsePurchaseInformation), PblPaymentLinksAllGet200ResponseOrderInformation OrderInformation = default(PblPaymentLinksAllGet200ResponseOrderInformation))
        {
            this.Links = Links;
            this.Id = Id;
            this.Status = Status;
            this.CreatedDate = CreatedDate;
            this.ProcessingInformation = ProcessingInformation;
            this.PurchaseInformation = PurchaseInformation;
            this.OrderInformation = OrderInformation;
        }
        
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public GetAllPlansResponseLinks Links { get; set; }

        /// <summary>
        /// An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. 
        /// </summary>
        /// <value>An unique identification number generated by Cybersource to identify the submitted request. Returned by all services. It is also appended to the endpoint of the resource. On incremental authorizations, this value with be the same as the identification number returned in the original authorization response. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The status of the purchase or donation link.  Possible values: - ACTIVE - INACTIVE 
        /// </summary>
        /// <value>The status of the purchase or donation link.  Possible values: - ACTIVE - INACTIVE </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Date and time (UTC) the invoice was created.  Format: YYYY-MM-DDThh:mm:ssZ Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 
        /// </summary>
        /// <value>Date and time (UTC) the invoice was created.  Format: YYYY-MM-DDThh:mm:ssZ Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. </value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingInformation
        /// </summary>
        [DataMember(Name="processingInformation", EmitDefaultValue=false)]
        public PblPaymentLinksAllGet200ResponseProcessingInformation ProcessingInformation { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseInformation
        /// </summary>
        [DataMember(Name="purchaseInformation", EmitDefaultValue=false)]
        public PblPaymentLinksAllGet200ResponsePurchaseInformation PurchaseInformation { get; set; }

        /// <summary>
        /// Gets or Sets OrderInformation
        /// </summary>
        [DataMember(Name="orderInformation", EmitDefaultValue=false)]
        public PblPaymentLinksAllGet200ResponseOrderInformation OrderInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PblPaymentLinksAllGet200ResponseSdkLinks {\n");
            if (Links != null) sb.Append("  Links: ").Append(Links).Append("\n");
            if (Id != null) sb.Append("  Id: ").Append(Id).Append("\n");
            if (Status != null) sb.Append("  Status: ").Append(Status).Append("\n");
            if (CreatedDate != null) sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            if (ProcessingInformation != null) sb.Append("  ProcessingInformation: ").Append(ProcessingInformation).Append("\n");
            if (PurchaseInformation != null) sb.Append("  PurchaseInformation: ").Append(PurchaseInformation).Append("\n");
            if (OrderInformation != null) sb.Append("  OrderInformation: ").Append(OrderInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PblPaymentLinksAllGet200ResponseSdkLinks);
        }

        /// <summary>
        /// Returns true if PblPaymentLinksAllGet200ResponseSdkLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of PblPaymentLinksAllGet200ResponseSdkLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PblPaymentLinksAllGet200ResponseSdkLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.ProcessingInformation == other.ProcessingInformation ||
                    this.ProcessingInformation != null &&
                    this.ProcessingInformation.Equals(other.ProcessingInformation)
                ) && 
                (
                    this.PurchaseInformation == other.PurchaseInformation ||
                    this.PurchaseInformation != null &&
                    this.PurchaseInformation.Equals(other.PurchaseInformation)
                ) && 
                (
                    this.OrderInformation == other.OrderInformation ||
                    this.OrderInformation != null &&
                    this.OrderInformation.Equals(other.OrderInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.ProcessingInformation != null)
                    hash = hash * 59 + this.ProcessingInformation.GetHashCode();
                if (this.PurchaseInformation != null)
                    hash = hash * 59 + this.PurchaseInformation.GetHashCode();
                if (this.OrderInformation != null)
                    hash = hash * 59 + this.OrderInformation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
