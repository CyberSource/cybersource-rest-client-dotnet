/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// SAConfigNotificationsMerchantNotifications
    /// </summary>
    [DataContract]
    public partial class SAConfigNotificationsMerchantNotifications :  IEquatable<SAConfigNotificationsMerchantNotifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAConfigNotificationsMerchantNotifications" /> class.
        /// </summary>
        /// <param name="BackofficePostEnabled">Enables Webhook transaction confirmation messages sent to URL defined in backofficePostUrl. Usually enabled by web developers integrating to Secure Acceptance..</param>
        /// <param name="BackofficeEmailAddress">Email address to receive transaction confirmation messages..</param>
        /// <param name="BackofficeEmailEnabled">Enables email transaction confirmation messages, sent to the address specified in backofficeEmailAddress..</param>
        /// <param name="BackofficePostUrl">Webhook URL to which transaction confirmation is sent. Usually completed by the web developers integrating to Secure Acceptance..</param>
        /// <param name="CardNumberFormat">Format in which the card number should be masked in the notifications.   Valid values: &#x60;1&#x60; - Display first 6 digits only (e.g. \&quot;444433**********\&quot;)  &#x60;2&#x60; - Display last four digits only (e.g. \&quot;************1111\&quot;)  &#x60;3&#x60; - Display First six and last four digits (e.g. \&quot;444433******1111\&quot;) .</param>
        public SAConfigNotificationsMerchantNotifications(bool? BackofficePostEnabled = default(bool?), string BackofficeEmailAddress = default(string), bool? BackofficeEmailEnabled = default(bool?), string BackofficePostUrl = default(string), string CardNumberFormat = default(string))
        {
            this.BackofficePostEnabled = BackofficePostEnabled;
            this.BackofficeEmailAddress = BackofficeEmailAddress;
            this.BackofficeEmailEnabled = BackofficeEmailEnabled;
            this.BackofficePostUrl = BackofficePostUrl;
            this.CardNumberFormat = CardNumberFormat;
        }
        
        /// <summary>
        /// Enables Webhook transaction confirmation messages sent to URL defined in backofficePostUrl. Usually enabled by web developers integrating to Secure Acceptance.
        /// </summary>
        /// <value>Enables Webhook transaction confirmation messages sent to URL defined in backofficePostUrl. Usually enabled by web developers integrating to Secure Acceptance.</value>
        [DataMember(Name="backofficePostEnabled", EmitDefaultValue=false)]
        public bool? BackofficePostEnabled { get; set; }

        /// <summary>
        /// Email address to receive transaction confirmation messages.
        /// </summary>
        /// <value>Email address to receive transaction confirmation messages.</value>
        [DataMember(Name="backofficeEmailAddress", EmitDefaultValue=false)]
        public string BackofficeEmailAddress { get; set; }

        /// <summary>
        /// Enables email transaction confirmation messages, sent to the address specified in backofficeEmailAddress.
        /// </summary>
        /// <value>Enables email transaction confirmation messages, sent to the address specified in backofficeEmailAddress.</value>
        [DataMember(Name="backofficeEmailEnabled", EmitDefaultValue=false)]
        public bool? BackofficeEmailEnabled { get; set; }

        /// <summary>
        /// Webhook URL to which transaction confirmation is sent. Usually completed by the web developers integrating to Secure Acceptance.
        /// </summary>
        /// <value>Webhook URL to which transaction confirmation is sent. Usually completed by the web developers integrating to Secure Acceptance.</value>
        [DataMember(Name="backofficePostUrl", EmitDefaultValue=false)]
        public string BackofficePostUrl { get; set; }

        /// <summary>
        /// Format in which the card number should be masked in the notifications.   Valid values: &#x60;1&#x60; - Display first 6 digits only (e.g. \&quot;444433**********\&quot;)  &#x60;2&#x60; - Display last four digits only (e.g. \&quot;************1111\&quot;)  &#x60;3&#x60; - Display First six and last four digits (e.g. \&quot;444433******1111\&quot;) 
        /// </summary>
        /// <value>Format in which the card number should be masked in the notifications.   Valid values: &#x60;1&#x60; - Display first 6 digits only (e.g. \&quot;444433**********\&quot;)  &#x60;2&#x60; - Display last four digits only (e.g. \&quot;************1111\&quot;)  &#x60;3&#x60; - Display First six and last four digits (e.g. \&quot;444433******1111\&quot;) </value>
        [DataMember(Name="cardNumberFormat", EmitDefaultValue=false)]
        public string CardNumberFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SAConfigNotificationsMerchantNotifications {\n");
            sb.Append("  BackofficePostEnabled: ").Append(BackofficePostEnabled).Append("\n");
            sb.Append("  BackofficeEmailAddress: ").Append(BackofficeEmailAddress).Append("\n");
            sb.Append("  BackofficeEmailEnabled: ").Append(BackofficeEmailEnabled).Append("\n");
            sb.Append("  BackofficePostUrl: ").Append(BackofficePostUrl).Append("\n");
            sb.Append("  CardNumberFormat: ").Append(CardNumberFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SAConfigNotificationsMerchantNotifications);
        }

        /// <summary>
        /// Returns true if SAConfigNotificationsMerchantNotifications instances are equal
        /// </summary>
        /// <param name="other">Instance of SAConfigNotificationsMerchantNotifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SAConfigNotificationsMerchantNotifications other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackofficePostEnabled == other.BackofficePostEnabled ||
                    this.BackofficePostEnabled != null &&
                    this.BackofficePostEnabled.Equals(other.BackofficePostEnabled)
                ) && 
                (
                    this.BackofficeEmailAddress == other.BackofficeEmailAddress ||
                    this.BackofficeEmailAddress != null &&
                    this.BackofficeEmailAddress.Equals(other.BackofficeEmailAddress)
                ) && 
                (
                    this.BackofficeEmailEnabled == other.BackofficeEmailEnabled ||
                    this.BackofficeEmailEnabled != null &&
                    this.BackofficeEmailEnabled.Equals(other.BackofficeEmailEnabled)
                ) && 
                (
                    this.BackofficePostUrl == other.BackofficePostUrl ||
                    this.BackofficePostUrl != null &&
                    this.BackofficePostUrl.Equals(other.BackofficePostUrl)
                ) && 
                (
                    this.CardNumberFormat == other.CardNumberFormat ||
                    this.CardNumberFormat != null &&
                    this.CardNumberFormat.Equals(other.CardNumberFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackofficePostEnabled != null)
                    hash = hash * 59 + this.BackofficePostEnabled.GetHashCode();
                if (this.BackofficeEmailAddress != null)
                    hash = hash * 59 + this.BackofficeEmailAddress.GetHashCode();
                if (this.BackofficeEmailEnabled != null)
                    hash = hash * 59 + this.BackofficeEmailEnabled.GetHashCode();
                if (this.BackofficePostUrl != null)
                    hash = hash * 59 + this.BackofficePostUrl.GetHashCode();
                if (this.CardNumberFormat != null)
                    hash = hash * 59 + this.CardNumberFormat.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
