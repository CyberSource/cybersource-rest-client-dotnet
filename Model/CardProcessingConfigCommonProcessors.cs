/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// CardProcessingConfigCommonProcessors
    /// </summary>
    [DataContract]
    public partial class CardProcessingConfigCommonProcessors :  IEquatable<CardProcessingConfigCommonProcessors>, IValidatableObject
    {
        /// <summary>
        /// Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. 
        /// </summary>
        /// <value>Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndustryCodeEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum A for "A"
            /// </summary>
            [EnumMember(Value = "A")]
            A,
            
            /// <summary>
            /// Enum B for "B"
            /// </summary>
            [EnumMember(Value = "B")]
            B,
            
            /// <summary>
            /// Enum D for "D"
            /// </summary>
            [EnumMember(Value = "D")]
            D,
            
            /// <summary>
            /// Enum F for "F"
            /// </summary>
            [EnumMember(Value = "F")]
            F,
            
            /// <summary>
            /// Enum G for "G"
            /// </summary>
            [EnumMember(Value = "G")]
            G,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum L for "L"
            /// </summary>
            [EnumMember(Value = "L")]
            L,
            
            /// <summary>
            /// Enum O for "O"
            /// </summary>
            [EnumMember(Value = "O")]
            O,
            
            /// <summary>
            /// Enum P for "P"
            /// </summary>
            [EnumMember(Value = "P")]
            P,
            
            /// <summary>
            /// Enum R for "R"
            /// </summary>
            [EnumMember(Value = "R")]
            R
        }
        /// <summary>
        /// Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. 
        /// </summary>
        /// <value>Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. </value>
        [DataMember(Name="industryCode", EmitDefaultValue=false)]
        public IndustryCodeEnum? IndustryCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigCommonProcessors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardProcessingConfigCommonProcessors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProcessingConfigCommonProcessors" /> class.
        /// </summary>
        /// <param name="BatchGroup">Determines the batching group that separates merchants for special batching times. Batching groups can separate merchant batches by the following criteria:  * Timezone * Merchant deadlines * Large merchants (top 10) * Merchants with Service-Level Agreements  Applicable for Chase Paymentech Salem (chasepaymentechsalem), Streamline (streamline2), Six (six), Barclays (barclays2), Paymentech Tampa (paymentechtampa), CMCIC (cmcic), FDC Nashville (smartfdc), RUPAY, American Express Direct (amexdirect), GPN (gpn), VPC, GPX (gpx), CB2A, Barclays HISO (barclayshiso), TSYS (tsys) and FDI Global (fdiglobal) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="BusinessApplicationId">Indicates the type of money transfer used in the transaction. Applicable for VPC and GPX (gpx) processors..</param>
        /// <param name="MerchantVerificationValue">Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="AbaNumber">Routing Number to identify banks within the United States. Applicable for GPX (gpx) processors..</param>
        /// <param name="Acquirer">Acquirer.</param>
        /// <param name="MerchantId">Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;  (required).</param>
        /// <param name="TerminalId">The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="PaymentTypes">Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB .</param>
        /// <param name="Currencies">Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).</param>
        /// <param name="VisaAggregatorId">This field is used as aggregator Id when Visa payment type is selected.</param>
        /// <param name="AmexAggregatorId">This field is used as aggregator Id when Amex payment type is selected.</param>
        /// <param name="MasterCardAggregatorId">This field is used as aggregator Id when Master Card payment type is selected.</param>
        /// <param name="SicCode">The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors..</param>
        /// <param name="AllowMultipleBills">Allows multiple captures for a single authorization transaction. Applicable for Paymentech Tampa (paymentechtampa), VPC, American Express Direct (amexdirect) and GPX (gpx) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="AllowMerchantDescriptorOverride">Enables partner to enable/disable merchant descriptors values. Applicable for VPC, EFTPOS and CUP processors..</param>
        /// <param name="EnhancedData">To enable airline transactions. Applicable for TSYS (tsys), VPC, Elavon Americas (elavonamericas), FDI Global (fdiglobal), GPX (gpx), Barclays (barclays2) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="FireSafetyIndicator">Indicates whether the merchant is compliant with Hotel and Motel Fire Safety Act of 1990. Applicable for GPX (gpx) and VPC processors..</param>
        /// <param name="QuasiCash">To enable quasi-cash transactions. A quasi-cash transaction is a cash-like transaction for the sale of items that are directly convertible to cash, such as:- Casino gaming chips, Money orders, Wire transfers.  Applicable for GPX (gpx), TSYS (tsys), Barclays (barclays2) and VPC processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="AcquirerMerchantId">Identifier assigned by the acquirer. Applicable for RUPAY, VPC and Six (six) processors..</param>
        /// <param name="AvsFormat">Enables Enhanced AVS/Automated Address Verification Plus (AAV+).  Valid values: \&quot;basic\&quot; - Standard address verification system.   When a processor supports AVS for a transaction&#39;s card type, the issuing bank uses AVS to confirm that the customer has provided the correct billing address.   When a customer provides incorrect information, the transaction might be fraudulent. \&quot;basic + name\&quot; - Enhanced address verification system.   Consists of the standard AVS functionality plus verification of some additional fields.   The additional fields that are verified for Enhanced AVS are:   - customer_firstname   - customer_lastname \&quot;basic + name + shipto\&quot; - Automated address verification plus.   Consists of the Enhanced AVS functionality plus verification of some additional fields.   AAV+ intended for merchants who deliver physical goods to a different address than the billing address.   AAV+ verifies the additional fields only when the standard and Enhanced AVS tests pass first.   For information about Enhanced AVS - The additional fields that are verified for AAV+ are:   - ship_to_firstname   - ship_to_lastname   - ship_to_address1   - ship_to_country   - ship_to_zip   - ship_to_phone   - customer_phone(American Express Direct only)  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;basic&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnableLongTransRefNo">Amex Direct specific merchant config value which determines what length (either 9 or Unique 12-char reference number) of reference number will be CYBS generated if the merchant does not pass in a trans_ref_no. Can be any combination of alpha, numeric and special characters, and/or binary data in hexadecimal.  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnableLevel2">Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnableMultipleTransactionAdviceAddendum">This flag related to multiple transaction advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="AmexTransactionAdviceAddendum1">Advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnableMultiLineItems">This flag is related to offer/line item details to be included instead of sending one line item, and a grand total. Example, offer0, offer 1...offer n. Applicable for American Express Direct (amexdirect) and Elavon Americas (elavonamericas) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnableTransactionReferenceNumber">To enable merchant to send in transaction reference number (unique reconciliation ID). Applicable for VPC, Vero (vero), FDI Global (fdiglobal), Six (six), CB2A, CUP, VPC, Chase Paymentech Salem (chasepaymentechsalem), Fiserv (fiserv), Elavon Americas (elavonamericas) and EFTPOS processors..</param>
        /// <param name="EnableAutoAuthReversalAfterVoid">Enables to meet the Visa mandate requirements to reverse unused authorizations, benefitting the customer by releasing the hold on unused credit card funds. Applicable for CB2A, Elavon Americas (elavonamericas), Six (six), VPC and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnableExpresspayPanTranslation">When this is enabled, authorization responses from American Express expresspay transactions include the Primary Account Number (PAN) and expiration date of the card. Applicable for American Express Direct (amexdirect) processor..</param>
        /// <param name="EnableCreditAuth">Authorizes a credit. Reduces refund chargebacks and prevents customers from seeing the online update for credits which are otherwise offline settlements..</param>
        /// <param name="IndustryCode">Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. .</param>
        /// <param name="SendAmexLevel2Data">Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for TSYS (tsys) processor..</param>
        /// <param name="SoftDescriptorType">A soft descriptor is a text, rendered on a cardholder&#39;s statement, describing a particular product or service, purchased by the cardholder. Descriptors are intended to help the cardholder identify the products or services purchased. Valid values: &#x60;1&#x60; - trans_ref_no &#x60;2&#x60; - merchant_descriptor &#x60;3&#x60; - trans_ref_no and merchant_descriptor Applicable for TSYS (tsys) processor. .</param>
        /// <param name="VitalNumber">V-number provided by TSYS info. The leading &#x60;V&#x60; must be replaced by a &#x60;7&#x60;. For example, replace &#x60;V1234567&#x60; with &#x60;71234567&#x60;. Applicable for TSYS (tsys) processor..</param>
        /// <param name="BankNumber">6 digit agent bank number provided by acquirer. Applicable for TSYS (tsys) processor..</param>
        /// <param name="ChainNumber">6 digit chain number provided by acquirer. Applicable for TSYS (tsys) processor..</param>
        /// <param name="MerchantBinNumber">6 digits acquirer bank identification number. Applicable for TSYS (tsys) processor..</param>
        /// <param name="MerchantLocationNumber">5 digit merchant location number. Unless otherwise specified by merchant&#39;s bank or processor, this field should default to 00001. Applicable for TSYS (tsys) processor..</param>
        /// <param name="StoreID">4 digits number used to identify a specific merchant store location within the member systems. Applicable for TSYS (tsys) processor..</param>
        /// <param name="TravelAgencyCode">Contains travel agency code if airline ticket was issued by a travel agency. Applicable for TSYS (tsys) processor..</param>
        /// <param name="TravelAgencyName">Contains travel agency name if airline ticket was issued by travel agency. Applicable for TSYS (tsys) processor..</param>
        /// <param name="SettlementCurrency">This field is used to indicate Merchant&#39;s settlement currency. [ISO 4217 ALPHA-3 Standard Currency Codes] Applicable for TSYS (tsys) and Streamline (streamline2) processors..</param>
        /// <param name="EnableLeastCostRouting">Indicates whether Least Cost Routing is enabled. Applicable for EFTPOS and CUP processors..</param>
        /// <param name="EnableCVVResponseIndicator">This field denotes EFTPOS Merchant&#39;s choice of receiving CVV Processing Response in return. Applicable for EFTPOS processors..</param>
        /// <param name="EnableMultiCurrencyProcessing">Applicable for Barclays (barclays2) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; .</param>
        /// <param name="EnablePosNetworkSwitching">&#39;POS Network Switching&#39; or &#39;Alternate Routing&#39; means merchant can process PIN Debit transactions without a PIN. Set the value to &#39;Yes&#39; if it is supported. Applicable for FDI Global (fdiglobal) processor..</param>
        /// <param name="EnableDynamicCurrencyConversion">Enable dynamic currency conversion for a merchant..</param>
        /// <param name="MerchantTier">Merchant Tier defines the type of merchant, the numeric Merchant Tier value is allocated by EFTPOS. Applicable for EFTPOS processors..</param>
        public CardProcessingConfigCommonProcessors(string BatchGroup = default(string), string BusinessApplicationId = default(string), string MerchantVerificationValue = default(string), string AbaNumber = default(string), CardProcessingConfigCommonAcquirer Acquirer = default(CardProcessingConfigCommonAcquirer), string MerchantId = default(string), string TerminalId = default(string), Dictionary<string, CardProcessingConfigCommonPaymentTypes> PaymentTypes = default(Dictionary<string, CardProcessingConfigCommonPaymentTypes>), Dictionary<string, CardProcessingConfigCommonCurrencies1> Currencies = default(Dictionary<string, CardProcessingConfigCommonCurrencies1>), string VisaAggregatorId = default(string), string AmexAggregatorId = default(string), string MasterCardAggregatorId = default(string), string SicCode = default(string), bool? AllowMultipleBills = default(bool?), bool? AllowMerchantDescriptorOverride = default(bool?), string EnhancedData = default(string), bool? FireSafetyIndicator = default(bool?), bool? QuasiCash = default(bool?), string AcquirerMerchantId = default(string), string AvsFormat = default(string), bool? EnableLongTransRefNo = default(bool?), bool? EnableLevel2 = default(bool?), bool? EnableMultipleTransactionAdviceAddendum = default(bool?), string AmexTransactionAdviceAddendum1 = default(string), bool? EnableMultiLineItems = default(bool?), bool? EnableTransactionReferenceNumber = default(bool?), bool? EnableAutoAuthReversalAfterVoid = default(bool?), bool? EnableExpresspayPanTranslation = default(bool?), bool? EnableCreditAuth = default(bool?), IndustryCodeEnum? IndustryCode = default(IndustryCodeEnum?), bool? SendAmexLevel2Data = default(bool?), string SoftDescriptorType = default(string), string VitalNumber = default(string), string BankNumber = default(string), string ChainNumber = default(string), string MerchantBinNumber = default(string), string MerchantLocationNumber = default(string), string StoreID = default(string), string TravelAgencyCode = default(string), string TravelAgencyName = default(string), string SettlementCurrency = default(string), bool? EnableLeastCostRouting = default(bool?), bool? EnableCVVResponseIndicator = default(bool?), string EnableMultiCurrencyProcessing = default(string), bool? EnablePosNetworkSwitching = default(bool?), bool? EnableDynamicCurrencyConversion = default(bool?), string MerchantTier = default(string))
        {
            this.BatchGroup = BatchGroup;
            this.BusinessApplicationId = BusinessApplicationId;
            this.MerchantVerificationValue = MerchantVerificationValue;
            this.AbaNumber = AbaNumber;
            this.Acquirer = Acquirer;
            this.MerchantId = MerchantId;
            this.TerminalId = TerminalId;
            this.PaymentTypes = PaymentTypes;
            this.Currencies = Currencies;
            this.VisaAggregatorId = VisaAggregatorId;
            this.AmexAggregatorId = AmexAggregatorId;
            this.MasterCardAggregatorId = MasterCardAggregatorId;
            this.SicCode = SicCode;
            this.AllowMultipleBills = AllowMultipleBills;
            this.AllowMerchantDescriptorOverride = AllowMerchantDescriptorOverride;
            this.EnhancedData = EnhancedData;
            this.FireSafetyIndicator = FireSafetyIndicator;
            this.QuasiCash = QuasiCash;
            this.AcquirerMerchantId = AcquirerMerchantId;
            this.AvsFormat = AvsFormat;
            this.EnableLongTransRefNo = EnableLongTransRefNo;
            this.EnableLevel2 = EnableLevel2;
            this.EnableMultipleTransactionAdviceAddendum = EnableMultipleTransactionAdviceAddendum;
            this.AmexTransactionAdviceAddendum1 = AmexTransactionAdviceAddendum1;
            this.EnableMultiLineItems = EnableMultiLineItems;
            this.EnableTransactionReferenceNumber = EnableTransactionReferenceNumber;
            this.EnableAutoAuthReversalAfterVoid = EnableAutoAuthReversalAfterVoid;
            this.EnableExpresspayPanTranslation = EnableExpresspayPanTranslation;
            this.EnableCreditAuth = EnableCreditAuth;
            this.IndustryCode = IndustryCode;
            this.SendAmexLevel2Data = SendAmexLevel2Data;
            this.SoftDescriptorType = SoftDescriptorType;
            this.VitalNumber = VitalNumber;
            this.BankNumber = BankNumber;
            this.ChainNumber = ChainNumber;
            this.MerchantBinNumber = MerchantBinNumber;
            this.MerchantLocationNumber = MerchantLocationNumber;
            this.StoreID = StoreID;
            this.TravelAgencyCode = TravelAgencyCode;
            this.TravelAgencyName = TravelAgencyName;
            this.SettlementCurrency = SettlementCurrency;
            this.EnableLeastCostRouting = EnableLeastCostRouting;
            this.EnableCVVResponseIndicator = EnableCVVResponseIndicator;
            this.EnableMultiCurrencyProcessing = EnableMultiCurrencyProcessing;
            this.EnablePosNetworkSwitching = EnablePosNetworkSwitching;
            this.EnableDynamicCurrencyConversion = EnableDynamicCurrencyConversion;
            this.MerchantTier = MerchantTier;
        }
        
        /// <summary>
        /// Determines the batching group that separates merchants for special batching times. Batching groups can separate merchant batches by the following criteria:  * Timezone * Merchant deadlines * Large merchants (top 10) * Merchants with Service-Level Agreements  Applicable for Chase Paymentech Salem (chasepaymentechsalem), Streamline (streamline2), Six (six), Barclays (barclays2), Paymentech Tampa (paymentechtampa), CMCIC (cmcic), FDC Nashville (smartfdc), RUPAY, American Express Direct (amexdirect), GPN (gpn), VPC, GPX (gpx), CB2A, Barclays HISO (barclayshiso), TSYS (tsys) and FDI Global (fdiglobal) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Determines the batching group that separates merchants for special batching times. Batching groups can separate merchant batches by the following criteria:  * Timezone * Merchant deadlines * Large merchants (top 10) * Merchants with Service-Level Agreements  Applicable for Chase Paymentech Salem (chasepaymentechsalem), Streamline (streamline2), Six (six), Barclays (barclays2), Paymentech Tampa (paymentechtampa), CMCIC (cmcic), FDC Nashville (smartfdc), RUPAY, American Express Direct (amexdirect), GPN (gpn), VPC, GPX (gpx), CB2A, Barclays HISO (barclayshiso), TSYS (tsys) and FDI Global (fdiglobal) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="batchGroup", EmitDefaultValue=false)]
        public string BatchGroup { get; set; }

        /// <summary>
        /// Indicates the type of money transfer used in the transaction. Applicable for VPC and GPX (gpx) processors.
        /// </summary>
        /// <value>Indicates the type of money transfer used in the transaction. Applicable for VPC and GPX (gpx) processors.</value>
        [DataMember(Name="businessApplicationId", EmitDefaultValue=false)]
        public string BusinessApplicationId { get; set; }

        /// <summary>
        /// Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="merchantVerificationValue", EmitDefaultValue=false)]
        public string MerchantVerificationValue { get; set; }

        /// <summary>
        /// Routing Number to identify banks within the United States. Applicable for GPX (gpx) processors.
        /// </summary>
        /// <value>Routing Number to identify banks within the United States. Applicable for GPX (gpx) processors.</value>
        [DataMember(Name="abaNumber", EmitDefaultValue=false)]
        public string AbaNumber { get; set; }

        /// <summary>
        /// Gets or Sets Acquirer
        /// </summary>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public CardProcessingConfigCommonAcquirer Acquirer { get; set; }

        /// <summary>
        /// Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB 
        /// </summary>
        /// <value>Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB </value>
        [DataMember(Name="paymentTypes", EmitDefaultValue=false)]
        public Dictionary<string, CardProcessingConfigCommonPaymentTypes> PaymentTypes { get; set; }

        /// <summary>
        /// Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
        /// </summary>
        /// <value>Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)</value>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public Dictionary<string, CardProcessingConfigCommonCurrencies1> Currencies { get; set; }

        /// <summary>
        /// This field is used as aggregator Id when Visa payment type is selected
        /// </summary>
        /// <value>This field is used as aggregator Id when Visa payment type is selected</value>
        [DataMember(Name="visaAggregatorId", EmitDefaultValue=false)]
        public string VisaAggregatorId { get; set; }

        /// <summary>
        /// This field is used as aggregator Id when Amex payment type is selected
        /// </summary>
        /// <value>This field is used as aggregator Id when Amex payment type is selected</value>
        [DataMember(Name="amexAggregatorId", EmitDefaultValue=false)]
        public string AmexAggregatorId { get; set; }

        /// <summary>
        /// This field is used as aggregator Id when Master Card payment type is selected
        /// </summary>
        /// <value>This field is used as aggregator Id when Master Card payment type is selected</value>
        [DataMember(Name="masterCardAggregatorId", EmitDefaultValue=false)]
        public string MasterCardAggregatorId { get; set; }

        /// <summary>
        /// The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors.
        /// </summary>
        /// <value>The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors.</value>
        [DataMember(Name="sicCode", EmitDefaultValue=false)]
        public string SicCode { get; set; }

        /// <summary>
        /// Allows multiple captures for a single authorization transaction. Applicable for Paymentech Tampa (paymentechtampa), VPC, American Express Direct (amexdirect) and GPX (gpx) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Allows multiple captures for a single authorization transaction. Applicable for Paymentech Tampa (paymentechtampa), VPC, American Express Direct (amexdirect) and GPX (gpx) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="allowMultipleBills", EmitDefaultValue=false)]
        public bool? AllowMultipleBills { get; set; }

        /// <summary>
        /// Enables partner to enable/disable merchant descriptors values. Applicable for VPC, EFTPOS and CUP processors.
        /// </summary>
        /// <value>Enables partner to enable/disable merchant descriptors values. Applicable for VPC, EFTPOS and CUP processors.</value>
        [DataMember(Name="allowMerchantDescriptorOverride", EmitDefaultValue=false)]
        public bool? AllowMerchantDescriptorOverride { get; set; }

        /// <summary>
        /// To enable airline transactions. Applicable for TSYS (tsys), VPC, Elavon Americas (elavonamericas), FDI Global (fdiglobal), GPX (gpx), Barclays (barclays2) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>To enable airline transactions. Applicable for TSYS (tsys), VPC, Elavon Americas (elavonamericas), FDI Global (fdiglobal), GPX (gpx), Barclays (barclays2) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enhancedData", EmitDefaultValue=false)]
        public string EnhancedData { get; set; }

        /// <summary>
        /// Indicates whether the merchant is compliant with Hotel and Motel Fire Safety Act of 1990. Applicable for GPX (gpx) and VPC processors.
        /// </summary>
        /// <value>Indicates whether the merchant is compliant with Hotel and Motel Fire Safety Act of 1990. Applicable for GPX (gpx) and VPC processors.</value>
        [DataMember(Name="fireSafetyIndicator", EmitDefaultValue=false)]
        public bool? FireSafetyIndicator { get; set; }

        /// <summary>
        /// To enable quasi-cash transactions. A quasi-cash transaction is a cash-like transaction for the sale of items that are directly convertible to cash, such as:- Casino gaming chips, Money orders, Wire transfers.  Applicable for GPX (gpx), TSYS (tsys), Barclays (barclays2) and VPC processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>To enable quasi-cash transactions. A quasi-cash transaction is a cash-like transaction for the sale of items that are directly convertible to cash, such as:- Casino gaming chips, Money orders, Wire transfers.  Applicable for GPX (gpx), TSYS (tsys), Barclays (barclays2) and VPC processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="quasiCash", EmitDefaultValue=false)]
        public bool? QuasiCash { get; set; }

        /// <summary>
        /// Identifier assigned by the acquirer. Applicable for RUPAY, VPC and Six (six) processors.
        /// </summary>
        /// <value>Identifier assigned by the acquirer. Applicable for RUPAY, VPC and Six (six) processors.</value>
        [DataMember(Name="acquirerMerchantId", EmitDefaultValue=false)]
        public string AcquirerMerchantId { get; set; }

        /// <summary>
        /// Enables Enhanced AVS/Automated Address Verification Plus (AAV+).  Valid values: \&quot;basic\&quot; - Standard address verification system.   When a processor supports AVS for a transaction&#39;s card type, the issuing bank uses AVS to confirm that the customer has provided the correct billing address.   When a customer provides incorrect information, the transaction might be fraudulent. \&quot;basic + name\&quot; - Enhanced address verification system.   Consists of the standard AVS functionality plus verification of some additional fields.   The additional fields that are verified for Enhanced AVS are:   - customer_firstname   - customer_lastname \&quot;basic + name + shipto\&quot; - Automated address verification plus.   Consists of the Enhanced AVS functionality plus verification of some additional fields.   AAV+ intended for merchants who deliver physical goods to a different address than the billing address.   AAV+ verifies the additional fields only when the standard and Enhanced AVS tests pass first.   For information about Enhanced AVS - The additional fields that are verified for AAV+ are:   - ship_to_firstname   - ship_to_lastname   - ship_to_address1   - ship_to_country   - ship_to_zip   - ship_to_phone   - customer_phone(American Express Direct only)  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;basic&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Enables Enhanced AVS/Automated Address Verification Plus (AAV+).  Valid values: \&quot;basic\&quot; - Standard address verification system.   When a processor supports AVS for a transaction&#39;s card type, the issuing bank uses AVS to confirm that the customer has provided the correct billing address.   When a customer provides incorrect information, the transaction might be fraudulent. \&quot;basic + name\&quot; - Enhanced address verification system.   Consists of the standard AVS functionality plus verification of some additional fields.   The additional fields that are verified for Enhanced AVS are:   - customer_firstname   - customer_lastname \&quot;basic + name + shipto\&quot; - Automated address verification plus.   Consists of the Enhanced AVS functionality plus verification of some additional fields.   AAV+ intended for merchants who deliver physical goods to a different address than the billing address.   AAV+ verifies the additional fields only when the standard and Enhanced AVS tests pass first.   For information about Enhanced AVS - The additional fields that are verified for AAV+ are:   - ship_to_firstname   - ship_to_lastname   - ship_to_address1   - ship_to_country   - ship_to_zip   - ship_to_phone   - customer_phone(American Express Direct only)  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;basic&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="avsFormat", EmitDefaultValue=false)]
        public string AvsFormat { get; set; }

        /// <summary>
        /// Amex Direct specific merchant config value which determines what length (either 9 or Unique 12-char reference number) of reference number will be CYBS generated if the merchant does not pass in a trans_ref_no. Can be any combination of alpha, numeric and special characters, and/or binary data in hexadecimal.  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Amex Direct specific merchant config value which determines what length (either 9 or Unique 12-char reference number) of reference number will be CYBS generated if the merchant does not pass in a trans_ref_no. Can be any combination of alpha, numeric and special characters, and/or binary data in hexadecimal.  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enableLongTransRefNo", EmitDefaultValue=false)]
        public bool? EnableLongTransRefNo { get; set; }

        /// <summary>
        /// Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enableLevel2", EmitDefaultValue=false)]
        public bool? EnableLevel2 { get; set; }

        /// <summary>
        /// This flag related to multiple transaction advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>This flag related to multiple transaction advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enableMultipleTransactionAdviceAddendum", EmitDefaultValue=false)]
        public bool? EnableMultipleTransactionAdviceAddendum { get; set; }

        /// <summary>
        /// Advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="amexTransactionAdviceAddendum1", EmitDefaultValue=false)]
        public string AmexTransactionAdviceAddendum1 { get; set; }

        /// <summary>
        /// This flag is related to offer/line item details to be included instead of sending one line item, and a grand total. Example, offer0, offer 1...offer n. Applicable for American Express Direct (amexdirect) and Elavon Americas (elavonamericas) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>This flag is related to offer/line item details to be included instead of sending one line item, and a grand total. Example, offer0, offer 1...offer n. Applicable for American Express Direct (amexdirect) and Elavon Americas (elavonamericas) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enableMultiLineItems", EmitDefaultValue=false)]
        public bool? EnableMultiLineItems { get; set; }

        /// <summary>
        /// To enable merchant to send in transaction reference number (unique reconciliation ID). Applicable for VPC, Vero (vero), FDI Global (fdiglobal), Six (six), CB2A, CUP, VPC, Chase Paymentech Salem (chasepaymentechsalem), Fiserv (fiserv), Elavon Americas (elavonamericas) and EFTPOS processors.
        /// </summary>
        /// <value>To enable merchant to send in transaction reference number (unique reconciliation ID). Applicable for VPC, Vero (vero), FDI Global (fdiglobal), Six (six), CB2A, CUP, VPC, Chase Paymentech Salem (chasepaymentechsalem), Fiserv (fiserv), Elavon Americas (elavonamericas) and EFTPOS processors.</value>
        [DataMember(Name="enableTransactionReferenceNumber", EmitDefaultValue=false)]
        public bool? EnableTransactionReferenceNumber { get; set; }

        /// <summary>
        /// Enables to meet the Visa mandate requirements to reverse unused authorizations, benefitting the customer by releasing the hold on unused credit card funds. Applicable for CB2A, Elavon Americas (elavonamericas), Six (six), VPC and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Enables to meet the Visa mandate requirements to reverse unused authorizations, benefitting the customer by releasing the hold on unused credit card funds. Applicable for CB2A, Elavon Americas (elavonamericas), Six (six), VPC and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enableAutoAuthReversalAfterVoid", EmitDefaultValue=false)]
        public bool? EnableAutoAuthReversalAfterVoid { get; set; }

        /// <summary>
        /// When this is enabled, authorization responses from American Express expresspay transactions include the Primary Account Number (PAN) and expiration date of the card. Applicable for American Express Direct (amexdirect) processor.
        /// </summary>
        /// <value>When this is enabled, authorization responses from American Express expresspay transactions include the Primary Account Number (PAN) and expiration date of the card. Applicable for American Express Direct (amexdirect) processor.</value>
        [DataMember(Name="enableExpresspayPanTranslation", EmitDefaultValue=false)]
        public bool? EnableExpresspayPanTranslation { get; set; }

        /// <summary>
        /// Authorizes a credit. Reduces refund chargebacks and prevents customers from seeing the online update for credits which are otherwise offline settlements.
        /// </summary>
        /// <value>Authorizes a credit. Reduces refund chargebacks and prevents customers from seeing the online update for credits which are otherwise offline settlements.</value>
        [DataMember(Name="enableCreditAuth", EmitDefaultValue=false)]
        public bool? EnableCreditAuth { get; set; }


        /// <summary>
        /// Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="sendAmexLevel2Data", EmitDefaultValue=false)]
        public bool? SendAmexLevel2Data { get; set; }

        /// <summary>
        /// A soft descriptor is a text, rendered on a cardholder&#39;s statement, describing a particular product or service, purchased by the cardholder. Descriptors are intended to help the cardholder identify the products or services purchased. Valid values: &#x60;1&#x60; - trans_ref_no &#x60;2&#x60; - merchant_descriptor &#x60;3&#x60; - trans_ref_no and merchant_descriptor Applicable for TSYS (tsys) processor. 
        /// </summary>
        /// <value>A soft descriptor is a text, rendered on a cardholder&#39;s statement, describing a particular product or service, purchased by the cardholder. Descriptors are intended to help the cardholder identify the products or services purchased. Valid values: &#x60;1&#x60; - trans_ref_no &#x60;2&#x60; - merchant_descriptor &#x60;3&#x60; - trans_ref_no and merchant_descriptor Applicable for TSYS (tsys) processor. </value>
        [DataMember(Name="softDescriptorType", EmitDefaultValue=false)]
        public string SoftDescriptorType { get; set; }

        /// <summary>
        /// V-number provided by TSYS info. The leading &#x60;V&#x60; must be replaced by a &#x60;7&#x60;. For example, replace &#x60;V1234567&#x60; with &#x60;71234567&#x60;. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>V-number provided by TSYS info. The leading &#x60;V&#x60; must be replaced by a &#x60;7&#x60;. For example, replace &#x60;V1234567&#x60; with &#x60;71234567&#x60;. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="vitalNumber", EmitDefaultValue=false)]
        public string VitalNumber { get; set; }

        /// <summary>
        /// 6 digit agent bank number provided by acquirer. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>6 digit agent bank number provided by acquirer. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="bankNumber", EmitDefaultValue=false)]
        public string BankNumber { get; set; }

        /// <summary>
        /// 6 digit chain number provided by acquirer. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>6 digit chain number provided by acquirer. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="chainNumber", EmitDefaultValue=false)]
        public string ChainNumber { get; set; }

        /// <summary>
        /// 6 digits acquirer bank identification number. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>6 digits acquirer bank identification number. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="merchantBinNumber", EmitDefaultValue=false)]
        public string MerchantBinNumber { get; set; }

        /// <summary>
        /// 5 digit merchant location number. Unless otherwise specified by merchant&#39;s bank or processor, this field should default to 00001. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>5 digit merchant location number. Unless otherwise specified by merchant&#39;s bank or processor, this field should default to 00001. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="merchantLocationNumber", EmitDefaultValue=false)]
        public string MerchantLocationNumber { get; set; }

        /// <summary>
        /// 4 digits number used to identify a specific merchant store location within the member systems. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>4 digits number used to identify a specific merchant store location within the member systems. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="storeID", EmitDefaultValue=false)]
        public string StoreID { get; set; }

        /// <summary>
        /// Contains travel agency code if airline ticket was issued by a travel agency. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>Contains travel agency code if airline ticket was issued by a travel agency. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="travelAgencyCode", EmitDefaultValue=false)]
        public string TravelAgencyCode { get; set; }

        /// <summary>
        /// Contains travel agency name if airline ticket was issued by travel agency. Applicable for TSYS (tsys) processor.
        /// </summary>
        /// <value>Contains travel agency name if airline ticket was issued by travel agency. Applicable for TSYS (tsys) processor.</value>
        [DataMember(Name="travelAgencyName", EmitDefaultValue=false)]
        public string TravelAgencyName { get; set; }

        /// <summary>
        /// This field is used to indicate Merchant&#39;s settlement currency. [ISO 4217 ALPHA-3 Standard Currency Codes] Applicable for TSYS (tsys) and Streamline (streamline2) processors.
        /// </summary>
        /// <value>This field is used to indicate Merchant&#39;s settlement currency. [ISO 4217 ALPHA-3 Standard Currency Codes] Applicable for TSYS (tsys) and Streamline (streamline2) processors.</value>
        [DataMember(Name="settlementCurrency", EmitDefaultValue=false)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// Indicates whether Least Cost Routing is enabled. Applicable for EFTPOS and CUP processors.
        /// </summary>
        /// <value>Indicates whether Least Cost Routing is enabled. Applicable for EFTPOS and CUP processors.</value>
        [DataMember(Name="enableLeastCostRouting", EmitDefaultValue=false)]
        public bool? EnableLeastCostRouting { get; set; }

        /// <summary>
        /// This field denotes EFTPOS Merchant&#39;s choice of receiving CVV Processing Response in return. Applicable for EFTPOS processors.
        /// </summary>
        /// <value>This field denotes EFTPOS Merchant&#39;s choice of receiving CVV Processing Response in return. Applicable for EFTPOS processors.</value>
        [DataMember(Name="enableCVVResponseIndicator", EmitDefaultValue=false)]
        public bool? EnableCVVResponseIndicator { get; set; }

        /// <summary>
        /// Applicable for Barclays (barclays2) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
        /// </summary>
        /// <value>Applicable for Barclays (barclays2) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; </value>
        [DataMember(Name="enableMultiCurrencyProcessing", EmitDefaultValue=false)]
        public string EnableMultiCurrencyProcessing { get; set; }

        /// <summary>
        /// &#39;POS Network Switching&#39; or &#39;Alternate Routing&#39; means merchant can process PIN Debit transactions without a PIN. Set the value to &#39;Yes&#39; if it is supported. Applicable for FDI Global (fdiglobal) processor.
        /// </summary>
        /// <value>&#39;POS Network Switching&#39; or &#39;Alternate Routing&#39; means merchant can process PIN Debit transactions without a PIN. Set the value to &#39;Yes&#39; if it is supported. Applicable for FDI Global (fdiglobal) processor.</value>
        [DataMember(Name="enablePosNetworkSwitching", EmitDefaultValue=false)]
        public bool? EnablePosNetworkSwitching { get; set; }

        /// <summary>
        /// Enable dynamic currency conversion for a merchant.
        /// </summary>
        /// <value>Enable dynamic currency conversion for a merchant.</value>
        [DataMember(Name="enableDynamicCurrencyConversion", EmitDefaultValue=false)]
        public bool? EnableDynamicCurrencyConversion { get; set; }

        /// <summary>
        /// Merchant Tier defines the type of merchant, the numeric Merchant Tier value is allocated by EFTPOS. Applicable for EFTPOS processors.
        /// </summary>
        /// <value>Merchant Tier defines the type of merchant, the numeric Merchant Tier value is allocated by EFTPOS. Applicable for EFTPOS processors.</value>
        [DataMember(Name="merchantTier", EmitDefaultValue=false)]
        public string MerchantTier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProcessingConfigCommonProcessors {\n");
            sb.Append("  BatchGroup: ").Append(BatchGroup).Append("\n");
            sb.Append("  BusinessApplicationId: ").Append(BusinessApplicationId).Append("\n");
            sb.Append("  MerchantVerificationValue: ").Append(MerchantVerificationValue).Append("\n");
            sb.Append("  AbaNumber: ").Append(AbaNumber).Append("\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  PaymentTypes: ").Append(PaymentTypes).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  VisaAggregatorId: ").Append(VisaAggregatorId).Append("\n");
            sb.Append("  AmexAggregatorId: ").Append(AmexAggregatorId).Append("\n");
            sb.Append("  MasterCardAggregatorId: ").Append(MasterCardAggregatorId).Append("\n");
            sb.Append("  SicCode: ").Append(SicCode).Append("\n");
            sb.Append("  AllowMultipleBills: ").Append(AllowMultipleBills).Append("\n");
            sb.Append("  AllowMerchantDescriptorOverride: ").Append(AllowMerchantDescriptorOverride).Append("\n");
            sb.Append("  EnhancedData: ").Append(EnhancedData).Append("\n");
            sb.Append("  FireSafetyIndicator: ").Append(FireSafetyIndicator).Append("\n");
            sb.Append("  QuasiCash: ").Append(QuasiCash).Append("\n");
            sb.Append("  AcquirerMerchantId: ").Append(AcquirerMerchantId).Append("\n");
            sb.Append("  AvsFormat: ").Append(AvsFormat).Append("\n");
            sb.Append("  EnableLongTransRefNo: ").Append(EnableLongTransRefNo).Append("\n");
            sb.Append("  EnableLevel2: ").Append(EnableLevel2).Append("\n");
            sb.Append("  EnableMultipleTransactionAdviceAddendum: ").Append(EnableMultipleTransactionAdviceAddendum).Append("\n");
            sb.Append("  AmexTransactionAdviceAddendum1: ").Append(AmexTransactionAdviceAddendum1).Append("\n");
            sb.Append("  EnableMultiLineItems: ").Append(EnableMultiLineItems).Append("\n");
            sb.Append("  EnableTransactionReferenceNumber: ").Append(EnableTransactionReferenceNumber).Append("\n");
            sb.Append("  EnableAutoAuthReversalAfterVoid: ").Append(EnableAutoAuthReversalAfterVoid).Append("\n");
            sb.Append("  EnableExpresspayPanTranslation: ").Append(EnableExpresspayPanTranslation).Append("\n");
            sb.Append("  EnableCreditAuth: ").Append(EnableCreditAuth).Append("\n");
            sb.Append("  IndustryCode: ").Append(IndustryCode).Append("\n");
            sb.Append("  SendAmexLevel2Data: ").Append(SendAmexLevel2Data).Append("\n");
            sb.Append("  SoftDescriptorType: ").Append(SoftDescriptorType).Append("\n");
            sb.Append("  VitalNumber: ").Append(VitalNumber).Append("\n");
            sb.Append("  BankNumber: ").Append(BankNumber).Append("\n");
            sb.Append("  ChainNumber: ").Append(ChainNumber).Append("\n");
            sb.Append("  MerchantBinNumber: ").Append(MerchantBinNumber).Append("\n");
            sb.Append("  MerchantLocationNumber: ").Append(MerchantLocationNumber).Append("\n");
            sb.Append("  StoreID: ").Append(StoreID).Append("\n");
            sb.Append("  TravelAgencyCode: ").Append(TravelAgencyCode).Append("\n");
            sb.Append("  TravelAgencyName: ").Append(TravelAgencyName).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  EnableLeastCostRouting: ").Append(EnableLeastCostRouting).Append("\n");
            sb.Append("  EnableCVVResponseIndicator: ").Append(EnableCVVResponseIndicator).Append("\n");
            sb.Append("  EnableMultiCurrencyProcessing: ").Append(EnableMultiCurrencyProcessing).Append("\n");
            sb.Append("  EnablePosNetworkSwitching: ").Append(EnablePosNetworkSwitching).Append("\n");
            sb.Append("  EnableDynamicCurrencyConversion: ").Append(EnableDynamicCurrencyConversion).Append("\n");
            sb.Append("  MerchantTier: ").Append(MerchantTier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardProcessingConfigCommonProcessors);
        }

        /// <summary>
        /// Returns true if CardProcessingConfigCommonProcessors instances are equal
        /// </summary>
        /// <param name="other">Instance of CardProcessingConfigCommonProcessors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProcessingConfigCommonProcessors other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BatchGroup == other.BatchGroup ||
                    this.BatchGroup != null &&
                    this.BatchGroup.Equals(other.BatchGroup)
                ) && 
                (
                    this.BusinessApplicationId == other.BusinessApplicationId ||
                    this.BusinessApplicationId != null &&
                    this.BusinessApplicationId.Equals(other.BusinessApplicationId)
                ) && 
                (
                    this.MerchantVerificationValue == other.MerchantVerificationValue ||
                    this.MerchantVerificationValue != null &&
                    this.MerchantVerificationValue.Equals(other.MerchantVerificationValue)
                ) && 
                (
                    this.AbaNumber == other.AbaNumber ||
                    this.AbaNumber != null &&
                    this.AbaNumber.Equals(other.AbaNumber)
                ) && 
                (
                    this.Acquirer == other.Acquirer ||
                    this.Acquirer != null &&
                    this.Acquirer.Equals(other.Acquirer)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.TerminalId == other.TerminalId ||
                    this.TerminalId != null &&
                    this.TerminalId.Equals(other.TerminalId)
                ) && 
                (
                    this.PaymentTypes == other.PaymentTypes ||
                    this.PaymentTypes != null &&
                    this.PaymentTypes.SequenceEqual(other.PaymentTypes)
                ) && 
                (
                    this.Currencies == other.Currencies ||
                    this.Currencies != null &&
                    this.Currencies.SequenceEqual(other.Currencies)
                ) && 
                (
                    this.VisaAggregatorId == other.VisaAggregatorId ||
                    this.VisaAggregatorId != null &&
                    this.VisaAggregatorId.Equals(other.VisaAggregatorId)
                ) && 
                (
                    this.AmexAggregatorId == other.AmexAggregatorId ||
                    this.AmexAggregatorId != null &&
                    this.AmexAggregatorId.Equals(other.AmexAggregatorId)
                ) && 
                (
                    this.MasterCardAggregatorId == other.MasterCardAggregatorId ||
                    this.MasterCardAggregatorId != null &&
                    this.MasterCardAggregatorId.Equals(other.MasterCardAggregatorId)
                ) && 
                (
                    this.SicCode == other.SicCode ||
                    this.SicCode != null &&
                    this.SicCode.Equals(other.SicCode)
                ) && 
                (
                    this.AllowMultipleBills == other.AllowMultipleBills ||
                    this.AllowMultipleBills != null &&
                    this.AllowMultipleBills.Equals(other.AllowMultipleBills)
                ) && 
                (
                    this.AllowMerchantDescriptorOverride == other.AllowMerchantDescriptorOverride ||
                    this.AllowMerchantDescriptorOverride != null &&
                    this.AllowMerchantDescriptorOverride.Equals(other.AllowMerchantDescriptorOverride)
                ) && 
                (
                    this.EnhancedData == other.EnhancedData ||
                    this.EnhancedData != null &&
                    this.EnhancedData.Equals(other.EnhancedData)
                ) && 
                (
                    this.FireSafetyIndicator == other.FireSafetyIndicator ||
                    this.FireSafetyIndicator != null &&
                    this.FireSafetyIndicator.Equals(other.FireSafetyIndicator)
                ) && 
                (
                    this.QuasiCash == other.QuasiCash ||
                    this.QuasiCash != null &&
                    this.QuasiCash.Equals(other.QuasiCash)
                ) && 
                (
                    this.AcquirerMerchantId == other.AcquirerMerchantId ||
                    this.AcquirerMerchantId != null &&
                    this.AcquirerMerchantId.Equals(other.AcquirerMerchantId)
                ) && 
                (
                    this.AvsFormat == other.AvsFormat ||
                    this.AvsFormat != null &&
                    this.AvsFormat.Equals(other.AvsFormat)
                ) && 
                (
                    this.EnableLongTransRefNo == other.EnableLongTransRefNo ||
                    this.EnableLongTransRefNo != null &&
                    this.EnableLongTransRefNo.Equals(other.EnableLongTransRefNo)
                ) && 
                (
                    this.EnableLevel2 == other.EnableLevel2 ||
                    this.EnableLevel2 != null &&
                    this.EnableLevel2.Equals(other.EnableLevel2)
                ) && 
                (
                    this.EnableMultipleTransactionAdviceAddendum == other.EnableMultipleTransactionAdviceAddendum ||
                    this.EnableMultipleTransactionAdviceAddendum != null &&
                    this.EnableMultipleTransactionAdviceAddendum.Equals(other.EnableMultipleTransactionAdviceAddendum)
                ) && 
                (
                    this.AmexTransactionAdviceAddendum1 == other.AmexTransactionAdviceAddendum1 ||
                    this.AmexTransactionAdviceAddendum1 != null &&
                    this.AmexTransactionAdviceAddendum1.Equals(other.AmexTransactionAdviceAddendum1)
                ) && 
                (
                    this.EnableMultiLineItems == other.EnableMultiLineItems ||
                    this.EnableMultiLineItems != null &&
                    this.EnableMultiLineItems.Equals(other.EnableMultiLineItems)
                ) && 
                (
                    this.EnableTransactionReferenceNumber == other.EnableTransactionReferenceNumber ||
                    this.EnableTransactionReferenceNumber != null &&
                    this.EnableTransactionReferenceNumber.Equals(other.EnableTransactionReferenceNumber)
                ) && 
                (
                    this.EnableAutoAuthReversalAfterVoid == other.EnableAutoAuthReversalAfterVoid ||
                    this.EnableAutoAuthReversalAfterVoid != null &&
                    this.EnableAutoAuthReversalAfterVoid.Equals(other.EnableAutoAuthReversalAfterVoid)
                ) && 
                (
                    this.EnableExpresspayPanTranslation == other.EnableExpresspayPanTranslation ||
                    this.EnableExpresspayPanTranslation != null &&
                    this.EnableExpresspayPanTranslation.Equals(other.EnableExpresspayPanTranslation)
                ) && 
                (
                    this.EnableCreditAuth == other.EnableCreditAuth ||
                    this.EnableCreditAuth != null &&
                    this.EnableCreditAuth.Equals(other.EnableCreditAuth)
                ) && 
                (
                    this.IndustryCode == other.IndustryCode ||
                    this.IndustryCode != null &&
                    this.IndustryCode.Equals(other.IndustryCode)
                ) && 
                (
                    this.SendAmexLevel2Data == other.SendAmexLevel2Data ||
                    this.SendAmexLevel2Data != null &&
                    this.SendAmexLevel2Data.Equals(other.SendAmexLevel2Data)
                ) && 
                (
                    this.SoftDescriptorType == other.SoftDescriptorType ||
                    this.SoftDescriptorType != null &&
                    this.SoftDescriptorType.Equals(other.SoftDescriptorType)
                ) && 
                (
                    this.VitalNumber == other.VitalNumber ||
                    this.VitalNumber != null &&
                    this.VitalNumber.Equals(other.VitalNumber)
                ) && 
                (
                    this.BankNumber == other.BankNumber ||
                    this.BankNumber != null &&
                    this.BankNumber.Equals(other.BankNumber)
                ) && 
                (
                    this.ChainNumber == other.ChainNumber ||
                    this.ChainNumber != null &&
                    this.ChainNumber.Equals(other.ChainNumber)
                ) && 
                (
                    this.MerchantBinNumber == other.MerchantBinNumber ||
                    this.MerchantBinNumber != null &&
                    this.MerchantBinNumber.Equals(other.MerchantBinNumber)
                ) && 
                (
                    this.MerchantLocationNumber == other.MerchantLocationNumber ||
                    this.MerchantLocationNumber != null &&
                    this.MerchantLocationNumber.Equals(other.MerchantLocationNumber)
                ) && 
                (
                    this.StoreID == other.StoreID ||
                    this.StoreID != null &&
                    this.StoreID.Equals(other.StoreID)
                ) && 
                (
                    this.TravelAgencyCode == other.TravelAgencyCode ||
                    this.TravelAgencyCode != null &&
                    this.TravelAgencyCode.Equals(other.TravelAgencyCode)
                ) && 
                (
                    this.TravelAgencyName == other.TravelAgencyName ||
                    this.TravelAgencyName != null &&
                    this.TravelAgencyName.Equals(other.TravelAgencyName)
                ) && 
                (
                    this.SettlementCurrency == other.SettlementCurrency ||
                    this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(other.SettlementCurrency)
                ) && 
                (
                    this.EnableLeastCostRouting == other.EnableLeastCostRouting ||
                    this.EnableLeastCostRouting != null &&
                    this.EnableLeastCostRouting.Equals(other.EnableLeastCostRouting)
                ) && 
                (
                    this.EnableCVVResponseIndicator == other.EnableCVVResponseIndicator ||
                    this.EnableCVVResponseIndicator != null &&
                    this.EnableCVVResponseIndicator.Equals(other.EnableCVVResponseIndicator)
                ) && 
                (
                    this.EnableMultiCurrencyProcessing == other.EnableMultiCurrencyProcessing ||
                    this.EnableMultiCurrencyProcessing != null &&
                    this.EnableMultiCurrencyProcessing.Equals(other.EnableMultiCurrencyProcessing)
                ) && 
                (
                    this.EnablePosNetworkSwitching == other.EnablePosNetworkSwitching ||
                    this.EnablePosNetworkSwitching != null &&
                    this.EnablePosNetworkSwitching.Equals(other.EnablePosNetworkSwitching)
                ) && 
                (
                    this.EnableDynamicCurrencyConversion == other.EnableDynamicCurrencyConversion ||
                    this.EnableDynamicCurrencyConversion != null &&
                    this.EnableDynamicCurrencyConversion.Equals(other.EnableDynamicCurrencyConversion)
                ) && 
                (
                    this.MerchantTier == other.MerchantTier ||
                    this.MerchantTier != null &&
                    this.MerchantTier.Equals(other.MerchantTier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BatchGroup != null)
                    hash = hash * 59 + this.BatchGroup.GetHashCode();
                if (this.BusinessApplicationId != null)
                    hash = hash * 59 + this.BusinessApplicationId.GetHashCode();
                if (this.MerchantVerificationValue != null)
                    hash = hash * 59 + this.MerchantVerificationValue.GetHashCode();
                if (this.AbaNumber != null)
                    hash = hash * 59 + this.AbaNumber.GetHashCode();
                if (this.Acquirer != null)
                    hash = hash * 59 + this.Acquirer.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.TerminalId != null)
                    hash = hash * 59 + this.TerminalId.GetHashCode();
                if (this.PaymentTypes != null)
                    hash = hash * 59 + this.PaymentTypes.GetHashCode();
                if (this.Currencies != null)
                    hash = hash * 59 + this.Currencies.GetHashCode();
                if (this.VisaAggregatorId != null)
                    hash = hash * 59 + this.VisaAggregatorId.GetHashCode();
                if (this.AmexAggregatorId != null)
                    hash = hash * 59 + this.AmexAggregatorId.GetHashCode();
                if (this.MasterCardAggregatorId != null)
                    hash = hash * 59 + this.MasterCardAggregatorId.GetHashCode();
                if (this.SicCode != null)
                    hash = hash * 59 + this.SicCode.GetHashCode();
                if (this.AllowMultipleBills != null)
                    hash = hash * 59 + this.AllowMultipleBills.GetHashCode();
                if (this.AllowMerchantDescriptorOverride != null)
                    hash = hash * 59 + this.AllowMerchantDescriptorOverride.GetHashCode();
                if (this.EnhancedData != null)
                    hash = hash * 59 + this.EnhancedData.GetHashCode();
                if (this.FireSafetyIndicator != null)
                    hash = hash * 59 + this.FireSafetyIndicator.GetHashCode();
                if (this.QuasiCash != null)
                    hash = hash * 59 + this.QuasiCash.GetHashCode();
                if (this.AcquirerMerchantId != null)
                    hash = hash * 59 + this.AcquirerMerchantId.GetHashCode();
                if (this.AvsFormat != null)
                    hash = hash * 59 + this.AvsFormat.GetHashCode();
                if (this.EnableLongTransRefNo != null)
                    hash = hash * 59 + this.EnableLongTransRefNo.GetHashCode();
                if (this.EnableLevel2 != null)
                    hash = hash * 59 + this.EnableLevel2.GetHashCode();
                if (this.EnableMultipleTransactionAdviceAddendum != null)
                    hash = hash * 59 + this.EnableMultipleTransactionAdviceAddendum.GetHashCode();
                if (this.AmexTransactionAdviceAddendum1 != null)
                    hash = hash * 59 + this.AmexTransactionAdviceAddendum1.GetHashCode();
                if (this.EnableMultiLineItems != null)
                    hash = hash * 59 + this.EnableMultiLineItems.GetHashCode();
                if (this.EnableTransactionReferenceNumber != null)
                    hash = hash * 59 + this.EnableTransactionReferenceNumber.GetHashCode();
                if (this.EnableAutoAuthReversalAfterVoid != null)
                    hash = hash * 59 + this.EnableAutoAuthReversalAfterVoid.GetHashCode();
                if (this.EnableExpresspayPanTranslation != null)
                    hash = hash * 59 + this.EnableExpresspayPanTranslation.GetHashCode();
                if (this.EnableCreditAuth != null)
                    hash = hash * 59 + this.EnableCreditAuth.GetHashCode();
                if (this.IndustryCode != null)
                    hash = hash * 59 + this.IndustryCode.GetHashCode();
                if (this.SendAmexLevel2Data != null)
                    hash = hash * 59 + this.SendAmexLevel2Data.GetHashCode();
                if (this.SoftDescriptorType != null)
                    hash = hash * 59 + this.SoftDescriptorType.GetHashCode();
                if (this.VitalNumber != null)
                    hash = hash * 59 + this.VitalNumber.GetHashCode();
                if (this.BankNumber != null)
                    hash = hash * 59 + this.BankNumber.GetHashCode();
                if (this.ChainNumber != null)
                    hash = hash * 59 + this.ChainNumber.GetHashCode();
                if (this.MerchantBinNumber != null)
                    hash = hash * 59 + this.MerchantBinNumber.GetHashCode();
                if (this.MerchantLocationNumber != null)
                    hash = hash * 59 + this.MerchantLocationNumber.GetHashCode();
                if (this.StoreID != null)
                    hash = hash * 59 + this.StoreID.GetHashCode();
                if (this.TravelAgencyCode != null)
                    hash = hash * 59 + this.TravelAgencyCode.GetHashCode();
                if (this.TravelAgencyName != null)
                    hash = hash * 59 + this.TravelAgencyName.GetHashCode();
                if (this.SettlementCurrency != null)
                    hash = hash * 59 + this.SettlementCurrency.GetHashCode();
                if (this.EnableLeastCostRouting != null)
                    hash = hash * 59 + this.EnableLeastCostRouting.GetHashCode();
                if (this.EnableCVVResponseIndicator != null)
                    hash = hash * 59 + this.EnableCVVResponseIndicator.GetHashCode();
                if (this.EnableMultiCurrencyProcessing != null)
                    hash = hash * 59 + this.EnableMultiCurrencyProcessing.GetHashCode();
                if (this.EnablePosNetworkSwitching != null)
                    hash = hash * 59 + this.EnablePosNetworkSwitching.GetHashCode();
                if (this.EnableDynamicCurrencyConversion != null)
                    hash = hash * 59 + this.EnableDynamicCurrencyConversion.GetHashCode();
                if (this.MerchantTier != null)
                    hash = hash * 59 + this.MerchantTier.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
