/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;
using NLog;
using AuthenticationSdk.util;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayerAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check Payer Auth Enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>RiskV1AuthenticationsPost201Response</returns>
        RiskV1AuthenticationsPost201Response CheckPayerAuthEnrollment (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);

        /// <summary>
        /// Check Payer Auth Enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationsPost201Response</returns>
        ApiResponse<RiskV1AuthenticationsPost201Response> CheckPayerAuthEnrollmentWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);
        /// <summary>
        /// Setup Payer Auth
        /// </summary>
        /// <remarks>
        /// A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>RiskV1AuthenticationSetupsPost201Response</returns>
        RiskV1AuthenticationSetupsPost201Response PayerAuthSetup (PayerAuthSetupRequest payerAuthSetupRequest);

        /// <summary>
        /// Setup Payer Auth
        /// </summary>
        /// <remarks>
        /// A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationSetupsPost201Response</returns>
        ApiResponse<RiskV1AuthenticationSetupsPost201Response> PayerAuthSetupWithHttpInfo (PayerAuthSetupRequest payerAuthSetupRequest);
        /// <summary>
        /// Validate Authentication Results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>RiskV1AuthenticationResultsPost201Response</returns>
        RiskV1AuthenticationResultsPost201Response ValidateAuthenticationResults (ValidateRequest validateRequest);

        /// <summary>
        /// Validate Authentication Results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationResultsPost201Response</returns>
        ApiResponse<RiskV1AuthenticationResultsPost201Response> ValidateAuthenticationResultsWithHttpInfo (ValidateRequest validateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check Payer Auth Enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of RiskV1AuthenticationsPost201Response</returns>
        System.Threading.Tasks.Task<RiskV1AuthenticationsPost201Response> CheckPayerAuthEnrollmentAsync (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);

        /// <summary>
        /// Check Payer Auth Enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationsPost201Response>> CheckPayerAuthEnrollmentAsyncWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);
        /// <summary>
        /// Setup Payer Auth
        /// </summary>
        /// <remarks>
        /// A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>Task of RiskV1AuthenticationSetupsPost201Response</returns>
        System.Threading.Tasks.Task<RiskV1AuthenticationSetupsPost201Response> PayerAuthSetupAsync (PayerAuthSetupRequest payerAuthSetupRequest);

        /// <summary>
        /// Setup Payer Auth
        /// </summary>
        /// <remarks>
        /// A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationSetupsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationSetupsPost201Response>> PayerAuthSetupAsyncWithHttpInfo (PayerAuthSetupRequest payerAuthSetupRequest);
        /// <summary>
        /// Validate Authentication Results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of RiskV1AuthenticationResultsPost201Response</returns>
        System.Threading.Tasks.Task<RiskV1AuthenticationResultsPost201Response> ValidateAuthenticationResultsAsync (ValidateRequest validateRequest);

        /// <summary>
        /// Validate Authentication Results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationResultsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationResultsPost201Response>> ValidateAuthenticationResultsAsyncWithHttpInfo (ValidateRequest validateRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayerAuthenticationApi : IPayerAuthenticationApi
    {
        private static Logger logger;
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        private int? _statusCode;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayerAuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayerAuthenticationApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayerAuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayerAuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration;

            if (logger == null)
            {
                logger = LogManager.GetCurrentClassLogger();
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    logger.Error("InvalidOperationException : Multicast delegate for ExceptionFactory is unsupported.");
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves the status code being set for the most recently executed API request.
        /// </summary>
        /// <returns>Status Code of previous request</returns>
        public int GetStatusCode()
        {
            return this._statusCode == null ? 0 : (int) this._statusCode;
        }

        /// <summary>
        /// Sets the value of status code for the most recently executed API request, in order to be retrieved later.
        /// </summary>
        /// <param name="statusCode">Status Code to be set</param>
        /// <returns></returns>
        public void SetStatusCode(int? statusCode)
        {
            this._statusCode = statusCode;
        }

        /// <summary>
        /// Check Payer Auth Enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>RiskV1AuthenticationsPost201Response</returns>
        public RiskV1AuthenticationsPost201Response CheckPayerAuthEnrollment (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
            logger.Debug("CALLING API \"CheckPayerAuthEnrollment\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<RiskV1AuthenticationsPost201Response> localVarResponse = CheckPayerAuthEnrollmentWithHttpInfo(checkPayerAuthEnrollmentRequest);
            logger.Debug("CALLING API \"CheckPayerAuthEnrollment\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Payer Auth Enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationsPost201Response</returns>
        public ApiResponse< RiskV1AuthenticationsPost201Response > CheckPayerAuthEnrollmentWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'checkPayerAuthEnrollmentRequest' is set
            if (checkPayerAuthEnrollmentRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'checkPayerAuthEnrollmentRequest' when calling PayerAuthenticationApi->CheckPayerAuthEnrollment");
                throw new ApiException(400, "Missing required parameter 'checkPayerAuthEnrollmentRequest' when calling PayerAuthenticationApi->CheckPayerAuthEnrollment");
            }

            var localVarPath = $"/risk/v1/authentications";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (checkPayerAuthEnrollmentRequest != null && checkPayerAuthEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkPayerAuthEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPayerAuthEnrollmentRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPayerAuthEnrollment", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<RiskV1AuthenticationsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationsPost201Response))); // Return statement
        }

        /// <summary>
        /// Check Payer Auth Enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of RiskV1AuthenticationsPost201Response</returns>
        public async System.Threading.Tasks.Task<RiskV1AuthenticationsPost201Response> CheckPayerAuthEnrollmentAsync (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
            logger.Debug("CALLING API \"CheckPayerAuthEnrollmentAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<RiskV1AuthenticationsPost201Response> localVarResponse = await CheckPayerAuthEnrollmentAsyncWithHttpInfo(checkPayerAuthEnrollmentRequest);
            logger.Debug("CALLING API \"CheckPayerAuthEnrollmentAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Check Payer Auth Enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationsPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationsPost201Response>> CheckPayerAuthEnrollmentAsyncWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'checkPayerAuthEnrollmentRequest' is set
            if (checkPayerAuthEnrollmentRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'checkPayerAuthEnrollmentRequest' when calling PayerAuthenticationApi->CheckPayerAuthEnrollment");
                throw new ApiException(400, "Missing required parameter 'checkPayerAuthEnrollmentRequest' when calling PayerAuthenticationApi->CheckPayerAuthEnrollment");
            }

            var localVarPath = $"/risk/v1/authentications";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (checkPayerAuthEnrollmentRequest != null && checkPayerAuthEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkPayerAuthEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPayerAuthEnrollmentRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPayerAuthEnrollment", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<RiskV1AuthenticationsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationsPost201Response))); // Return statement
        }
        /// <summary>
        /// Setup Payer Auth A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>RiskV1AuthenticationSetupsPost201Response</returns>
        public RiskV1AuthenticationSetupsPost201Response PayerAuthSetup (PayerAuthSetupRequest payerAuthSetupRequest)
        {
            logger.Debug("CALLING API \"PayerAuthSetup\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<RiskV1AuthenticationSetupsPost201Response> localVarResponse = PayerAuthSetupWithHttpInfo(payerAuthSetupRequest);
            logger.Debug("CALLING API \"PayerAuthSetup\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Setup Payer Auth A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationSetupsPost201Response</returns>
        public ApiResponse< RiskV1AuthenticationSetupsPost201Response > PayerAuthSetupWithHttpInfo (PayerAuthSetupRequest payerAuthSetupRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'payerAuthSetupRequest' is set
            if (payerAuthSetupRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'payerAuthSetupRequest' when calling PayerAuthenticationApi->PayerAuthSetup");
                throw new ApiException(400, "Missing required parameter 'payerAuthSetupRequest' when calling PayerAuthenticationApi->PayerAuthSetup");
            }

            var localVarPath = $"/risk/v1/authentication-setups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (payerAuthSetupRequest != null && payerAuthSetupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payerAuthSetupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payerAuthSetupRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayerAuthSetup", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<RiskV1AuthenticationSetupsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationSetupsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationSetupsPost201Response))); // Return statement
        }

        /// <summary>
        /// Setup Payer Auth A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>Task of RiskV1AuthenticationSetupsPost201Response</returns>
        public async System.Threading.Tasks.Task<RiskV1AuthenticationSetupsPost201Response> PayerAuthSetupAsync (PayerAuthSetupRequest payerAuthSetupRequest)
        {
            logger.Debug("CALLING API \"PayerAuthSetupAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<RiskV1AuthenticationSetupsPost201Response> localVarResponse = await PayerAuthSetupAsyncWithHttpInfo(payerAuthSetupRequest);
            logger.Debug("CALLING API \"PayerAuthSetupAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Setup Payer Auth A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payerAuthSetupRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationSetupsPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationSetupsPost201Response>> PayerAuthSetupAsyncWithHttpInfo (PayerAuthSetupRequest payerAuthSetupRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'payerAuthSetupRequest' is set
            if (payerAuthSetupRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'payerAuthSetupRequest' when calling PayerAuthenticationApi->PayerAuthSetup");
                throw new ApiException(400, "Missing required parameter 'payerAuthSetupRequest' when calling PayerAuthenticationApi->PayerAuthSetup");
            }

            var localVarPath = $"/risk/v1/authentication-setups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (payerAuthSetupRequest != null && payerAuthSetupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payerAuthSetupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payerAuthSetupRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PayerAuthSetup", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<RiskV1AuthenticationSetupsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationSetupsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationSetupsPost201Response))); // Return statement
        }
        /// <summary>
        /// Validate Authentication Results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>RiskV1AuthenticationResultsPost201Response</returns>
        public RiskV1AuthenticationResultsPost201Response ValidateAuthenticationResults (ValidateRequest validateRequest)
        {
            logger.Debug("CALLING API \"ValidateAuthenticationResults\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<RiskV1AuthenticationResultsPost201Response> localVarResponse = ValidateAuthenticationResultsWithHttpInfo(validateRequest);
            logger.Debug("CALLING API \"ValidateAuthenticationResults\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Authentication Results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationResultsPost201Response</returns>
        public ApiResponse< RiskV1AuthenticationResultsPost201Response > ValidateAuthenticationResultsWithHttpInfo (ValidateRequest validateRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'validateRequest' is set
            if (validateRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'validateRequest' when calling PayerAuthenticationApi->ValidateAuthenticationResults");
                throw new ApiException(400, "Missing required parameter 'validateRequest' when calling PayerAuthenticationApi->ValidateAuthenticationResults");
            }

            var localVarPath = $"/risk/v1/authentication-results";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (validateRequest != null && validateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAuthenticationResults", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<RiskV1AuthenticationResultsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationResultsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationResultsPost201Response))); // Return statement
        }

        /// <summary>
        /// Validate Authentication Results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of RiskV1AuthenticationResultsPost201Response</returns>
        public async System.Threading.Tasks.Task<RiskV1AuthenticationResultsPost201Response> ValidateAuthenticationResultsAsync (ValidateRequest validateRequest)
        {
            logger.Debug("CALLING API \"ValidateAuthenticationResultsAsync\" STARTED");
            this.SetStatusCode(null);
            ApiResponse<RiskV1AuthenticationResultsPost201Response> localVarResponse = await ValidateAuthenticationResultsAsyncWithHttpInfo(validateRequest);
            logger.Debug("CALLING API \"ValidateAuthenticationResultsAsync\" ENDED");
            this.SetStatusCode(localVarResponse.StatusCode);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Authentication Results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationResultsPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationResultsPost201Response>> ValidateAuthenticationResultsAsyncWithHttpInfo (ValidateRequest validateRequest)
        {
            LogUtility logUtility = new LogUtility();

            // verify the required parameter 'validateRequest' is set
            if (validateRequest == null)
            {
                logger.Error("ApiException : Missing required parameter 'validateRequest' when calling PayerAuthenticationApi->ValidateAuthenticationResults");
                throw new ApiException(400, "Missing required parameter 'validateRequest' when calling PayerAuthenticationApi->ValidateAuthenticationResults");
            }

            var localVarPath = $"/risk/v1/authentication-results";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json;charset=utf-8"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/hal+json;charset=utf-8"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (validateRequest != null && validateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateRequest; // byte array
            }

            if (logUtility.IsMaskingEnabled(logger))
            {
                logger.Debug($"HTTP Request Body :\n{logUtility.MaskSensitiveData(localVarPostBody.ToString())}");
            }
            else
            {
                logger.Debug($"HTTP Request Body :\n{localVarPostBody}");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAuthenticationResults", localVarResponse);
                if (exception != null)
                {
                    logger.Error($"Exception : {exception.Message}");
                    throw exception;
                }
            }

            return new ApiResponse<RiskV1AuthenticationResultsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationResultsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationResultsPost201Response))); // Return statement
        }
    }
}
